{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.2", "generated_at": "2025-07-01T18:33:25.740370Z", "invocation_id": "5074b620-014e-4cbc-b952-e898a3b1ed49", "invocation_started_at": "2025-07-01T18:29:17.734770Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:50.369436Z", "completed_at": "2025-07-01T18:30:50.392643Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:50.424480Z", "completed_at": "2025-07-01T18:30:50.424480Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1010732650756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_recebimento_profissional_roi_historico", "compiled": true, "compiled_code": "\n\nwith corporativas as (   \n    select \n\t\ta.id_atendimento,\n   \t\tcast(date_format(a.data_atendimento at time zone 'America/Sao_Paulo', '%Y-%m-%d %H:%i:%s') as timestamp) as data_atendimento,\n   \t\ta.status_atendimento,\n   \t\tdate(a.data_transferencia at time zone 'America/Sao_Paulo') as data_transferencia,\n   \t\tdate_format(a.data_transferencia at time zone 'America/Sao_Paulo', '%Y-%m') as mes_fatura,\n   \t\tdate_format(a.data_transferencia at time zone 'America/Sao_Paulo', '%Y') as ano_fatura,\n   \t\ta.nome_paciente,\n   \t\ta.nome_convenio,\n   \t\ta.valor_consulta_roi,\n        p.id_profissional,\n   \t\tp.id_usuario_profissional as id_usuario,\n   \t\ta.nome_profissional,\n   \t\t'Corporativa' as tipo_atendimento\n    from delta.silver.pvv_fact_atendimento_financeiro\ta\n  \tinner join delta.silver.cnx_dim_profissional as p on p.id_profissional_pv = a.id_profissional\n  \twhere a.valor_consulta_roi is not null\n    and a.status_atendimento = 'Realizado'\n\t--and data_brt_atendimento <= date'2025-03-21' retirado pois existiu pagamento de roi em datas posteriores \n),\nparticulares as (\n\tselect \n\t\ta.id_atendimento,\n   \t\tcast(date_format(a.data_atendimento at time zone 'America/Sao_Paulo', '%Y-%m-%d %H:%i:%s') as timestamp) as data_atendimento,\n   \t\ta.status_atendimento,\n\t\tcase\n\t\t\twhen data_brt_atendimento >= date'2025-03-22'\n\t\t\t\tthen date'2025-03-21'\n   \t\t\telse date(a.data_atendimento at time zone 'America/Sao_Paulo') \n\t\tend as data_transferencia,\n\t\tcase\n\t\t\twhen data_brt_atendimento >= date'2025-03-22'\n\t\t\t\tthen '2025-03'\n   \t\t\telse date_format(a.data_atendimento at time zone 'America/Sao_Paulo', '%Y-%m') \n\t\tend as mes_fatura,\n\t\tcase\n\t\t\twhen data_brt_atendimento >= date'2025-03-22'\n\t\t\t\tthen '2025'\n   \t\t\telse date_format(a.data_atendimento at time zone 'America/Sao_Paulo', '%Y') \n\t\tend as ano_fatura,\n   \t\ta.nome_paciente,\n   \t\t'Particular' as nome_convenio,\n   \t\ta.valor_pagamento as valor_consulta_roi,\n        p.id_profissional,\n   \t\tp.id_usuario_profissional as id_usuario,\n   \t\ta.nome_profissional,\n   \t\t'Particular' as tipo_atendimento\n    from delta.silver.pvv_fact_atendimento_financeiro\ta\n  \tinner join delta.silver.cnx_dim_profissional as p on p.id_profissional_pv = a.id_profissional\n  \twhere a.id_convenio in (999998,999999,480)\n    --and a.status_atendimento = 'Realizado'\n    and a.flag_pagamento_pagarme = true\n\tand a.valor_consulta_roi is null\n)\nselect \n\t* \nfrom corporativas\n  union all\nselect \n\t* \nfrom particulares", "relation_name": "\"delta\".\"gold\".\"az_recebimento_profissional_roi_historico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:50.521837Z", "completed_at": "2025-07-01T18:30:50.542547Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:50.565294Z", "completed_at": "2025-07-01T18:30:50.565294Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09157061576843262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.dim_calendar", "compiled": true, "compiled_code": "\n\nWITH feriados as (\n    select \n        date(date_parse(data, '%d/%m/%Y')) as datefull,\n        localidade,\n        nome_feriado \n    from bronze.calendar_holidays\n)\n\nSELECT\n    n,\n    calendar_date AS date_full,\n    last_day_of_month(calendar_date) as last_day_month,\n    date_format(calendar_date, '%Y-%m-01') as init_day_month,\n    YEAR(calendar_date) AS year,\n    QUARTER(calendar_date) AS quarter,\n    MONTH(calendar_date) AS month,\n    week_of_year(calendar_date) AS week,\n    DAY(calendar_date) AS day,\n    day_of_week(calendar_date) AS day_of_week,\n    day_of_year(calendar_date) AS day_of_year,\n    date_format(calendar_date,'%W') as day_name,\n    date_format(calendar_date,'%M') as month_name,\n    CASE WHEN day_of_week(calendar_date) IN (1, 7) THEN 0 ELSE 1 END AS is_weekday,\n    CASE WHEN year(calendar_date) % 4 = 0 THEN 1 ELSE 0 END AS is_leapyear,\n    feriados.localidade as region,\n    feriados.nome_feriado as holiday,\n    case when feriados.nome_feriado is not null then true else false end as is_holiday\nFROM (\n        select date(calendar_date) as calendar_date, n\n\t\tfrom (\n\t\tSELECT sequence(timestamp'2014-01-01', timestamp'2034-12-31', INTERVAL '24' HOUR) as  calendar_array\n\t\t)\n\t\tCROSS JOIN UNNEST(calendar_array) WITH ORDINALITY AS b (calendar_date, n)\n) AS dates\nLEFT JOIN feriados on calendar_date = feriados.datefull", "relation_name": "\"delta\".\"silver\".\"dim_calendar\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:50.650627Z", "completed_at": "2025-07-01T18:30:50.666281Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:50.701139Z", "completed_at": "2025-07-01T18:30:50.701139Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09094119071960449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_anamnesis", "compiled": true, "compiled_code": "\nSELECT \n    idanamnesis,\n    idprofissional,\n    idpaciente,\n    id_cid,\n    habits_and_routine,\n    social_life,\n    current_state_of_health,\n    family_context,\n    similar_cases_in_the_family,\n    chief_complaint_description,\n    start_of_chief_complaint,\n    chief_complaint_mode,\n    changes_occurred,\n    main_symptoms,\n    detailing_cognitive_complaints,\n    detailing_emotional_affective_complaints,\n    detailing_psychomotricity,\n    work_related_illness,\n    start_date_treatment,\n    cast(updated_at as timestamp(3) with time zone) as updated_at\nFROM mysql_cnx.\"connectdoctor-prod\".anamnesis\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_anamnesis\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:50.783050Z", "completed_at": "2025-07-01T18:30:50.822272Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:50.855029Z", "completed_at": "2025-07-01T18:30:50.855029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10537481307983398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_anamnesis_cognitive_complaints", "compiled": true, "compiled_code": "\nSELECT \n    idanamnesiscognitivecomplaints,\n    idanamnesis,\n    value,\n    cast(updated_at as timestamp(3) with time zone) as updated_at\nFROM mysql_cnx.\"connectdoctor-prod\".anamnesis_cognitive_complaints\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_anamnesis_cognitive_complaints\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:50.949629Z", "completed_at": "2025-07-01T18:30:50.983025Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:51.003731Z", "completed_at": "2025-07-01T18:30:51.003731Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09296607971191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_anamnesis_emotional_affective_complaints", "compiled": true, "compiled_code": "\nSELECT \n    idanamnesisemotionalaffectivecomplaints,\n    idanamnesis,\n    value,\n    cast(updated_at as timestamp(3) with time zone) as updated_at\nFROM mysql_cnx.\"connectdoctor-prod\".anamnesis_emotional_affective_complaints\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_anamnesis_emotional_affective_complaints\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:51.101255Z", "completed_at": "2025-07-01T18:30:51.135217Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:51.156712Z", "completed_at": "2025-07-01T18:30:51.156712Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1070256233215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_anamnesis_psychomotricity", "compiled": true, "compiled_code": "\nSELECT \n    idanamnesispsychomotricity,\n    idanamnesis,\n    value,\n    cast(updated_at as timestamp(3) with time zone) as updated_at\nFROM mysql_cnx.\"connectdoctor-prod\".anamnesis_psychomotricity\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_anamnesis_psychomotricity\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:51.240528Z", "completed_at": "2025-07-01T18:30:51.263909Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:51.284293Z", "completed_at": "2025-07-01T18:30:51.284293Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08884811401367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_anamnesis_reason_for_illness_at_work", "compiled": true, "compiled_code": "\nSELECT \n    idanamnesisreasonforillnessatwork,\n    idanamnesis,\n    idreasonforillnessatwork,\n    cast(updated_at as timestamp(3) with time zone) as updated_at\nFROM mysql_cnx.\"connectdoctor-prod\".anamnesis_reason_for_illness_at_work\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_anamnesis_reason_for_illness_at_work\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:51.366216Z", "completed_at": "2025-07-01T18:30:51.386006Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:51.416637Z", "completed_at": "2025-07-01T18:30:51.416637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09080028533935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento", "compiled": true, "compiled_code": "\n\nSELECT\n    idatendimento,\n    idclinica,\n    idpaciente,\n    cast(a.data_inicio_atendimento as timestamp(3) with time zone) as data_inicio_atendimento,\n    cast(a.data_atendimento as timestamp(3) with time zone) as data_atendimento,\n    cast(a.data_cancelamento as timestamp(3) with time zone) as data_cancelamento,\n    cast(a.data_conclusao as timestamp(3) with time zone) as data_conclusao,\n    cast(a.data_solicitacao_parecer as timestamp(3) with time zone) as data_solicitacao_parecer,\n    idconvenio,\n    status,\n    desfecho,\n    categoria_cancelamento,\n    tipo_chamada_desejado,\n    cast(flag_atendimento_medico_paciente as varchar) as flag_atendimento_medico_paciente,\n    formato_consulta,\n    sla_fila,\n    idfila,\n    cast(a.data_entrada_fila as timestamp(3) with time zone) as data_entrada_fila,\n    orientacao_paciente,\n    idusuario_cancelamento,\n    motivo_atendimento_interrompido,\n    motivo_cancelamento,\n    objetivo_atendimento,\n    idepidemia,\n    epidemia_relato_medico,\n    cast(flag_possui_afastamento as varchar) as flag_possui_afastamento,\n    cast(a.data_inicio_afastamento as timestamp(3) with time zone) as data_inicio_afastamento,\n    cast(a.data_fim_afastamento as timestamp(3) with time zone) as data_fim_afastamento,\n    idconvenio_plano,\n    carteira_convenio,\n    origem_atendimento,\n    modo_atendimento,\n    usuario_responsavel_criacao,\n    cast(flag_consulta_confirmada as varchar) as flag_consulta_confirmada,\n    cast(a.data_hora_confirmacao as timestamp(3) with time zone) as data_hora_confirmacao,\n    idtriagem,\n    cast(flag_registro_invalidado as varchar) as flag_registro_invalidado,\n    cast(a.data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(a.data_hora_criacao as timestamp(3) with time zone) as data_hora_criacao,\n    historia_doenca_atual,\n    historia_familia,\n    medicamentos_em_uso,\n    relato_paciente,\n    parecer_clinico,\n    parecer_especialista,\n    medicacao_prescrita,\n    cast(flag_negar_alergia as varchar) as flag_negar_alergia,\n    cast(flag_negar_epidemia as varchar) as flag_negar_epidemia,\n    idusuario_conclusao,\n    date(a.data_sintoma) as data_sintoma,\n    status_faturamento\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento as a\nwhere (data_hora_ultima_atualizacao is not null and date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day)\nor (data_hora_ultima_atualizacao is null and date(data_hora_criacao) >= date(now()) - interval '4' day)", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:51.503862Z", "completed_at": "2025-07-01T18:30:51.532611Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:51.560073Z", "completed_at": "2025-07-01T18:30:51.560073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10622072219848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_anexo", "compiled": true, "compiled_code": "\nSELECT\n    idatendimento_anexo,\n    idatendimento, \n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_inclusao as timestamp(3) with time zone) as data_hora_inclusao\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_anexo \nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_anexo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:51.673888Z", "completed_at": "2025-07-01T18:30:51.705086Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:51.732941Z", "completed_at": "2025-07-01T18:30:51.732941Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12203574180603027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_avaliacao", "compiled": true, "compiled_code": "\n\nSELECT\n    idatendimento,\n    idatendimento_avaliacao,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    cast(data_hora_avaliacao as timestamp(3) with time zone) as data_hora_avaliacao,\n    nota,\n    escala_nps,\n    comentario,\n    tipo_avaliacao\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_avaliacao\nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_avaliacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:51.823640Z", "completed_at": "2025-07-01T18:30:51.854589Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:51.887281Z", "completed_at": "2025-07-01T18:30:51.887281Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11056923866271973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_avaliacao_item", "compiled": true, "compiled_code": "\n\nSELECT \n    idatendimento_avaliacao_item,\n    idatendimento_avaliacao,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    item_avaliado\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_avaliacao_item\nwhere date(data_hora_insert) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_avaliacao_item\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:51.991624Z", "completed_at": "2025-07-01T18:30:52.020382Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:52.047446Z", "completed_at": "2025-07-01T18:30:52.047446Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10042524337768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_comorbidade", "compiled": true, "compiled_code": "\n\nSELECT \n    idatendimento_comorbidade,\n    idatendimento,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    cast(atividade_fisica as varchar) as atividade_fisica,\n    cast(etilismo as varchar) as etilismo,\n    cast(uso_drogas as varchar) as uso_drogas,\n    cast(dislipdemia as varchar) as dislipdemia,\n    cast(doenca_pulmonar as varchar) as doenca_pulmonar,\n    cast(doenca_coronariana as varchar) as doenca_coronariana,\n    cast(doenca_arterial_perif as varchar) as doenca_arterial_perif,\n    cast(doenca_cerebrovascular as varchar) as doenca_cerebrovascular,\n    cast(hipertencao_arterial_sis as varchar) as hipertencao_arterial_sis,\n    cast(insuficiencia_cardi_congest as varchar) as insuficiencia_cardi_congest,\n    cast(alergia as varchar) as alergia,\n    cast(alergia_descricao as varchar) as alergia_descricao,\n    cast(hist_familiar_morte_subita as varchar) as hist_familiar_morte_subita,\n    cast(diabete_melitus as varchar) as diabete_melitus,\n    cast(doenca_psiquiatrica as varchar) as doenca_psiquiatrica,\n    cast(medicacoes_continuas as varchar) as medicacoes_continuas,\n    cast(sv_pa_sistolica as varchar) as sv_pa_sistolica,\n    cast(sv_pa_diastolica as varchar) as sv_pa_diastolica,\n    cast(sv_peso as varchar) as sv_peso,\n    cast(sv_frequencia_cardiaca as varchar) as sv_frequencia_cardiaca,\n    cast(sv_altura as varchar) as sv_altura,\n    cast(HDLc as varchar) as HDLc,\n    cast(LDLc as varchar) as LDLc,\n    cast(triglicerideo as varchar) as triglicerideo,\n    cast(colesterol_total as varchar) as colesterol_total,\n    cast(tabagismo as varchar) as tabagismo,\n    cast(sv_pa_sistolica_tratada as varchar) as sv_pa_sistolica_tratada,\n    cast(toma_estatina as varchar) as toma_estatina,\n    cast(sv_peso_usual as varchar) as sv_peso_usual,\n    cast(sv_circunferencia_abdominal as varchar) as sv_circunferencia_abdominal,\n    cast(sobrepeso as varchar) as sobrepeso,\n    cast(anemico as varchar) as anemico,\n    cast(hiperuricemicos as varchar) as hiperuricemicos,\n    cast(gestante_amamentacao as varchar) as gestante_amamentacao,\n    cast(hipercolesterolemia as varchar) as hipercolesterolemia,\n    cast(transtornos_alimentares as varchar) as transtornos_alimentares,\n    cast(desordem_digestiva as varchar) as desordem_digestiva,\n    cast(desordem_digestiva_descricao as varchar) as desordem_digestiva_descricao,\n    cast(sv_hemoglobina_glicada as varchar) as sv_hemoglobina_glicada,\n    cast(temperatura_corporal as varchar) as temperatura_corporal,\n    cast(saturacao_oxigenio as varchar) as saturacao_oxigenio,\n    cast(frequencia_respiratoria as varchar) as frequencia_respiratoria,\n    cast(glicemia_capilar as varchar) as glicemia_capilar,\n    cast(dor as varchar) as dor,\n    cast(observacao_texto_livre as varchar) as observacao_texto_livre,\n    cast(circunferencia_cefalica as varchar) as circunferencia_cefalica,\n    cast(superficie_corporea as varchar) as superficie_corporea,\n    cast(sv_pa_sistolica_und as varchar) as sv_pa_sistolica_und,\n    cast(sv_pa_diastolica_und as varchar) as sv_pa_diastolica_und,\n    cast(sv_frequencia_cardiaca_und as varchar) as sv_frequencia_cardiaca_und,\n    cast(sv_hemoglobina_glicada_und as varchar) as sv_hemoglobina_glicada_und,\n    cast(sv_frequencia_respiratoria_und as varchar) as sv_frequencia_respiratoria_und,\n    cast(glicemia_capilar_und as varchar) as glicemia_capilar_und,\n    cast(circunferencia_cefalica_und as varchar) as circunferencia_cefalica_und,\n    cast(sv_peso_und as varchar) as sv_peso_und,\n    cast(sv_altura_und as varchar) as sv_altura_und,\n    cast(temperatura_corporal_und as varchar) as temperatura_corporal_und,\n    cast(saturacao_oxigenio_und as varchar) as saturacao_oxigenio_und,\n    cast(dor_und as varchar) as dor_und,\n    cast(superficie_corporea_und as varchar) as superficie_corporea_und,\n    cast(sv_circunferencia_abdominal_und as varchar) as sv_circunferencia_abdominal_und,\n    cast(HDLc_und as varchar) as HDLc_und,\n    cast(LDLc_und as varchar) as LDLc_und,\n    cast(triglicerideo_und as varchar) as triglicerideo_und,\n    cast(colesterol_total_und as varchar) as colesterol_total_und,\n    cast(flag_afirmo_que_paciente_nao_tem_outras_comorbidades as varchar) as flag_afirmo_que_paciente_nao_tem_outras_comorbidades,\n    cast(insuficiencia_cardiaca as varchar) insuficiencia_cardiaca,\n    cast(dpoc as varchar) as dpoc,\n    cast(neoplasias as varchar) as neoplasias,\n    cast(flag_paciente_nega_comorbidades as varchar) as flag_paciente_nega_comorbidades,\n    date(ac.data_sv_pa_sistolica) as data_sv_pa_sistolica,\n    date(ac.data_sv_pa_diastolica) as data_sv_pa_diastolica,\n    date(ac.data_sv_circunferencia_abdominal) as data_sv_circunferencia_abdominal,\n    date(ac.data_sv_hemoglobina_glicada) as data_sv_hemoglobina_glicada,\n    date(ac.data_glicemia_capilar) as data_glicemia_capilar,\n    date(ac.data_HDLc) as data_HDLc,\n    date(ac.data_LDLc) as data_LDLc,\n    date(ac.data_triglicerideo) as data_triglicerideo,\n    date(ac.data_colesterol_total) as data_colesterol_total\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_comorbidade as ac\nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_comorbidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:52.128946Z", "completed_at": "2025-07-01T18:30:52.163941Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:52.185243Z", "completed_at": "2025-07-01T18:30:52.185243Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09538626670837402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_diagnostico", "compiled": true, "compiled_code": "\n\nSELECT \n    idatendimento, \n    iddoenca,\n    cast(data_hora as timestamp(3) with time zone) as data_hora,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    flag_situacao,\n    flag_relevancia,\n    flag_status\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_diagnostico\nwhere date(data_hora_insert) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_diagnostico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:52.268427Z", "completed_at": "2025-07-01T18:30:52.282464Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:52.303238Z", "completed_at": "2025-07-01T18:30:52.303238Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0763237476348877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_informacao_complementar", "compiled": true, "compiled_code": "\n\nSELECT\n    idatendimento,\n    cast(flag_aps as varchar) as flag_aps,\n    cast(data_invalidacao as timestamp(3) with time zone) as data_invalidacao,\n    cast(data_hora_criacao as timestamp(3) with time zone) as data_hora_criacao,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    justificativa_invalidacao,\n    id_usuario_resp_invalidacao,\n    cast(flag_enviado_alerta_24 as varchar) as flag_enviado_alerta_24,\n    cast(flag_enviado_alerta_12 as varchar) as flag_enviado_alerta_12,\n    cast(data_hora_reagendamento as timestamp(3) with time zone) as data_hora_reagendamento,\n    cast(flag_atendimento_excecao as varchar) as flag_atendimento_excecao,\n    id_plano_clinica_paciente,\n    cast(idrepasse as bigint) as idrepasse,\n    origem_agendamento\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_informacao_complementar\nwhere (data_hora_ultima_atualizacao IS NOT NULL AND date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day)\nor (data_hora_ultima_atualizacao IS NULL AND date(data_hora_criacao) >= date(now()) - interval '4' day)", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_informacao_complementar\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:52.389264Z", "completed_at": "2025-07-01T18:30:52.421001Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:52.452454Z", "completed_at": "2025-07-01T18:30:52.452454Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1040642261505127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_profissional", "compiled": true, "compiled_code": "\n\nSELECT\n    idatendimento,\n    idusuario_profissional,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_criacao as timestamp(3) with time zone) as data_hora_criacao,\n    cast(flag_responsavel as varchar) as flag_responsavel\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_profissional \nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:52.598260Z", "completed_at": "2025-07-01T18:30:52.630426Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:52.658076Z", "completed_at": "2025-07-01T18:30:52.658076Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1301579475402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_pviva", "compiled": true, "compiled_code": "\n\nSELECT\n    id_atendimento,\n    id_atendimento_pviva,\n    cast(updated_at as timestamp(3) with time zone) as updated_at,\n    cast(created_at as timestamp(3) with time zone) as created_at\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_pviva\nwhere (updated_at IS NOT NULL AND date(updated_at) >= date(now()) - interval '4' day)\nor (updated_at IS NULL AND date(created_at) >= date(now()) - interval '4' day)", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_pviva\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:52.765551Z", "completed_at": "2025-07-01T18:30:52.808146Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:52.832583Z", "completed_at": "2025-07-01T18:30:52.832583Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11436891555786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_atendimento_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT id\n\t, data_inclusao\n\t, CAST(data_ultima_alteracao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_alteracao\n\t, usuario_ultima_alteracao\n\t, versao\n\t, clinica_id\n\t, beneficiario_id\n\t, profissional_id\n\t, encaminhamento_medico_id\n\t, solicitacao_tiss_id\n\t, id_atendimento_prestador\n\t, primeiro_atendimento\n\t, data_atendimento\n\t, tipo_identificacao_beneficiario\n\t, status_atendimento\n\t, motivo_cancelamento\n\t, fluxo_atendimento\n\t, profissional_chamou_antes_horario\n\t, solicita_guia_sem_atendimento\n\t, desfecho\n\t, fluxo\n\t, sequencial_guia_prestador\n\t, data_conclusao\n\t, data_inicio\n\t, data_fim\nFROM mysql_cnx.\"conexa-autorizador\".tb_atendimento\nWHERE data_ultima_alteracao >= DATE(NOW()) - INTERVAL '4' DAY", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_atendimento_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:52.925178Z", "completed_at": "2025-07-01T18:30:52.954556Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:52.975089Z", "completed_at": "2025-07-01T18:30:52.975089Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09976696968078613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_beneficiario_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT id\n    , data_inclusao\n    , CAST(data_ultima_alteracao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_alteracao\n    , usuario_ultima_alteracao\n    , versao\n    , id_paciente_prestador\n    , nome\n    , cpf\n    , data_nascimento\n    , numero_carteira\n    , registro_ans\n    , cid\nFROM mysql_cnx.\"conexa-autorizador\".tb_beneficiario\nWHERE data_ultima_alteracao >= DATE(NOW()) - INTERVAL '4' DAY", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_beneficiario_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:53.051598Z", "completed_at": "2025-07-01T18:30:53.081927Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:53.100098Z", "completed_at": "2025-07-01T18:30:53.100098Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09589123725891113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_chamada", "compiled": true, "compiled_code": "\n\nSELECT \n    idchamada,\n    idatendimento,\n    cast(data_inicio_realizacao as timestamp(3) with time zone) as data_inicio_realizacao, \n    cast(data_fim_realizacao as timestamp(3) with time zone) as data_fim_realizacao,\n    cast(data_agendamento as timestamp(3) with time zone) as data_agendamento,\n    tipo_servico_meeting,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_criacao as timestamp(3) with time zone) as data_hora_criacao\nFROM mysql_cnx.\"connectdoctor-prod\".chamada \nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_chamada\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:53.181293Z", "completed_at": "2025-07-01T18:30:53.209828Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:53.231943Z", "completed_at": "2025-07-01T18:30:53.231943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08588862419128418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_chamada_eventos", "compiled": true, "compiled_code": "\n\n\nselect\n    cast(_id as varchar) as _id\n    ,callid\n    ,clinicid\n    ,appointmentid\n    ,meetservice\n    ,generaluserinformation\n    ,cast(datetime as timestamp(3) with time zone) as datetime\nfrom\n    mongo_cnx.\"doutor-virtual-producao\".log_meet_events\nwhere 1=1\n    and date(datetime) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_chamada_eventos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:53.318984Z", "completed_at": "2025-07-01T18:30:53.348180Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:53.367478Z", "completed_at": "2025-07-01T18:30:53.367478Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.088134765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_chamada_log", "compiled": true, "compiled_code": "\n\nSELECT\n    CAST(_id AS varchar) AS _id,\n\t_class,\n\tidchamada,\n\tevento,\n\tCAST(datahoraevento AS TIMESTAMP(3) WITH time zone) AS datahoraevento,\n\tCAST(datahora AS TIMESTAMP(3) WITH time zone) AS datahora,\n\tmeetinguserid,\n\tdetalhes\nFROM mongo_cnx.\"doutor-virtual-producao\".chamada_log\nWHERE DATE(datahora) >= DATE(NOW()) - INTERVAL '4' DAY", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_chamada_log\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:53.434275Z", "completed_at": "2025-07-01T18:30:53.458194Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:53.480586Z", "completed_at": "2025-07-01T18:30:53.480586Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0946340560913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_chamada_participante", "compiled": true, "compiled_code": "\n\nSELECT \n    idchamada_participante,\n    idchamada,\n    idusuario_participante,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_inclusao as timestamp(3) with time zone) as data_hora_inclusao,\n    tipo_participante,\n    status,\n    url_meeting,\n    perfil_usuario_participante,\n    cast(data_hora_entrada as timestamp(3) with time zone) as data_hora_entrada,\n    cast(data_hora_saida as timestamp(3) with time zone) as data_hora_saida\nfrom mysql_cnx.\"connectdoctor-prod\".chamada_participante\nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_chamada_participante\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:53.583544Z", "completed_at": "2025-07-01T18:30:53.625504Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:53.647484Z", "completed_at": "2025-07-01T18:30:53.647484Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.117919921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_evento_prescricao", "compiled": true, "compiled_code": "\n\nSELECT \n    ideventoprescricao,\n    idatendimento,\n    idprofissional,\n    idprescricao,\n    cast(data_hora_inicio as timestamp(3) with time zone) as data_hora_inicio,\n    cast(data_hora_fim as timestamp(3) with time zone) as data_hora_fim\nFROM mysql_cnx.\"connectdoctor-prod\".evento_prescricao\nwhere date(data_hora_inicio) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_evento_prescricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:53.726659Z", "completed_at": "2025-07-01T18:30:53.753332Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:53.772650Z", "completed_at": "2025-07-01T18:30:53.772650Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07737326622009277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_faturamento_arquivo_atendimento_processado", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- Filha\n      F.id AS id_faturamento_arquivo_atendimento_processado\n\t, F.id_faturamento_arquivo AS fk_id_faturamento_arquivo\n\t, F.id_atendimento\n\t, F.id_procedimento\n\t, F.status_importacao\n\t, F.status_faturamento\n\t, F.id_detalhe_procedimento\n\t, F.primeiro_atendimento\n\t, F.chave_processamento_automatico\n    -- M\u00e3e\n\t, M.id AS id_faturamento_arquivo\n\t, M.id_cliente\n\t, M.titulo_importacao\n\t, M.nome_arquivo\n    , CAST(M.data_envio AS TIMESTAMP(3) WITH TIME ZONE) AS data_envio\n    , CAST(M.data_ultima_atualizacao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_atualizacao\n\t, M.quantidade_registros\n\t, M.quantidade_registros_com_erros\n\t, M.status_processamento\n\t, M.status_upload\n\t, M.url_arquivo_importado_s3\n\t, M.url_arquivo_erros_s3\n\t, M.usuario_importacao\n\t, M.key_firebase\n\t, M.competencia\n\t, M.tipo_cliente\n\nFROM (\n\t\tSELECT * FROM mysql_cnx.\"health-operator-bus\".faturamento_arquivo\n\t\tWHERE data_ultima_atualizacao >= DATE(NOW()) - INTERVAL '4' DAY\n\t) AS M\n\nINNER JOIN mysql_cnx.\"health-operator-bus\".faturamento_arquivo_atendimento_processado AS F\nON M.id = F.id_faturamento_arquivo", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_faturamento_arquivo_atendimento_processado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:53.851775Z", "completed_at": "2025-07-01T18:30:53.881688Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:53.906964Z", "completed_at": "2025-07-01T18:30:53.906964Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10761404037475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_motivo_cancelamento_atendimento", "compiled": true, "compiled_code": "\n\nSELECT \n    id_motivo_cancelamento_atendimento,\n    idclinica,\n    idpaciente,\n    idatendimento,\n    idprofissional,\n    cast(data_entrada as timestamp(3) with time zone) as data_entrada,\n    motivo_cancelamento,\n    id_fila,\n    cast(data_saida_fila as timestamp(3) with time zone) as data_saida_fila,\n    cast(data_hora_criacao as timestamp(3) with time zone) as data_hora_criacao,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao\nFROM mysql_cnx.\"connectdoctor-prod\".motivo_cancelamento_atendimento \nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_motivo_cancelamento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:53.975345Z", "completed_at": "2025-07-01T18:30:54.005366Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:54.021759Z", "completed_at": "2025-07-01T18:30:54.021759Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07856488227844238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_paciente", "compiled": true, "compiled_code": "\n\nSELECT\n    idpaciente,\n    cast(data_cadastro as timestamp(3) with time zone) as data_cadastro,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    nome,\n    data_nascimento,\n    cpf,\n    sexo,\n    identidade,\n    email,\n    telefone_cel,\n    cep,\n    endereco,\n    complemento,\n    cast(uf as varchar) as uf,\n    cidade,\n    bairro,\n    idconvenio,\n    carteira_convenio,\n    idclinica,\n    idconvenio_plano,\n    cpf_responsavel,\n    nome_responsavel,\n    estado_civil,\n    etnia,\n    profissao,\n    idpaciente_titular,\n    info_adicionais,\n    cast(flag_ativo as varchar) as flag_ativo,\n    tipo_criacao,\n    idorigem_paciente,\n    idExterno,\n    grau_parentesco,\n    pais,\n    id_externo,\n    nome_mae,\n    nome_social,\n    id_raca_cor, \n    grau_parentesco_representante_legal,\n    cpf_representante_legal,\n    nome_representante_legal,\n    obs_livres,\n    id_escolaridade,\n    id_genero,\n    id_uf_nascimento,\n    cast(flag_aps as varchar) as flag_aps,\n    cast(data_hora_bloqueio as timestamp(3) with time zone) as data_hora_bloqueio\nFROM mysql_cnx.\"connectdoctor-prod\".paciente\nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:54.103454Z", "completed_at": "2025-07-01T18:30:54.132693Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:54.154888Z", "completed_at": "2025-07-01T18:30:54.154888Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08650517463684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_paciente_informacao_complementar", "compiled": true, "compiled_code": "\n\nSELECT \n    idpaciente_informacao_complementar, \n\tidpaciente, \n    empresa, \n\tcast(flag_acessou_sua_saude as varchar) as flag_acessou_sua_saude, \n\tdepartamento, \n\tplano, \n\tcargo, \n\tmatricula, \n\tid_empresa_subsidiaria, \n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_criacao as timestamp(3) with time zone) as data_hora_criacao,\n\tflag_termo_aceite_menor_idade, \n\tnome_responsavel_termo_aceite, \n\tcpf_responsavel_termo_aceite, \n\tid_uf_nis, \n\torgao_emissor_nis, \n\tdata_emissao_nis, \n\tmatricula_responsavel, \n\tcarteira_convenio_responsavel, \n\temail_responsavel \nFROM mysql_cnx.\"connectdoctor-prod\".paciente_informacao_complementar\nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_paciente_informacao_complementar\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:54.229491Z", "completed_at": "2025-07-01T18:30:54.258414Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:54.277474Z", "completed_at": "2025-07-01T18:30:54.277474Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.080841064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_paciente_pagamento", "compiled": true, "compiled_code": "\n\nSELECT \n    idpaciente_pagamento,\n    idprefila,\n    idfila,\n    idatendimento,\n    idpaciente,\n    valor_pago,\n    idtransacao,\n    cast(flag_capturado as varchar) as flag_capturado,\n    msg_erro,\n    situacao,\n    valor_cancelamento,\n    cast(data_inclusao as timestamp(3) with time zone) as data_inclusao,\n    final_cartao,\n    bandeira,\n    modo_atendimento,\n    cast(data_agendamento as timestamp(3) with time zone) as data_agendamento,\n    idnfe,\n    motivo_estorno,\n    detalhe_estorno,\n    idusuario_estorno,\n    idtransacaoexterna,\n    origemexterna,\n    cast(data_hora_update as timestamp(3) with time zone) as data_hora_update,\n    numero_pedido,\n    cast(data_estorno as timestamp(3) with time zone) as data_estorno,\n    cast(data_falha_pagamento as timestamp(3) with time zone) as data_falha_pagamento,\n    picpay_authorizationid,\n    metodo,\n    url_pagamento,\n    getnet_paymentid,\n    idpgtofila,\n    idtransacao_cancelamento,\n    valor_consulta,\n    valor_custo_operacao,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".paciente_pagamento\nwhere date(data_hora_update) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_paciente_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:54.381868Z", "completed_at": "2025-07-01T18:30:54.415462Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:54.447481Z", "completed_at": "2025-07-01T18:30:54.447481Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11281633377075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_prescricao", "compiled": true, "compiled_code": "\n\nSELECT \n    idprescricao,\n    idatendimento,\n    idprofissional,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    cast(data_hora as timestamp(3) with time zone) as data_hora,\n    codigo_prescricao_memed,\n    nome_arquivo,\n    codigo_prescricao_nexodata\nFROM mysql_cnx.\"connectdoctor-prod\".prescricao\nwhere date(data_hora_insert) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_prescricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:54.586341Z", "completed_at": "2025-07-01T18:30:54.624756Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:54.656472Z", "completed_at": "2025-07-01T18:30:54.656472Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13942980766296387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_prescricao_item", "compiled": true, "compiled_code": "\n\nSELECT \n    idprescricao_item,\n    idprescricao,\n    nome,\n    descricao,\n    posologia,\n    fabricante,\n    cast(controle_especial as varchar) as controle_especial,\n    quantidade,\n    tipo,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    exames_tuss_codigo\nFROM mysql_cnx.\"connectdoctor-prod\".prescricao_item\nwhere date(data_hora_insert) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_prescricao_item\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:54.793048Z", "completed_at": "2025-07-01T18:30:54.841687Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:54.865953Z", "completed_at": "2025-07-01T18:30:54.865953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13256263732910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_profissional_repasses", "compiled": true, "compiled_code": "\n\nSELECT\n  idprofissional_repasse\n, idprofissional\n, idrepasse\n, ativo\n, CAST(data_vinculacao AS TIMESTAMP(3) WITH TIME ZONE) AS data_vinculacao\n, CAST(data_atualizacao AS TIMESTAMP(3) WITH TIME ZONE) AS data_atualizacao\nFROM mysql_cnx.\"connectdoctor-prod\".profissional_repasses\nWHERE (data_atualizacao IS NOT NULL AND DATE(data_atualizacao) >= DATE(NOW()) - INTERVAL '4' DAY)\nOR (data_atualizacao IS NULL AND DATE(data_vinculacao) >= DATE(NOW()) - INTERVAL '4' DAY)", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_profissional_repasses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:54.945241Z", "completed_at": "2025-07-01T18:30:55.058264Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:55.097455Z", "completed_at": "2025-07-01T18:30:55.097455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20036697387695312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_profissional_tipo_pagamento", "compiled": true, "compiled_code": "\n\nselect \n    id_profissional_tipo_pagamento,\n    idprofissional,\n    tipo_pagamento,\n    valor_por_consulta,\n    valor_por_hora,\n    quantidade_consulta_gatilho,\n    cast(data_criacao as timestamp(3) with time zone) as data_criacao,\n    cast(data_ultima_atualizacao as timestamp(3) with time zone) as data_ultima_atualizacao\nfrom mysql_cnx.\"connectdoctor-prod\".profissional_tipo_pagamento\nwhere date(data_criacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_profissional_tipo_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:55.235208Z", "completed_at": "2025-07-01T18:30:55.261573Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:55.281499Z", "completed_at": "2025-07-01T18:30:55.285754Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1168062686920166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_profissional_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT id\n    , CAST(data_inclusao AS TIMESTAMP(3) WITH TIME ZONE) AS data_inclusao\n    , CAST(data_ultima_alteracao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_alteracao\n    , usuario_ultima_alteracao\n    , versao\n    , nome\n    , cpf\n    , numero_conselho\n    , uf\n    , especialidade_id\nFROM mysql_cnx.\"conexa-autorizador\".tb_profissional\nWHERE data_ultima_alteracao >= DATE(NOW()) - INTERVAL '4' DAY", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_profissional_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:55.355308Z", "completed_at": "2025-07-01T18:30:55.375042Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:55.394493Z", "completed_at": "2025-07-01T18:30:55.394493Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0753793716430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_reagendamento_atendimento", "compiled": true, "compiled_code": "\n\n\nselect\n\tcast(id_historico_reagendamento_atendimento_log as bigint) as id_historico_reagendamento_atendimento_log\n\t, cast(idatendimento as bigint) as idatendimento\n\t, cast(idusuario as bigint) as idusuario\n\t, cast(data_original as timestamp(3) with time zone) as data_original\n\t, cast(data_reagendada as timestamp(3) with time zone) as data_reagendada\n\t, cast(data_hora_cadastro as timestamp(3) with time zone) as data_hora_cadastro\n\t, cast(data_hora_ultima_alteracao as timestamp(3) with time zone) as data_hora_ultima_alteracao\nfrom\n\tmysql_cnx.\"connectdoctor-prod\".historico_reagendamento_atendimento_log\nwhere 1=1\n    and (data_hora_ultima_alteracao is not null and date(data_hora_ultima_alteracao) >= date(now()) - interval '4' day)", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_reagendamento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:55.464064Z", "completed_at": "2025-07-01T18:30:55.488332Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:55.510585Z", "completed_at": "2025-07-01T18:30:55.510585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07986092567443848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_registro_encaminhamento", "compiled": true, "compiled_code": "\n\nSELECT \n\tid_registro_encaminhamento,\n\tid_atendimento_origem,\n\tid_atendimento_encaminhado,\n\tcast(data_hora as timestamp(3) with time zone) as data_hora\nFROM mysql_cnx.\"connectdoctor-prod\".registro_encaminhamento\nwhere date(data_hora) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_registro_encaminhamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:55.590188Z", "completed_at": "2025-07-01T18:30:55.622253Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:55.643842Z", "completed_at": "2025-07-01T18:30:55.643842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09129786491394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_reserva_consulta", "compiled": true, "compiled_code": "\n\nSELECT\n    id,\n    cast(data_hora_criacao as timestamp(3) with time zone) as data_hora_criacao,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_confirmacao as timestamp(3) with time zone) as data_hora_confirmacao,\n    status,\n    id_atendimento\nFROM mysql_cnx.\"connectdoctor-prod\".reserva_consulta\nwhere (data_hora_ultima_atualizacao IS NOT NULL AND data_hora_ultima_atualizacao >= date(now()) - interval '4' day)\nor (data_hora_ultima_atualizacao IS NULL AND data_hora_criacao >= date(now()) - interval '4' day)", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_reserva_consulta\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:55.739598Z", "completed_at": "2025-07-01T18:30:55.770246Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:55.787029Z", "completed_at": "2025-07-01T18:30:55.787029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09945559501647949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_solicitacao_tiss", "compiled": true, "compiled_code": "\n\n\nselect \n\tid,\n\tcast(data_inclusao as timestamp(3) with time zone) as data_inclusao,\n\tcast(data_solicitacao as timestamp(3) with time zone) as data_solicitacao,\n\tusuario_ultima_alteracao,\n\tdata_ultima_alteracao,\n\tdata_autorizacao,\n\tversao,\n    prestador,\n    versao_tiss,\n\tid_consulta_prestador,\n\tid_paciente_prestador,\n\tnumero_carteirinha,\n\tid_convenio_prestador,\n\tconvenio,\n\tstatus,\n    motivo_pendencia,\n    numero_guia_operadora,\n    numero_guia_prestador,\n    quantidade_solicitada,\n    quantidade_autorizada,\n    quantidade_utilizada,\n    codigo_glosa,\n    mensagem_glosa,\n    senha_autorizacao,\n\tcast(data_validade_senha as timestamp(3) with time zone) as data_validade_senha,\n\ttoken_solicitacao,\n\ttoken_confirmado\nfrom mysql_cnx.\"conexa-autorizador\".tb_solicitacao_tiss\nwhere date(data_ultima_alteracao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_solicitacao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:55.861656Z", "completed_at": "2025-07-01T18:30:55.896819Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:55.910422Z", "completed_at": "2025-07-01T18:30:55.910422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0818030834197998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_tb_global_clinical_impression_cycle", "compiled": true, "compiled_code": "\n\nSELECT \n    id_global_clinical_impression_cycle,\n    cast(created_at as timestamp(3) with time zone) as created_at,\n    cast(updated_at as timestamp(3) with time zone) as updated_at,\n    professional_id,\n    patient_id,\n    status,\n    cast(conclusion_date as timestamp(3) with time zone) as conclusion_date,\n    concluded_by_user_id\nFROM mysql_cnx.\"connectdoctor-prod\".tb_global_clinical_impression_cycle\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_tb_global_clinical_impression_cycle\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:55.979431Z", "completed_at": "2025-07-01T18:30:56.011746Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:56.036975Z", "completed_at": "2025-07-01T18:30:56.036975Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08447647094726562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_tb_global_clinical_impression_cycle_evaluation", "compiled": true, "compiled_code": "\n\nSELECT \n    id_global_clinical_impression_cycle_evaluation,\n    cast(created_at as timestamp(3) with time zone) as created_at,\n    cast(updated_at as timestamp(3) with time zone) as updated_at,\n    global_clinical_impression_cycle_id,\n    appointment_id,\n    evaluation,\n    cast(base_evaluation as varchar) as base_evaluation\nFROM mysql_cnx.\"connectdoctor-prod\".tb_global_clinical_impression_cycle_evaluation\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_tb_global_clinical_impression_cycle_evaluation\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:56.124621Z", "completed_at": "2025-07-01T18:30:56.147968Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:56.168608Z", "completed_at": "2025-07-01T18:30:56.169141Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08954024314880371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_tb_treatment_reason_session", "compiled": true, "compiled_code": "\n\nSELECT\n    id_reason_session,\n    cast(created_at as timestamp(3) with time zone) as created_at,\n    cast(updated_at as timestamp(3) with time zone) as updated_at,\n    treatment_id,\n    reason_session_id\nFROM mysql_cnx.\"connectdoctor-prod\".tb_treatment_reason_session\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_tb_treatment_reason_session\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:56.249417Z", "completed_at": "2025-07-01T18:30:56.274901Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:56.296736Z", "completed_at": "2025-07-01T18:30:56.296736Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09192609786987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_treatment", "compiled": true, "compiled_code": "\nSELECT \n    idtreatment,\n \tidatendimento,\n \ttreatment_situation,\n \tsession_summary,\n \tpsychologist_documentary_record,\n \ttechnical_procedures,\n \tinstrument_used,\n    cast(updated_at as timestamp(3) with time zone) as updated_at\nFROM mysql_cnx.\"connectdoctor-prod\".treatment\nwhere date(updated_at) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_treatment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:56.373835Z", "completed_at": "2025-07-01T18:30:56.407384Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:56.422541Z", "completed_at": "2025-07-01T18:30:56.422541Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08025717735290527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_cnx_usuario", "compiled": true, "compiled_code": "\n\nSELECT \n    idusuario,\n    nome,\n    login,\n    perfil,\n    idprofissional,\n    idclinica,\n    idpaciente,\n    cast(flag_ativo as varchar) as flag_ativo,\n    cast(flag_bloqueado as varchar) as flag_bloqueado,\n    cast(flag_termo_aceito as varchar) as flag_termo_aceito,\n    cast(data_hora_termo_aceito as timestamp(3) with time zone) as data_hora_termo_aceito,\n    ip_termo_aceito,\n    cast(flag_customizado as varchar) as flag_customizado,\n    cast(flag_admin as varchar) as flag_admin,\n    tipo_dispositivo,\n    cast(data_hora_bloqueio as timestamp(3) with time zone) as data_hora_bloqueio,\n    motivo_bloqueio,\n    cast(data_hora_ativacao as timestamp(3) with time zone) as data_hora_ativacao,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    cast(data_hora_criacao as timestamp(3) with time zone) as data_hora_criacao,\n    cast(flag_acessou as varchar) as flag_acessou,\n    cast(flag_termo_aceito_jaleko as varchar) as flag_termo_aceito_jaleko,\n    cast(flag_desabilitar_push_notification as varchar) as flag_desabilitar_push_notification,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    cast(data_alteracao_senha as timestamp(3) with time zone) as data_alteracao_senha,\n    senha\nFROM mysql_cnx.\"connectdoctor-prod\".usuario\nwhere date(data_hora_ultima_atualizacao) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_cnx_usuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:56.500641Z", "completed_at": "2025-07-01T18:30:56.538722Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:56.560706Z", "completed_at": "2025-07-01T18:30:56.560706Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09345364570617676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_ga_events", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n\tto_hex(\n\t\tmd5(\n\t\t\tcast(\n\t\t\tconcat(\n\t\t\t\tcast(ROW_NUMBER() OVER(PARTITION BY event_date ORDER BY event_timestamp ASC) as varchar),\n\t\t\t\tcoalesce(cast(event_timestamp as varchar), ''),\n\t\t\t\tcoalesce(cast(event_bundle_sequence_id as varchar), ''),\n\t\t\t\tcoalesce(event_name, ''),\n\t\t\t\tcoalesce(user_id, ''),\n\t\t\t\tcoalesce(user_pseudo_id, '')\n\t\t\t\t)\n\t\t\tas varbinary\n\t\t\t) \n\t)) as action_id,\n\tevent_date,\n\tevent_timestamp,\n\tevent_name,\n\tevent_params,\n\tevent_previous_timestamp,\n\tevent_value_in_usd,\n\tevent_bundle_sequence_id,\n\tevent_server_timestamp_offset,\n\tuser_id,\n\tuser_pseudo_id,\n\tprivacy_info,\n\tuser_properties,\n\tuser_first_touch_timestamp,\n\tuser_ltv,\n\tdevice,\n\tgeo,\n\tapp_info,\n\ttraffic_source,\n\tstream_id,\n\tplatform,\n\tevent_dimensions,\n\tecommerce,\n\titems,\n\tcollected_traffic_source,\n\tis_active_user,\n\tbatch_event_index,\n\tbatch_page_id,\n\tbatch_ordering_id,\n\tsession_traffic_source_last_click,\n\tpublisher\nfrom \n\t-- \"bq_cnx\".\"analytics_205476257\".\"events_*\" --carga completa\n\t-- bq_cnx.analytics_205476257.events_20250109 --data especifica\n\tbq_cnx.analytics_205476257.events_20250629 --data de anteontem", "relation_name": "\"delta\".\"bronze\".\"landing_ga_events\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:56.640253Z", "completed_at": "2025-07-01T18:30:56.672339Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:56.688019Z", "completed_at": "2025-07-01T18:30:56.688019Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09369230270385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_lina_condicao_tuss", "compiled": true, "compiled_code": "\n\n\nSELECT\n       id\n     , conditional_id\n     , tuss_group_id\n     , parent_id\n     , value_frequency\n     , time_frequency\n     , minimum_frequency\n     , CAST(created_at AS TIMESTAMP(3) WITH TIME ZONE) AS created_at\n     , CAST(updated_at AS TIMESTAMP(3) WITH TIME ZONE) AS updated_at\nFROM lina_clickhouse.h3alth_analytics.tuss_conditionals\nWHERE DATE(updated_at) >= DATE(NOW()) - INTERVAL '4' DAY", "relation_name": "\"delta\".\"bronze\".\"landing_lina_condicao_tuss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:56.771551Z", "completed_at": "2025-07-01T18:30:56.798790Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:56.822028Z", "completed_at": "2025-07-01T18:30:56.822028Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09868645668029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_mongo_csat_responses", "compiled": true, "compiled_code": "\nSELECT \n    \"_id\",\n    \"_class\",\n    ticketid,\n    cast(createdat as timestamp(3) with time zone) as createdat,\n    userphone,\n    username,\n    satisfaction,\n    satisfactiondescribe,\n    selectedanswer,\n    current_timestamp(3) as emitted_at\nFROM mongo_cnx.\"conexa-bot\".csat_responses\nwhere date(createdat) >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_mongo_csat_responses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:56.900033Z", "completed_at": "2025-07-01T18:30:56.929152Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:56.943133Z", "completed_at": "2025-07-01T18:30:56.943133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0804445743560791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_mongo_filaatendimentolog", "compiled": true, "compiled_code": "\n\n\nselect\n\t_class, \n\t_id, \n\tdataagendamento,  \n\tdatacancelamento, \n\tdatacriacaoatendimento,\n\tdataentrada, \n\tdataultimavezonline, \n\tflagaguardandoativacao,\n\tflagretornonoshow,\n\tidatendimento, \n\tidclinica, \n\tidespecialidade, \n\tidfila, \n\tidpaciente, \n\tidpacienteconvenio, \n\tidprofissional, \n\tidusuariocancelamento, \n\tidusuarioinclusao, \n\tidade, \n\tmedicamentos, \n\tnomeclinica, \n\tnomeespecialidade, \n\tnomepaciente, \n\tnomeusuarioinclusao, \n\tsintomas, \n\tsintomasevidentes, \n\ttelefone, \n\ttempoestimadoinicial, \n\ttipoprofissional\nfrom mongo_cnx.\"doutor-virtual-producao\".filaatendimentolog\nwhere (datacriacaoatendimento is not null and datacriacaoatendimento >= date(now()) - interval '4' day)\nor (datacriacaoatendimento is null and dataentrada >= date(now()) - interval '4' day)", "relation_name": "\"delta\".\"bronze\".\"landing_mongo_filaatendimentolog\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:57.038851Z", "completed_at": "2025-07-01T18:30:57.061764Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:57.085641Z", "completed_at": "2025-07-01T18:30:57.085641Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10173821449279785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_mongo_log_acao_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT\n       CAST(_id AS VARCHAR) AS _id\n     , _class\n     , idclinica\n     , CAST(datahora AS TIMESTAMP(3) WITH TIME ZONE) AS data_criacao\n     , idpaciente\n     , idatendimento\n     , acao\n     , request\n     , response\n     , statuscode\nFROM mongo_cnx.\"doutor-virtual-producao\".log_tiss_acoes\nWHERE datahora >= DATE(NOW()) - INTERVAL '4' DAY", "relation_name": "\"delta\".\"bronze\".\"landing_mongo_log_acao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:57.172573Z", "completed_at": "2025-07-01T18:30:57.187992Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:57.219766Z", "completed_at": "2025-07-01T18:30:57.219766Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08365845680236816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_mongo_log_enterprise_caller", "compiled": true, "compiled_code": "\n\n\nselect \n\t_id,\n\tclinic_id,\n\tclinic_name,\n\tendpoint,\n\tip,\n\tfull_request_url,\n\tcalled_at\nfrom mongo_cnx.\"doutor-virtual-producao\".log_enterprise_caller \nwhere called_at >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_mongo_log_enterprise_caller\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:57.300881Z", "completed_at": "2025-07-01T18:30:57.332123Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:57.347753Z", "completed_at": "2025-07-01T18:30:57.347753Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09370231628417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_mongo_log_medical_record_ia_usage", "compiled": true, "compiled_code": "\n\n\nselect \n\t_id\n\t,appointmentid\n\t,professionalid\n    ,createdat\n    ,action\nfrom mongo_cnx.\"doutor-virtual-producao\".log_medical_record_ia_usage\nwhere createdat >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_mongo_log_medical_record_ia_usage\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:57.426379Z", "completed_at": "2025-07-01T18:30:57.453920Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:57.474363Z", "completed_at": "2025-07-01T18:30:57.474363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09476017951965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_mongo_ms_auditoria", "compiled": true, "compiled_code": "\n\n\nselect\n\t_id\n\t,autorizador_id\n\t,clinica\n\t,convenio\n\t,data\n\t,evento\n\t,paciente\n\t,usuario\n\t,sistema\n\t,requisicoes\n    ,respostas\n    ,versao\n\t,erro\nfrom mongo_cnx.\"ms-auditoria\".auditoria\nwhere date(\"data\") >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_mongo_ms_auditoria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:57.553771Z", "completed_at": "2025-07-01T18:30:57.579610Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:57.596314Z", "completed_at": "2025-07-01T18:30:57.596314Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07977581024169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_mongo_transcription_feedback", "compiled": true, "compiled_code": "\n\n\nselect \n\tidatendimento\n\t,feedbacksofyaprocessorsentbody.threadid\n\t,feedbacksofyaprocessorsentbody\n\t,createdat\nfrom mongo_cnx.\"doutor-virtual-producao\".feedbacktranscriptionprocessedsofya\nwhere createdat >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_mongo_transcription_feedback\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:57.674520Z", "completed_at": "2025-07-01T18:30:57.690307Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:57.722193Z", "completed_at": "2025-07-01T18:30:57.722193Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09545207023620605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.landing_mongo_transcription_processado", "compiled": true, "compiled_code": "\n\n\nselect \n\tidatendimento\n\t,threadid\n    ,createdat\n    ,textprocessorresult\nfrom mongo_cnx.\"doutor-virtual-producao\".transcriptiontextprocessedsofya\nwhere createdat >= date(now()) - interval '4' day", "relation_name": "\"delta\".\"bronze\".\"landing_mongo_transcription_processado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:57.801572Z", "completed_at": "2025-07-01T18:30:57.823587Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:57.849009Z", "completed_at": "2025-07-01T18:30:57.849009Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09137940406799316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.mongo_view_eventos_chamadas", "compiled": true, "compiled_code": "\n\n\nselect\n\te.callid as id_chamada\n\t,e.clinicid as id_clinica\n\t,e.appointmentid as id_atendimento\n\t,e.meetservice as tipo_servico_meeting\n\t,gui.userprofile as tipo_usuario\n\t,gui.userid as id_usuario\n\t,gui.browser as tipo_navegador\n\t,gui.os as sistema_operacional\n\t,gui.useragent as agente_de_usuario\n\t,gui.origin as origem\n\t,gui.ip as ip\n\t,evl.event as evento\n\t,cast(evl.dateTime as timestamp(3) with time zone) as datahora_evento\nfrom\n\tmongo_cnx.\"doutor-virtual-producao\".log_meet_events as e\n\t,unnest(generaluserinformation) as gui\n\t,unnest(gui.eventLog) as evl", "relation_name": "\"delta\".\"silver\".\"mongo_view_eventos_chamadas\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:57.929862Z", "completed_at": "2025-07-01T18:30:57.954089Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:57.977102Z", "completed_at": "2025-07-01T18:30:57.977102Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08908939361572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.mongo_view_log_carga_metadados", "compiled": true, "compiled_code": "\n\n\nSELECT\n\t  CAST(\"_id\" AS VARCHAR) AS id_carga_metadado\n\t, nomearquivo AS nome_arquivo\n\t, nomearquivohash AS nome_arquivo_hash\n\t, CAST(totallinhas AS INT) AS total_linhas\n\t, CAST(totallinhasprocessadas AS INT) AS total_linhas_processadas\n\t, CAST(totallinhasimportadas AS INT) AS total_linhas_importadas\n\t, CAST(datainicio AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_inicio\n\t, DATE(datainicio AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_inicio\n\t, CAST(datafim AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_fim\n\t, DATE(datafim AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_fim\n\t, tipocarga AS tipo_carga\n\t, status\n\t, CAST(notificar AS BOOLEAN) AS flag_notificar\n\t, CAST(usuario.\"_id\" AS BIGINT) AS id_usuario\n\t, usuario.nome AS nome_usuario\n\t, usuario.login AS login_usuario\n\t, usuario.perfil AS perfil_usuario\n\t, CAST(idclinica AS BIGINT) AS id_clinica\n\t, CAST(flagbloqueardesbloqueardependente AS BOOLEAN) AS flag_bloquear_desbloquear_dependente\n\t, CAST(flagdesbloquearquandoatualizar AS BOOLEAN) AS flag_desbloquear_ao_atualizar\n\t, \"_class\" AS classe\nFROM mongo_cnx.\"ms-carga\".carga_metadados", "relation_name": "\"delta\".\"silver\".\"mongo_view_log_carga_metadados\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:58.054163Z", "completed_at": "2025-07-01T18:30:58.080320Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:58.110053Z", "completed_at": "2025-07-01T18:30:58.110053Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09742927551269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.mongo_view_log_enterprise_caller", "compiled": true, "compiled_code": "\n\n\nSELECT \n\t\"_id\" as id_log_api_enterprise,\n\tclinic_id as id_clinica,\n\tclinic_name as nome_clinica,\n\t\"endpoint\",\n\tcalled_at as data_requisicao,\n\tDATE(called_at AT TIME ZONE 'America/Sao_Paulo') as data_brt_requisicao,\n\tip,\n\tfull_request_url\nFROM mongo_cnx.\"doutor-virtual-producao\".log_enterprise_caller", "relation_name": "\"delta\".\"silver\".\"mongo_view_log_enterprise_caller\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:58.190590Z", "completed_at": "2025-07-01T18:30:58.222438Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:58.254703Z", "completed_at": "2025-07-01T18:30:58.254703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09562206268310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.mongo_view_log_ms_auditoria", "compiled": true, "compiled_code": "\n\n\nselect\n    _id\n\t,\"data\"\n\t,clinica as id_clinica\n    ,convenio._id as  id_convenio\n\t,convenio.nome as nome_convenio\n\t,autorizador_id\n\t,evento\n\t,usuario\n\t,sistema\n\t,versao\n\t,paciente._id as  id_paciente\n\t,paciente.carteirinha as carteirinha_paciente\n\t,transform(requisicoes, x -> x.url) AS url_requisicoes\n    ,transform(requisicoes, x -> x.tipo) AS tipo_requisicoes\n    ,transform(requisicoes, x -> x.path) AS path_requisicoes\n    ,transform(respostas, x -> x.tipo) AS tipo_respostas\n    ,transform(respostas, x -> x.data) AS data_respostas\n    ,transform(respostas, x -> x.path) AS path_respostas\n\t,erro.data as  data_erro\n\t,erro.descricao as  descricao_erro\n\t,erro.path as  path_erro\nfrom mongo_cnx.\"ms-auditoria\".auditoria", "relation_name": "\"delta\".\"silver\".\"mongo_view_log_ms_auditoria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:58.365376Z", "completed_at": "2025-07-01T18:30:58.396925Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:58.424098Z", "completed_at": "2025-07-01T18:30:58.424098Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12250447273254395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.mongo_view_log_webhooks", "compiled": true, "compiled_code": "\n\n\nSELECT\n      CAST(\"_id\" AS VARCHAR) AS id_webhook\n\t, \"_class\" AS classe\n\t, url\n\t, body\n\t, CAST(clinicaid AS BIGINT) AS id_clinica\n\t, CAST(tentativanumero AS INT) AS numero_tentativa\n\t, resultado\n\t, CAST(datahora AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_requisicao\n\t, DATE(datahora AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_requisicao\n\t, CAST(appointmentid AS BIGINT) AS id_atendimento\n\t, CAST(patientid AS BIGINT) AS id_paciente\n\t, CAST(meetingid AS BIGINT) AS id_chamada\n\t, webhookname AS nome_webhook\n\t, responsebody AS response_body\nFROM mongo_cnx.\"doutor-virtual-producao\".webhooks", "relation_name": "\"delta\".\"silver\".\"mongo_view_log_webhooks\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:58.519734Z", "completed_at": "2025-07-01T18:30:58.539354Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:58.561711Z", "completed_at": "2025-07-01T18:30:58.561711Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08605790138244629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.mongo_view_transcription_text_sent_sofya", "compiled": true, "compiled_code": "\n\n\nWITH cte_dados_base\nAS (\n\tSELECT \"_class\" AS classe_modelo\n\t\t, CAST(idatendimento AS BIGINT) AS id_atendimento\n\t\t, COALESCE(messagesstructured, messages) AS mensagens\n\t\t, threadid AS id_thread\n\t\t, CAST(createdat AS TIMESTAMP (3) WITH TIME ZONE) AS data_criacao\n\t\t, ROW_NUMBER() OVER (\n\t\t\tPARTITION BY idatendimento ORDER BY cardinality(COALESCE(messagesstructured, messages)) DESC\n\t\t\t) AS rn\n\tFROM mongo_cnx.\"doutor-virtual-producao\".transcriptiontextsentsofya\n\t)\nSELECT db.id_atendimento\n\t, db.id_thread\n\t, ordinality AS ordem_mensagem\n\t, mensagem.content AS mensagem\n\t, mensagem.type AS tipo\n\t, db.classe_modelo\n\t, db.data_criacao\nFROM cte_dados_base db\nCROSS JOIN UNNEST(db.mensagens) WITH ORDINALITY AS mensagem(content, type, ordinality)\nWHERE mensagem.content != ''\n\tAND db.rn = 1", "relation_name": "\"delta\".\"silver\".\"mongo_view_transcription_text_sent_sofya\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:58.630786Z", "completed_at": "2025-07-01T18:30:58.656707Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:58.674668Z", "completed_at": "2025-07-01T18:30:58.674668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08384227752685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_view_escore_profissional", "compiled": true, "compiled_code": "\n\nWITH\nindicadores as (\n--Essa tabela calcula: profissional ativos, flags 20 e 30,  total de repasse, NPS, e No Show profissional\nSELECT \n    p.id_profissional,\n    c.nome_profissional,\n    c.email_profissional,\n    c.data_do_cadastro_profissional,\n    p.flag_convenio_20,\n    p.flag_convenio_30,\n    sum(valor_repasse) as total_repasse,\n    sum(case when status_atendimento = 'Realizado' then 1 else 0 end) as Realizados,\n    count(distinct id_paciente) as qtd_pacientes,\n    sum(case when status_atendimento  = 'No show profissional' then 1.0000 else 0 end)/\n    (CASE WHEN sum(case when status_atendimento in ('Realizado', 'N\u00e3o realizado', 'No show paciente', 'No show profissional', 'No show ambos') then 1.0000 else 0 end) = 0 THEN NULL \n    ELSE sum(case when status_atendimento in ('Realizado', 'N\u00e3o realizado', 'No show paciente', 'No show profissional', 'No show ambos') then 1.0000 else 0 end) end)*100 as no_show_profissional,\n    ((sum(case when nps_profissional >= 9 then 1.0000 else 0 end) -\n    sum(case when nps_profissional <= 6 then 1.0000 else 0 end))/\n    (CASE WHEN count(nps_profissional) = 0 THEN NULL ELSE  count(nps_profissional) END))*100 as NPS\nFROM silver.pvv_dim_plano_psicologo as p\nLEFT JOIN silver.pvv_fact_atendimento as c on p.id_profissional = c.id_profissional\nWHERE (data_brt_atendimento >=  date_add('day', -90, current_date) and \n        data_brt_atendimento <= current_date) and \n        c.tipo_profissional != 'Triagem' and \n        c.origem = 'BR' and \n        id_convenio not in (999999,999998) and\n        p.data_vigencia >= current_date\ngroup by 1,2,3,4,5,6\n),\n\ndrop_consultas_construcao as(\n--calcula a qtd de consultas dos pacientes que iniciaram tratamento nos ultimos 90 dias\nSELECT \n    c.id_profissional,\n    c.id_paciente,\n    min(data_brt_atendimento) as primeira_consulta,\n    count(id_atendimento) as qtd_consultas\nFROM silver.pvv_fact_atendimento as c\nLEFT JOIN silver.pvv_dim_plano_psicologo as p on p.id_profissional = c.id_profissional\nWHERE \n    c.tipo_profissional != 'Triagem' and \n    c.origem = 'BR' and \n    id_convenio not in (999999,999998) and\n    status_atendimento = 'Realizado'\ngroup by 1,2\nhaving (min(data_brt_atendimento) >=  date_add('day', -100, current_date) and min(data_brt_atendimento) <= date_add('day', -10, current_date))\n\n),\ndrop_consultas as(\n--calcula o valor final do drop da primeira para a segunda consulta dos pacientes que iniciaram nos ultimos 90 dias\n    SELECT\n    id_profissional,\n    (sum(case when qtd_consultas > 1 then 1.0000 else 0 end)/count(id_paciente))*100 as drop_segunda_consulta\n    from drop_consultas_construcao\n    group by 1\n),\n\nagenda as(\nSELECT \n    a.id_profissional,\n    p.tempo_consulta,\n    count(flag_agenda_preenchida) as horas_disponibilizadas\nfrom silver.pvv_fact_data_agenda_profissional as a\nLEFT JOIN silver.pvv_dim_plano_psicologo as p on p.id_profissional = a.id_profissional\nwhere (start >=  date_add('day', -90, current_date) and start <= current_date)\ngroup by 1,2\n),\n\nescore_geral as(\nSELECT\n    i.id_profissional,\n    i.nome_profissional,\n    i.email_profissional,\n    i.data_do_cadastro_profissional,\n    i.Realizados,\n    i.qtd_pacientes,\n    i.NPS,\n    i.no_show_profissional,\n    drop_segunda_consulta,\n    (a.tempo_consulta/60.00)*horas_disponibilizadas as horas_plataforma,\n    total_repasse,\n    flag_convenio_20,\n    flag_convenio_30,\n    --Calculo NPS\n    CASE \n        WHEN NPS <  60 or NPS is null THEN 0 \n        ELSE (2.50 * (NPS - 60))/(100-60) end as escore_NPS,\n    --Calculo No Show Profissional\n    CASE \n        WHEN i.no_show_profissional < 1 THEN 2.50\n        WHEN i.no_show_profissional > 3 or no_show_profissional is null THEN 0\n        ELSE (2.50 * (3 - i.no_show_profissional))/(3-1) end as escore_no_show_profissional,\n    --Calculo drop segunda consulta\n    CASE \n        WHEN drop_segunda_consulta < 50 or drop_segunda_consulta is null THEN 0 \n        WHEN drop_segunda_consulta > 80 THEN 2.00\n        ELSE (2.00 * (drop_segunda_consulta - 50))/(80-50) end as escore_drop_segunda_consulta,\n    --Calculo Horas disponibilizadas na plataforma\n    CASE \n        WHEN (a.tempo_consulta/60.00)*horas_disponibilizadas < 45 or (a.tempo_consulta/60.00)*horas_disponibilizadas is null THEN 0 \n        WHEN (a.tempo_consulta/60.00)*horas_disponibilizadas > 225 THEN 1.00\n        ELSE (1.00 * ((a.tempo_consulta/60.00)*horas_disponibilizadas - 45))/(225-45) end as escore_horas_plataforma,\n    --Calculo total repasse\n    CASE \n        WHEN total_repasse < 900 or total_repasse is null THEN 0 \n        WHEN total_repasse > 4500 THEN 1.00\n        ELSE (1.00 * (total_repasse - 900))/(4500-900) end as escore_repasse,\n    --Calculo repsse 20\n    CASE \n        WHEN flag_convenio_20 = TRUE THEN 0.50 ELSE 0 END as escore_repasse_20,\n    --Calculo repasse 30\n    CASE \n        WHEN flag_convenio_30 = TRUE THEN 0.50 ELSE 0 END as escore_repasse_30\nFROM indicadores as i\nLEFT JOIN drop_consultas as dp on dp.id_profissional = i.id_profissional\nLEFT JOIN agenda as a on a.id_profissional = i.id_profissional)\n\nSELECT \n    id_profissional,\n    nome_profissional,\n    email_profissional,\n    data_do_cadastro_profissional,\n    (escore_NPS + escore_no_show_profissional + escore_drop_segunda_consulta + escore_horas_plataforma + escore_repasse + escore_repasse_20 + escore_repasse_30) as \"Escore Total\",\nCASE \n    WHEN data_do_cadastro_profissional >= date_add('day', -60, current_date)\n        THEN 'N' ELSE \n(CASE\n    WHEN (escore_NPS + escore_no_show_profissional + escore_drop_segunda_consulta + escore_horas_plataforma + escore_repasse + escore_repasse_20 + escore_repasse_30) >=9 \n        THEN 'A'\n    WHEN (escore_NPS + escore_no_show_profissional + escore_drop_segunda_consulta + escore_horas_plataforma + escore_repasse + escore_repasse_20 + escore_repasse_30) >=7 AND \n         (escore_NPS + escore_no_show_profissional + escore_drop_segunda_consulta + escore_horas_plataforma + escore_repasse + escore_repasse_20 + escore_repasse_30) < 9\n        THEN 'B'\n    WHEN (escore_NPS + escore_no_show_profissional + escore_drop_segunda_consulta + escore_horas_plataforma + escore_repasse + escore_repasse_20 + escore_repasse_30) >=5 AND \n         (escore_NPS + escore_no_show_profissional + escore_drop_segunda_consulta + escore_horas_plataforma + escore_repasse + escore_repasse_20 + escore_repasse_30) < 7\n        THEN 'C'\n        ELSE 'D' end) end as Categoria,\n    Realizados,\n    qtd_pacientes as \"Quantidade de Pacientes\",\n    NPS,\n    escore_NPS,\n    no_show_profissional as \"No Show Profissional\",\n    escore_no_show_profissional,\n    drop_segunda_consulta as \"Drop Segunda Consulta\",\n    escore_drop_segunda_consulta,\n    horas_plataforma as \"Horas Plataforma\",\n    escore_horas_plataforma,\n    total_repasse as \"Total Repasse\",\n    escore_repasse,\n    flag_convenio_20,\n    escore_repasse_20,\n    flag_convenio_30,\n    escore_repasse_30,\n    date(now()) as executed_at\nFROM escore_geral", "relation_name": "\"delta\".\"silver\".\"pvv_view_escore_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:58.747092Z", "completed_at": "2025-07-01T18:30:58.774859Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:58.796305Z", "completed_at": "2025-07-01T18:30:58.796827Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08575272560119629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_view_iqe_profissional", "compiled": true, "compiled_code": "\n\nWITH \n--Essa tabela calcula os profissionais ativos, informa\u00e7\u00f5es de perfil\nt as (\nSELECT \n    p.id_profissional,\n    p.nome_profissional,\n    p.email_profissional,\n    p.estado,\n    p.data_do_cadastro,\n    pp.flag_convenio_20,\n    pp.flag_convenio_30\nFROM silver.pvv_dim_profissional as p\nLEFT JOIN silver.pvv_dim_plano_psicologo as pp on p.id_profissional = pp.id_profissional\nWHERE \n    flag_psi_vigente = true and \n    origem = 'BR' and \n    tipo_profissional != 'Triagem'\n),\n--Essa tabela calcula NPS, CSAT, No show profissional e ativa\u00e7\u00e3o das flags de 20 e 30. Os dados s\u00e3o dos ultimos 30 dias.\nt1 as(\nSELECT \n    c.id_profissional,\n    CASE \n        WHEN count(nps_profissional) = 0 THEN NULL\n        ELSE count(nps_profissional) FILTER(WHERE nps_profissional <= 6 and nps_profissional is not null) END as ava_negativa_pos_sessao,\n    avg(csat_profissional) as media_rate,\n    CASE \n        WHEN count(id_atendimento) FILTER(WHERE status_atendimento in ('Realizado', 'No show profissional', 'No show paciente', 'No show ambos')) = 0 THEN NULL\n        ELSE count(id_atendimento) FILTER(WHERE status_atendimento = 'No show profissional') END as qtd_no_show\nFROM silver.pvv_fact_atendimento_financeiro as c\nWHERE \n    c.tipo_profissional != 'Triagem' and \n    c.origem = 'BR' and\n    data_brt_atendimento between date_add('day', -30, current_date) and current_date\ngroup by 1\n),\n--Essa tabela calcula a quantidade de horas que o profissional dispobiliza nas proximas 30 horas\nt2 as (\nSELECT \n    id_profissional,\n    sum(date_diff('minute', a.\"start\", a.\"end\"))/60 as horas_disponbilizadas\nFROM silver.pvv_fact_data_agenda_profissional as a\nWHERE start between current_date and date_add('day', 30, current_date)\ngroup by 1\n),\n--Essa tabela constroi a reten\u00e7\u00e3o de pacientes do m\u00eas retrasado para o m\u00eas passado, por profissional\nt3 as(\nSELECT \n    c.id_profissional,\n    c.id_paciente,\n    count(id_atendimento)FILTER(WHERE data_brt_atendimento between date_add('day', -60, current_date) and date_add('day', -30, current_date)) as qtd_atendimentos_60_30,\n    count(id_atendimento)FILTER(WHERE data_brt_atendimento between date_add('day', -30, current_date) and  current_date) as qtd_atendimentos_30_hoje\nFROM silver.pvv_fact_atendimento_financeiro as c\nWHERE \n    c.tipo_profissional != 'Triagem' and\n    c.origem = 'BR' and\n    status_atendimento = 'Realizado' and \n    data_brt_atendimento between date_add('day', -60, current_date) and current_date\ngroup by 1,2),\n--Essa tabela consolida a reten\u00e7\u00e3o de pacientes do m\u00eas retrasado para o m\u00eas passado, por profissional\nt4 as (\nSELECT \n    id_profissional,\n    sum(case when qtd_atendimentos_30_hoje > 0 then 1.0000 else 0 end)/sum(case when qtd_atendimentos_60_30 is not null then 1.0000 else 0 end) as retencao_pacientes\nFROM t3\nwhere qtd_atendimentos_60_30 > 0\ngroup by 1),\n--Essa tabela constroi a reten\u00e7\u00e3o de novos pacientes do m\u00eas retrasado para o m\u00eas passado, por profissional\nt5 as(\nSELECT \n    c.id_profissional,\n    c.id_paciente,\n    min(data_brt_atendimento) as primeira_consulta, \n    count(id_atendimento)FILTER(WHERE data_brt_atendimento between date_add('day', -60, current_date) and date_add('day', -30, current_date)) as qtd_atendimentos_60_30,\n    count(id_atendimento)FILTER(WHERE data_brt_atendimento between date_add('day', -30, current_date) and  current_date) as qtd_atendimentos_30_hoje\nFROM silver.pvv_fact_atendimento_financeiro as c\nWHERE \n    c.tipo_profissional != 'Triagem' and\n    c.origem = 'BR' and\n    status_atendimento = 'Realizado' and \n    data_brt_atendimento between date_add('month', -8, current_date) and current_date\ngroup by 1,2\nhaving min(data_brt_atendimento) between date_add('day', -60, current_date) and current_date),\n--Essa tabela consolida a reten\u00e7\u00e3o de novos pacientes do m\u00eas retrasado para o m\u00eas passado, por profissional\nt6 as (\nSELECT \n    id_profissional,\n    sum(case when qtd_atendimentos_30_hoje > 0 then 1.0000 else 0 end)/sum(case when qtd_atendimentos_60_30 is not null then 1.0000 else 0 end) as retencao_novos_pacientes\nFROM t5\nwhere qtd_atendimentos_60_30 > 0\ngroup by 1),\n-- Essa tabela \u00e9 a base para calculo final do IQE. Primeiro contruimos a nota que o profissional tira para cada indicador. Posterioremente, \u00e9 calculado o denominador a ser considerado ap\u00f3s desconsidera\u00e7\u00e3o dos dados nulos.\nt7 as (SELECT \n    t.id_profissional,\n    t.nome_profissional,\n    t.email_profissional,\n    t.estado,\n    t.data_do_cadastro,\n    t1.ava_negativa_pos_sessao,\n    CASE \n        WHEN ava_negativa_pos_sessao is null THEN 0\n        WHEN ava_negativa_pos_sessao = 0 THEN 4.00\n        WHEN ava_negativa_pos_sessao = 1 THEN 2.00 \n        ELSE 0 END as ava_negativa_pontuacao,\n    t1.media_rate,\n    CASE \n        WHEN media_rate is null THEN 0.00\n        WHEN media_rate >= 4.7 THEN 2.00\n        ELSE 0.00 END as media_rate_pontuacao,\n    t1.qtd_no_show,\n    CASE\n        WHEN qtd_no_show is null then 0.00\n        WHEN qtd_no_show = 0 then 4.00\n        WHEN qtd_no_show = 1 then 2.00\n        ELSE 0 END as qtd_no_show_pontuacao,\n    t4.retencao_pacientes,\n    CASE \n        WHEN t4.retencao_pacientes is null then 0.00\n        WHEN t4.retencao_pacientes between 0.2 and 0.4 then 1.00 \n        WHEN t4.retencao_pacientes between 0.4 and 0.6 then 2.00\n        WHEN t4.retencao_pacientes >= 0.6 then 3.00\n        ELSE 0.00 end as retencao_pacientes_pontuacao,\n    t6.retencao_novos_pacientes,\n    CASE \n        WHEN t6.retencao_novos_pacientes is null then 0.00\n        WHEN t6.retencao_novos_pacientes between 0.2 and 0.4 then 1.00 \n        WHEN t6.retencao_novos_pacientes between 0.4 and 0.6 then 2.00\n        WHEN t6.retencao_novos_pacientes >= 0.6 then 3.00 \n        ELSE 0.00 end as retencao_novos_pacientes_pontuacao,\n    t.flag_convenio_20,\n    CASE \n        WHEN flag_convenio_20 = TRUE then 1.50 \n        else 0.00 end as flag_20_pontuacao,\n    t.flag_convenio_30,\n    CASE\n        WHEN flag_convenio_30 = TRUE then 0.50 \n        else 0.00 end as flag_convenio_30_pontuacao,\n    t2.horas_disponbilizadas,\n    CASE \n        WHEN horas_disponbilizadas > 40 then 4.00 \n        WHEN horas_disponbilizadas between 20 and 40 then 2.00 \n        else 0.00 end as horas_disponbilizadas_pontuacao,\n        \n    (CASE WHEN ava_negativa_pos_sessao is null then 0.00 ELSE 4.00 end +\n    CASE WHEN media_rate is null then 0.00 else 2.00 end +\n    CASE WHEN qtd_no_show is null then 4.00 else 4.00 end +\n    CASE WHEN retencao_pacientes is null then 3.00 else 3.00 end+\n    CASE WHEN retencao_novos_pacientes is null then 0.00 else 3.00 end)*0.60 +\n    (CASE WHEN flag_convenio_20 is null then 0.00 else 1.50 end +\n    CASE WHEN flag_convenio_30 is null then 0.00 else 0.50 end +\n    CASE WHEN horas_disponbilizadas is null then 4.00 else 4.00 end)*0.40 as denominador\nFROM t \nLEFT JOIN t1 on t.id_profissional = t1.id_profissional \nLEFT JOIN t2 on t.id_profissional = t2.id_profissional\nLEFT JOIN t4 on t.id_profissional = t4.id_profissional\nLEFT JOIN t6 on t.id_profissional = t6.id_profissional)\n\nSELECT \n    t7.*,\n    (((ava_negativa_pontuacao + media_rate_pontuacao + qtd_no_show_pontuacao + retencao_pacientes_pontuacao + retencao_novos_pacientes_pontuacao)*0.60+\n    (flag_20_pontuacao + flag_convenio_30_pontuacao + horas_disponbilizadas_pontuacao)*0.40)/denominador)*100 as IQE,\n    CASE \n        WHEN \n        qtd_no_show is null and retencao_pacientes is null and horas_disponbilizadas is null THEN 'Sem atividade'\n        WHEN \n        (((ava_negativa_pontuacao + media_rate_pontuacao + qtd_no_show_pontuacao + retencao_pacientes_pontuacao + retencao_novos_pacientes_pontuacao)*0.60+\n    (flag_20_pontuacao + flag_convenio_30_pontuacao + horas_disponbilizadas_pontuacao)*0.40)/denominador)*100 >= 90 THEN 'A'\n        WHEN    \n        (((ava_negativa_pontuacao + media_rate_pontuacao + qtd_no_show_pontuacao + retencao_pacientes_pontuacao + retencao_novos_pacientes_pontuacao)*0.60+\n    (flag_20_pontuacao + flag_convenio_30_pontuacao + horas_disponbilizadas_pontuacao)*0.40)/denominador)*100 >= 70 then 'B'\n        WHEN\n        (((ava_negativa_pontuacao + media_rate_pontuacao + qtd_no_show_pontuacao + retencao_pacientes_pontuacao + retencao_novos_pacientes_pontuacao)*0.60+\n    (flag_20_pontuacao + flag_convenio_30_pontuacao + horas_disponbilizadas_pontuacao)*0.40)/denominador)*100 >= 50 then 'C'\n        ELSE 'D' end as categoria,\n    date(now()) as executed_at\nFROM T7\nORDER BY 23 desc", "relation_name": "\"delta\".\"silver\".\"pvv_view_iqe_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:58.878714Z", "completed_at": "2025-07-01T18:30:58.916528Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:58.937525Z", "completed_at": "2025-07-01T18:30:58.937525Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09939408302307129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_availabilities", "compiled": true, "compiled_code": "\n\nSELECT \n    id,\n    availability_settings_id,\n    type,\n    cast(start_date as timestamp(3) with time zone) as start_date,\n    cast(end_date as timestamp(3) with time zone) as end_date,\n    cast(created_at as timestamp(3) with time zone) as created_at,\n    cast(updated_at as timestamp(3) with time zone) as updated_at,\n    cast(deleted_at as timestamp(3) with time zone) as deleted_at,\n    is_deleted\nFROM mysql_cnx.\"connectdoctor-prod\".availabilities\n\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_availabilities\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_availabilities\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:59.041367Z", "completed_at": "2025-07-01T18:30:59.082524Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:59.108342Z", "completed_at": "2025-07-01T18:30:59.108342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12369036674499512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_availability_intervals", "compiled": true, "compiled_code": "\n\nSELECT \n    id,\n    availability_id,\n    day_of_week,\n    cast(start_time as timestamp(3) with time zone) as start_time,\n    cast(end_time as timestamp(3) with time zone) as end_time,\n    slot_processing_status,\n    cast(created_at as timestamp(3) with time zone) as created_at,\n    cast(updated_at as timestamp(3) with time zone) as updated_at,\n    cast(deleted_at as timestamp(3) with time zone) as deleted_at,\n    is_deleted,\n    processing_retry_count\nFROM mysql_cnx.\"connectdoctor-prod\".availability_intervals\n\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_availability_intervals\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_availability_intervals\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:59.194833Z", "completed_at": "2025-07-01T18:30:59.232208Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:59.252980Z", "completed_at": "2025-07-01T18:30:59.252980Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10058212280273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_availability_settings", "compiled": true, "compiled_code": "\n\nSELECT \n    id,\n    professional_id,\n    time_zone,\n    appointment_duration,\n    booking_advance_time,\n    cast(created_at as timestamp(3) with time zone) as created_at,\n    cast(updated_at as timestamp(3) with time zone) as updated_at,\n    cast(deleted_at as timestamp(3) with time zone) as deleted_at,\n    is_deleted\nFROM mysql_cnx.\"connectdoctor-prod\".availability_settings\n\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_availability_settings\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_availability_settings\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:59.341025Z", "completed_at": "2025-07-01T18:30:59.392181Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:59.437357Z", "completed_at": "2025-07-01T18:30:59.437357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1441328525543213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_info_ic_lote_guia", "compiled": true, "compiled_code": "\n\n\nSELECT\n      id\n\t, lote_faturavel_id\n\t, status_processo\n\t, status_envio\n\t, prestador\n\t, operadora\n\t, resumo\n\t, protocolo_envio\n\t, status_recebimento  -- SALVO_SEM_ERROS/SALVO_COM_ERROS\n\t, CAST(data_criacao AS TIMESTAMP(3) WITH TIME ZONE) AS data_criacao\nFROM mysql_cnx.\"health-operator-bus\".infos_ic_lotes_guias\n\n\nWHERE id > (\n    SELECT MAX(id)\n    FROM \"delta\".\"bronze\".\"raw_cnx_info_ic_lote_guia\"\n)\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_info_ic_lote_guia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:59.537193Z", "completed_at": "2025-07-01T18:30:59.560873Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:59.581070Z", "completed_at": "2025-07-01T18:30:59.581070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08842706680297852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_schedule_slots", "compiled": true, "compiled_code": "\n\nSELECT \n    id,\n    professional_id,\n    availability_interval_id,\n    cast(start_datetime as timestamp(3) with time zone) as start_datetime,\n    cast(end_datetime as timestamp(3) with time zone) as end_datetime,\n    is_available,\n    is_active,\n    blocker_id,\n    blocker_type,\n    blocker_owner_id,\n    cast(created_at as timestamp(3) with time zone) as created_at,\n    cast(updated_at as timestamp(3) with time zone) as updated_at\nFROM mysql_cnx.\"connectdoctor-prod\".schedule_slots", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_schedule_slots\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:59.679792Z", "completed_at": "2025-07-01T18:30:59.711890Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:59.734449Z", "completed_at": "2025-07-01T18:30:59.734449Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10117673873901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_cabecalho_compras_b2b", "compiled": true, "compiled_code": "-- ERP - Pagamentos B2B Cabe\u00e7alho\n\n\nwith periodo_faturamento as (\n    SELECT\n    current_date AS today,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -2, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n        ELSE DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n    END AS start_date,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '22' DAY\n        ELSE DATE_TRUNC('month', current_date) + INTERVAL '22' DAY\n    END AS end_date\n),\nbase_query as (\n    select distinct\n        sessions.event_id as event_id,\n        sessions.day as sessions_date,\n        '1' as codemp,\n        '1' as codempnegoc,\n        102 as codtipoper,\n        case\n            when erp_profissionais.ad_chave_pix is not null then 33\n            when erp_profissionais.codbco = 341 then 35\n            else 30\n        end as codtipvenda,\n        'p' as tipmov,\n        professionals.id as professional_id,\n        '241116' as codcencus,\n        '4110100' as codnat,\n        'p' as statusnota,\n        'n' as irfretido,\n        'n' as issretido,\n        erp_profissionais.codparc as codparc,\n        '0' as vlrdesctot,\n        businessfiscalid as cgc_cpf,\n        sessions.pgto_b2b_pj as vlrnota\n    from zenklub.core.sessions sessions\n    join periodo_faturamento on CAST(sessions.day AT TIME ZONE 'America/Sao_Paulo' AS DATE) BETWEEN start_date AND end_date\n    left join zenklub.modelo_2023.dim_professional professionals on professionals.id = sessions.professionalid\n    left join zenklub.core.erp_profissionais erp_profissionais on erp_profissionais.professional_person_id = sessions.professionalid\n    where\n     sessions.professionalid is not null\n    and sessions.status = 'paid'\n),\n\nranked_query as (\nselect\n    codemp,\n    codempnegoc,\n    codtipoper,\n    codtipvenda,\n    tipmov,\n    professional_id,\n    codcencus,\n    codnat,\n    statusnota,\n    irfretido,\n    issretido,\n    codparc,\n    vlrdesctot,\n    cgc_cpf,\n    CAST( min(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_first_session,\n    CAST( max(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_last_session,\n    sum(vlrnota) over (partition by professional_id) as vlrnota,\n    row_number() over (partition by professional_id) as rn\nfrom base_query\ngroup by codemp, codempnegoc, codtipoper, codtipvenda, tipmov, professional_id, codcencus,\ncodnat, statusnota, irfretido, issretido,codparc, vlrdesctot, cgc_cpf, vlrnota, sessions_date\norder by vlrnota asc\n)\n\nselect * from ranked_query where vlrnota > 0 and rn = 1", "relation_name": "\"delta\".\"gold\".\"sankhya_cabecalho_compras_b2b\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:59.833587Z", "completed_at": "2025-07-01T18:30:59.862943Z"}, {"name": "execute", "started_at": "2025-07-01T18:30:59.889819Z", "completed_at": "2025-07-01T18:30:59.889819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10691046714782715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_cabecalho_compras_b2c", "compiled": true, "compiled_code": "-- ERP - Pagamentos B2C Cabe\u00e7alho\n\n\nwith periodo_faturamento as (\n    SELECT\n    current_date AS today,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -2, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n        ELSE DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n    END AS start_date,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '22' DAY\n        ELSE DATE_TRUNC('month', current_date) + INTERVAL '22' DAY\n    END AS end_date\n),\n\nbase_query as (\n    select distinct\n    sessions.day AS sessions_date,\n    '1' as CODEMP,\n    '1' as CODEMPNEGOC, 110 as CODTIPOPER,\n            case when erp_profissionais.AD_CHAVE_PIX is not null then 33\n      when erp_profissionais.CODBCO = 341 then 35\n      else 30\n    end as CODTIPVENDA,\n    'P' as TIPMOV,\n    professionals.id as professional_id,\n    '242116' as CODCENCUS,\n    '1010206' as CODNAT,\n    'P' as STATUSNOTA,\n    'N' as IRFRETIDO,\n    'N' as ISSRETIDO,\n    erp_profissionais.CODPARC as CODPARC, '0' as VLRDESCTOT,\n            businessFiscalId as CGC_CPF,\n            case when new_b2_type = 'B2B' then 0\n      when new_b2_type = 'B2C' and (case\n                                      when date(sessions.day at time zone 'America/Sao_Paulo') >= cast('2023-09-24'  as date) then new_negative_b2c_take\n                                      else negative_b2c_take\n                                    end) = 0 then professionalCompensation\n      when new_b2_type = 'B2C'  and new_b2c_paid_value >= 0 then professionalCompensation - (case\n                                                                                                when date(sessions.day at time zone 'America/Sao_Paulo') >= cast('2023-09-24'  as date) then new_negative_b2c_take\n                                                                                                else negative_b2c_take\n                                                                                             end)\n      else null\n    end as VLRNOTA\n  from zenklub.core.sessions as sessions\n  join periodo_faturamento on CAST(sessions.day AT TIME ZONE 'America/Sao_Paulo' AS DATE) BETWEEN start_date AND end_date\n  left join zenklub.modelo_2023.dim_professional as professionals on professionals.id = sessions.professionalId\n  left join zenklub.core.erp_profissionais as erp_profissionais on erp_profissionais.professional_person_id = sessions.professionalId\n  where\n     sessions.professionalId IS NOT NULL\n    and sessions.status = 'paid'\n    ),\nranked_query as (\nselect\n    CODEMP,\n    CODEMPNEGOC,\n    CODTIPOPER,\n    CODTIPVENDA,\n    TIPMOV,\n    professional_id,\n    CODCENCUS,\n    CODNAT,\n    STATUSNOTA,\n    IRFRETIDO,\n    ISSRETIDO,\n    CODPARC,\n    VLRDESCTOT,\n    CGC_CPF,\n    CAST( min(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_first_session,\n    CAST( max(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_last_session,\n    sum(VLRNOTA) over (partition by professional_id) as VLRNOTA,\n    row_number() over (partition by professional_id) as rn\n    from base_query\nGROUP BY CODEMP, CODEMPNEGOC, CODTIPOPER, CODTIPVENDA, TIPMOV, professional_id, CODCENCUS, CODNAT, STATUSNOTA,\n         IRFRETIDO, ISSRETIDO, CODPARC, VLRDESCTOT, CGC_CPF, VLRNOTA, sessions_date\n    )\n\nselect * from ranked_query where VLRNOTA > 0 and rn = 1", "relation_name": "\"delta\".\"gold\".\"sankhya_cabecalho_compras_b2c\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:30:59.977268Z", "completed_at": "2025-07-01T18:31:00.011488Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:00.035865Z", "completed_at": "2025-07-01T18:31:00.035865Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10449910163879395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_cabecalho_compras_take", "compiled": true, "compiled_code": "-- ERP - Faturamento Take Cabe\u00e7alho\n\n\nwith periodo_faturamento as (\n    SELECT\n    current_date AS today,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -2, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n        ELSE DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n    END AS start_date,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '22' DAY\n        ELSE DATE_TRUNC('month', current_date) + INTERVAL '22' DAY\n    END AS end_date\n),\n base_query as (\nselect distinct\n    sessions.day AS sessions_date,\n    '1' as CODEMP,\n    '1' as CODEMPNEGOC,\n    1012 as CODTIPOPER,\n    26 as CODTIPVENDA,\n    'P' as TIPMOV,\n    professionals.id as professional_id,\n    '243002' as CODCENCUS,\n    '1010103' as CODNAT,\n    'L' as STATUSNOTA,\n    'N' as IRFRETIDO,\n    'N' as ISSRETIDO,\n    erp_profissionais.CODPARC as CODPARC,\n    '1' as SERIENOTA,\n    '0' as VLRDESCTOT,\n    businessFiscalId as CGC_CPF,\n     case\n       when new_b2_type = 'B2B'  then 0\n       when new_b2_type = 'B2C'  and\n           ( case  when day >=  date '2023-09-24'  then new_negative_b2c_take  else negative_b2c_take  end) = 0\n         then session_processing_fee + ( case  when day >=  date '2023-09-24'  then new_take_b2c  else take_b2c  end)\n       when new_b2_type = 'B2C'  and\n           ( case  when day >=  date '2023-09-24'  then new_negative_b2c_take  else negative_b2c_take  end) <> 0\n         then ( case  when day >=  date '2023-09-24'  then new_take_b2c  else take_b2c  end)\n       else  null\n     end as NF_Take_B2C\nfrom zenklub.core.sessions sessions\njoin periodo_faturamento on CAST(sessions.day AT TIME ZONE 'America/Sao_Paulo' AS DATE) BETWEEN start_date AND end_date\nleft join zenklub.modelo_2023.dim_professional as professionals on professionals.id = sessions.professionalId\nleft join zenklub.core.erp_profissionais as erp_profissionais on erp_profissionais.professional_person_id = sessions.professionalId\nwhere  sessions.professionalId  is  not  null\n and sessions.status = 'paid'\n),\n\nranked_query as (\n select\n\t CODEMP,\n\t CODEMPNEGOC,\n\t CODTIPOPER,\n\t CODTIPVENDA,\n\t TIPMOV,\n\t professional_id,\n\t CODCENCUS,\n\t CODNAT,\n\t STATUSNOTA,\n\t IRFRETIDO,\n\t ISSRETIDO,\n\t CODPARC,\n\t SERIENOTA,\n\t VLRDESCTOT,\n\t CGC_CPF,\n    CAST( min(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_first_session,\n    CAST( max(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_last_session,\n    sum(NF_Take_B2C) over (partition by professional_id) as NF_Take_B2C,\n    row_number() over (partition by professional_id) as rn\nfrom base_query\ngroup by CODEMP,CODEMPNEGOC,CODTIPOPER,CODTIPVENDA,TIPMOV,professional_id,CODCENCUS,\nCODNAT,STATUSNOTA,IRFRETIDO,ISSRETIDO,CODPARC,SERIENOTA,VLRDESCTOT,CGC_CPF,NF_Take_B2C,sessions_date\n)\n\nselect * from ranked_query where NF_Take_B2C > 0 and rn = 1", "relation_name": "\"delta\".\"gold\".\"sankhya_cabecalho_compras_take\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:00.131787Z", "completed_at": "2025-07-01T18:31:00.163967Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:00.186436Z", "completed_at": "2025-07-01T18:31:00.186436Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10367131233215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_cabecalho_vendas_sessoes", "compiled": true, "compiled_code": "-- ERP - Vendas Cabe\u00e7alho (Sess\u00f5es)\n\n\nselect distinct\n\t1 as CODEMP,\n    1 as CODEMPNEGOC,\n    if(clients.foreign, 1 , erp_clientes.CODPARC) as CODPARC ,\nCASE\n        WHEN((\n            CASE\n                WHEN sessions.new_session_type IN ('employee', 'coparticipation')\n                    AND sessions.new_b2_type = 'B2B'\n                    AND sessions.price >0\n                THEN 'B2B Paid By User Session'\n                WHEN sessions.new_session_type = 'credit'\n                    AND sessions.new_b2_type = 'B2C'\n                THEN 'B2C Plano Mensal'\n                WHEN sessions.new_session_type != 'credit'\n                    AND sessions.new_b2_type = 'B2C'\n                THEN 'B2C Session'\n            END) IN ('B2C Session', 'B2C Plano Mensal'))\n        THEN '1008'\n        WHEN(((\n            CASE\n                WHEN sessions.new_session_type IN ('employee', 'coparticipation')\n                    AND sessions.new_b2_type = 'B2B'\n                    AND sessions.price >0\n                THEN 'B2B Paid By User Session'\n                WHEN sessions.new_session_type = 'credit'\n                    AND sessions.new_b2_type = 'B2C'\n                THEN 'B2C Plano Mensal'\n                WHEN sessions.new_session_type != 'credit'\n                    AND sessions.new_b2_type = 'B2C'\n                THEN 'B2C Session'\n            END)) = 'B2B Paid By User Session')\n        THEN '1007'\n        ELSE\n            CONCAT((\n                CASE\n                    WHEN sessions.new_session_type IN ('employee', 'coparticipation')\n                        AND sessions.new_b2_type = 'B2B'\n                        AND sessions.price >0\n                    THEN 'B2B Paid By User Session'\n                    WHEN sessions.new_session_type = 'credit'\n                        AND sessions.new_b2_type = 'B2C'\n                    THEN 'B2C Plano Mensal'\n                    WHEN sessions.new_session_type != 'credit'\n                        AND sessions.new_b2_type = 'B2C'\n                    THEN 'B2C Session'\n        END),'')\n    END AS CODTIPOPER,\n    if(sessions.paymentMethod = 'other_card', 57, 26) AS CODTIPVENDA,\n    'P' as TIPMOV,\n    1 as SERIENOTA,\n    CASE\n        WHEN sessions.originalPrice >= sessions.price\n        THEN sessions.originalPrice - sessions.price\n        ELSE 0\n    END AS VLRDESCTOT,\n    sessions.price as VLRNOTA,\n    CASE\n        WHEN(((\n            CASE\n                WHEN sessions.new_session_type IN ('employee', 'coparticipation')\n                    AND sessions.new_b2_type = 'B2B'\n                    AND sessions.price >0\n                THEN 'B2B Paid By User Session'\n                WHEN sessions.new_session_type = 'credit'\n                    AND sessions.new_b2_type = 'B2C'\n                THEN 'B2C Plano Mensal'\n                WHEN sessions.new_session_type != 'credit'\n                    AND sessions.new_b2_type = 'B2C'\n                THEN 'B2C Session'\n            END)) = 'B2B Paid By User Session')\n        THEN '241002'\n        WHEN((\n            CASE\n                WHEN sessions.new_session_type IN ('employee', 'coparticipation')\n                    AND sessions.new_b2_type = 'B2B'\n                    AND sessions.price >0\n                THEN 'B2B Paid By User Session'\n                WHEN sessions.new_session_type = 'credit'\n                    AND sessions.new_b2_type = 'B2C'\n                THEN 'B2C Plano Mensal'\n                WHEN sessions.new_session_type != 'credit'\n                    AND sessions.new_b2_type = 'B2C'\n                THEN 'B2C Session'\n            END) IN ('B2C Plano Mensal', 'B2C Session'))\n        THEN '242002'\n        ELSE\n            CONCAT((\n                CASE\n                    WHEN sessions.new_session_type IN ('employee', 'coparticipation')\n                        AND sessions.new_b2_type = 'B2B'\n                        AND sessions.price >0\n                    THEN 'B2B Paid By User Session'\n                    WHEN sessions.new_session_type = 'credit'\n                        AND sessions.new_b2_type = 'B2C'\n                    THEN 'B2C Plano Mensal'\n                    WHEN sessions.new_session_type != 'credit'\n                        AND sessions.new_b2_type = 'B2C'\n                    THEN 'B2C Session'\n        END), '')\n    END AS CODCENCUS,\n    case \n       when sessions.creditPlanUsedAsDiscount then '1010217' \n       when professionals.main_type in ('psychologist', 'psychoanalyst') then '1010205' \n       when professionals.main_type = 'coach' then '1010213' \n       when professionals.main_type = 'nutritionist' then '1010214' \n       when professionals.main_type = 'psychiatrist' then '1010216' \n       when professionals.main_type = 'therapist' then '1010221' \n       else null\n    end as CODNAT,\n    'L' as STATUSNOTA,\n    sessions.event_id as OBSERVACAO,\n    sessions.chargeId as AD_CHID,\n    CASE\n        WHEN sessions.new_session_type IN ('employee', 'coparticipation')\n            AND sessions.new_b2_type = 'B2B'\n            AND sessions.price >0\n        THEN 'B2B Paid By User Session'\n        WHEN sessions.new_session_type = 'credit'\n            AND sessions.new_b2_type = 'B2C'\n        THEN 'B2C Plano Mensal'\n        WHEN sessions.new_session_type != 'credit'\n            AND sessions.new_b2_type = 'B2C'\n        THEN 'B2C Session'\n    END AS TIPO_PLANO,\n    regexp_replace(clients.fiscal_id,'[^0-9xX]','') as CGC_CPF\nfrom zenklub.core.sessions sessions\nleft join zenklub.core.clients as clients on clients._id = sessions.profileId\nleft join zenklub.core.professionals as professionals on professionals._id = sessions.professionalId\nleft join zenklub.core.erp_clientes as erp_clientes on (regexp_replace(clients.fiscal_id,'[^0-9xX]','') = regexp_replace(erp_clientes.CGC_CPF,'[^0-9xX]','') and erp_clientes.CGC_CPF is not null)\ncross join zenklub.core.erp_tipo_operacao as erp_tipo_operacao\nwhere\nsessions.paymentDate >= date_add('month', -3, cast(current_date as timestamp) at time zone 'America/Sao_Paulo')\nAND sessions.chargeId IS NOT NULL\nAND erp_tipo_operacao.CODTIPOPER IN (1007, 1008, 1009, 1010)\nAND sessions.status = 'paid'\nAND sessions.price > 0", "relation_name": "\"delta\".\"gold\".\"sankhya_cabecalho_vendas_sessoes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:00.276051Z", "completed_at": "2025-07-01T18:31:00.306534Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:00.327466Z", "completed_at": "2025-07-01T18:31:00.327466Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09841799736022949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_cabecalho_vendas_subs_clientes", "compiled": true, "compiled_code": "-- ERP - Vendas Cabe\u00e7alho (Subs. Clientes)\n\n\nselect\n    distinct\n    1 as CODEMP,\n    1 as CODEMPNEGOC,\n    case\n        when clients.foreign = true then 1\n        else erp_clientes.CODPARC\n    end as CODPARC,\n    26 as CODTIPVENDA,\n    'P' as TIPMOV,\n    1 as SERIENOTA,\n    0 as VLRDESCTOT,\n    subscription_invoices.amount_paid as VLRNOTA,\n    case\n        when plans.type = 'periodically_subscription' or (plans.type = 'subscription' and plans.id = 'br_85_sub') then 242002\n        when plans.type = 'discount_subscription' and (plans.id like '%plus%' or plans.id like '%addon%') then 242001\n        when plans.type = 'discount_subscription' and (plans.id like '%zenpremium%' or plans.id like '%membership%') then 242001\n        else null\n    end as CODCENCUS,\n    case\n        when plans.type = 'periodically_subscription' or (plans.type = 'subscription' and plans.id = 'br_85_sub') then 1010206\n        when plans.type = 'discount_subscription' and (plans.id like '%plus%' or plans.id like '%addon%') then 1010105\n        when plans.type = 'discount_subscription' and (plans.id like '%zenpremium%' or plans.id like '%membership%') then 1010105\n        else null\n    end as CODNAT,\n    cast(erp_tipo_operacao.CODTIPOPER as varchar) as CODTIPOPER,\n    subscription_invoices.charge_id as AD_CHID,\n    regexp_replace(clients.fiscal_id, '[^0-9]', '') as CGC_CPF\nfrom zenklub.core.clients as clients\nleft join zenklub.core.erp_clientes as erp_clientes on regexp_replace(clients.fiscal_id, '[^0-9]', '') = regexp_replace(erp_clientes.CGC_CPF, '[^0-9]', '') and erp_clientes.CGC_CPF is not null\nleft join zenklub.core.gmv_b2c_fixed_subscriptions as subscription_invoices on subscription_invoices.profile_id = clients._id\nleft join zenklub.dump.plans as plans on  plans.id = subscription_invoices.plan_id\ncross join zenklub.core.erp_tipo_operacao as erp_tipo_operacao\nwhere\n    subscription_invoices.status_transitions_paid_at >= date_add('month', -3, cast(current_date as timestamp) at time zone 'America/Sao_Paulo')\n    AND plans.type != 'corporate_subscription'\n    AND subscription_invoices.amount_paid > 0\n    AND erp_tipo_operacao.CODTIPOPER =\n        CASE\n            WHEN plans.type = 'B2C_subscription' THEN 1008\n            ELSE 1009\n        END", "relation_name": "\"delta\".\"gold\".\"sankhya_cabecalho_vendas_subs_clientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:00.432567Z", "completed_at": "2025-07-01T18:31:00.464926Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:00.490797Z", "completed_at": "2025-07-01T18:31:00.490797Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10977435111999512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_cabecalho_vendas_subs_profissionais", "compiled": true, "compiled_code": "-- Vendas Cabe\u00e7alho (Subs. Profissionais)\n\n\nselect\n    distinct\n    1 as codemp,\n    1 as codempnegoc,\n    case\n        when professionals.foreign = true then 1 \n        else erp_profissionais.codparc \n    end as codparc,\n    erp_tipo_operacao.CODTIPOPER AS codtipoper,\n    26 as codtipvenda,\n    concat(\n        -- Dia com zero \u00e0 esquerda\n        case \n            when day(erp_tipo_operacao.dhalter) < 10 then concat('0', cast(day(erp_tipo_operacao.dhalter) as varchar)) \n            else cast(day(erp_tipo_operacao.dhalter) as varchar) \n        end,\n        '/',\n        -- M\u00eas com zero \u00e0 esquerda\n        case \n            when month(erp_tipo_operacao.dhalter) < 10 then concat('0', cast(month(erp_tipo_operacao.dhalter) as varchar)) \n            else cast(month(erp_tipo_operacao.dhalter) as varchar) \n        end,\n        '/',\n        -- Ano\n        cast(year(erp_tipo_operacao.dhalter) as varchar),\n        ' ',\n        -- Hora com zero \u00e0 esquerda\n        case \n            when hour(erp_tipo_operacao.dhalter) < 10 then concat('0', cast(hour(erp_tipo_operacao.dhalter) as varchar)) \n            else cast(hour(erp_tipo_operacao.dhalter) as varchar) \n        end,\n        ':',\n        -- Minuto com zero \u00e0 esquerda\n        case \n            when minute(erp_tipo_operacao.dhalter) < 10 then concat('0', cast(minute(erp_tipo_operacao.dhalter) as varchar)) \n            else cast(minute(erp_tipo_operacao.dhalter) as varchar) \n        end,\n        ':',\n        -- Segundo com zero \u00e0 esquerda\n        case \n            when second(erp_tipo_operacao.dhalter) < 10 then concat('0', cast(second(erp_tipo_operacao.dhalter) as varchar)) \n            else cast(second(erp_tipo_operacao.dhalter) as varchar) \n        end\n    ) as dhtipoper,\n    concat(\n        -- Dia com zero \u00e0 esquerda\n        case \n            when day(status_transitions_paid_at) < 10 then concat('0', cast(day(status_transitions_paid_at) as varchar)) \n            else cast(day(status_transitions_paid_at) as varchar) \n        end,\n        '/',\n        -- M\u00eas com zero \u00e0 esquerda\n        case \n            when month(status_transitions_paid_at) < 10 then concat('0', cast(month(status_transitions_paid_at) as varchar)) \n            else cast(month(status_transitions_paid_at) as varchar) \n        end,\n        '/',\n        -- Ano\n        cast(year(status_transitions_paid_at) as varchar),\n        ' ',\n        -- Hora com zero \u00e0 esquerda\n        case \n            when hour(status_transitions_paid_at) < 10 then concat('0', cast(hour(status_transitions_paid_at) as varchar)) \n            else cast(hour(status_transitions_paid_at) as varchar) \n        end,\n        ':',\n        -- Minuto com zero \u00e0 esquerda\n        case \n            when minute(status_transitions_paid_at) < 10 then concat('0', cast(minute(status_transitions_paid_at) as varchar)) \n            else cast(minute(status_transitions_paid_at) as varchar) \n        end,\n        ':',\n        -- Segundo com zero \u00e0 esquerda\n        case \n            when second(status_transitions_paid_at) < 10 then concat('0', cast(second(status_transitions_paid_at) as varchar)) \n            else cast(second(status_transitions_paid_at) as varchar) \n        end\n    ) as dtalter,\n    'P' as tipmov,\n    1 as serienota,\n    0 as vlrdesctot,\n    gmv_fixed_professionals.amount_paid as vlrnota,\n    243001 as codcencus,\n    1010106 as codnat, \n    gmv_fixed_professionals.id as ad_chid,\n    'L' as statusnota,\n    'N' as irfretido,\n    'N' as issretido,\n    case\n        when professional_person.type = 'natural' then replace(professional_person.fiscalid, '''', '')\n        else professional_person.businessfiscalid\n    end as cgc_cpf\nfrom zenklub.core.professionals as professionals\nleft join zenklub.core.erp_profissionais as erp_profissionais on professionals._id = erp_profissionais.professional_id\nleft join zenklub.core.gmv_fixed_professionals as gmv_fixed_professionals on professionals._id = gmv_fixed_professionals.professional_id\nleft join zenklub.core.lk_professional_person as professional_person on professionals._id = professional_person.professional_id\nleft join zenklub.dump.professional_payment_account as professional_payment_account on professionals._id = professional_payment_account.professional_id\ncross join zenklub.core.erp_tipo_operacao as erp_tipo_operacao\nwhere status_transitions_paid_at >= date_add('month', -3, cast(current_date as timestamp) at time zone 'America/Sao_Paulo')\n    and is_current = true\n    AND professional_payment_account.validation_status = 'validated'\n        AND erp_tipo_operacao.CODTIPOPER = 1010\n        AND gmv_fixed_professionals.gmv > 0", "relation_name": "\"delta\".\"gold\".\"sankhya_cabecalho_vendas_subs_profissionais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:00.590562Z", "completed_at": "2025-07-01T18:31:00.615740Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:00.642213Z", "completed_at": "2025-07-01T18:31:00.642213Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09745097160339355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_erp_clientes_sessions", "compiled": true, "compiled_code": "-- ERP - Clientes\n\n\nselect distinct\n    cast(null as varchar) as codparc,\n    's' as ativo,\n    's' as cliente,\n    tsicid.codcid as id_externo_codcid,\n    's' as fornecedor,\n    'F' as tippessoa,\n    regexp_replace(fiscal_id, '[^0-9xX]', '') as cgc_cpf,\n    clientes.email as email,\n    'ISENTO' as identinscestad,\n    clientes.display_name as nomeparc,\n    clientes.display_name as razaosocial,\n    clientes.postal_code as cpl_cepentrega,\n    clientes.address,\n    clientes.address_number as cpl_numentrega,\n    clientes.address_complement as complemento,\n    clientes.city as cidade,\n    clientes.state as estado,\n    clientes._id as id_usuario,\n    clientes.foreign as estrangeiro\nfrom zenklub.core.clients as clientes\nleft join zenklub.sankhya.tsicid as tsicid on tsicid.codmunfis = try_cast(clientes.ibgecode as int)\nleft join zenklub.core.sessions as sessions on clientes._id = sessions.profileid\nwhere\n    -- verifica se o cliente teve pagamento de alguma sess\u00e3o no per\u00edodo\n    sessions.paymentdate >= cast(date_add('day', -90, current_date) as timestamp)\n    and sessions.paymentdate < cast(date_add('day', 1, current_date) as timestamp)\n    and sessions.status = 'paid'\n    and sessions.price > 0\n    and (clientes.foreign is null or clientes.foreign = false)", "relation_name": "\"delta\".\"gold\".\"sankhya_erp_clientes_sessions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:00.743485Z", "completed_at": "2025-07-01T18:31:00.781412Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:00.805656Z", "completed_at": "2025-07-01T18:31:00.805656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11356544494628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_erp_clientes_subscriptions", "compiled": true, "compiled_code": "-- ERP - Clientes\n\n\nselect distinct\n    cast(null as varchar) as codparc,\n    's' as ativo,\n    's' as cliente,\n    tsicid.codcid as id_externo_codcid,\n    's' as fornecedor,\n    'F' as tippessoa,\n    regexp_replace(fiscal_id, '[^0-9xX]', '') as cgc_cpf,\n    clientes.email as email,\n    'ISENTO' as identinscestad,\n    clientes.display_name as nomeparc,\n    clientes.display_name as razaosocial,\n    clientes.postal_code as cpl_cepentrega,\n    clientes.address,\n    clientes.address_number as cpl_numentrega,\n    clientes.address_complement as complemento,\n    clientes.city as cidade,\n    clientes.state as estado,\n    clientes._id as id_usuario,\n    clientes.foreign as estrangeiro\nfrom zenklub.core.clients as clientes\nleft join zenklub.core.gmv_b2c_fixed_subscriptions as subscription_invoices on subscription_invoices.profile_id = clientes._id\nleft join zenklub.sankhya.tsicid as tsicid on tsicid.codmunfis = cast(clientes.ibgecode as int)\nleft join zenklub.dump.plans as plans on plans.id = subscription_invoices.plan_id\nwhere\n    -- verifica se o cliente teve algum pagamento de subscri\u00e7\u00e3o b2c no per\u00edodo\n    subscription_invoices.created >= cast(date_add('day', -90, current_date) as timestamp)\n    and subscription_invoices.created < cast(date_add('day', 1, current_date) as timestamp)\n    and plans.type != 'corporate_subscription'\n    and subscription_invoices.amount_paid > 0\n    and (clientes.foreign is null or clientes.foreign = false)", "relation_name": "\"delta\".\"gold\".\"sankhya_erp_clientes_subscriptions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:00.912117Z", "completed_at": "2025-07-01T18:31:00.942937Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:00.968322Z", "completed_at": "2025-07-01T18:31:00.968863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1092672348022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_erp_profissionais", "compiled": true, "compiled_code": "-- ERP - Profissionais\n\n\nselect distinct \n    cast(null as varchar) as codparc,\n    's' as ativo,\n    's' as cliente,\n    tsicid.codcid as id_externo_codcid,\n    's' as fornecedor,\n    'J' as tippessoa,\n    regexp_replace(if(lk_professional_person.type = 'natural', lk_professional_person.fiscalid, lk_professional_person.businessfiscalid), '[^0-9]', '') as cgc_cpf,\n    professionals.email as email,\n    'ISENTO' as identinscestad,\n    if(lk_professional_person.type = 'natural', professionals.display_name, lk_professional_person.socialreason) as nomeparc,\n    if(lk_professional_person.type = 'natural', professionals.display_name, lk_professional_person.socialreason) as razaosocial,\n    regexp_replace(lk_professional_person.postalcode, '-', '') as cpl_cepentrega,\n    lk_professional_person.addressnumber as cpl_numentrega,\n    lk_professional_person.address,\n    lk_professional_person.addresscomplement as complemento,\n    professional_payment_account.bank_code as codbco,\n    professional_payment_account.agency as codage,\n    case\n        when professional_payment_account.account_digit is null then professional_payment_account.account \n        else concat(professional_payment_account.account, professional_payment_account.account_digit) \n    end as codctabco,\n    professional_payment_account.pix_key_raw as ad_chave_pix,\n    case\n        when regexp_like(professional_payment_account.pix_key_raw, '^[+0-9]{1,2}[0-9]{10,11}$') then 1 -- Telefone (com ou sem c\u00f3digo de pa\u00eds)\n        when regexp_like(professional_payment_account.pix_key_raw, '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$') then 2 -- Email\n        when regexp_like(professional_payment_account.pix_key_raw, '^[0-9]{11}$') then 3 -- CPF (11 d\u00edgitos)\n        when regexp_like(professional_payment_account.pix_key_raw, '^[0-9]{14}$') then 3 -- CNPJ (14 d\u00edgitos)\n        else 4 -- Outro formato\n    end as ad_tipo_chave_pix,\n    lk_professional_person.professional_id as id_usuario,\n    lk_professional_person.city as cidade,\n    lk_professional_person.state as estado\nfrom zenklub.core.professionals as professionals\nleft join zenklub.core.lk_professional_person as lk_professional_person on lk_professional_person.professional_id = professionals._id\nleft join zenklub.dump.professional_payment_account as professional_payment_account  on professional_payment_account.professional_id = professionals._id\nleft join zenklub.sankhya.tsicid as tsicid  on cast(tsicid.codmunfis as varchar) = professionals.ibgecode\nleft join zenklub.core.sessions as sessions on professionals._id = sessions.professionalid\nwhere\ndate(sessions.day at time zone 'America/Sao_Paulo') <= current_date\nand date(sessions.day at time zone 'America/Sao_Paulo') >= date_add('day', -90, current_date)\nand lk_professional_person.is_current = true\nand professional_payment_account.validation_status = 'validated'\nand professionals.email <> 'arletepin63@gmail.com'\nand sessions.status = 'paid'\nand sessions.originalprice > 0", "relation_name": "\"delta\".\"gold\".\"sankhya_erp_profissionais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:01.059626Z", "completed_at": "2025-07-01T18:31:01.087155Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:01.108119Z", "completed_at": "2025-07-01T18:31:01.108119Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09138727188110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_itens_compras_b2b", "compiled": true, "compiled_code": "-- ERP - Pagamentos B2B Itens\n\n\nwith periodo_faturamento as (\n    SELECT\n    current_date AS today,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -2, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n        ELSE DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n    END AS start_date,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '22' DAY\n        ELSE DATE_TRUNC('month', current_date) + INTERVAL '22' DAY\n    END AS end_date\n),\n base_query as (\nselect distinct\n    sessions.day as sessions_date,\n    dim_professional.id as professional_id,\n    case\n\t    when dim_professional.main_type = 'psychologist' then 26\n        when dim_professional.main_type = 'psychoanalyst' then 30\n        when dim_professional.main_type = 'therapist' then 24\n        when dim_professional.main_type = 'coach' then 25\n        when dim_professional.main_type = 'nutritionist' then 142\n        when dim_professional.main_type = 'psychiatrist' then 26\n        else -1\n    end as CODPROD,\n    erp_profissionais.CODPARC as CODPARC,\n    'UN' as CODVOL,\n    '0' as PERCDESC,\n    '1' as QTDNEG,\n    'S' as USOPROD,\n    sessions.pgto_b2b_pj as VLRUNIT\nfrom zenklub.core.sessions as sessions\njoin periodo_faturamento on CAST(sessions.day AT TIME ZONE 'America/Sao_Paulo' AS DATE) BETWEEN start_date AND end_date\nleft join zenklub.modelo_2023.dim_professional as dim_professional on dim_professional.id = sessions.professionalId\nleft join zenklub.core.erp_profissionais as erp_profissionais on erp_profissionais.professional_person_id = sessions.professionalId\nwhere\nsessions.professionalId is not null\nand sessions.status = 'paid'\n--and sessions.pgto_b2b_pj > 0\n),\nranked_query as (\nselect\n    professional_id,\n    CODPROD,\n    CODPARC,\n    CODVOL,\n    PERCDESC,\n    QTDNEG,\n    USOPROD,\n    CAST( min(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_first_session,\n    CAST( max(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_last_session,\n    sum(VLRUNIT) over (partition by professional_id) as VLRUNIT,\n    row_number() over (partition by professional_id) as rn\nfrom base_query\ngroup by professional_id,CODPROD,CODPARC,CODVOL,PERCDESC,QTDNEG,USOPROD,VLRUNIT,sessions_date\n)\n\nselect * from ranked_query where VLRUNIT > 0 and rn = 1", "relation_name": "\"delta\".\"gold\".\"sankhya_itens_compras_b2b\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:01.210155Z", "completed_at": "2025-07-01T18:31:01.245069Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:01.262343Z", "completed_at": "2025-07-01T18:31:01.262343Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10402607917785645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_itens_compras_b2c", "compiled": true, "compiled_code": "-- ERP - Pagamentos B2C Itens\n\n\nwith periodo_faturamento as (\n    SELECT\n    current_date AS today,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -2, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n        ELSE DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n    END AS start_date,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '22' DAY\n        ELSE DATE_TRUNC('month', current_date) + INTERVAL '22' DAY\n    END AS end_date\n),\nbase_query as (\nselect distinct\n    sessions.day as sessions_date,\n    dim_professional.id as professional_id,\n    case\n\t    when dim_professional.main_type = 'psychologist' then 26\n        when dim_professional.main_type = 'psychoanalyst' then 30\n        when dim_professional.main_type = 'therapist' then 24\n        when dim_professional.main_type = 'coach' then 25\n        when dim_professional.main_type = 'nutritionist' then 142\n        when dim_professional.main_type = 'psychiatrist' then 26\n        else -1\n    end as CODPROD,\n    erp_profissionais.CODPARC as CODPARC,\n    'UN' as CODVOL,\n    '0' as PERCDESC,\n    '1' as QTDNEG,\n    'S' as USOPROD,\n    case\n\t    when new_b2_type = 'B2B' then 0\n        when new_b2_type = 'B2C' and (case\n\t        \t\t\t\t\t\t\twhen sessions.day >= cast('2023-09-24' as date) then new_negative_b2c_take\n                                        else negative_b2c_take\n                                      end) = 0  then professionalCompensation\n        when new_b2_type = 'B2C'  and new_b2c_paid_value >= 0  then professionalCompensation -  (case\n                                                                                                  when sessions.day >= cast('2023-09-24' as date) then new_negative_b2c_take\n                                                                                                  else negative_b2c_take\n                                                                                                 end)\n       else null\n    end as VLRUNIT\nfrom zenklub.core.sessions as sessions\njoin periodo_faturamento on CAST(sessions.day AT TIME ZONE 'America/Sao_Paulo' AS DATE) BETWEEN start_date AND end_date\nleft join zenklub.modelo_2023.dim_professional as dim_professional on dim_professional.id = sessions.professionalId\nleft join zenklub.core.erp_profissionais as erp_profissionais on erp_profissionais.professional_person_id = sessions.professionalId\ncross join zenklub.core.erp_tipo_operacao as erp_tipo_operacao\nwhere\n sessions.professionalId is not null\nand sessions.status = 'paid'\n),\n\nranked_query as (\nselect\n  professional_id,\n  CODPROD,\n  CODPARC,\n  CODVOL,\n  PERCDESC,\n  QTDNEG,\n  USOPROD,\n  CAST( min(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_first_session,\n  CAST( max(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_last_session,\n  sum(VLRUNIT) over (partition by professional_id) as VLRUNIT,\n  row_number() over (partition by professional_id) as rn\nfrom base_query\ngroup by professional_id, CODPROD, CODPARC, CODVOL, PERCDESC, QTDNEG, USOPROD, VLRUNIT, sessions_date\n\n)\n\nselect * from ranked_query where VLRUNIT > 0 and rn = 1", "relation_name": "\"delta\".\"gold\".\"sankhya_itens_compras_b2c\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:01.354815Z", "completed_at": "2025-07-01T18:31:01.388118Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:01.412007Z", "completed_at": "2025-07-01T18:31:01.412007Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10224676132202148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_itens_compras_take", "compiled": true, "compiled_code": "-- ERP - Faturamento Take Itens\n\n\nwith periodo_faturamento as (\n    SELECT\n    current_date AS today,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -2, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n        ELSE DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '23' DAY\n    END AS start_date,\n    CASE\n        WHEN EXTRACT(DAY FROM current_date) < 24\n        THEN DATE_ADD('month', -1, DATE_TRUNC('month', current_date)) + INTERVAL '22' DAY\n        ELSE DATE_TRUNC('month', current_date) + INTERVAL '22' DAY\n    END AS end_date\n),\n base_query as (\n    select distinct\n        sessions.event_id as event_id,\n        sessions.day as sessions_date,\n        dim_professional.id as professional_id,\n        '18' as codprod,\n        erp_profissionais.codparc as codparc,\n        'UN' as codvol,\n        '0' as percdesc,\n        '1' as qtdneg,\n        '0' as basesubstit,\n        '0' as codcfo,\n        '0' as codvend,\n        '0' as vlrdesc,\n        '0' as vlricms,\n        '0' as vlripi,\n        '0' as vlrsubst,\n        'S' as usoprod,\n        case\n            when new_b2_type = 'B2B' then 0\n            when new_b2_type = 'B2C' and\n                (case\n                    when day >= date '2023-09-24' then new_negative_b2c_take\n                    else negative_b2c_take\n                end) = 0\n            then sessions.session_processing_fee +\n                (case\n                    when day >= date '2023-09-24' then new_take_b2c\n                    else take_b2c\n                end)\n            when (case\n                    when day >= date '2023-09-24' then new_negative_b2c_take\n                    else negative_b2c_take\n                end) <> 0\n            then (case\n                    when day >= date '2023-09-24' then new_take_b2c\n                    else take_b2c\n                end)\n            else null\n        end as vlrunit,\n        day\n    from zenklub.core.sessions sessions\n    join periodo_faturamento on CAST(sessions.day AT TIME ZONE 'America/Sao_Paulo' AS DATE) BETWEEN start_date AND end_date\n    left join zenklub.modelo_2023.dim_professional dim_professional on dim_professional.id = sessions.professionalid\n    left join zenklub.core.erp_profissionais erp_profissionais on erp_profissionais.professional_person_id = sessions.professionalid\n    where\n     sessions.professionalid is not null\n    and sessions.status = 'paid'\n),\n\nranked_query as (\nselect\n    professional_id,\n    codprod,\n    codparc,\n    codvol,\n    percdesc,\n    qtdneg,\n    basesubstit,\n    codcfo,\n    codvend,\n    vlrdesc,\n    vlricms,\n    vlripi,\n    vlrsubst,\n    usoprod,\n    CAST( min(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_first_session,\n    CAST( max(sessions_date) over (partition by professional_id) AT TIME ZONE 'America/Sao_Paulo' AS DATE) as date_last_session,\n    sum(vlrunit) over (partition by professional_id) as vlrunit,\n    row_number() over (partition by professional_id) as rn\nfrom base_query\ngroup by professional_id,codprod,codparc,codvol,percdesc,qtdneg,basesubstit,codcfo,\ncodvend,vlrdesc,vlricms,vlripi,vlrsubst,usoprod,vlrunit,sessions_date\n)\n\nselect * from ranked_query where VLRUNIT > 0 and rn = 1", "relation_name": "\"delta\".\"gold\".\"sankhya_itens_compras_take\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:01.511743Z", "completed_at": "2025-07-01T18:31:01.544945Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:01.569757Z", "completed_at": "2025-07-01T18:31:01.569757Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10775017738342285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_itens_vendas_sessoes", "compiled": true, "compiled_code": "-- Migrar ERP - Vendas Itens (Sess\u00f5es)\n\n\nselect DISTINCT\n    case \n        when professionals.main_type in ('psychoanalyst', 'psychologist', 'psychologist<h1>PacificSec</h1>') then 22\n        when professionals.main_type in ('coach', 'coach<h1>PacificSec</h1>') then 19\n        when professionals.main_type = 'nutritionist' then 142\n        else 150\n    end as codprod,\n    cast(null as varchar) as percdesc,\n    'UN' as codvol,\n    1 as qtdneg,\n    sessions.price as vlrtot,\n    sessions.price as vlrunit,\n    case\n        when sessions.new_session_type in ('employee', 'coparticipation') and sessions.new_b2_type = 'B2B' and sessions.price > 0 then 'B2B Paid By User Session'\n        when sessions.new_session_type = 'credit'  and sessions.new_b2_type = 'B2C' then 'B2C Plano Mensal'\n        when sessions.new_session_type != 'credit'  and sessions.new_b2_type = 'B2C' then 'B2C Session'\n    end as tipo_de_sessao_finance,\n    0 as basesubstit,\n    0 as codcfo,\n    0 as codvend,\n    0 as vlrdesc,\n    0 as vlricms,\n    0 as vlripi,\n    0 as vlrsubst,\n    cast(null as varchar) as baseiss,\n    cast(null as varchar) as codtrib,\n    cast(null as varchar) as observacao,\n    cast(null as varchar) as vlriss,\n    'S' as usoprod,\n    sessions.event_id as id_sessao,\n    sessions.chargeid as ad_chid\nfrom zenklub.core.sessions sessions\nleft join zenklub.core.clients as clients on clients._id = sessions.profileId\nleft join zenklub.core.professionals as professionals on professionals._id = sessions.professionalId\nleft join zenklub.core.erp_clientes as erp_clientes on (regexp_replace(clients.fiscal_id,'[^0-9xX]','') = regexp_replace(erp_clientes.CGC_CPF,'[^0-9xX]','') and erp_clientes.CGC_CPF is not null)\ncross join zenklub.core.erp_tipo_operacao as erp_tipo_operacao\nwhere\nsessions.paymentDate >= date_add('month', -3, cast(current_date as timestamp) at time zone 'America/Sao_Paulo')\nAND sessions.chargeId IS NOT NULL\nAND erp_tipo_operacao.CODTIPOPER IN (1007, 1008, 1009, 1010)\nAND sessions.status = 'paid'\nAND sessions.price > 0", "relation_name": "\"delta\".\"gold\".\"sankhya_itens_vendas_sessoes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:01.669261Z", "completed_at": "2025-07-01T18:31:01.701109Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:01.729912Z", "completed_at": "2025-07-01T18:31:01.729912Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10992956161499023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_itens_vendas_subs_clientes", "compiled": true, "compiled_code": "-- ERP - Vendas Itens (Subs. Clientes)\n\n\nselect\n    distinct\n\tcast(null as varchar) as PERCDESC,\n    case \n\t    when plans.type = 'periodically_subscription' or ( plans.type= 'subscription' and plans.id = 'br_85_sub') then 22\n        else 18 \n    end as CODPROD ,\n    'UN' as CODVOL,\n    1 as QTDNEG,\n    subscription_invoices.amount_paid as VLRTOT,\n    subscription_invoices.amount_paid as VLRUNIT,\n    case\n\t    when plans.type = 'periodically_subscription' or (plans.type = 'subscription' and plans.id = 'br_85_sub') then 'B2C Plano Mensal'\n        when plans.type = 'discount_subscription' and (plans.id like '%plus%' or plans.id like '%addon') then 'B2C Subscription'\n        when plans.type = 'discount_subscription' and (plans.id like '%zenpremium%' OR plans.id like '%membership%') then 'B2C Subscription'\n        else 'UNKNOWN'\n    end as TIPO_PLANO,\n    case when clients.foreign = true  then 1 else erp_clientes.CODPARC end as CODPARC,\n    subscription_invoices.charge_id as AD_CHID\nfrom zenklub.core.clients as clients\nleft join zenklub.core.erp_clientes as erp_clientes on (regexp_replace(clients.fiscal_id,'[^0-9xX]','') = regexp_replace(erp_clientes.CGC_CPF,'[^0-9xX]','') and erp_clientes.CGC_CPF is not null)\nleft join zenklub.core.gmv_b2c_fixed_subscriptions as subscription_invoices on subscription_invoices.profile_id = clients._id\nleft join zenklub.dump.plans as plans on plans.id = subscription_invoices.plan_id\nleft join zenklub.dump.subscriptions as subscriptions on subscription_invoices.subscription_id = subscriptions.id\ncross join zenklub.core.erp_tipo_operacao as erp_tipo_operacao\nwhere\n        subscription_invoices.status_transitions_paid_at >= date_add('month', -3, cast(current_date as timestamp) at time zone 'America/Sao_Paulo')\n    AND plans.type != 'corporate_subscription'\n    AND subscription_invoices.amount_paid > 0\n    AND erp_tipo_operacao.CODTIPOPER =\n        CASE\n            WHEN plans.type = 'B2C_subscription' THEN 1008\n            ELSE 1009\n        END", "relation_name": "\"delta\".\"gold\".\"sankhya_itens_vendas_subs_clientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:01.826800Z", "completed_at": "2025-07-01T18:31:01.866012Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:01.894613Z", "completed_at": "2025-07-01T18:31:01.894613Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12172627449035645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sankhya_itens_vendas_subs_profissionais", "compiled": true, "compiled_code": "-- ERP - Vendas Itens (Subs. Profissionais)\n\n\n\nselect distinct\n\tcase\n\t\twhen (case\n                when plans.type = 'B2C_subscription' then 'B2C Plano Mensal'\n                when plans.type = 'zenpremium' then 'B2C Subscription'\n                when plans.type = 'zenpremium_plus' then 'B2C Subscription'\n                else 'UNKNOWN'\n              end) = 'B2C Plano Mensal' then 22\n      else 18\n    end as CODPROD,\n    'UN' as CODVOL,\n    0 as PERCDESC,\n    1 as QTDNEG,\n    concat(\n    -- Dia com zero \u00e0 esquerda\n    case \n        when extract(day from gmv_fixed_professionals.status_transitions_paid_at) < 10  then concat('0', cast(extract(day from gmv_fixed_professionals.status_transitions_paid_at) as varchar)) \n        else cast(extract(day from gmv_fixed_professionals.status_transitions_paid_at) as varchar) \n    end,\n    '/',\n    -- M\u00eas com zero \u00e0 esquerda\n    case \n        when extract(month from gmv_fixed_professionals.status_transitions_paid_at) < 10  then CONCAT('0', cast(extract(month from gmv_fixed_professionals.status_transitions_paid_at) as varchar)) \n        else cast(extract(month from gmv_fixed_professionals.status_transitions_paid_at) as varchar) \n    end,\n    '/',\n    -- Ano\n    cast(extract(YEAR from gmv_fixed_professionals.status_transitions_paid_at) as varchar),\n    ' ',\n    -- Hora com zero \u00e0 esquerda\n    case \n        when extract(hour from gmv_fixed_professionals.status_transitions_paid_at) < 10  then CONCAT('0', cast(extract(hour from gmv_fixed_professionals.status_transitions_paid_at) as varchar)) \n        else cast(extract(hour from gmv_fixed_professionals.status_transitions_paid_at) as varchar) \n    end,\n    ':',\n    -- Minuto com zero \u00e0 esquerda\n    case \n        when extract(minute from gmv_fixed_professionals.status_transitions_paid_at) < 10  then CONCAT('0', cast(extract(minute from gmv_fixed_professionals.status_transitions_paid_at) as varchar)) \n        else cast(extract(minute from gmv_fixed_professionals.status_transitions_paid_at) as varchar) \n    end,\n    ':',\n    -- Segundo com zero \u00e0 esquerda\n    case \n        when extract(second from gmv_fixed_professionals.status_transitions_paid_at) < 10 then CONCAT('0', cast(extract(second from gmv_fixed_professionals.status_transitions_paid_at) as varchar)) \n        else cast(extract(second from gmv_fixed_professionals.status_transitions_paid_at) as varchar) \n    end\n    ) as DTALTER,\n    gmv_fixed_professionals.amount_paid as VLRTOT,\n    gmv_fixed_professionals.amount_paid as VLRUNIT,\n    0 as BASESUBSTIT,\n    0 as CODCFO,\n    0 as CODVend,\n    0 as VLRDESC,\n    0 as VLRICMS,\n    0 as VLRIPI,\n    0 as VLRSUBST,\n    'S' as USOPROD,\n    case \n\t    when professionals.foreign then 1 \n\t    else erp_profissionais.CODPARC \n\tend as CODPARC, \n    gmv_fixed_professionals.id AS AD_CHID\nfrom  zenklub.core.professionals as professionals\nleft join  zenklub.core.gmv_fixed_professionals as gmv_fixed_professionals  on gmv_fixed_professionals.professional_id = professionals._id\nleft join  zenklub.core.lk_professional_person as lk_professional_person on  lk_professional_person.professional_id = professionals._id\nleft join  zenklub.dump.professional_payment_account as professional_payment_account on  professional_payment_account.professional_id = professionals._id\nleft join  zenklub.dump.plans as plans  on plans.id = gmv_fixed_professionals.plan_id\nleft join  zenklub.dump.subscriptions as subscriptions  on gmv_fixed_professionals.subscription_id = subscriptions.id\nleft join  zenklub.core.erp_profissionais as erp_profissionais  on erp_profissionais.professional_person_id = lk_professional_person.id\ncross join zenklub.core.erp_tipo_operacao as erp_tipo_operacao\nwhere status_transitions_paid_at >= date_add('month', -3, cast(current_date as timestamp) at time zone 'America/Sao_Paulo')\nand gmv_fixed_professionals.gmv > 0\nand erp_tipo_operacao.CODTIPOPER = 1010\nand professional_payment_account.validation_status = 'validated'  \nand lk_professional_person.is_current = true", "relation_name": "\"delta\".\"gold\".\"sankhya_itens_vendas_subs_profissionais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:02.013116Z", "completed_at": "2025-07-01T18:31:02.045069Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:02.062662Z", "completed_at": "2025-07-01T18:31:02.062662Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10957813262939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_amil_atendimento", "compiled": true, "compiled_code": "\n\nWITH atendimentos_t1 AS (\n    SELECT\n        cast(\n            CASE\n                WHEN \"data\" LIKE '%/%' THEN date_parse(\"data\", '%d/%m/%Y %H:%i:%s')\n                WHEN \"data\" LIKE '%-%' THEN date_parse(\"data\", '%Y-%m-%d %H:%i:%s')\n            END as timestamp(3) with time zone\n        ) AS data_atendimento_fila,\n        \"data\" AS data_atendimento_fila_original,\n        cast(\n            CASE\n                WHEN \"data hora inicio atend\" LIKE '%/%' THEN date_parse(\"data hora inicio atend\", '%d/%m/%Y %H:%i:%s')\n                WHEN \"data hora inicio atend\" LIKE '%-%' THEN date_parse(\"data hora inicio atend\", '%Y-%m-%d %H:%i:%s')\n            END as timestamp(3) with time zone\n        ) AS data_atendimento,  -- in\u00edcio\n        \"data\" AS data_atendimento_original,   -- in\u00edcio\n        cast(\n            CASE\n                WHEN \"data atend fim\" LIKE '%/%' THEN date_parse(\"data atend fim\", '%d/%m/%Y %H:%i:%s')\n                WHEN \"data atend fim\" LIKE '%-%' THEN date_parse(\"data atend fim\", '%Y-%m-%d %H:%i:%s')\n            END as timestamp(3) with time zone\n        ) AS data_atendimento_fim,\n        \"data atend fim\" AS data_atendimento_fim_original,\n        cast(case\n            when especialidade like 'PSICOLOGIA %' then concat(\"atendimento (id)\", '2')\n            when especialidade like '%CLINICO GERAL%' then concat(\"atendimento (id)\", '1')\n            when especialidade like 'ENFERMEIRO%' then concat(\"atendimento (id)\", '3')\n            else concat(\"atendimento (id)\", '9')\n        end AS bigint) AS id_atendimento,\n        cast(\"atendimento (id)\" as bigint) as id_referencia,\n        \"unidade de atendimento\" AS unidade_atendimento,\n        case\n            when especialidade like 'PSICOLOGIA %' then 'Psic\u00f3logo'\n            when especialidade like '%CLINICO GERAL%' then 'M\u00e9dico'\n            when especialidade like 'ENFERMEIRO%' then 'Enfermeiro'\n            when especialidade like '%PEDIATRIA%' then 'Pediatra'\n        end AS tipo_profissional,\n        case\n            when especialidade like 'PSICOLOGIA %' then 'Psicologia'\n            when especialidade like '%CLINICO GERAL%' OR especialidade like '%PEDIATRIA%' then 'PA'\n            when especialidade like 'ENFERMEIRO%' then 'Enfermagem'\n        end AS produto,\n        \"nome do profissional\" AS nome_profissional,\n        regexp_replace(\"cpf profissional\", '[^0-9]', '') AS cpf_profissional,\n        split(\"conselho profissional\",'-', 2)[1] AS tipo_conselho,\n        split(split(\"conselho profissional\",'-', 2)[2],' ')[1] AS regiao_conselho,\n        try_cast(split(split(\"conselho profissional\",'-', 2)[2],' ')[2] as bigint) as numero_conselho,\n        \"conselho profissional\" as conselho_profissional,\n        case\n            when especialidade like 'PSICOLOGIA %' then 'Psicologia Cl\u00ednica'\n            when especialidade like '%CLINICO GERAL%' then 'Cl\u00ednica Geral'\n            when especialidade like 'ENFERMEIRO%' then 'Enfermagem'\n            when especialidade like '%PEDIATRIA%' then 'Pediatria'\n        end as especialidade,\n        \"mo paciente\" AS id_paciente,\n        \"nome paciente\" AS nome_paciente,\n        try_cast(\"idade paciente\" as integer) AS idade_paciente,\n        \"operadora paciente\" AS operadora_paciente,\n        \"status autoriza\u00e7\u00e3o\" AS status_autorizacao,\n        \"senha autoriza\u00e7\u00e3o\" AS senha_autorizacao,\n        \"mensagem autoriza\u00e7\u00e3o\" AS mensagem_autorizacao,\n        \"status confirma\u00e7\u00e3o\" AS status_confirmacao,\n        case\n            when lower(\"atendimento completo\") in ('completo', 'com sucesso') then 'Realizado'\n            when lower(\"atendimento completo\") in ('desist\u00eancia') then 'No show paciente'\n            when lower(\"atendimento completo\") in ('incompleto', 'sem sucesso') then 'Inv\u00e1lido'\n            else 'Pendente'\n        end AS status_atendimento,\n        \"atendimento completo\" as status_amil,\n        \"especialidade encaminhamento\" AS encaminhamento_especialidade,\n        \"desfecho\" AS desfecho,\n        \"usu\u00e1rio respons\u00e1vel retroativo cast\" AS usuario_retroativo,\n        \"lista de cids selecionados\" as lista_cid,\n        \"atestado fornecido pelo m\u00e9dico\" as atestado_fornecido,\n        \"quantidade de dias concedidos\" as atestado_dias_concedidos,\n        ROW_NUMBER() OVER (PARTITION BY \"atendimento (id)\", especialidade) AS rnk\n    FROM\n        \"delta\".\"bronze\".\"raw_amil_atendimento\"\n    WHERE\n        1=1\n        -- \"nome do profissional\" IS NOT NULL\n        -- AND \"atendimento completo\" = 'Com Sucesso'\n)\n\nSELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY id_referencia, especialidade order by rnk desc) AS rnk_inverso\nFROM\n    atendimentos_t1", "relation_name": "\"delta\".\"bronze\".\"stg_amil_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:02.145604Z", "completed_at": "2025-07-01T18:31:02.181842Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:02.203367Z", "completed_at": "2025-07-01T18:31:02.203367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09537792205810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_amil_profissional", "compiled": true, "compiled_code": "\n\nselect \n\t\"nome doctor id\" as nome_profissional,\n\t\"nome amil\" as nome_profissional_amil,\n\t\"cpf\" as cpf_profissional,\n\t\"id\" as id_profissional,\n\t\"crm\" tipo_conselho,\n\t\"n\u00famero crm\" as numero_conselho,\n\t\"n\u00famero crm amil\" as numero_conselho_amil\nfrom \"delta\".\"bronze\".\"raw_sharepoint_doctorlist\"", "relation_name": "\"delta\".\"bronze\".\"stg_amil_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:02.299395Z", "completed_at": "2025-07-01T18:31:02.314393Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:02.346646Z", "completed_at": "2025-07-01T18:31:02.346646Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09506392478942871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_amil_profissional_novo_modelo_pagamento", "compiled": true, "compiled_code": "\n\nselect\n    trim(\"Nome\") as nome_profissional,\n    regexp_replace(\"CPF\", '[^0-9]', '') AS cpf_profissional,\n    cast(\n        CASE\n            WHEN \"Data de Entrada\" LIKE '%/%' THEN date_parse(\"Data de Entrada\", '%d/%m/%Y %H:%i:%s')\n            WHEN \"Data de Entrada\" LIKE '%-%' THEN date_parse(\"Data de Entrada\", '%Y-%m-%d %H:%i:%s')\n            END as timestamp(3) with time zone\n    ) AS data_entrada\nfrom \"delta\".\"bronze\".\"raw_sharepoint_profissional_novo_modelo_pagamento\"", "relation_name": "\"delta\".\"bronze\".\"stg_amil_profissional_novo_modelo_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:02.435050Z", "completed_at": "2025-07-01T18:31:02.456983Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:02.473159Z", "completed_at": "2025-07-01T18:31:02.473159Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0789191722869873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_aux_clinica_autoritativa", "compiled": true, "compiled_code": "\n\n\nSELECT\n    cast(null as bigint) as id_clinica_hubspot,\n\tplataforma,\n\tid_clinica,\n\tnome_clinica,\n\tbusiness_unit as bu,\n\tcast(null as boolean) as flag_permite_comunicacao_braze,\n\tcast(null as boolean) as flag_permite_comunicacao_insider,\n\tnow() as data_atualizacao,\n\tcurrent_date as data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"clinicas_aux_autoritativa\"", "relation_name": "\"delta\".\"bronze\".\"stg_aux_clinica_autoritativa\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:02.579419Z", "completed_at": "2025-07-01T18:31:02.616580Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:02.646562Z", "completed_at": "2025-07-01T18:31:02.646562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12602591514587402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_appointment_threshold", "compiled": true, "compiled_code": "\n\nwith limite_geral as (\nSELECT \n\tidappointment_threshold as id_limite_atendimento,\n\tidclinic as id_clinica,\n\tperiodicity as periodicidade_limite_atendimento,\n\tquantity as quantidade_limite_atendimento,\n\tappointment_threshold_type as tipo_limite_atendimento\nFROM mysql_cnx.\"connectdoctor-prod\".appointment_threshold\n)\nSELECT\n\tid_clinica,\n\tARRAY_AGG(\n\t\tCAST(\n\t\t\tROW(\n\t\t\t\t\tperiodicidade_limite_atendimento,\n\t\t\t\t\tquantidade_limite_atendimento,\n\t\t\t\t\ttipo_limite_atendimento,\n\t\t\t\t\tid_limite_atendimento\n\t            ) AS ROW(\n\t                periodicidade_limite_atendimento VARCHAR,\n\t                quantidade_limite_atendimento VARCHAR,\n\t\t\t\t\ttipo_limite_atendimento VARCHAR,\n\t\t\t\t\tid_limite_atendimento VARCHAR\n\t            )\n\t        )\n\t    ) AS informacoes_limites_atendimentos_geral_novo\nfrom limite_geral\ngroup by 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_appointment_threshold\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:02.753664Z", "completed_at": "2025-07-01T18:31:02.776892Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:02.795031Z", "completed_at": "2025-07-01T18:31:02.795031Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09870672225952148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_assinatura_profissional", "compiled": true, "compiled_code": "\n\nSELECT\n     CAST(AP.id_assinatura AS BIGINT) AS id_assinatura\n   , AP.id_profissional_plataforma\n   , AP.id_profissional_prestador\n   , AP.id_plano\n   , P.recorrencia AS recorrencia_plano\n   , P.valor AS valor_plano\n   , AP.status\n   , CAST(AP.data_hora_assinatura AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_assinatura\n   , DATE(AP.data_hora_assinatura AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_hora_assinatura\n   , DATE(AP.data_vigencia) AS data_vigencia\n   , AP.id_transacao\n   , CAST(AP.data_hora_cancelamento AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_cancelamento\n   , DATE(AP.data_hora_cancelamento AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_hora_cancelamento\n   , AP.forma_pagamento\n   , AP.id_assinatura_plataforma\n   , CAST(AP.data_hora_reativacao AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_reativacao\n   , DATE(AP.data_hora_reativacao AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_hora_reativacao\n   , CURRENT_TIMESTAMP(3) AS emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".assinatura_profissional AS AP\n\nLEFT JOIN mysql_cnx.\"connectdoctor-prod\".plano AS P\n\tON AP.id_plano = P.id", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_assinatura_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:02.871521Z", "completed_at": "2025-07-01T18:31:02.896332Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:02.918013Z", "completed_at": "2025-07-01T18:31:02.918013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08833503723144531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_atestado", "compiled": true, "compiled_code": "\n\nSELECT \n    idatendimento_atestado as id_atendimento_atestado,\n    idatendimento as id_atendimento,\n    codigo_verificador_assinatura,\n    idatestado as id_atestado,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_atestado", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_atestado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:02.996514Z", "completed_at": "2025-07-01T18:31:03.026688Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.054890Z", "completed_at": "2025-07-01T18:31:03.054890Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09528589248657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_autorizacao", "compiled": true, "compiled_code": "\n\nSELECT\n    id as id_atendimento_autorizacao,\n    appointment_id as id_atendimento,\n    cast(authorization_date as date) as data_autorizacao,\n    cast(creation_date as timestamp(3) with time zone) as data_hora_criacao,\n    date(creation_date at time zone 'America/Sao_Paulo') as data_brt_criacao,\n    cast(expiration as date) as data_expiracao,\n    cast(if((is_active  = '1'),true,false) as boolean) as flag_ativo,\n    operator_guide_number as numero_guia_operadora,\n    \"password\" as senha_autorizacao,\n    professional_id as id_profissional,\n    provider_guide_number as numero_guia_prestador,\n    token,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".appointment_authorization", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_autorizacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:03.130605Z", "completed_at": "2025-07-01T18:31:03.148302Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.167346Z", "completed_at": "2025-07-01T18:31:03.167346Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07775163650512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_avaliacao_sem_chamada", "compiled": true, "compiled_code": "\n\nWITH t1 AS (\n\tSELECT\n\t\tcast(idatendimento as bigint) as id_atendimento,\n\t\tidatendimento_avaliacao_sem_chamada as id_atendimento_avaliacao_sem_chamada,\n\t\tcast(data_hora_insert  as timestamp(3) with time zone) as data_hora_insert,\n\t\tmotivo as motivo_avaliacao_sem_chamada,\n\t\tcomentario,\n\t\t-- \"filename\",\n\t\tcurrent_timestamp(3) as emitted_at,\n\t\trank() over (partition by idatendimento order by idatendimento_avaliacao_sem_chamada desc) as rn\n\tFROM mysql_cnx.\"connectdoctor-prod\".atendimento_avaliacao_sem_chamada \n)\n\nSELECT \n*\nFROM t1\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_sem_chamada\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:03.232421Z", "completed_at": "2025-07-01T18:31:03.252615Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.269038Z", "completed_at": "2025-07-01T18:31:03.269038Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06834197044372559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_ciap2", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(idatendimento as bigint) as id_atendimento,\n    cast(idciap2 as bigint) as id_ciap2,\n    cast(data_hora as timestamp(3) with time zone) as data_hora_ultima_alteracao,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert, \n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".atendimento_ciap2", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_ciap2\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:03.335057Z", "completed_at": "2025-07-01T18:31:03.359482Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.373542Z", "completed_at": "2025-07-01T18:31:03.373542Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07036638259887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_aux_clinica", "compiled": true, "compiled_code": "\n\nSELECT\n    id_clinica,\n    clinica as nome_clinica,\n    CASE\n        WHEN cliente is null\n            then clinica\n        ELSE cliente\n    end as nome_cliente,\n    business_unit as unidade_negocio,\n    produto_origem,\n    produto_tratado,\n    tipo_ambiente,\n    current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"clinicas_auxiliary\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_aux_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:03.445601Z", "completed_at": "2025-07-01T18:31:03.479722Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.501827Z", "completed_at": "2025-07-01T18:31:03.501827Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09400415420532227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_ciap2", "compiled": true, "compiled_code": "\n\n-- Esta tabela se refere a CIAP2\n\nSELECT\n    cast(idciap2 as bigint) as id_ciap2,\n    codigo as codigo_ciap2,\n    descricao as descricao_ciap2,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".ciap2", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_ciap2\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:03.568881Z", "completed_at": "2025-07-01T18:31:03.595772Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.600617Z", "completed_at": "2025-07-01T18:31:03.600617Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06325030326843262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_clinica", "compiled": true, "compiled_code": "\n\n-- Tabela referencia de clinica\n\nSELECT\n    cast(idclinica as bigint) as id_clinica,\n    nome as nome_clinica,\n    email,\n    cnpj,\n    cast(if((flag_pertence_medico = '1'),true,false) as boolean) as flag_pertence_medico,\n    tipo_selecao_medico, \n    produto,\n    cast(idclinica_master as bigint) as id_clinica_master,\n    cast(idconta as bigint) as id_conta,\n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n    cast(data_hora_bloqueio as timestamp(3) with time zone) as data_hora_bloqueio,\n    date(data_hora_bloqueio at time zone 'America/Sao_Paulo') as data_brt_bloqueio,\n    cast(data_hora_ultima_atualizacao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    idtipo as id_tipo,\n    upper(status) as status,\n    numero_cnes,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".clinica", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:03.684060Z", "completed_at": "2025-07-01T18:31:03.704815Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.725027Z", "completed_at": "2025-07-01T18:31:03.725027Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07720327377319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_clinica_config", "compiled": true, "compiled_code": "\n\n\nselect\n    idclinica as id_clinica,\n    upper(codigo_convenio_integracao_pv) as codigo_convenio_integracao_pv,\n    banco,\n    conta,\n    tipo_servico_meeting,\n    if((flag_habilitar_estratificacao_saude_mental= '1'),true,false) as flag_habilitar_estratificacao_saude_mental,\n    if((flag_corporate= '1'),true,false) as flag_corporate,\n    if((flag_aps_habilitada= '1'),true,false) as flag_servico_aps,\n    if((flag_possui_serv_assistente_social= '1'),true,false) as flag_servico_assistente_social,\n    if((flag_possui_serv_assistente_social_agend= '1'),true,false) as flag_servico_assistente_social_agendado,\n    if((flag_possui_serv_assistente_social_imedit= '1'),true,false) as flag_servico_assistente_social_imediato,\n    if((flag_possui_serv_dentista= '1'),true,false) as flag_servico_dentista,\n    if((flag_possui_serv_dentista_agend= '1'),true,false) as flag_servico_dentista_agendado,\n    if((flag_possui_serv_dentista_imedit= '1'),true,false) as flag_servico_dentista_imediato,\n    if((flag_possui_serv_educador_fisico= '1'),true,false) as flag_servico_educador_fisico,\n    if((flag_possui_serv_educador_fisico_agend= '1'),true,false) as flag_servico_educador_fisico_agendado,\n    if((flag_possui_serv_educador_fisico_imedit= '1'),true,false) as flag_servico_educador_fisico_imediato,\n    if((flag_possui_serv_enfermagem= '1'),true,false) as flag_servico_enfermagem,\n    if((flag_possui_serv_enfermagem_agend= '1'),true,false) as flag_servico_enfermagem_agendado,\n    if((flag_possui_serv_enfermagem_imedit= '1'),true,false) as flag_servico_enfermagem_imediato,\n    if((flag_possui_serv_fisioterapeuta= '1'),true,false) as flag_servico_fisioterapeuta,\n    if((flag_possui_serv_fisioterapeuta_agend= '1'),true,false) as flag_servico_fisioterapeuta_agendado,\n    if((flag_possui_serv_fisioterapeuta_imedit= '1'),true,false) as flag_servico_fisioterapeuta_imediato,\n    if((flag_possui_serv_fonoaudiologo= '1'),true,false) as flag_servico_fonoaudiologo,\n    if((flag_possui_serv_fonoaudiologo_agend= '1'),true,false) as flag_servico_fonoaudiologo_agendado,\n    if((flag_possui_serv_fonoaudiologo_imedit= '1'),true,false) as flag_servico_fonoaudiologo_imediato,\n    if((flag_possui_serv_health_coach= '1'),true,false) as flag_servico_health_coach,\n    if((flag_possui_serv_health_coach_agend= '1'),true,false) as flag_servico_health_coach_agendado,\n    if((flag_possui_serv_health_coach_imedit= '1'),true,false) as flag_servico_health_coach_imediato,\n    if((flag_possui_serv_medico= '1'),true,false) as flag_servico_medico,\n    if((flag_possui_serv_medico_agend= '1'),true,false) as flag_servico_especialidades,\n    if((flag_possui_serv_medico_imedit= '1'),true,false) as flag_servico_pronto_atendimento,\n    if((flag_atendimento_imediato_gestao= '1'),true,false) as flag_atendimento_imediato_gestao,\n    if((flag_serv_medico_especialista_automatico= '1'),true,false) as flag_escolha_automatica_especialista,\n    if((flag_serv_medico_especialista_manual= '1'),true,false) as flag_escolha_manual_especialista,\n    if((flag_possui_serv_nutricao= '1'),true,false) as flag_servico_nutricao,\n    if((flag_possui_serv_nutricao_agend= '1'),true,false) as flag_servico_nutricao_agendado,\n    if((flag_possui_serv_nutricao_imedit= '1'),true,false) as flag_servico_nutricao_imediato,\n    if((flag_serv_psicologo_manual= '1'),true,false) as flag_servico_psicologia_manual,\n    if((flag_possui_serv_psicologia= '1'),true,false) as flag_servico_psicologia,\n    if((flag_possui_serv_psicologia_agend= '1'),true,false) as flag_servico_psicologia_agendado,\n    if((flag_possui_serv_psicologia_imedit= '1'),true,false) as flag_servico_psicologia_imediato,\n    if((flag_permite_envio_braze= '1'),true,false) as flag_comunicacao_braze,\n    if((flag_permite_envio_email= '1'),true,false) as flag_comunicacao_email,\n    if((flag_permite_envio_email_nps= '1'),true,false) as flag_comunicacao_email_nps,\n    if((flag_permite_ligacao= '1'),true,false) as flag_comunicacao_ligacao,\n    if((flag_permite_sms= '1'),true,false) as flag_comunicacao_sms,\n\tif((flag_permite_whatsapp_matinal_paciente= '1'), true, false) as flag_permite_whatsapp_matinal_paciente,\n    if((flag_permite_whatsapp_lembrete_consulta_paciente= '1'),true,false) as flag_comunicacao_whatsapp_lembrete_consulta_paciente,\n    if((flag_permite_whatsapp_paciente= '1'),true,false) as flag_comunicacao_whatsapp_paciente,\n    if((flag_cnx_plus= '1'),true,false) as flag_cnx_plus,\n    if((flag_permite_consulta_dependente= '1'),true,false) as flag_permite_consulta_dependente,\n    if((flag_permite_login_paciente= '1'),true,false) as flag_permite_login_paciente,\n    if((flag_clinica_utiliza_ionic= '1'),true,false) as flag_clinica_utiliza_ionic,\n    if((flag_clinica_unificada_pv= 1),true,false) as flag_clinica_unificada_pv,\n    if((flag_permite_push= '1'),true,false) as flag_permite_push,\n    if((flag_permite_whatsapp_profissional= '1'),true,false) as flag_comunicacao_whatsapp_profissional,\n    if((flag_habilitar_obrigatoriedade_box_comorbidades= '1'),true,false) as flag_obrigatoriedade_comorbidades,\n    if((flag_possui_especialidades_customizadas= '1'),true,false) as flag_especialidades_customizadas,\n    periodicidade_limite_atendimento_paciente,\n    quantidade_limite_atendimento_paciente,\n    quantidade_limite_atendimento_por_profissional,\n    if((flag_habilitar_envio_confirmacao_consulta_via_email_jor_pac= '1'),true,false) as flag_habilitar_envio_confirmacao_consulta_via_email_jor_pac,\n    if((flag_habilitar_envio_confirmacao_consulta_via_whatsapp_jor_pac= '1'),true,false) as flag_habilitar_envio_confirmacao_consulta_via_whatsapp_jor_pac,\n    if((flag_habilitar_confirmacao_consulta_jorn_backoffice_admin= '1'),true,false) as flag_habilitar_confirmacao_consulta_jorn_backoffice_admin,\n    if((flag_permite_envio_email_boas_vindas_admin= '1'),true,false) as flag_email_boas_vindas_admin,\n    if((flag_permite_envio_email_boas_vindas_paciente= '1'),true,false) as flag_email_boas_vindas_paciente,\n    if((flag_permite_envio_email_boas_vindas_profissional= '1'),true,false) as flag_email_boas_vindas_profissional,\n    if((flag_anexo_documentos= '1'),true,false) as flag_anexo_documentos,\n    fluxo_liberacao,\n    if((flag_habilitar_novo_limite= '1'),true,false) as flag_habilitar_novo_limite,\n    if((flag_habilitar_modulo_importacao_dados= '1'),true,false) as flag_habilitar_modulo_importacao_dados,\n    if((flag_permite_auto_cadastro_paciente= '1'),true,false) as flag_permite_auto_cadastro_paciente,\n    if((flag_anexo_documento_oficial_foto= '1'),true,false) as flag_anexo_documento_oficial_foto,\n    if((flag_anexo_carteirinha_plano_saude= '1'),true,false) as flag_anexo_carteirinha_plano_saude,\n    if((flag_possui_encaminhamento= '1'),true,false) as flag_possui_encaminhamento,\n    if(flag_habilitar_recebimento_para_profissionais='1',true,false) as flag_habilitar_recebimento_para_profissionais,\n\tif((flag_habilitar_biometria= '1'), true, false) as flag_habilitar_biometria,\n\tif((flag_possui_termo_uso_proprio_paciente= '1'), true, false) as flag_possui_termo_uso_proprio_paciente,\n\tif((flag_possui_termo_uso_proprio_profissional= '1'), true, false) as flag_possui_termo_uso_proprio_profissional,\n\tif((flag_bloqueia_criacao_atendimento_profissional_saude= '1'), true, false) as flag_bloqueia_criacao_atendimento_profissional_saude,\n\tif((flag_bloqueia_criacao_atendimento_retorno_medico= '1'), true, false) as flag_bloqueia_criacao_atendimento_retorno_medico,\n\tif((flag_bloqueia_reagendamento_atendimento= '1'), true, false) as flag_bloqueia_reagendamento_atendimento,\n\tif((flag_habilitar_fluxo_triagem= '1'), true, false) as flag_habilitar_fluxo_triagem,\n\tif((flag_mostrar_logo_proprio= '1'), true, false) as flag_mostrar_logo_proprio,\n    if((flag_possui_integracao_externa= '1'),true,false) as flag_possui_integracao_externa,\n    idrepasse as id_repasse,\n    current_timestamp(3) as emitted_at\nfrom mysql_cnx.\"connectdoctor-prod\".clinica_config", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_clinica_config\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:03.800729Z", "completed_at": "2025-07-01T18:31:03.826069Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.841330Z", "completed_at": "2025-07-01T18:31:03.841330Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07796669006347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_clinica_integracao_externa_config", "compiled": true, "compiled_code": "\n\n\nselect\n    idclinica as id_clinica\n    ,if((max(case when nome = 'FLAG_HABILITAR_ENVIO_FATURAMENTO_POR_VIDA' then valor end)) = '1', true, false) as flag_habilitar_envio_faturamento_por_vida\n    ,if((max(case when nome = 'FLAG_NAO_CRIPTOGRAFAR_SENHA_FATURAMENTO' then valor end)) = '1', true, false) as flag_nao_criptografar_senha_faturamento\n    ,if((max(case when nome = 'FLAG_HABILITAR_CONEXA_TISS_AUTORIZACAO_V2' then valor end)) = '1', true, false) as flag_habilitar_conexa_tiss_autorizacao_v2\n    ,if((max(case when nome = 'FLAG_VERIFICAR_ELEGIBILIDADE' then valor end)) = '1', true, false) as flag_verificar_elegibilidade\n    ,if((max(case when nome = 'FLAG_VERIFICAR_AUTORIZADOR_AGENDADO' then valor end)) = '1', true, false) as flag_verificar_autorizador_agendado\n    ,if((max(case when nome = 'FLAG_VERIFICAR_AUTORIZADOR_IMEDIATO' then valor end)) = '1', true, false) as flag_verificar_autorizador_imediato\n    ,if((max(case when nome = 'FLAG_HABILITAR_ENVIO_FATURAMENTO_CONEXA_TISS' then valor end)) = '1', true, false) as flag_habilitar_envio_faturamento_conexa_tiss\n    ,if((max(case when nome = 'FLAG_ENVIAR_LOTE_GUIAS' then valor end)) = '1', true, false) as flag_enviar_lote_guias\nfrom mysql_cnx.\"connectdoctor-prod\".clinica_integracao_externa_config\nwhere 1=1\nand nome in (\n\t'FLAG_HABILITAR_ENVIO_FATURAMENTO_POR_VIDA',\n\t'FLAG_NAO_CRIPTOGRAFAR_SENHA_FATURAMENTO',\n\t'FLAG_HABILITAR_CONEXA_TISS_AUTORIZACAO_V2',\n\t'FLAG_VERIFICAR_ELEGIBILIDADE',\n\t'FLAG_VERIFICAR_AUTORIZADOR_AGENDADO',\n\t'FLAG_VERIFICAR_AUTORIZADOR_IMEDIATO',\n\t'FLAG_HABILITAR_ENVIO_FATURAMENTO_CONEXA_TISS',\n\t'FLAG_ENVIAR_LOTE_GUIAS'\n\t)\ngroup by 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_clinica_integracao_externa_config\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:03.918600Z", "completed_at": "2025-07-01T18:31:03.948307Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:03.971219Z", "completed_at": "2025-07-01T18:31:03.971219Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08739352226257324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_clinica_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT\n     CAST(id AS BIGINT) AS id_clinica_tiss\n   , CAST(data_inclusao AS TIMESTAMP(3) WITH TIME ZONE) AS data_inclusao\n   , DATE(data_inclusao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_inclusao\n   , CAST(data_ultima_alteracao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_alteracao\n   , DATE(data_ultima_alteracao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_ultima_alteracao\n   , usuario_ultima_alteracao\n   , versao\n   , CAST(cliente_id AS BIGINT) AS id_cliente_tiss\n   , nome\n   , CAST(ativo AS BOOLEAN) AS flag_ativo\n   , sistema\n   , CAST(id_clinica_prestador AS BIGINT) AS id_clinica_prestador_tiss\n   , CURRENT_TIMESTAMP(3) AS emitted_at\nFROM mysql_cnx.\"conexa-autorizador\".tb_clinica", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_clinica_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:04.040382Z", "completed_at": "2025-07-01T18:31:04.080178Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:04.091262Z", "completed_at": "2025-07-01T18:31:04.091262Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08185672760009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_compute_agenda", "compiled": true, "compiled_code": "\n\nselect \n\tcast(id_calendario as bigint) as id_calendario,\n\tid_profissional,\n\tnome_especialidade,\n\tslot,\n\tintervalo_minute,\n\tflag_atendimento,\n\tdata_calendario\nfrom \"delta\".\"bronze\".\"raw_cnx_compute_agenda\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_compute_agenda\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:04.180456Z", "completed_at": "2025-07-01T18:31:04.200812Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:04.218600Z", "completed_at": "2025-07-01T18:31:04.218600Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07949018478393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_doenca_cid10", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(iddoenca as bigint) as id_doenca,\n    codigo as codigo_cid10,\n    descricao as descricao_cid10,\n    cast(idgrupo as bigint) as id_grupo,\n    idioma,\n    edicao,\n    cast(if((flag_ativo = '1'),true,false) as boolean) as flag_ativo,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".doenca_cid10", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_doenca_cid10\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:04.294617Z", "completed_at": "2025-07-01T18:31:04.326024Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:04.348924Z", "completed_at": "2025-07-01T18:31:04.348924Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08553528785705566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_encaminhamento_servico", "compiled": true, "compiled_code": "\n\n\nSELECT\n\t  CAST(id_encaminhamento_servico AS BIGINT) AS id_encaminhamento_servico\n\t, CAST(idclinica AS BIGINT) AS id_clinica\n\t, CAST(idpaciente AS BIGINT) AS id_paciente\n\t, CAST(data_hora_criacao AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_criacao\n\t, DATE(data_hora_criacao AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_criacao\n\t, CAST(id_especialidade AS BIGINT) AS id_especialidade\n\t, CAST(id_council_type AS BIGINT) AS id_council_type\n\t, DATE(data_emissao) AS data_emissao\n\t, DATE(data_validade) AS data_validade\n\t, nome_profissional\n\t, numero_conselho\n\t, uf_conselho\n\t, codigo_cid\n\t, CAST(quantidade_consultas AS INT) AS quantidade_consultas\n\t, status\n\t, CAST(id_usuario_alteracao_status AS BIGINT) AS id_usuario_alteracao_status\n\t, CAST(autorizador_id AS BIGINT) AS id_atendimento_tiss\n\t, CAST(data_envio AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_envio\n\t, DATE(data_envio AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_envio\n\t, CAST(data_resultado AS TIMESTAMP(3) WITH TIME ZONE) AS data_hora_resultado\n\t, DATE(data_resultado AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_resultado\n\t, CURRENT_TIMESTAMP(3) AS emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".encaminhamento_servico", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_encaminhamento_servico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:04.430352Z", "completed_at": "2025-07-01T18:31:04.463677Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:04.481820Z", "completed_at": "2025-07-01T18:31:04.481820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08236885070800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_epidemia", "compiled": true, "compiled_code": "\n\n-- Tabela referencia de clinica\n\nSELECT\n    cast(idepidemia as bigint) as id_epidemia,\n    nome as nome_epidemia,\n    periodicidade_agravo,\n    autoridade_saude_agravo\nFROM mysql_cnx.\"connectdoctor-prod\".epidemia", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_epidemia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:04.572090Z", "completed_at": "2025-07-01T18:31:04.592978Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:04.619505Z", "completed_at": "2025-07-01T18:31:04.619505Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08850741386413574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_especialidade", "compiled": true, "compiled_code": "\n\nSELECT \n    cast(idespecialidade as bigint) as id_especialidade,\n    CASE\n        WHEN idespecialidade = 6\n            THEN 'Ginecologia'\n        ELSE nome\n    END as nome_especialidade,\n    codigo_memed,\n    cast(if((flag_customizada = '1'),true,false) as boolean) as flag_customizada,\n    descricao as descricao_especialidade,\n    cbo,\n    valor_consulta,\n    tipo_conselho,\n    cast(if((flag_pediatria = '1'),true,false) as boolean) as flag_pediatria,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".especialidade", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_especialidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:04.698857Z", "completed_at": "2025-07-01T18:31:04.714654Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:04.749448Z", "completed_at": "2025-07-01T18:31:04.749448Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09834074974060059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_grupo_cid10", "compiled": true, "compiled_code": "\n\nSELECT \n    cast(idgrupo as bigint) as id_grupo,\n    capitulo as capitulo_cid,\n    titulo as titulo_cid,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".grupo_cid10", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_grupo_cid10\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:04.827718Z", "completed_at": "2025-07-01T18:31:04.843889Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:04.874879Z", "completed_at": "2025-07-01T18:31:04.874879Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08901405334472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_item_lote_guia", "compiled": true, "compiled_code": "\n\n\nSELECT\n      CAST(id AS BIGINT) AS id_item_lote_guia\n\t, CAST(lote_faturavel_id AS BIGINT) AS id_lote_faturavel\n\t, CAST(atendimento_id AS BIGINT) AS id_atendimento\n\t, CAST(guia_taxa_id AS BIGINT) AS id_guia_taxa\n\t, atendimento_indicacao_acidente\n\t, atendimento_tipo\n\t, autorizacao_data\n\t, autorizacao_data_validade\n\t, autorizacao_numero_guia_operadora\n\t, autorizacao_senha\n\t, beneficiario_atendimento_rn\n\t, beneficiario_nome\n\t, beneficiario_numero_carteira\n\t, data_registro_transacao\n\t, hora_registro_transacao\n\t, CAST(concat(data_registro_transacao, ' ', hora_registro_transacao) AS TIMESTAMP) AS data_hora_registro_transacao\n\t, destino_registro_ans\n\t, equipe_cbos\n\t, equipe_codigo_prestador_na_operadora\n\t, equipe_conselho_profissional\n\t, equipe_cpf_contratado\n\t, equipe_grau_part\n\t, equipe_nome_profissional\n\t, equipe_numero_conselho_profissional\n\t, equipe_uf\n\t, executante_cnes\n\t, executante_cnpj_contratado\n\t, executante_codigo_prestador_na_operadora\n\t, executante_conselho_profissional\n\t, executante_cpf_contratado\n\t, executante_nome_contratado\n\t, executante_nome_profissional\n\t, executante_numero_conselho_profissional\n\t, executante_profissional_cbos\n\t, executante_profissional_uf\n\t, guia_identificador\n\t, guia_numero_operadora\n\t, guia_numero_prestador\n\t, guia_principal\n\t, guia_registro_ans\n\t, identificador_receita\n\t, item_codigo_procedimento\n\t, item_codigo_tabela\n\t, item_descricao_procedimento\n\t, item_data_execucao\n\t, item_hora_inicial\n\t, item_hora_final  -- podemos ter item_hora_inicial preenchida, mas item_hora_final NULL\n\t, CAST(CONCAT (item_data_execucao, ' ', item_hora_inicial) AS TIMESTAMP) AS data_hora_item_execucao_inicial\n\t, CAST(CONCAT (\n\t\t\tCAST(CASE\n\t\t\t\t\tWHEN item_hora_final < item_hora_inicial\n\t\t\t\t\t\tTHEN date_add('day', 1, CAST(item_data_execucao AS DATE))\n\t\t\t\t\tELSE CAST(item_data_execucao AS DATE)\n\t\t\t\t\tEND AS VARCHAR)\n\t\t\t, ' '\n\t\t\t, item_hora_final\n\t\t\t) AS TIMESTAMP) AS data_hora_item_execucao_final\n\t, item_quantidade_executada\n\t, item_reducao_acrescimo\n\t, item_sequencial_item\n\t, item_valor_total\n\t, item_valor_unitario\n\t, login_prestador\n\t, numero_lote\n\t, origem_cnpj\n\t, origem_codigo_prestador_na_operadora\n\t, origem_registro_ans\n\t, padrao_tiss\n\t, senha_prestador\n\t, sequencial_transacao\n\t, solicitacao_carater_atendimento\n\t, solicitacao_data\n\t, solicitacao_indicacao_clinica\n\t, solicitante_cnpj\n\t, solicitante_cpf\n\t, solicitante_codigo_prestador_na_operadora\n\t, solicitante_conselho_profissional\n\t, solicitante_nome_contratado\n\t, solicitante_nome_profissional\n\t, solicitante_numero_conselho_profissional\n\t, solicitante_profissional_cbos\n\t, solicitante_profissional_uf\n\t, tipo_transacao\n\t, valor_procedimentos\n\t, valor_total_geral\n\t, tipo_identidade\n\t, regime_atendimento\n\t, atendimento_saude_ocupacional\n\t, solicitacao_ind_cob_especial\n\t, nome_contratado_solicitante\n\t, codigo_glosa\n\t, descricao_glosa\n\t, numero_protocolo\n\t, numero_documento\n\t, protocolo_documento\n\t, natureza_guia -- flag? Tudo NULL\n\t, formato_documento\n\t, documento\n\t, tipo_documento\n\t, autorizacao_ausencia_cod_validacao\n\t, autorizacao_cod_validacao\n\t, atendimento_cobertura_especial\n\t, atendimento_regime_atendimento\n\t, consulta_atendimento_saude_ocupacional\n\t, atendimento_data_atendimento\n\t, atendimento_tipo_consulta\n\t, atendimento_valor_procedimento\n\t, assinatura_digital_guia\n\t, dados_atendimento_tipo_consulta\n\t, status_faturamento_guia\n\t, desfecho_atendimento\n\t, observacoes_procedimento\n\t, item_codigo_despesa\n\t, CURRENT_TIMESTAMP(3) AS emitted_at\nFROM mysql_cnx.\"health-operator-bus\".item_lote_guias", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_item_lote_guia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:04.949735Z", "completed_at": "2025-07-01T18:31:04.986456Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:05.013607Z", "completed_at": "2025-07-01T18:31:05.013607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09655213356018066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_limite_atendimento", "compiled": true, "compiled_code": "\n\n\nselect\n    idclinic as id_clinica,\n    periodicity as periodicidade_limite_atendimento,\n    appointment_threshold_type as tipo_limite_atendimento,\n    quantity as quantidade_limite_atendimento\nfrom mysql_cnx.\"connectdoctor-prod\".appointment_threshold ap\ninner join mysql_cnx.\"connectdoctor-prod\".clinica_config cc on cc.idclinica = ap.idclinic\nwhere cc.flag_habilitar_novo_limite = '1'", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_limite_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:05.096829Z", "completed_at": "2025-07-01T18:31:05.131307Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:05.164822Z", "completed_at": "2025-07-01T18:31:05.164822Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12162542343139648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_limite_atendimento_produto", "compiled": true, "compiled_code": "\n\n\nselect\n    p.idclinic as id_clinica,\n    p.periodicity as periodicidade_limite_atendimento,\n    p.appointment_threshold_type as tipo_limite_atendimento,\n    p.quantity as quantidade_limite_atendimento,\n    p.limitation_type as tipo_limitacao,\n    p.council_type as tipo_conselho,\n    p.idspecialty as id_especialidade,\n    p.appointment_mode as modo_atendimento\nfrom mysql_cnx.\"connectdoctor-prod\".appointment_threshold_product p\ninner join mysql_cnx.\"connectdoctor-prod\".clinica_config cc on cc.idclinica = p.idclinic\nwhere cc.flag_habilitar_novo_limite = '1'", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_limite_atendimento_produto\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:05.264949Z", "completed_at": "2025-07-01T18:31:05.303386Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:05.312495Z", "completed_at": "2025-07-01T18:31:05.312495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09486937522888184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_lote_faturavel", "compiled": true, "compiled_code": "\n\n\nSELECT\n      CAST(id AS BIGINT) id_lote_faturavel\n\t, CAST(prestador_id AS BIGINT) id_prestador\n\t, CAST(clinica_prestador_id AS BIGINT) id_clinica_prestador\n\t, CAST(idclinica AS BIGINT) id_clinica\n\t, CAST(prestador_cliente_id AS BIGINT) id_prestador_cliente\n\t, CAST(optimistic_lock AS BIGINT) AS optimistic_lock\n\t, CAST(data_status_processamento AS TIMESTAMP(3) WITH TIME ZONE) AS data_status_processamento\n\t, DATE(data_status_processamento AT TIME ZONE 'America/Sao_Paulo') AS data_brt_status_processamento\n\t, informacao_tracing\n\t, status_processamento\n\t, numero_lote\n\t, operadora\n\t, versao_tiss\n\t, status_faturamento\n\t, CAST(tem_resposta_faturamento_ic AS BOOLEAN) AS flag_tem_resposta_faturamento_ic\n\t, caminho_arquivo_s3\n\t, clinica_nome\n\t, tipo_guia\n\t, DATE(competencia) AS data_competencia\n\t, CAST(valor_total AS DECIMAL(10, 2)) AS valor_total\n\t, CURRENT_TIMESTAMP(3) AS emitted_at\nFROM mysql_cnx.\"health-operator-bus\".lote_faturavel", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_lote_faturavel\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:05.407575Z", "completed_at": "2025-07-01T18:31:05.440654Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:05.463336Z", "completed_at": "2025-07-01T18:31:05.464294Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09903216361999512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_paciente_cupom", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(id as bigint) as id_paciente_cupom,\n    cast(data_criacao as timestamp(3) with time zone) as data_criacao,\n    date(data_criacao at time zone 'America/Sao_Paulo') as data_brt_criacao,\n    cast(data_alteracao as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n    date(data_alteracao at time zone 'America/Sao_Paulo') as data_brt_hora_ultima_atualizacao,\n    cupom,\n    cast(flag_gerar_pagamento_profissional as boolean) as flag_gerar_pagamento_profissional,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".paciente_cupom", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_paciente_cupom\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:05.565505Z", "completed_at": "2025-07-01T18:31:05.596809Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:05.624699Z", "completed_at": "2025-07-01T18:31:05.624699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1086125373840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_paciente_encaminhamento", "compiled": true, "compiled_code": "\n\nselect \n    idatendimento as id_atendimento, \n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_hora_insert, \n    cast(datahora as timestamp(3) with time zone) as data_hora,\n    date(datahora at time zone 'America/Sao_Paulo') as data_brt_hora, \n    idpaciente as id_paciente, \n    idprofissional as id_profissional,\n    idusuario_responsavel as id_usuario_responsavel, \n    motivo_encaminhamento,  \n    current_timestamp(3) as emitted_at\nfrom mysql_cnx.\"connectdoctor-prod\".paciente_encaminhamento", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_paciente_encaminhamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:05.710706Z", "completed_at": "2025-07-01T18:31:05.728386Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:05.753279Z", "completed_at": "2025-07-01T18:31:05.753279Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08764457702636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_paciente_encaminhamento_espec", "compiled": true, "compiled_code": "\n\nselect \n    idatendimento as id_atendimento, \n    cast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert, \n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_hora_insert, \n    cast(datahora as timestamp(3) with time zone) as data_hora, \n    date(datahora at time zone 'America/Sao_Paulo') as data_brt_hora,    \n    idespecialidade as id_especialidade, \n    idpaciente as id_paciente, \n    idusuario_responsavel as id_usuario_responsavel, \n    motivo_encaminhamento, \n    current_timestamp(3) as emitted_at\nfrom mysql_cnx.\"connectdoctor-prod\".paciente_encaminhamento_espec", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_paciente_encaminhamento_espec\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:05.830040Z", "completed_at": "2025-07-01T18:31:05.854888Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:05.877600Z", "completed_at": "2025-07-01T18:31:05.877600Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08656072616577148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_paciente_pagamento_paciente_cupom", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(paciente_pagamento_id as bigint) as id_paciente_pagamento,\n    cast(paciente_cupom_id as bigint) as id_paciente_cupom,\n    cast(data_criacao as timestamp(3) with time zone) as data_criacao,\n    date(data_criacao at time zone 'America/Sao_Paulo') as data_brt_criacao,\n    current_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".paciente_pagamento_paciente_cupom", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_paciente_pagamento_paciente_cupom\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:05.962541Z", "completed_at": "2025-07-01T18:31:05.986262Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:05.999464Z", "completed_at": "2025-07-01T18:31:05.999464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07702493667602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_pathology_history_in_treatment_plan", "compiled": true, "compiled_code": "\n\nselect \n\tid_pathology_history_in_treatment_plan as id_patologia_tratamento,\n\tpathology_id as id_doenca,\n\ttreatment_plan_patient_id as id_tratamento,\n    inserted_by_user_id as id_profissional,\n\tcast(created_at  as timestamp(3) with time zone) as data_hora_insert,\n\tcast(updated_at  as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n\tcurrent_timestamp(3) as emitted_at \nFROM mysql_cnx.\"connectdoctor-prod\".pathology_history_in_treatment_plan", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_pathology_history_in_treatment_plan\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:06.077427Z", "completed_at": "2025-07-01T18:31:06.100436Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:06.119586Z", "completed_at": "2025-07-01T18:31:06.119586Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07996582984924316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(p.idprofissional as bigint) as id_profissional,\n    concat(p.nome, ' ', p.sobrenome) as nome_profissional,\n    p.nome,\n    p.sobrenome,\n    p.email as email_profissional,\n    p.tipo_conselho,\n    p.numero_conselho,\n    p.uf_conselho,\n    p.cpf as cpf_profissional,\n    date(p.data_nascimento) as data_nascimento_profissional,\n    -- rg,\n    p.sexo as sexo_profissional,\n    p.cep as cep_profissional,\n    p.endereco as endereco_profissional,\n    -- numero,\n    p.uf as uf_profissional,\n    UPPER(p.cidade) as cidade_profissional,\n    -- bairro,\n    -- complemento,\n    telefone_cel as telefone_profissional,\n    -- banco,\n    -- agencia,\n    -- agencia_digito,\n    -- conta,\n    -- conta_digito,\n    -- foto,\n    -- valor_consulta_video,\n    -- valor_consulta_chat,\n    -- valor_consulta_voz,\n    -- flag_brasileiro,\n    -- flag_voz,\n    -- flag_chat,\n    -- flag_video,\n    case when p.flag_ativo is null or p.flag_ativo = '' then false else cast(p.flag_ativo as boolean) end as flag_ativo,\n    case when p.flag_especialista is null or p.flag_especialista = '' then false else cast(p.flag_especialista as boolean) end as flag_especialista,\n    case when p.flag_curador is null or p.flag_curador = '' then false else cast(p.flag_curador as boolean) end as flag_curador,\n    -- flag_possui_faturamento,\n    -- flag_altera_vlr_faturamento,\n    -- token_profissional,\n    -- token_api_memed,\n    -- tipo_visualizacao,\n    from_iso8601_timestamp(p.data_cadastro) as data_cadastro,\n    date(substr(data_cadastro,1,10)) as data_brt_cadastro,\n    from_iso8601_timestamp(p.data_ativacao) as data_ativacao,\n    date(substr(data_ativacao,1,10)) as data_brt_ativacao,\n    p.intervalo_atendimento,\n    cast(p.idespecialidade as bigint) as id_especialidade,\n    cast(p.idclinica as bigint) as id_clinica,\n    cast(p.flag_crm_validado as boolean) as flag_crm_validado,\n    cast(p.flag_funcionalidade_plantao as boolean) as flag_funcionalidade_plantao,\n    cast(p.flag_plantao as boolean) as flag_plantao,\n    from_iso8601_timestamp(p.data_hora_plantao) as data_hora_plantao,\n    date(substr(data_hora_plantao,1,10)) as data_brt_plantao,\n    -- flag_permite_alterar_agenda,\n    -- flag_profissional_academico,\n    info_adicionais,\n    -- codigo_externo,\n    -- flag_apenas_encaminhamento,\n    p.tipo_criacao,\n    -- idusuario_resp_criacao,\n    -- tipo_assinatura_digital,\n    from_iso8601_timestamp(p.data_hora_ultima_atualizacao) as data_hora_ultima_atualizacao,\n    date(substr(data_hora_ultima_atualizacao,1,10)) as data_brt_ultima_atualizacao,\n    from_iso8601_timestamp(p.data_hora_insert) as data_hora_insert,\n    date(substr(data_hora_insert,1,10)) as data_brt_insert,\n    -- flag_bloqueia_fila,\n    cast(p.idinstituicao_ensino as bigint) as id_instituicao_ensino,\n    cast(p.idperiodo_academico as bigint) as id_periodo_academico,\n    -- flag_permite_agendamento,\n    p.sobre_mim,\n    cast(p.flag_profissional_corporate as boolean) as flag_profissional_conexa,\n    -- flag_utiliza_professionalschedule,\n    -- nome_social,\n    -- nome_da_mae,\n    -- flag_mae_desconhecida,\n    -- id_genero_profissional,\n    -- id_raca_cor,\n    p.nacionalidade,\n    -- municipio_nascimento,\n    -- id_uf_nascimento,\n    -- data_naturalizacao,\n    -- id_pais_nascimento,\n    -- numero_passaporte,\n    -- id_pais_emissor_passaporte,\n    -- data_emissao_passaporte,\n    -- data_validade_passaporte,\n    -- telefone_res,\n    -- id_pais_endereco,\n    -- cns,\n    -- id_nacionalidade,\n    -- id_uf_identidade,\n    -- data_emissao_identidade,\n    -- orgao_emissor_identidade,\n    -- numero_nis,\n    -- id_cbo,\n    -- p.idtasy,\n    v.id_pviva,\n    p.emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_profissional\" p\nleft join mysql_cnx.\"connectdoctor-prod\".profissional_migracao_pv as v on p.idprofissional = v.idprofissional", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:06.191917Z", "completed_at": "2025-07-01T18:31:06.215784Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:06.233222Z", "completed_at": "2025-07-01T18:31:06.233222Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0757296085357666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_abordagem", "compiled": true, "compiled_code": "\n\n\nSELECT\n\t  CAST(PPC.idprofissional AS BIGINT) AS id_profissional\n\t, PPC.id_abordagem\n\n\t, PA.descricao AS descricao_abordagem\n\t, PA.valor AS valor_abordagem\n\nFROM mysql_cnx.\"connectdoctor-prod\".profissional_perfil_complementar AS PPC\n\nLEFT JOIN mysql_cnx.\"connectdoctor-prod\".psicologia_abordagem AS PA\n\tON PA.id = PPC.id_abordagem\n\nWHERE PA.id IS NOT NULL", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_abordagem\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:06.305358Z", "completed_at": "2025-07-01T18:31:06.330626Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:06.349644Z", "completed_at": "2025-07-01T18:31:06.349644Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07745075225830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_agenda_extra", "compiled": true, "compiled_code": "\n\n\nSELECT \n\tcast(idprofissional_agenda_extra as bigint) as id_profissional_agenda_extra,\n\tcast(idprofissional as bigint) as id_profissional,\n\tdate(data) as data_extra,\n\tcast(horario_inicial as timestamp(3) with time zone) as hora_inicial,\n\tcast(horario_final as timestamp(3) with time zone) as hora_final,\n\tcast(data_hora_insert as timestamp(3) with time zone) as data_hora_insert,\n\tcurrent_timestamp(3) as emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".profissional_agenda_extra", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_agenda_extra\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:06.422936Z", "completed_at": "2025-07-01T18:31:06.454358Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:06.472487Z", "completed_at": "2025-07-01T18:31:06.472487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08352971076965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_calendario", "compiled": true, "compiled_code": "\n\n\nSELECT \n\tidprofissional_calendario as id_profissional_calendario,\n\tfrom_iso8601_timestamp(data_hora_insert) as data_hora_insert,\n\tcase\n\t\twhen dia_semana = 'SEGUNDA' then 1\n\t\twhen dia_semana = 'TERCA' then 2\n\t\twhen dia_semana = 'QUARTA' then 3\n\t\twhen dia_semana = 'QUINTA' then 4\n\t\twhen dia_semana = 'SEXTA' then 5\n\t\twhen dia_semana = 'SABADO' then 6\n\t\twhen dia_semana = 'DOMINGO' then 0\n\tend as dia_semana,\n\tdia_semana as dia_semana_descricao,\n\tcast(date_parse(horario_inicial, 'P0DT%HH%iM%sS') as timestamp(3) with time zone) as horario_inicial,\n\tcast(date_parse(horario_final, 'P0DT%HH%iM%sS') as timestamp(3) with time zone) as horario_final,\n\tidprofissional as id_profissional,\n\tdate(from_unixtime(cast(emitted_at as bigint), 'America/Sao_Paulo')) as emitted_at \nFROM \"delta\".\"bronze\".\"raw_cnx_profissional_calendario\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_calendario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:06.548446Z", "completed_at": "2025-07-01T18:31:06.572333Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:06.589055Z", "completed_at": "2025-07-01T18:31:06.589055Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08132433891296387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_faixa_etaria_atende", "compiled": true, "compiled_code": "\n\nSELECT\n\t  CAST(idprofissional AS BIGINT) AS id_profissional\n    , MAX(IF(idfaixa_etaria = 2, TRUE, FALSE)) AS flag_atende_infancia\n    , MAX(IF(idfaixa_etaria = 3, TRUE, FALSE)) AS flag_atende_pre_adolescente\n    , MAX(IF(idfaixa_etaria = 4, TRUE, FALSE)) AS flag_atende_adolescencia\n    , MAX(IF(idfaixa_etaria = 5, TRUE, FALSE)) AS flag_atende_adulto\n\nFROM\n    mysql_cnx.\"connectdoctor-prod\".profissional_faixa_etaria\nGROUP BY idprofissional", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_faixa_etaria_atende\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:06.691777Z", "completed_at": "2025-07-01T18:31:06.725519Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:06.766395Z", "completed_at": "2025-07-01T18:31:06.766395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1387779712677002, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_periodos_inativos", "compiled": true, "compiled_code": "\n\n\nwith hora_varchar as (\nselect \n\tcast(idperiodoinativo as bigint) as id_periodo_inativo,\n\tcast(idprofissional as bigint) as id_profissional,\n\tdate(data) as data_inativa,\n\tdescricao as descricao_inativa,\n\tcast(hora_inicial as varchar) as hora_inicial,\n\tcast(hora_final as varchar) as hora_final,\n\tcast(idfaixaperiodosinativos as bigint) id_faixaperiodosinativos,\n\tcurrent_timestamp(3) as emitted_at\nfrom mysql_cnx.\"connectdoctor-prod\".profissional_periodos_inativos \n),\nhora_iso as (\nselect \n\tid_periodo_inativo,\n\tid_profissional,\n\tdata_inativa,\n\tdescricao_inativa,\n\t'P0DT' || split_part(hora_inicial, ':', 1) || 'H' ||\n\t    split_part(hora_inicial, ':', 2) || 'M' ||\n\t    split_part(hora_inicial, ':', 3) || 'S' AS hora_inicial,\n\t'P0DT' || split_part(hora_final, ':', 1) || 'H' ||\n\t    split_part(hora_final, ':', 2) || 'M' ||\n\t    split_part(hora_final, ':', 3) || 'S' AS hora_final,\n\tid_faixaperiodosinativos,\n\temitted_at\nfrom hora_varchar \n)\nselect \n\tid_periodo_inativo,\n\tid_profissional,\n\tdata_inativa,\n\tdescricao_inativa,\n\tcast(date_parse(hora_inicial, 'P0DT%HH%iM%sS') as timestamp(3) with time zone) as hora_inicial,\n\tcast(date_parse(hora_final, 'P0DT%HH%iM%sS') as timestamp(3) with time zone) as hora_final,\n\tid_faixaperiodosinativos,\n\temitted_at\nfrom hora_iso", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_periodos_inativos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:06.866526Z", "completed_at": "2025-07-01T18:31:06.901674Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:06.930175Z", "completed_at": "2025-07-01T18:31:06.930175Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10993003845214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_preferencia", "compiled": true, "compiled_code": "\n\nSELECT\n      CAST(idprofissional AS BIGINT) AS id_profissional\n    , preferencia_atendimento_genero\n    , TRY_CAST(idade_inicio AS INTEGER) AS idade_inicio\n    , TRY_CAST(idade_fim AS INTEGER) AS idade_fim\n    --, CAST(IF((flag_primeiro_contato_teleatendimento = '1'), TRUE, FALSE) AS BOOLEAN) AS flag_primeiro_contato_teleatendimento\n    , CURRENT_TIMESTAMP(3) AS emitted_at\nFROM mysql_cnx.\"connectdoctor-prod\".profissional_preferencia", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_preferencia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:07.061129Z", "completed_at": "2025-07-01T18:31:07.095105Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:07.121310Z", "completed_at": "2025-07-01T18:31:07.121310Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1210784912109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_tema_profissional_atende", "compiled": true, "compiled_code": "\n\n\nSELECT\n\t  CAST(PT.idprofissional AS BIGINT) AS id_profissional\n\t, PT.idtema AS id_tema\n\t, PST.valor AS valor_tema\n\t, PST.descricao AS descricao_tema\n    , CURRENT_TIMESTAMP(3) AS emitted_at\n\nFROM mysql_cnx.\"connectdoctor-prod\".profissional_tema AS PT\n\nLEFT JOIN mysql_cnx.\"connectdoctor-prod\".psicologia_tema AS PST\nON PST.id = PT.idtema", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_tema_profissional_atende\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:07.202880Z", "completed_at": "2025-07-01T18:31:07.227509Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:07.243085Z", "completed_at": "2025-07-01T18:31:07.243085Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08494281768798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_treatment_plan_patient", "compiled": true, "compiled_code": "\n\nSELECT \n\tid_treatment_plan_patient as id_tratamento,\n\tpatient_id as id_paciente,\n\tstatus_type as status_tratamento,\n\tsuggested_plan as plano_sugerido,\n\tsuggested_sessions as n_sessoes_sugerido,\n\tinserted_by_user_id as id_profissional,\n\tconcluded_by_user_id as id_profissional_concluido,\n\tcast(conclusion_date as timestamp(3) with time zone) as data_conclusao,\n\tcast(created_at as timestamp(3) with time zone) as data_hora_insert,\n\tcast(updated_at as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n\trow_number() over (partition by patient_id order by created_at) rank_paciente_tratamento,\n\trow_number() over (partition by patient_id order by created_at desc) inverse_ranking,\n\tcurrent_timestamp(3) as emitted_at \nFROM mysql_cnx.\"connectdoctor-prod\".treatment_plan_patient", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_treatment_plan_patient\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:07.327117Z", "completed_at": "2025-07-01T18:31:07.348301Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:07.366393Z", "completed_at": "2025-07-01T18:31:07.366393Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08172035217285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_treatment_plan_patient_appointment", "compiled": true, "compiled_code": "\n\nselect\n\tid_treatment_plan_patient_appointment as id_tratamento_sessao,\n\ttreatment_plan_patient_id as id_tratamento,\n\tappointment_id as id_atendimento,\n\tcast(created_at as timestamp(3) with time zone) as data_hora_insert,\n\tcast(updated_at as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n\tcurrent_timestamp(3) as emitted_at \nFROM mysql_cnx.\"connectdoctor-prod\".treatment_plan_patient_appointment", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_treatment_plan_patient_appointment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:07.442929Z", "completed_at": "2025-07-01T18:31:07.480356Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:07.509610Z", "completed_at": "2025-07-01T18:31:07.509610Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10053849220275879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_doctorid_checks", "compiled": true, "compiled_code": "\n \nselect \n\tdistinct\n\tinstituicaonome as instituicao_nome,\n\tpessoanome as profissional_nome,\n\tpessoacpf as profissional_cpf,\n\tpessoaconselhoregional as profissional_conselho,\n\tif(horarioformatado = '', \n\t\tnull, \n\t\tdate_parse(horarioformatado, '%d/%m/%Y %H:%i')\n\t) as data_termino,\n\ttipo\nfrom \"delta\".\"bronze\".\"raw_doctorid_checks\"", "relation_name": "\"delta\".\"bronze\".\"stg_doctorid_checks\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:07.642272Z", "completed_at": "2025-07-01T18:31:07.684036Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:07.709863Z", "completed_at": "2025-07-01T18:31:07.709863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1527106761932373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_doctorid_shifts", "compiled": true, "compiled_code": "\n\nselect \n\tid as id_plantao,\n\tinstituicaonome as instituicao_nome,\n\tinstituicaoid as id_instituicao,\n\tpessoanome as profissional_nome,\n\tpessoacpf as profissional_cpf,\n\tpessoadatanascimentoformatada as profissional_data_nascimento,\n\tpessoaconselhoregional as profissional_conselho,\n\tpessoatelefoneformatado as profissional_telefone,\n\tespecialidadenome as nome_especialidade,\n\tgradenome as grade_nome,\n\ttipoplantaonome as tipo_plantao,\n\tcast(replace(replace(valorformatado, 'R$ '), ',', '.') as double) as valor,\n\tcast(replace(replace(valorapuradoformatado, 'R$ '), ',', '.') as double) as valor_apurado,\n\tperiodicidade,\n\tdiadasemana as dia_da_semana,\n\tcast(substituicao as boolean) as flag_substituicao,\n\tcast(pagamentoavista as boolean) as flag_pagamento_avista,\n\tcast(valorpadrao as boolean) as flag_valor_padrao,\n\tcast(originaldamaster as boolean) as flag_original_master,\n\tcast(fechado as boolean) as flag_fechado,\n\tcast(duracaoemhoras as double) as duracao_horas,\n\tcast(duracaoapuradaemhoras as double) as duracao_horas_apuradas,\n\tcast(diurno as boolean) as flag_diurno,\n\tcast(isfinaldesemana as boolean) as flag_final_de_semana,\n\tif(dataatribuicaoformatada = '', \n\t\tnull, \n\t\tdate_parse(dataatribuicaoformatada, '%d/%m/%Y %H:%i')\n\t) as data_atribuicao,\n\tif(horarioinicioapuradoformatado = '', \n\t\tnull, \n\t\tdate_parse(horarioinicioapuradoformatado, '%d/%m/%Y %H:%i')\n\t) as data_inicio_apurado,\n\tif(horarioterminoapuradoformatado = '', \n\t\tnull, \n\t\tdate_parse(horarioterminoapuradoformatado, '%d/%m/%Y %H:%i')\n\t) as data_termino_apurado,\n\tif(horarioinicioformatado = '', \n\t\tnull, \n\t\tdate_parse(horarioinicioformatado, '%d/%m/%Y %H:%i')\n\t) as data_inicio,\n\tif(horarioterminoformatado = '', \n\t\tnull, \n\t\tdate_parse(horarioterminoformatado, '%d/%m/%Y %H:%i')\n\t) as data_termino,\n\ttipovalidacaoplantaosemanalformatado\nfrom \"delta\".\"bronze\".\"raw_doctorid_shifts\"", "relation_name": "\"delta\".\"bronze\".\"stg_doctorid_shifts\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:07.805310Z", "completed_at": "2025-07-01T18:31:07.838604Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:07.854882Z", "completed_at": "2025-07-01T18:31:07.854882Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09144282341003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_ds_antifraude", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id_fraude,\n\tfrom_iso8601_timestamp(data_processamento) as data_processamento,\n\tid_profissional,\n\tlog,\n\tlog_json,\n\tmotivo as titulo,\n\tnome_profissional,\n\ttipo_conselho,\n\tnumero_conselho,\n\tregiao_conselho,\n\tplataforma,\n\tquantidade,\n\trow_number() over (partition by id_fraude order by data_processamento) as recorrencia,\n\tfrom_iso8601_timestamp(updated_at) as updated_at\nFROM \"delta\".\"bronze\".\"raw_ds_antifraude\"", "relation_name": "\"delta\".\"bronze\".\"stg_ds_antifraude\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:07.956948Z", "completed_at": "2025-07-01T18:31:07.982262Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:07.998342Z", "completed_at": "2025-07-01T18:31:07.998342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0934593677520752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_ds_cluster_psicologos", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id_profissional,\n\tclasse,\n\tCAST(parse_datetime(data, 'yyyyMMdd') AS date) as data_referencia,\n\tfrom_iso8601_timestamp(updated_at) as updated_at,\n\trank() OVER (partition by id_profissional order by data desc) as ranking\nFROM \"delta\".\"bronze\".\"raw_ds_cluster_psicologos\"", "relation_name": "\"delta\".\"bronze\".\"stg_ds_cluster_psicologos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:08.073649Z", "completed_at": "2025-07-01T18:31:08.090695Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:08.116715Z", "completed_at": "2025-07-01T18:31:08.116715Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07695841789245605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_ds_cnx_classificacao_cancelamento", "compiled": true, "compiled_code": "\n\nwith classificacao as (\n\tselect\n\t\tid_atendimento,\n\t\tclassificacao_cancelamento,\n\t\tdata_hora_processamento as data_hora_classificacao_cancelamento,\n\t\tflag_validado,\n\t\tmodel as modelo_utilizado_llm,\n\t\trow_number() over(partition by id_atendimento order by data_hora_processamento desc) as rn\n\tfrom \"delta\".\"bronze\".\"raw_ds_cnx_classificacao_cancelamento\"\n)\nselect\n\t*\nfrom classificacao\nwhere 1=1\n\tand rn = 1\n\tand flag_validado", "relation_name": "\"delta\".\"bronze\".\"stg_ds_cnx_classificacao_cancelamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:08.198269Z", "completed_at": "2025-07-01T18:31:08.225047Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:08.243722Z", "completed_at": "2025-07-01T18:31:08.243722Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08487629890441895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_ds_dataholter", "compiled": true, "compiled_code": "\n\nwith t1 as (\n    SELECT\n        to_hex(md5(to_utf8(id_outlier || data_referencia))) as id_outlier_evento,\n        id_outlier,\n        plataforma,\n        from_iso8601_timestamp(data_referencia) as data_referencia,\n        id_clinica_plano,\n        nome_clinica_plano,\n        metrica,\n        algoritmo,\n        row_number() over (partition by id_outlier order by data_processamento desc) as recorrencia,\n        log_json,\n        from_iso8601_timestamp(data_processamento) as data_processamento,\n        execution_time,\n        row_number() over (partition by id_outlier, data_referencia order by execution_time desc) as ranking\n    FROM \"delta\".\"bronze\".\"raw_ds_dataholter\"\n)\n\nSELECT \n    *\nFROM t1\nwhere ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_ds_dataholter\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:08.330415Z", "completed_at": "2025-07-01T18:31:08.353073Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:08.368740Z", "completed_at": "2025-07-01T18:31:08.368740Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07961440086364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_ds_predictions_noshow", "compiled": true, "compiled_code": "\n\n\nwith t1 as (\n\tselect\n\t\tid_atendimento\n\t\t,model_type\n\t    ,reuse_proba\n\t    ,data_processamento\n\t    ,row_number() over(partition by id_atendimento, model_type order by data_processamento desc) as rn\n\tfrom \"delta\".\"bronze\".\"raw_ds_predictions_noshow\"\n)\nselect\n\tid_atendimento\n\t,model_type\n\t,reuse_proba\n\t,data_processamento\nfrom t1\nwhere rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_ds_predictions_noshow\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:08.446717Z", "completed_at": "2025-07-01T18:31:08.486604Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:08.514803Z", "completed_at": "2025-07-01T18:31:08.514803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09978723526000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_ds_sentiment_analysis_atendimento", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id_atendimento,\n\tsentimento_negativo,\n\tsentimento_neutro,\n\tsentimento_positivo,\n\tsentimento_composto,\n\tfrom_iso8601_timestamp(updated_at) as updated_at\nFROM \"delta\".\"bronze\".\"raw_ds_sentiment_analysis\"", "relation_name": "\"delta\".\"bronze\".\"stg_ds_sentiment_analysis_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:08.607564Z", "completed_at": "2025-07-01T18:31:08.645494Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:08.657010Z", "completed_at": "2025-07-01T18:31:08.657010Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0879974365234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_ds_sofya_text_analysis", "compiled": true, "compiled_code": "\n\n\nwith t1 as (\n\tselect\n\t\tid_atendimento\n\t\t,subjetivo_utilization\n\t\t,subjetivo_originality\n\t\t,objetivo_utilization\n\t\t,objetivo_originality\n\t\t,avaliacao_utilization\n\t\t,avaliacao_originality\n\t\t,plano_utilization\n\t\t,plano_originality\n\t    ,data_processamento\n\t    ,row_number() over(partition by id_atendimento order by data_processamento desc) as rn\n\tfrom \"delta\".\"bronze\".\"raw_ds_sofya_text_analysis\"\n)\nselect\n\tid_atendimento\n\t,subjetivo_utilization\n\t,subjetivo_originality\n\t,objetivo_utilization\n\t,objetivo_originality\n\t,avaliacao_utilization\n\t,avaliacao_originality\n\t,plano_utilization\n\t,plano_originality\n\t,data_processamento\nfrom t1\nwhere rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_ds_sofya_text_analysis\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:08.746636Z", "completed_at": "2025-07-01T18:31:08.798425Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:08.808137Z", "completed_at": "2025-07-01T18:31:08.808137Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1118464469909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_engajamento", "compiled": true, "compiled_code": "\n\nwith t1 as(\nSELECT\n  'Zenklub' as plataforma,\n  'search' as tipo,\n  'view' as acao,\n  user_id as id_paciente,\n  cast(base_date as timestamp(3) with time zone) as data_base, \n  date(base_date at time zone 'America/Sao_Paulo') as data_brt_base, \n  year(base_date at time zone 'America/Sao_Paulo') as ano_base,\n  month(base_date at time zone 'America/Sao_Paulo') as mes_base,\n  day(base_date at time zone 'America/Sao_Paulo') as dia_base,\n  JSON_OBJECT(\n    key 'device' value device,\n    key 'interaction' value interaction,\n    key 'platform' value platform,\n    key 'page_from' value page_from,\n    key 'professional_id' value professional_id,\n    key 'region' value region,\n    key 'scope' value scope,\n    key 'source' value source ) as detalhe\nFROM\n  zenklub.core.dw_search_action_tracker\nWHERE date(base_date at time zone 'America/Sao_Paulo') >= date(now()) - interval '10' day\n\nUNION ALL\n\nSELECT\n  'Zenklub' as plataforma,\n  'mood_tracker' as tipo,\n  'view' as acao,\n  user_id as id_paciente,\n  cast(base_date as timestamp(3) with time zone) as data_base, \n  date(base_date at time zone 'America/Sao_Paulo') as data_brt_base, \n  year(base_date at time zone 'America/Sao_Paulo') as ano_base,\n  month(base_date at time zone 'America/Sao_Paulo') as mes_base,\n  day(base_date at time zone 'America/Sao_Paulo') as dia_base,\n  JSON_OBJECT(\n    key 'device' value device,\n    key 'interaction' value interaction,\n    key 'platform' value platform,\n    key 'page_from' value page_from,\n    key 'region' value region,\n    key 'scope' value scope,\n    key 'source' value source ) as detalhe\nFROM\n  zenklub.core.dw_mood_tracker_action_tracker\nWHERE date(base_date at time zone 'America/Sao_Paulo') >= date(now()) - interval '10' day\n\nUNION ALL\n\nSELECT\n  'Zenklub' as plataforma,\n  'content' as tipo,\n  'view' as acao,\n  user_id as id_paciente,\n  cast(base_date as timestamp(3) with time zone) as data_base, \n  date(base_date at time zone 'America/Sao_Paulo') as data_brt_base, \n  year(base_date at time zone 'America/Sao_Paulo') as ano_base,\n  month(base_date at time zone 'America/Sao_Paulo') as mes_base,\n  day(base_date at time zone 'America/Sao_Paulo') as dia_base,\n  JSON_OBJECT(\n    key 'device' value device,\n    key 'interaction' value interaction,\n    key 'platform' value platform,\n    key 'page_from' value page_from,\n    key'region' value region,\n    key 'scope' value scope,\n    key 'source' value source ) as detalhe\nFROM\n  zenklub.core.dw_content_action_tracker\nWHERE date(base_date at time zone 'America/Sao_Paulo') >= date(now()) - interval '10' day\n\nUNION ALL\n\nSELECT\n  'Zenklub' as plataforma,\n  'clari' as tipo,\n  'view' as acao,\n  user_id as id_paciente,\n  cast(base_date as timestamp(3) with time zone) as data_base, \n  date(base_date at time zone 'America/Sao_Paulo') as data_brt_base, \n  year(base_date at time zone 'America/Sao_Paulo') as ano_base,\n  month(base_date at time zone 'America/Sao_Paulo') as mes_base,\n  day(base_date at time zone 'America/Sao_Paulo') as dia_base,\n  JSON_OBJECT(\n    key 'device' value device,\n    key 'interaction' value interaction,\n    key 'platform' value platform,\n    key 'scope' value scope,\n    key 'source' value source ) as detalhe\nFROM\n  zenklub.core.clari_full_action_tracker\nWHERE date(base_date at time zone 'America/Sao_Paulo') >= date(now()) - interval '10' day\n\nUNION ALL\n\nSELECT\n  'Zenklub' as plataforma,\n  'session' as tipo,\n  'view' as acao,\n  user_id as id_paciente,\n  cast(base_date as timestamp(3) with time zone) as data_base, \n  date(base_date at time zone 'America/Sao_Paulo') as data_brt_base, \n  year(base_date at time zone 'America/Sao_Paulo') as ano_base,\n  month(base_date at time zone 'America/Sao_Paulo') as mes_base,\n  day(base_date at time zone 'America/Sao_Paulo') as dia_base,\n  JSON_OBJECT(\n    key 'device' value device,\n    key 'interaction' value interaction,\n    key 'platform' value platform,\n    key 'scope' value scope,\n    key 'source' value source ) as detalhe\nFROM\n  zenklub.core.dw_session_action_tracker\nWHERE date(base_date at time zone 'America/Sao_Paulo') >= date(now()) - interval '10' day\n) \nselect \n    *,\n    lower(to_hex(md5(to_utf8(cast(coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(acao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_base as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_base as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ano_base as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(mes_base as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(dia_base as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(detalhe as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t1 \nwhere id_paciente is not null", "relation_name": "\"delta\".\"gold\".\"stg_engajamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:08.893017Z", "completed_at": "2025-07-01T18:31:08.918290Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:08.936780Z", "completed_at": "2025-07-01T18:31:08.936780Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09088706970214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_hs_associations_clinicas", "compiled": true, "compiled_code": "\n\nWITH associations_clinicas as (\n\tSELECT\n\t\tcast(id_from as bigint) as id_from,\n\t\tid_to,\n\t\tobject_from,\n\t\tobject_to,\n\t\tdata_insert as data_insert_engenharia,\n\t\tdate(data_insert at time zone 'America/Sao_Paulo') as data_brt_insert_engenharia,\n\t\trow_number() OVER (PARTITION BY id_from,object_from ORDER BY data_insert DESC) AS ranking\n\tFROM \"delta\".\"bronze\".\"raw_hs_associations\"\n\twhere object_from = 'clinicas'\n)\nSELECT\n*\nfrom associations_clinicas\nwhere ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_hs_associations_clinicas\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:09.022131Z", "completed_at": "2025-07-01T18:31:09.043248Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:09.068064Z", "completed_at": "2025-07-01T18:31:09.068064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08612370491027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_hs_associations_deals", "compiled": true, "compiled_code": "\n\nWITH associations_deals as (\n\tSELECT\n\t\tcast(id_from as bigint) as id_from,\n\t\tid_to,\n\t\tobject_from,\n\t\tobject_to,\n\t\tdata_insert as data_insert_engenharia,\n\t\tdate(data_insert at time zone 'America/Sao_Paulo') as data_brt_insert_engenharia,\n\t\trow_number() OVER (PARTITION BY id_from,object_from ORDER BY data_insert DESC) AS ranking\n\tFROM \"delta\".\"bronze\".\"raw_hs_associations\"\n\twhere object_from = 'deals'\n)\nSELECT\n*\nfrom associations_deals\nwhere ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_hs_associations_deals\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:09.158916Z", "completed_at": "2025-07-01T18:31:09.181016Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:09.198886Z", "completed_at": "2025-07-01T18:31:09.198886Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0814521312713623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_hs_clinicas", "compiled": true, "compiled_code": "\n\nWITH clinicas as (\n\tSELECT\n\t\t\"record id\" as id_clinica_hubspot,\n\t\t\"nome da cl\u00ednica\" as nome_clinica,\n\t\tcast(\"id da cl\u00ednica\" as bigint) as id_clinica,\n\t\tplataforma,\n\t\t\"o cliente permite fazer comunica\u00e7\u00e3o n\u00e3o transacional (allow list) feita pelo time de plg via braze?\" as flag_permite_comunicacao_braze,\n\t\t\"o cliente permite fazer comunica\u00e7\u00e3o n\u00e3o transacional (allow list) feita pelo time de plg via insider?\" as flag_permite_comunicacao_insider,\n\t\tfrom_iso8601_timestamp(\"object last modified date/time\") as data_ultima_atualizacao_hubspot,\n\t\tdate(substr(\"object last modified date/time\",1,10)) as data_brt_ultima_atualizacao_hubspot,\n\t\tfrom_iso8601_timestamp(\"object create date/time\") as data_criacao_hubspot,\n\t\tdate(substr(\"object create date/time\",1,10)) as data_brt_criacao_hubspot,\n\t\t\"associated company\" as associated_companies,\n\t\t\"associated company ids\" as associated_ids_companies,\n\t\tdate(\"previs\u00e3o de in\u00edcio (go live)\") as previsao_inicio_go_live,\n\t\tdata_insert as data_insert_engenharia,\n\t\tdate(data_insert at time zone 'America/Sao_Paulo') as data_brt_insert_engenharia,\n\t\trow_number() OVER (PARTITION BY \"record id\" ORDER BY \"object last modified date/time\" DESC) AS ranking\n\tFROM \"delta\".\"bronze\".\"raw_hs_clinicas\"\n)\nSELECT\n*\nfrom clinicas\nwhere ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_hs_clinicas\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:09.277310Z", "completed_at": "2025-07-01T18:31:09.291197Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:09.323300Z", "completed_at": "2025-07-01T18:31:09.323300Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08197569847106934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_hs_companies", "compiled": true, "compiled_code": "\n\nSELECT\n\tid as id_company_hubspot,\n\tproperties_name as nome_company_hubspot,\n\tproperties_bu_multiplo as bu,\n\tproperties_razao_social as razao_social,\n\tproperties_cnpj as cnpj,\n\tproperties_status as status_conta,\n\tproperties_industry as setor,\n\tproperties_operadoras__modalidade as modalidade,\n\tproperties_operadoras__codigo_ans_v2 as codigo_ans,\n\tproperties_company_size as range_vidas,\n\tproperties_csm_responsavel_pela_empresa_atualmente as id_cs_responsavel,\n\tcast(properties_numero_de_funcionarios__exato_ as double) as total_funcionarios,\n\tproperties_operadoras__vida_ans as quantidade_vidas_ans,\n\tproperties_operadoras__conta_pai as nome_conta_pai_operadoras,\n\tproperties_nome_do_canal as nome_canal,\n\tproperties_categoria_de_cliente as categoria_cliente,\n\tproperties_categoria_da_operadora as categoria_operadora,\n\tproperties_acesso_ao_conexa_manager as acesso_conexa_manager\nFROM zenklub.hubspot_airbyte.companies", "relation_name": "\"delta\".\"bronze\".\"stg_hs_companies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:09.408766Z", "completed_at": "2025-07-01T18:31:09.435633Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:09.452804Z", "completed_at": "2025-07-01T18:31:09.452804Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08821463584899902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_hs_deals", "compiled": true, "compiled_code": "\n\nWITH deals as (\n\tSELECT\n\t\t\"id do registro.\" as id_deals,\n\t\tfrom_iso8601_timestamp(\"data da \u00faltima modifica\u00e7\u00e3o\") as data_ultima_atualizacao_hubspot,\n\t\tdate(substr(\"data da \u00faltima modifica\u00e7\u00e3o\",1,10)) as data_brt_ultima_atualizacao_hubspot,\n\t\tpipeline,\n\t\t\"macro estrat\u00e9gia\" as macro_estrategia,\n\t\t\"tipo da expans\u00e3o ou aditivo\" as tipo_expansao_aditivo,\n\t\t\"etapa do neg\u00f3cio\" as etapa_negocio,\n\t\t\"[canais] modelo parceria\" as canais_modelo_parceria,\n\t\tfrom_iso8601_timestamp(\"data de fechamento\") as data_fechamento,\n\t\tdate(substr(\"data de fechamento\",1,10)) as data_brt_fechamento,\n\t\tfrom_iso8601_timestamp(\"data de in\u00edcio do churn\") as data_inicio_churn,\n\t\tdate(substr(\"data de in\u00edcio do churn\",1,10)) as data_brt_inicio_churn,\n\t\tfrom_iso8601_timestamp(\"[cs] data fim do contrato atual\") as data_cs_fim_contrato_atual,\n\t\tdate(substr(\"[cs] data fim do contrato atual\",1,10)) as data_brt_cs_fim_contrato_atual,\n\t\tfrom_iso8601_timestamp(\"[cs] data inicio do contrato atual\") as data_cs_inicio_contrato_atual,\n\t\tdate(substr(\"[cs] data inicio do contrato atual\",1,10)) as data_brt_cs_inicio_contrato_atual,\n\t\tfrom_iso8601_timestamp(\"data de cria\u00e7\u00e3o\") as data_criacao,\n\t\tdate(substr(\"data de cria\u00e7\u00e3o\",1,10)) as data_brt_criacao,\n\t\t\"associated company\" as associated_companies,\n\t\t\"associated company ids\" as associated_ids_companies,\n\t\t\"nome do canal\" as nome_canal,\n\t\t\"[canais] tipo de canal\" as tipo_canal,\n\t\tdata_insert as data_insert_engenharia,\n\t\tdate(data_insert at time zone 'America/Sao_Paulo') as data_brt_insert_engenharia,\n\t\trow_number() OVER (PARTITION BY \"id do registro.\" ORDER BY \"data da \u00faltima modifica\u00e7\u00e3o\" DESC) AS ranking\n\tFROM \"delta\".\"bronze\".\"raw_hs_deals\"\n)\nSELECT\n*\nfrom deals\nwhere ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_hs_deals\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:09.524326Z", "completed_at": "2025-07-01T18:31:09.552473Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:09.567810Z", "completed_at": "2025-07-01T18:31:09.567810Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07730221748352051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_indices_pacientes", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect \n\tuser_id as id_paciente,\n\tto_hex(md5(to_utf8(user_id || 'zk'))) as sk_paciente,\n\tbase_date as data_indice,\n\tism_final_class as resultado_ism,\n\ticm_final_class as resultado_icm,\n\tiscm_final_class as resultado_iscm,\n\t--id_clinica_plano,\n\tjson_object(key 'metodo' value metodo, key 'score_final_clari' value score_final_clari, key 'first_evaluation' value first_evaluation) as detalhes,\n\tcompany_id as id_empresa,\n\tcompany_name nome_empresa,\n\t'Zenklub' AS plataforma\nfrom zenklub.core.iscm_v4 as iscm  \n),\nt2 as(\nselect \n    *,\n    lower(to_hex(md5(to_utf8(cast(coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_indice as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(resultado_ism as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(resultado_icm as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(resultado_iscm as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(detalhes as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t1 \n),\nprincipal as(\nselect \n    t2.*,\n    row_number() OVER (partition by sk_teste) as ranking\nfrom t2\n)\nselect *\nfrom principal\nwhere ranking = 1", "relation_name": "\"delta\".\"gold\".\"stg_indices_pacientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:09.654275Z", "completed_at": "2025-07-01T18:31:09.683683Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:09.706482Z", "completed_at": "2025-07-01T18:31:09.706482Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09498000144958496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_kns_consolidado", "compiled": true, "compiled_code": "\n\n\nSELECT \n\tcpf,\n\ttipo_contato,\n\tnivel1,\n\tdate_parse(data_e_hora_tentativa, '%d/%m/%Y') as data_e_hora_tentativa,\n\ttelefone,\n\tstatus,\n\tstatus_discadora,\n\tcast(tentativas as int) as tentativas\nFROM \"delta\".\"bronze\".\"raw_sftp_kainos_consolidado\"", "relation_name": "\"delta\".\"bronze\".\"stg_kns_consolidado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:09.812535Z", "completed_at": "2025-07-01T18:31:09.843204Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:09.875697Z", "completed_at": "2025-07-01T18:31:09.875697Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10933256149291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_kns_discadora", "compiled": true, "compiled_code": "\n\n\nwith tabs as (\n\tselect distinct dispositionid, tabulacao\n\tfrom \"delta\".\"bronze\".\"raw_sftp_discadora\"\n\twhere tabulacao is not null\n)\n\nselect \n\tdispositionid,\n\ttabs.tabulacao,\n\tcallid,\n\tagentid,\n\toperador,\n\tcampaignid,\n\tcampanha,\n\tCASE\n\t\tWHEN length(startdate) > 16 THEN date_parse(startdate, '%Y-%m-%d %H:%i:%s.%f')\n\t\tWHEN length(startdate) <= 16 THEN date_parse(startdate, '%m/%d/%Y %k:%i')\n\tEND AS startdate,\n\tCASE\n\t\tWHEN length(endwrap) > 16 THEN date_parse(endwrap, '%Y-%m-%d %H:%i:%s.%f')\n\t\tWHEN length(endwrap) <= 16 THEN date_parse(endwrap, '%m/%d/%Y %k:%i')\n\tEND AS endwrap,\n\tCASE\n\t\tWHEN length(endcall) > 16 THEN date_parse(endcall, '%Y-%m-%d %H:%i:%s.%f')\n\t\tWHEN length(endcall) <= 16 THEN date_parse(endcall, '%m/%d/%Y %k:%i')\n\tEND AS endcall,\n\ttablename,\n\toriginalphonenumber,\n\tdnis,\n\tcampaigndata,\n\tlpad(customerid, 11, '0') as customerid,\n\tcallidtelecom\nfrom \"delta\".\"bronze\".\"raw_sftp_discadora\" d\ninner join tabs using (dispositionid)", "relation_name": "\"delta\".\"bronze\".\"stg_kns_discadora\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:09.958023Z", "completed_at": "2025-07-01T18:31:09.993894Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:10.018017Z", "completed_at": "2025-07-01T18:31:10.018017Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09554409980773926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_kns_ligacoes", "compiled": true, "compiled_code": "\n\n\nWITH t1 AS (\n    SELECT \n        atendente,\n        CASE\n            WHEN length(data_e_hora_tentativa) < 12 THEN try_cast(date_parse(data_e_hora_tentativa, '%d/%m/%Y') as date)\n            ELSE try_cast(date_parse(split(data_e_hora_tentativa, ' ')[1], '%Y-%m-%d') as date)\n        END AS data_e_hora_tentativa,\n        UPPER(clco_tabulacao_1) AS clco_tabulacao_1,\n        UPPER(clco_tabulacao_2) AS clco_tabulacao_2,\n        CASE\n            WHEN clco_tabulacao_2 IN ('N\u00c3O ATENDEU', 'CAIXA POSTAL', 'BLACKLIST', 'PESSOA ERRADA', 'DESLIGOU','OCUPADO','MUDA','TEL INEXISTENTE') THEN 'NAO_EFETIVO'\n            ELSE 'EFETIVO'\n        END AS tipo_contato,\n        clco_descricao,\n        prot_num_protocolo,\n        crm_id_usuario,\n        --try_cast(\n        --    date_parse(nullif(clco_dt_agendamento, 'NULL'), '%d/%m/%Y')\n        --as date) clco_dt_agendamento,\n        clco_hr_agendamento,\n        clco_tipo_agendamento,\n        clco_usuario_telefonia,\n        clco_ddd_agendamento,\n        clco_telefone_agendamento,\n        clco_ddd_discado, \n        clco_telefone_discado,\n        clda_clinica,\n        clda_id_paciente,\n        clda_nome_paciente,\n        clda_genero,\n        --try_cast(\n        --    date_parse(nullif(clda_data_nascimento, 'NULL'), '%d/%m/%Y') \n        --as date) clda_data_nascimento,\n        lpad(clda_cpf , 11, '0') AS clda_cpf,\n        clda_email_paciente,\n        case when tick_elegivel = 'Sim' then true else false end as flag_tick_elegivel,\n        case when tick_ativou = 'Sim' then true else false end as flag_tick_ativou,\n        case when tick_recusou = 'Sim' then true else false end as flag_tick_recusou,\n        case when tick_agendou = 'Sim' then true else false end as flag_tick_agendou,\n        tick_ativou,\n        tick_elegivel,\n        tick_recusou,\n        tick_agendou,\n        -- try_cast(\n        --    date_parse(nullif(tick_dt_consulta, 'NULL'), '%d/%m/%Y')\n        --as date) tick_dt_consulta,\n        --try_cast(\n        --    date_parse(nullif(tick_dt_inclusao, 'NULL'), '%d/%m/%Y')\n        ---as date) tick_dt_inclusao,\n        tick_id_consulta,\n        origem_cliente,\n        observacao,\n        row_number() over (partition by clda_cpf order by data_e_hora_tentativa desc) rn\n    FROM \"delta\".\"bronze\".\"raw_sftp_kainos\"\n    WHERE clco_tabulacao_2 is not null and clda_cpf is not null\n)\n\nSELECT * FROM t1", "relation_name": "\"delta\".\"bronze\".\"stg_kns_ligacoes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:10.098230Z", "completed_at": "2025-07-01T18:31:10.123770Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:10.144027Z", "completed_at": "2025-07-01T18:31:10.144027Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08602666854858398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_kns_whatsapp_otima", "compiled": true, "compiled_code": "\n\n\nSELECT\n    DISTINCT identificador,\n    -- empresa,\n    -- fornecedor,\n    -- codigo_campanha,\n    -- campanha,\n    date_parse(data_agendada, '%m/%d/%Y %k:%i') AS data_agendada,\n    destino,\n    -- campo_informado,\n    date_parse(data_envio, '%m/%d/%Y %k:%i') AS data_envio,\n    date_parse(data_confirmacao, '%m/%d/%Y %k:%i') AS data_confirmacao,\n    date_parse(data_leitura, '%m/%d/%Y %k:%i') AS data_leitura,\n    mensagem,\n    situacao -- \n    -- nome_do_arquivo,\n    -- retornos\nFROM\n    \"delta\".\"bronze\".\"raw_sftp_whatsapp_otima\"", "relation_name": "\"delta\".\"bronze\".\"stg_kns_whatsapp_otima\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:10.229197Z", "completed_at": "2025-07-01T18:31:10.254833Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:10.268695Z", "completed_at": "2025-07-01T18:31:10.268695Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09044718742370605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_kns_whatsapp_weopen", "compiled": true, "compiled_code": "\n\n\nWITH t1 AS (\n    SELECT\n        IF(what_id IS NULL, 9999, cast(what_id AS bigint)) AS what_id,\n        -- cast(clie_id_cliente as bigint) as clie_id_cliente,\n        -- cast(orcl_id_origem_cliente as bigint) as orcl_id_origem_cliente,\n        -- whco_id_whatsapp_conta,\n        CASE\n            WHEN length(what_dt_inclusao) > 16 THEN date_parse(what_dt_inclusao, '%Y-%m-%d %H:%i:%s.%f')\n            WHEN length(what_dt_inclusao) <= 16 THEN date_parse(what_dt_inclusao, '%m/%d/%Y %k:%i')\n        END AS what_dt_inclusao,\n        if(length(what_telefone) = 13, what_telefone, concat(substr(what_telefone, 1, 4), '9', substr(what_telefone, 5))) as what_telefone, -- Tratando 9 digito\n        what_telefone as what_original_telefone,\n        -- what_fl_iniciado,\n        -- what_fl_aguardando_atendimento,\n        -- what_fl_finalizado,\n        -- prot_num_protocolo,\n        -- crm_id_usuario_abriu_atendimento,\n        nome_usuario,\n        CASE\n            WHEN length(what_dt_inicio) > 16 THEN date_parse(what_dt_inicio, '%Y-%m-%d %H:%i:%s.%f')\n            WHEN length(what_dt_inicio) <= 16 THEN date_parse(what_dt_inicio, '%m/%d/%Y %k:%i')\n        END AS what_dt_inicio,\n        clie_nome,\n        clie_cpf_cnpj,\n        -- clda_dado_adicional,\n        -- clda_id_paciente,\n        tabulacao_n1,\n        tabulacao_n2,\n        CASE\n            WHEN length(data_ult_tabulacao) > 16 THEN date_parse(data_ult_tabulacao, '%Y-%m-%d %H:%i:%s.%f')\n            WHEN length(data_ult_tabulacao) <= 16 THEN date_parse(data_ult_tabulacao, '%m/%d/%Y %k:%i')\n        END AS data_ult_tabulacao,\n        row_number() over (\n            PARTITION by what_telefone\n            ORDER BY\n                what_id DESC\n        ) AS rn,\n        (select count(distinct what_id) from \"delta\".\"bronze\".\"raw_sftp_whatsapp\" sub where sub.what_telefone = weo.what_telefone) as n_calls\n    FROM\n\t\t\"delta\".\"bronze\".\"raw_sftp_whatsapp\" weo\n    WHERE\n        lower(tabulacao_n1) NOT LIKE '%teste%'\n)\n\nSELECT\n    *,\n    min(what_dt_inclusao) over (partition by what_telefone) as data_primeira_mensagem\nFROM\n    t1\nWHERE\n    rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_kns_whatsapp_weopen\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:10.359700Z", "completed_at": "2025-07-01T18:31:10.376061Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:10.410518Z", "completed_at": "2025-07-01T18:31:10.410518Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09213566780090332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_compromisso_acompanhamento_detalhe", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n    from_utf8(P.name) AS nome_paciente,\n    from_utf8(P.document) AS cpf,\n    from_utf8(C.name) AS grupo_economico,\n    from_utf8(AT.name) AS equipe_aps,\n    from_utf8(cc.title) as tipo,\n    array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n    from_utf8(TG.id) AS id_grupo_tuss,\n    from_utf8(TG.name) AS compromisso,\n    from_utf8(ER.result) AS resultado,\n    from_utf8(TG.exam_unit) AS unidade_do_resultado,\n    IF(AD.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n    users.id as id_do_usuario,\n    from_utf8(users.name) AS nome_do_usuario,\n    CASE\n        WHEN from_utf8(AD.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(AD.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(AD.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(AD.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n\tEND AS plataforma,\n    users.client_user_code as codigo_do_usuario,   \n    AD.use_date AS data_compromisso_realizado,\n    cast(AD.created_at as timestamp(3) with time zone) AS data_inclusao,\n    cast(AD.updated_at as timestamp(3) with time zone) AS data_ultima_atualizacao,\n    current_timestamp(3) as execution_time\nFROM lina_clickhouse.h3alth_analytics.accompany_details AS AD\n    LEFT JOIN lina_clickhouse.h3alth_analytics.users ON AD.user_id = users.id\n    LEFT JOIN lina_clickhouse.h3alth_analytics.exam_results AS ER ON AD.id = ER.accompany_details_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON AD.person_id = CLP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on AD.person_id = P.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n    LEFT JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n    LEFT JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.tuss_groups AS TG ON AD.tuss_group_id = TG.id\n    LEFT JOIN lina_clickhouse.h3alth_analytics.careline_categories as cc on cc.id = cl.careline_category_id  \nWHERE\n    from_utf8(AD.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\n    AND CLP.inactivation_date IS NULL\nGROUP BY P.client_person_code\n         , P.name\n         , C.name\n         , 11\n         , TG.id\n         , TG.name\n         , ER.result\n         , TG.exam_unit\n         , AD.use_date\n         , AD.created_at\n         , AD.updated_at\n         , P.document\n         , users.id\n         , users.name\n         , users.client_user_code\n         , AT.name\n         , cc.title\n         , AD.user_id\n         , AD.insurer_id", "relation_name": "\"delta\".\"bronze\".\"stg_lina_compromisso_acompanhamento_detalhe\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:10.485513Z", "completed_at": "2025-07-01T18:31:10.515253Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:10.544845Z", "completed_at": "2025-07-01T18:31:10.544845Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0921182632446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_compromisso_aderencia_atividade_fisica", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n    from_utf8(P.name) AS nome_paciente,\n    from_utf8(P.document) AS cpf,\n    from_utf8(C.name) AS grupo_economico,\n    from_utf8(AT.name) AS equipe_aps,\n    array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n    'Ader\u00eancia a Atividade F\u00edsica' AS compromisso,\n    from_utf8(PAS.title) AS resultado,\n    '-' AS unidade_do_resultado,\n    IF(PPA.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n    users.id as id_do_usuario,\n    from_utf8(users.name) AS nome_do_usuario,\n    users.client_user_code as codigo_do_usuario,\n    CASE\n        WHEN from_utf8(PPA.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(PPA.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(PPA.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(PPA.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n\tEND AS plataforma,\n    PPA.date AS data_compromisso_realizado,\n    cast(PPA.created_at as timestamp(3) with time zone) AS data_inclusao,\n    cast(PPA.updated_at as timestamp(3) with time zone) AS data_ultima_atualizacao,\n    current_timestamp(3) as execution_time\nFROM lina_clickhouse.h3alth_analytics.people_physical_activities AS PPA\n    LEFT JOIN lina_clickhouse.h3alth_analytics.purpose_adhesion_status AS PAS ON PAS.id = PPA.purpose_adhesion_status_id\n    LEFT JOIN lina_clickhouse.h3alth_analytics.users ON PPA.user_id = users.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON PPA.person_id = CLP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on PPA.person_id = P.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\nWHERE\n    from_utf8(PPA.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\n    AND CLP.inactivation_date IS NULL\nGROUP BY P.client_person_code\n         , P.name\n         , C.name\n         , 10\n         , PAS.title\n         , PPA.quantity\n         , PPA.frequency\n         , PPA.date\n         , PPA.created_at\n         , PPA.updated_at\n         , P.document\n         , users.id\n         , users.name\n         , users.client_user_code\n         , AT.name\n         , PPA.insurer_id", "relation_name": "\"delta\".\"bronze\".\"stg_lina_compromisso_aderencia_atividade_fisica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:10.615523Z", "completed_at": "2025-07-01T18:31:10.641770Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:10.673668Z", "completed_at": "2025-07-01T18:31:10.673668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09378862380981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_compromisso_adesao_nutricao", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n    from_utf8(P.name) AS nome_paciente,\n    from_utf8(P.document) AS cpf,\n    from_utf8(C.name) AS grupo_economico,\n    from_utf8(AT.name) AS equipe_aps,\n    array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n    'Ades\u00e3o a nutri\u00e7\u00e3o' AS compromisso,\n    from_utf8(PAS.title) AS resultado,\n    '-' AS unidade_do_resultado,\n    IF(PNA.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n    users.id as id_do_usuario,\n    from_utf8(users.name) AS nome_do_usuario,\n    users.client_user_code as codigo_do_usuario,\n    CASE\n        WHEN from_utf8(PNA.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(PNA.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(PNA.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(PNA.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n\tEND AS plataforma,\n    PNA.date AS data_compromisso_realizado,\n    cast(PNA.created_at as timestamp(3) with time zone) AS data_inclusao,\n    cast(PNA.updated_at as timestamp(3) with time zone) AS data_ultima_atualizacao,\n    current_timestamp(3) as execution_time\nFROM lina_clickhouse.h3alth_analytics.people_nutrition_adhesions AS PNA\n    LEFT JOIN lina_clickhouse.h3alth_analytics.purpose_adhesion_status AS PAS ON PAS.id = PNA.purpose_adhesion_status_id\n    LEFT JOIN lina_clickhouse.h3alth_analytics.users ON PNA.user_id = users.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON PNA.person_id = CLP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on PNA.person_id = P.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\nWHERE\n    from_utf8(PNA.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\n    AND CLP.inactivation_date IS NULL\nGROUP BY P.client_person_code\n         , P.name\n         , C.name\n         , 10\n         , PAS.title\n         , PNA.date\n         , PNA.created_at\n         , PNA.updated_at\n         , P.document\n         , users.id\n         , users.name\n         , users.client_user_code\n         , AT.name\n         , PNA.insurer_id", "relation_name": "\"delta\".\"bronze\".\"stg_lina_compromisso_adesao_nutricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:10.755789Z", "completed_at": "2025-07-01T18:31:10.783164Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:10.805678Z", "completed_at": "2025-07-01T18:31:10.805678Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08991050720214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_compromisso_frequencia_atividade_fisica", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n    from_utf8(P.name) AS nome_paciente,\n    from_utf8(P.document) AS cpf,\n    from_utf8(C.name) AS grupo_economico,\n    from_utf8(AT.name) AS equipe_aps,\n    array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n    'Frequencia Atividade F\u00edsica' AS compromisso,\n    concat(cast(PPA.quantity as varchar), ' x ', cast(PPA.frequency as varchar)) AS resultado,\n    '-' AS unidade_do_resultado,\n    IF(PPA.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n    users.id as id_do_usuario,\n    from_utf8(users.name) AS nome_do_usuario,\n    users.client_user_code as codigo_do_usuario,\n    CASE\n        WHEN from_utf8(PPA.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(PPA.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(PPA.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(PPA.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n\tEND AS plataforma,\n    PPA.date AS data_compromisso_realizado,\n    cast(PPA.created_at as timestamp(3) with time zone) AS data_inclusao,\n    cast(PPA.updated_at as timestamp(3) with time zone) AS data_ultima_atualizacao,\n    current_timestamp(3) as execution_time\nFROM lina_clickhouse.h3alth_analytics.people_physical_activities AS PPA\n    LEFT JOIN lina_clickhouse.h3alth_analytics.purpose_adhesion_status AS PAS ON PAS.id = PPA.purpose_adhesion_status_id\n    LEFT JOIN lina_clickhouse.h3alth_analytics.users ON PPA.user_id = users.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON PPA.person_id = CLP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on PPA.person_id = P.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\nWHERE\n    from_utf8(PPA.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\n    AND CLP.inactivation_date IS NULL\nGROUP BY P.client_person_code\n         , P.name\n         , C.name\n         , 10\n         , PAS.title\n         , PPA.quantity\n         , PPA.frequency\n         , PPA.date\n         , PPA.created_at\n         , PPA.updated_at\n         , P.document\n         , users.id\n         , users.name\n         , users.client_user_code\n         , AT.name\n         , PPA.insurer_id", "relation_name": "\"delta\".\"bronze\".\"stg_lina_compromisso_frequencia_atividade_fisica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:10.875750Z", "completed_at": "2025-07-01T18:31:10.907620Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:10.923475Z", "completed_at": "2025-07-01T18:31:10.923475Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07946419715881348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_compromisso_liberacao_atividade_fisica", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n    from_utf8(P.name) AS nome_paciente,\n    from_utf8(P.document) AS cpf,\n    from_utf8(C.name) AS grupo_economico,\n    from_utf8(AT.name) AS equipe_aps,\n    array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n    'Libera\u00e7\u00e3o Atividade F\u00edsica' AS compromisso,\n    from_utf8(AW.title) AS resultado,\n    '-' AS unidade_do_resultado,\n    IF(PAPA.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n    users.id as id_do_usuario,\n    from_utf8(users.name) AS nome_do_usuario,\n    users.client_user_code as codigo_do_usuario,\n    CASE\n        WHEN from_utf8(PAPA.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(PAPA.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(PAPA.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(PAPA.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n\tEND AS plataforma,\n    PAPA.date AS data_compromisso_realizado,\n    cast(PAPA.created_at as timestamp(3) with time zone) AS data_inclusao,\n    cast(PAPA.updated_at as timestamp(3) with time zone) AS data_ultima_atualizacao,\n    current_timestamp(3) as execution_time\nFROM lina_clickhouse.h3alth_analytics.people_approval_physical_activities AS PAPA\n    LEFT JOIN lina_clickhouse.h3alth_analytics.approval_status AS AW ON AW.id = PAPA.approval_status_id\n    LEFT JOIN lina_clickhouse.h3alth_analytics.users ON PAPA.user_id = users.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON PAPA.person_id = CLP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on PAPA.person_id = P.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n    INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n    INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\nWHERE\n    from_utf8(PAPA.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\n    AND CLP.inactivation_date IS NULL\nGROUP BY P.client_person_code\n         , P.name\n         , C.name\n         , 10\n         , AW.title\n         , PAPA.date\n         , PAPA.created_at\n         , PAPA.updated_at\n         , P.document\n         , users.id\n         , users.name\n         , users.client_user_code\n         , AT.name\n         , PAPA.insurer_id", "relation_name": "\"delta\".\"bronze\".\"stg_lina_compromisso_liberacao_atividade_fisica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:11.019403Z", "completed_at": "2025-07-01T18:31:11.050378Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:11.099961Z", "completed_at": "2025-07-01T18:31:11.099961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12818217277526855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_getbeneficiariescarelines", "compiled": true, "compiled_code": "\n\nwith uses as(\n    SELECT\n        person_id,\n        max(use_date) as use_date\n    from lina_clickhouse.h3alth_analytics.uses\n    group by 1\n), history as (\nselect \tcpsh.person_id,\n\t\tcpsh.care_line_id,\n\t\tcpsh.deactivation_reason_id,\n\t\tcpsh.created_at,\n\t\tROW_NUMBER() OVER (PARTITION BY cpsh.person_id,cpsh.care_line_id ORDER BY cpsh.created_at DESC) AS ranking\nfrom lina_clickhouse.h3alth_analytics.careline_person_status_history as cpsh\n)\nSELECT\n    from_utf8(p.client_person_code) AS id_paciente,\n    from_utf8(p.name) AS nome_paciente,\n    from_utf8(cl.id) AS id_linha_de_cuidado,\n    from_utf8(cl.name) AS linha_de_cuidado,\n    IF(clp.added_by_user = 1, 'Manual', 'Lina') AS tipo_identificacao,\n    date(clp.start_date) AS data_identificacao,\n    CASE\n        WHEN clp.is_confirmed = 1 \n\t\t\tTHEN 'Validado'\n        WHEN clp.is_confirmed = 0 AND clp.validation_date IS NOT NULL \n\t\t\tTHEN 'Invalidado'\n        ELSE 'N\u00e3o validado'\n    END AS status_validacao,\n    IF(clp.inactivation_date is null, 'Ativa', 'Inativa') as status_ativacao,\n    date(clp.inactivation_date) AS data_inativacao,\n    from_utf8(u.id) as id_do_usuario,\n    from_utf8(u.name) AS validacao_usuario,\n    clp.validation_date AS data_validacao,\n    cast(clp.created_at as timestamp(3) with time zone) as data_criacao,\n    from_utf8(CG.title) AS grupo_linhadecuidado,\n    from_utf8(cu.client_customer_code) as id_clinica,\n    from_utf8(CC.title) AS careline_category,\n    from_utf8(p.doctor) as medico_de_referencia,\n    us.use_date,\n    h.created_at as created_at,\n    from_utf8(dcr.title) as motivo_de_recusa,\n    cast(cl.is_individual as boolean) as acompanhamento_individual,\n    current_timestamp(3) as data_execucao,\n    CASE\n        WHEN from_utf8(p.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(p.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(p.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(p.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n\tEND AS plataforma\nFROM lina_clickhouse.h3alth_analytics.care_line_people AS clp\nINNER JOIN lina_clickhouse.h3alth_analytics.people AS p ON clp.person_id = p.id\nINNER JOIN lina_clickhouse.h3alth_analytics.care_lines AS cl ON clp.care_line_id = cl.id\nLEFT JOIN lina_clickhouse.h3alth_analytics.users AS u ON u.id = clp.user_confirmed_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.careline_groups AS CG ON CG.id = cl.careline_group_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.careline_categories AS CC ON CC.id = cl.careline_category_id\nleft join lina_clickhouse.h3alth_analytics.customers as cu on p.customer_id = cu.id\nleft join uses as us on p.id = us.person_id\nleft join history as h on h.person_id = clp.person_id and h.care_line_id = cl.id and h.ranking = 1\nleft join lina_clickhouse.h3alth_analytics.deactivation_careline_reasons as dcr on dcr.id = h.deactivation_reason_id \nWHERE\n    from_utf8(p.insurer_id) IN (\n          '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n\t    , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\n    AND cl.is_prevention = 0", "relation_name": "\"delta\".\"bronze\".\"stg_lina_getbeneficiariescarelines\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:11.177003Z", "completed_at": "2025-07-01T18:31:11.222782Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:11.244841Z", "completed_at": "2025-07-01T18:31:11.244841Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09911179542541504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_getcommitments", "compiled": true, "compiled_code": "\n\nSELECT * FROM (\n      SELECT\n          cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n          from_utf8(P.name) AS nome_paciente,\n          from_utf8(P.document) AS cpf,\n          from_utf8(C.name) AS grupo_economico,\n          from_utf8(AT.name) AS equipe_aps,\n          array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n          from_utf8(TG.name) AS compromisso,\n          from_utf8(ER.result) AS resultado,\n          from_utf8(TG.exam_unit) AS unidade_do_resultado,\n          IF(AD.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n          from_utf8(users.name) AS nome_do_usuario,\n          CASE\n              WHEN from_utf8(AD.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n              WHEN from_utf8(AD.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n              WHEN from_utf8(AD.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n              WHEN from_utf8(AD.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n          END AS plataforma,\n          AD.use_date AS data_compromisso_realizado,\n          cast(AD.created_at as timestamp(3) with time zone) AS data_inclusao,\n          current_timestamp(3) as execution_time\n      FROM lina_clickhouse.h3alth_analytics.accompany_details AS AD\n          LEFT JOIN lina_clickhouse.h3alth_analytics.users ON AD.user_id = users.id\n          LEFT JOIN lina_clickhouse.h3alth_analytics.exam_results AS ER ON AD.id = ER.accompany_details_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON AD.person_id = CLP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on AD.person_id = P.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.tuss_groups AS TG ON AD.tuss_group_id = TG.id\n      WHERE\n          from_utf8(AD.insurer_id) IN\n          (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n              , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n              , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n              , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n          )\n          AND CLP.inactivation_date IS NULL\n      GROUP BY P.client_person_code\n               , P.name\n               , C.name\n               , 10\n               , TG.name\n               , ER.result\n               , TG.exam_unit\n               , AD.use_date\n               , AD.created_at\n               , P.document\n               , users.name\n               , AT.name\n               , AD.insurer_id\n\n      UNION ALL\n\n      SELECT\n          cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n          from_utf8(P.name) AS nome_paciente,\n          from_utf8(P.document) AS cpf,\n          from_utf8(C.name) AS grupo_economico,\n          from_utf8(AT.name) AS equipe_aps,\n          array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n          'Ades\u00e3o a nutri\u00e7\u00e3o' AS compromisso,\n          from_utf8(PAS.title) AS resultado,\n          '-' AS unidade_do_resultado,\n          IF(PNA.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n          from_utf8(users.name) AS nome_do_usuario,\n          CASE\n              WHEN from_utf8(PNA.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n              WHEN from_utf8(PNA.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n              WHEN from_utf8(PNA.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n              WHEN from_utf8(PNA.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n          END AS plataforma,\n          PNA.date AS data_compromisso_realizado,\n          cast(PNA.created_at as timestamp(3) with time zone) AS data_inclusao,\n          current_timestamp(3) as execution_time\n      FROM lina_clickhouse.h3alth_analytics.people_nutrition_adhesions AS PNA\n          LEFT JOIN lina_clickhouse.h3alth_analytics.purpose_adhesion_status AS PAS ON PAS.id = PNA.purpose_adhesion_status_id\n          LEFT JOIN lina_clickhouse.h3alth_analytics.users ON PNA.user_id = users.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON PNA.person_id = CLP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on PNA.person_id = P.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\n      WHERE\n          from_utf8(PNA.insurer_id) IN\n          (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n              , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n              , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n              , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n          )\n          AND CLP.inactivation_date IS NULL\n      GROUP BY P.client_person_code\n               , P.name\n               , C.name\n               , 10\n               , PAS.title\n               , PNA.date\n               , PNA.created_at\n               , P.document\n               , users.name\n               , AT.name\n               , PNA.insurer_id\n\n      UNION ALL\n\n      SELECT\n          cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n          from_utf8(P.name) AS nome_paciente,\n          from_utf8(P.document) AS cpf,\n          from_utf8(C.name) AS grupo_economico,\n          from_utf8(AT.name) AS equipe_aps,\n          array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n          'Ader\u00eancia a Atividade F\u00edsica' AS compromisso,\n          from_utf8(PAS.title) AS resultado,\n          '-' AS unidade_do_resultado,\n          IF(PPA.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n          from_utf8(users.name) AS nome_do_usuario,\n          CASE\n              WHEN from_utf8(PPA.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n              WHEN from_utf8(PPA.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n              WHEN from_utf8(PPA.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n              WHEN from_utf8(PPA.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n          END AS plataforma,\n          PPA.date AS data_compromisso_realizado,\n          cast(PPA.created_at as timestamp(3) with time zone) AS data_inclusao,\n          current_timestamp(3) as execution_time\n      FROM lina_clickhouse.h3alth_analytics.people_physical_activities AS PPA\n          LEFT JOIN lina_clickhouse.h3alth_analytics.purpose_adhesion_status AS PAS ON PAS.id = PPA.purpose_adhesion_status_id\n          LEFT JOIN lina_clickhouse.h3alth_analytics.users ON PPA.user_id = users.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON PPA.person_id = CLP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on PPA.person_id = P.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\n      WHERE\n          from_utf8(PPA.insurer_id) IN\n          (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n              , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n              , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n              , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n          )\n          AND CLP.inactivation_date IS NULL\n      GROUP BY P.client_person_code\n               , P.name\n               , C.name\n               , 10\n               , PAS.title\n               , PPA.quantity\n               , PPA.frequency\n               , PPA.date\n               , PPA.created_at\n               , P.document\n               , users.name\n               , AT.name\n               , PPA.insurer_id\n\n      UNION ALL\n\n      SELECT\n          cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n          from_utf8(P.name) AS nome_paciente,\n          from_utf8(P.document) AS cpf,\n          from_utf8(C.name) AS grupo_economico,\n          from_utf8(AT.name) AS equipe_aps,\n          array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n          'Frequencia Atividade F\u00edsica' AS compromisso,\n          concat(cast(PPA.quantity as varchar), ' x ', cast(PPA.frequency as varchar)) AS resultado,\n          '-' AS unidade_do_resultado,\n          IF(PPA.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n          from_utf8(users.name) AS nome_do_usuario,\n          CASE\n              WHEN from_utf8(PPA.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n              WHEN from_utf8(PPA.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n              WHEN from_utf8(PPA.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n              WHEN from_utf8(PPA.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n          END AS plataforma,\n          PPA.date AS data_compromisso_realizado,\n          cast(PPA.created_at as timestamp(3) with time zone) AS data_inclusao,\n          current_timestamp(3) as execution_time\n      FROM lina_clickhouse.h3alth_analytics.people_physical_activities AS PPA\n          LEFT JOIN lina_clickhouse.h3alth_analytics.purpose_adhesion_status AS PAS ON PAS.id = PPA.purpose_adhesion_status_id\n          LEFT JOIN lina_clickhouse.h3alth_analytics.users ON PPA.user_id = users.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON PPA.person_id = CLP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on PPA.person_id = P.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\n      WHERE\n          from_utf8(PPA.insurer_id) IN\n          (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n              , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n              , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n              , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n          )\n          AND CLP.inactivation_date IS NULL\n      GROUP BY P.client_person_code\n               , P.name\n               , C.name\n               , 10\n               , PAS.title\n               , PPA.quantity\n               , PPA.frequency\n               , PPA.date\n               , PPA.created_at\n               , P.document\n               , users.name\n               , AT.name\n               , PPA.insurer_id\n\n      UNION ALL\n\n      SELECT\n          cast(from_utf8(P.client_person_code) as varchar) AS id_paciente,\n          from_utf8(P.name) AS nome_paciente,\n          from_utf8(P.document) AS cpf,\n          from_utf8(C.name) AS grupo_economico,\n          from_utf8(AT.name) AS equipe_aps,\n          array_agg(distinct from_utf8(cl.name) order by from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario,\n          'Libera\u00e7\u00e3o Atividade F\u00edsica' AS compromisso,\n          from_utf8(AW.title) AS resultado,\n          '-' AS unidade_do_resultado,\n          IF(PAPA.user_id IS NOT NULL, 'Usu\u00e1rio', 'Importa\u00e7\u00e3o') AS adicionado_por,\n          from_utf8(users.name) AS nome_do_usuario,\n          CASE\n              WHEN from_utf8(PAPA.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n              WHEN from_utf8(PAPA.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n              WHEN from_utf8(PAPA.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n              WHEN from_utf8(PAPA.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n          END AS plataforma,\n          PAPA.date AS data_compromisso_realizado,\n          cast(PAPA.created_at as timestamp(3) with time zone) AS data_inclusao,\n          current_timestamp(3) as execution_time\n      FROM lina_clickhouse.h3alth_analytics.people_approval_physical_activities AS PAPA\n          LEFT JOIN lina_clickhouse.h3alth_analytics.approval_status AS AW ON AW.id = PAPA.approval_status_id\n          LEFT JOIN lina_clickhouse.h3alth_analytics.users ON PAPA.user_id = users.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_line_people CLP ON PAPA.person_id = CLP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl on CLP.care_line_id = cl.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.people AS P on PAPA.person_id = P.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.customers AS C ON P.customer_id = C.id\n          INNER JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS TP ON P.id = TP.person_id\n          INNER JOIN lina_clickhouse.h3alth_analytics.ais_teams AS AT ON TP.aps_team_id = AT.id\n      WHERE\n          from_utf8(PAPA.insurer_id) IN\n          (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n              , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n              , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n              , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n          )\n          AND CLP.inactivation_date IS NULL\n      GROUP BY P.client_person_code\n               , P.name\n               , C.name\n               , 10\n               , AW.title\n               , PAPA.date\n               , PAPA.created_at\n               , P.document\n               , users.name\n               , AT.name\n               , PAPA.insurer_id\n)", "relation_name": "\"delta\".\"bronze\".\"stg_lina_getcommitments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:11.317226Z", "completed_at": "2025-07-01T18:31:11.352055Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:11.369543Z", "completed_at": "2025-07-01T18:31:11.369543Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0845339298248291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_getcommitmentsstatus", "compiled": true, "compiled_code": "\n\n\nWITH tb_priority_order\nAS (\n\tSELECT id\n\t\t, CASE from_utf8(name)\n\t\t\tWHEN 'Paciente'\n\t\t\t\tTHEN 1\n\t\t\tWHEN 'Esposo(a)'\n\t\t\t\tTHEN 2\n\t\t\tWHEN 'M\u00e3e'\n\t\t\t\tTHEN 3\n\t\t\tWHEN 'Pai'\n\t\t\t\tTHEN 4\n\t\t\tWHEN 'Cuidador(a)'\n\t\t\t\tTHEN 5\n\t\t\tWHEN 'Irm\u00e3o(a)'\n\t\t\t\tTHEN 6\n\t\t\tWHEN 'Filho(a)'\n\t\t\t\tTHEN 7\n\t\t\tELSE 8\n\t\t\tEND AS priority_order\n\tFROM lina_clickhouse.h3alth_analytics.relationship_types\n\t)\n\n\nSELECT from_utf8(p.name) AS nome_paciente\n\t, from_utf8(p.client_person_code) AS id_paciente\n\t, from_utf8(cu.client_customer_code) AS id_clinica\n\t, from_utf8(cl.name) AS condicoes_de_saude_do_beneficiario\n\t, from_utf8(cl.id) AS id_linha_de_cuidado\n\t, from_utf8(c.title) AS condicao_titulo\n\t, from_utf8(clp.STATUS) AS condicao_status\n\t, from_utf8(cs.STATUS) AS coordenacao_status\n\t, CONCAT (\n\t\t'/panel/ais/acompanhamento-individual?modalbeneficiaryid='\n\t\t, from_utf8(p.id)\n\t\t, '&modaltab=aps'\n\t\t) AS modal_url\n\t, array_agg(DISTINCT from_utf8(at.name) ORDER BY from_utf8(at.name)) AS lista_equipe_aps\n\t, from_utf8(c2.phone) AS telefone_paciente\n    , CASE\n        WHEN from_utf8(clp.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(clp.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(clp.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(clp.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n    END AS plataforma\n\t, now() AS execution_time\nFROM lina_clickhouse.h3alth_analytics.care_line_procedures clp\nLEFT JOIN lina_clickhouse.h3alth_analytics.care_lines AS cl\n\tON cl.id = clp.care_line_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.conditionals AS c\n\tON c.id = clp.conditional_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.coordination_status AS cs\n\tON cs.id = clp.coordination_status_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.people AS p\n\tON p.id = clp.person_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.customers AS cu\n\tON p.customer_id = cu.id\nLEFT JOIN (\n\tSELECT *\n\tFROM (\n\t\tSELECT person_id\n\t\t\t, phone\n\t\t\t, row_number() OVER (\n\t\t\t\tPARTITION BY person_id ORDER BY priority_order\n\t\t\t\t) AS row_num\n\t\tFROM (\n\t\t\tSELECT person_id\n\t\t\t\t, phone\n\t\t\t\t, priority_order\n\t\t\tFROM lina_clickhouse.h3alth_analytics.contacts c\n\t\t\tLEFT JOIN tb_priority_order\n\t\t\t\tON c.relationship_type_id = tb_priority_order.id\n\t\t\t) AS t2\n\t\t) AS t3\n\tWHERE row_num = 1\n\t) AS c2\n\tON p.id = c2.person_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS atp\n\tON atp.person_id = p.id\nLEFT JOIN lina_clickhouse.h3alth_analytics.ais_teams AS at\n\tON at.id = atp.aps_team_id\nWHERE\n    from_utf8(clp.insurer_id) IN\n          (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n              , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n              , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n              , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n          )\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, clp.insurer_id", "relation_name": "\"delta\".\"bronze\".\"stg_lina_getcommitmentsstatus\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:11.458392Z", "completed_at": "2025-07-01T18:31:11.480584Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:11.499948Z", "completed_at": "2025-07-01T18:31:11.499948Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07460141181945801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_getcreatedbeneficiaries", "compiled": true, "compiled_code": "\n\n\nSELECT from_utf8(p.client_person_code) AS id_paciente\n\t, from_utf8(p.id) AS id_lina\n\t, from_utf8(p.name) AS nome_paciente\n\t, cast(p.is_active AS boolean) AS flag_ativo\n\t, from_utf8(p.gender) AS sexo_paciente\n\t, p.age AS idade_paciente\n\t, from_utf8(c.name) AS paciente_nome_cidade\n\t, array_agg(DISTINCT from_utf8(at.name) ORDER BY from_utf8(at.name)) AS lista_equipe_aps\n\t, array_agg(DISTINCT from_utf8(cl.name) ORDER BY from_utf8(cl.name)) AS condicoes_de_saude_do_beneficiario\n\t, p.doctor AS hospital_de_referencia\n\t, cast(p.created_at AS TIMESTAMP (3) WITH TIME zone) AS created_at\n\t, CASE\n        WHEN from_utf8(p.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(p.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(p.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n\t    WHEN from_utf8(p.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n\tEND AS plataforma\n    , now() AS execution_time\n\t, max(us.use_date) AS use_date\nFROM lina_clickhouse.h3alth_analytics.people AS p\nLEFT JOIN lina_clickhouse.h3alth_analytics.aps_team_people AS atp\n\tON p.id = atp.person_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.ais_teams AS at\n\tON at.id = atp.aps_team_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.care_line_people AS clp\n\tON p.id = clp.person_id\nLEFT JOIN lina_clickhouse.h3alth_analytics.care_lines AS cl\n\tON clp.care_line_id = cl.id\nLEFT JOIN lina_clickhouse.h3alth_analytics.cities AS c\n\tON p.city_id = c.id\nLEFT JOIN lina_clickhouse.h3alth_analytics.uses AS us\n\tON p.id = us.person_id\nWHERE 1 = 1\n\tAND from_utf8(p.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\nGROUP BY 1, 2, 3, 4, 5, 6, 7, 10, 11, p.insurer_id", "relation_name": "\"delta\".\"bronze\".\"stg_lina_getcreatedbeneficiaries\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:11.569749Z", "completed_at": "2025-07-01T18:31:11.600756Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:11.618002Z", "completed_at": "2025-07-01T18:31:11.618002Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07704925537109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_getkanbantodocommitments", "compiled": true, "compiled_code": "\n\nSELECT\n    beneficiary_id as id_lina_beneficiario,\n    beneficiary_name as nome_paciente,\n    cast(client_person_code as bigint) as id_paciente,\n    individual_modal_url as modal_url,\n    beneficiary_phone as telefone_paciente,\n    aps_teams as lista_equipe_aps,\n    care_line_procedure as condicoes_de_saude_do_beneficiario,\n    execution_time\nFROM \"delta\".\"bronze\".\"raw_lina_getkanbantodocommitments\";", "relation_name": "\"delta\".\"bronze\".\"stg_lina_getkanbantodocommitments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:11.739223Z", "completed_at": "2025-07-01T18:31:11.772790Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:11.796749Z", "completed_at": "2025-07-01T18:31:11.796749Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11744379997253418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_getpersoncarelinestatus", "compiled": true, "compiled_code": "\n\n\nSELECT from_utf8(p.client_person_code) AS id_paciente\n\t, from_utf8(p.name) AS nome_paciente\n\t, from_utf8(cl.name) AS condicao_de_saude_desativada\n\t, cast(\"date\" AS TIMESTAMP (3) WITH TIME zone) AS data_exclusao\n\t, from_utf8(u.name) AS desativado_por\n\t, from_utf8(c.corporate_name) AS grupo_economico\n\t, from_utf8(cdr.title) AS motivo\n    , CASE\n        WHEN from_utf8(cpsh.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(cpsh.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(cpsh.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(cpsh.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n    END AS plataforma\nFROM lina_clickhouse.h3alth_analytics.careline_person_status_history cpsh\nINNER JOIN lina_clickhouse.h3alth_analytics.care_lines cl\n\tON cpsh.care_line_id = cl.id\nINNER JOIN lina_clickhouse.h3alth_analytics.deactivation_careline_reasons cdr\n\tON cpsh.deactivation_reason_id = cdr.id\nINNER JOIN lina_clickhouse.h3alth_analytics.people p\n\tON cpsh.person_id = p.id\nLEFT JOIN lina_clickhouse.h3alth_analytics.users u\n\tON cpsh.user_id = u.id\nINNER JOIN lina_clickhouse.h3alth_analytics.companies c\n\tON p.company_id = c.id\nWHERE 1 = 1\n\tAND from_utf8(cpsh.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\n\tAND DATE IS NOT NULL", "relation_name": "\"delta\".\"bronze\".\"stg_lina_getpersoncarelinestatus\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:11.906953Z", "completed_at": "2025-07-01T18:31:11.934104Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:11.960635Z", "completed_at": "2025-07-01T18:31:11.960635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10958504676818848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_medicacao_continua", "compiled": true, "compiled_code": "\n\n\nselect\n\tfrom_utf8(pcm.id) as id_medicacao_continua\n\t,cast(from_utf8(p.client_person_code) as varchar) as id_paciente\n\t,from_utf8(p.name) as nome_paciente\n\t,pmd.\"date\" as data_medicacao\n\t,from_utf8(tg.name) as nome_medicacao\n\t,pcm.value as quantidade\n\t,from_utf8(um.abbreviation) as unidade_medida\n\t,pcm.frequency as frequencia\n    ,CASE\n            WHEN from_utf8(pcm.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n            WHEN from_utf8(pcm.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n            WHEN from_utf8(pcm.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n            WHEN from_utf8(pcm.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n    END AS plataforma\n\t,cast(pcm.created_at as timestamp(3) with time zone) as data_inclusao\n\t,cast(pcm.updated_at as timestamp(3) with time zone) as data_ultima_atualizacao\nfrom lina_clickhouse.h3alth_analytics.people_continuous_medications pcm\ninner join lina_clickhouse.h3alth_analytics.people_medication_dates pmd on pmd.id = pcm.people_medication_date_id\ninner join lina_clickhouse.h3alth_analytics.people AS p on pmd.person_id = p.id\nleft join lina_clickhouse.h3alth_analytics.tuss_groups tg on tg.id = pcm.tuss_group_id\nleft join lina_clickhouse.h3alth_analytics.units_measure um on um.id = pcm.unit_measure_id\nwhere 1=1\nand from_utf8(pcm.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )", "relation_name": "\"delta\".\"bronze\".\"stg_lina_medicacao_continua\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:12.037110Z", "completed_at": "2025-07-01T18:31:12.070029Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:12.099928Z", "completed_at": "2025-07-01T18:31:12.099928Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09183073043823242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_mensageria", "compiled": true, "compiled_code": "\n\n\nselect\n  from_utf8(m.id) as id_mensagem\n  ,from_utf8(p.client_person_code) as id_paciente\n  ,from_utf8(cu.client_customer_code) as id_clinica\n  ,from_utf8(muc.phone) as telefone_paciente\n  ,from_utf8(mc.id) as id_campanha\n  ,from_utf8(mc.name) as nome_campanha\n  ,cast(mc.is_paused as boolean) as flag_campanha_pausada\n  ,from_utf8(tmp.id) as id_template\n  ,from_utf8(tmp.name) as nome_template\n  ,cast(tmp.is_active as boolean) as flag_template_ativo\n  ,u.id as id_usuario\n  ,from_utf8(u.name) as nome_usuario\n  ,u.client_user_code as codigo_do_usuario\n  ,cast(m.send_by_user as boolean) as flag_enviado_pela_lina\n  ,cast(m.is_answered as boolean) as flag_respondido_pelo_paciente\n  ,from_utf8(mct.\"type\") as tipo_mensagem\n  ,from_utf8(mto.topic) as tipo_template\n  ,cast(m.datetime as timestamp(3) with time zone) as data_mensagem\n  ,from_utf8(mst.\"type\") as status_mensagem\n  ,from_utf8(m.text) as mensagem\n  ,CASE\n        WHEN from_utf8(m.insurer_id) = '6c818330-6b31-11ed-a16f-518759ef93ba' THEN 'Conexa'\n        WHEN from_utf8(m.insurer_id) = '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' THEN 'Zenklub'\n        WHEN from_utf8(m.insurer_id) = '3f256920-13da-11f0-948a-1b21be8b4270' THEN 'Metlife'\n        WHEN from_utf8(m.insurer_id) = '1ed683c0-00de-11f0-a649-51cbdc811eac' THEN 'Stone'\n  END AS plataforma\n  ,cast(m.created_at as timestamp(3) with time zone) as data_hora_criacao\n  ,cast(m.updated_at as timestamp(3) with time zone) as data_hora_ultima_atualizacao\nfrom\n  lina_clickhouse.h3alth_analytics.messages as m\n  inner join lina_clickhouse.h3alth_analytics.messaging_unique_contact muc on m.messaging_unique_contact_id = muc.id\n  left join lina_clickhouse.h3alth_analytics.messaging_campaigns as mc on mc.id = m.messaging_campaign_id\n  inner join lina_clickhouse.h3alth_analytics.people as p on muc.person_id = p.id\n  left join lina_clickhouse.h3alth_analytics.customers as cu on p.customer_id = cu.id\n  inner join lina_clickhouse.h3alth_analytics.message_content_types as mct on mct.id = m.message_content_type_id\n  left join lina_clickhouse.h3alth_analytics.message_status_types as mst on mst.id = m.message_status_type_id\n  left join lina_clickhouse.h3alth_analytics.templates as tmp on tmp.id = m.template_id\n  left join lina_clickhouse.h3alth_analytics.users as u on u.id = m.user_id\n  left join lina_clickhouse.h3alth_analytics.message_topics as mto on mto.id = m.message_topic_id \nwhere 1=1\n  and from_utf8(m.insurer_id) IN\n    (     '6c818330-6b31-11ed-a16f-518759ef93ba' -- Conexa\n        , '8e7691e0-3409-11ef-8fe1-dd5cb1ec7092' -- Zenklub\n        , '3f256920-13da-11f0-948a-1b21be8b4270' -- Metlife\n        , '1ed683c0-00de-11f0-a649-51cbdc811eac' -- Stone\n    )\n  and from_utf8(mct.type) != 'flag'", "relation_name": "\"delta\".\"bronze\".\"stg_lina_mensageria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:12.178656Z", "completed_at": "2025-07-01T18:31:12.211356Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:12.226728Z", "completed_at": "2025-07-01T18:31:12.226728Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09505963325500488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_typeform", "compiled": true, "compiled_code": "\n\n\nwith responses as (\n    select\n        response_id,\n        token,\n        user_id,\n        person_id,\n        name,\n        score,\n        field_id,\n        field_ref,\n        field_type,\n        answer_type,\n        answer_boolean,\n        answer_text,\n        answer_phone_number,\n        from_iso8601_timestamp(answer_date) as answer_date,\n        answer_choice_id,\n        answer_choice_ref,\n        answer_choice_label,\n        from_iso8601_timestamp(landed_at) as landed_at,\n        from_iso8601_timestamp(submitted_at) as submitted_at,\n        form_id\n    from \"delta\".\"bronze\".\"raw_lina_typeform_responses\"\n),\n\nfields as (\n    select\n        field_id,\n        field_ref,\n        field_title,\n        field_type,\n        field_required,\n        field_description\n    from \"delta\".\"bronze\".\"raw_lina_typeform_fields\"\n),\n\nforms as (\n    select\n        form_id,\n        form_title,\n        form_type,\n        language,\n        from_iso8601_timestamp(created_at) as form_created_at,\n        from_iso8601_timestamp(last_updated_at) as form_last_updated_at,\n        from_iso8601_timestamp(published_at) as form_published_at\n    from \"delta\".\"bronze\".\"raw_lina_typeform_forms\"\n),\n\njoined as (\n    select\n        r.response_id,\n        r.form_id,\n        f.form_title,\n        f.form_type,\n        f.language,\n        f.form_created_at,\n        f.form_last_updated_at,\n        f.form_published_at,\n\n        r.user_id,\n        r.person_id,\n        r.name,\n        r.token,\n        r.score,\n        r.landed_at,\n        r.submitted_at,\n\n        r.field_id,\n        coalesce(r.field_ref, fld.field_ref) as field_ref,\n        coalesce(r.field_type, fld.field_type) as field_type,\n        fld.field_title,\n        fld.field_description,\n        coalesce(fld.field_required, false) as field_required,\n\n        r.answer_type,\n        -- Unified answer column\n        case\n            when r.answer_type = 'boolean' then cast(r.answer_boolean as varchar)\n            when r.answer_type = 'text' then r.answer_text\n            when r.answer_type = 'phone_number' then r.answer_phone_number\n            when r.answer_type = 'choice' then r.answer_choice_label\n            when r.answer_type = 'date' then cast(r.answer_date as varchar)\n            else null\n        end as answer\n    from responses r\n    left join fields fld on r.field_id = fld.field_id\n    left join forms f on r.form_id = f.form_id\n)\n\nselect * from joined", "relation_name": "\"delta\".\"bronze\".\"stg_lina_typeform\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:12.325592Z", "completed_at": "2025-07-01T18:31:12.354137Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:12.370585Z", "completed_at": "2025-07-01T18:31:12.370585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09462761878967285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_audit", "compiled": true, "compiled_code": "\n\n-- Entender o motivo de ip e userrequestrid nao aparecer. Olhar no PySpark (Glue)\n\nSELECT \n    _id as id_audit, \n    actiontype,\n    bodydata,\n    from_iso8601_timestamp(datetimeocorr) as data_inclusao,\n    -- ip,\n    key as id_ref,\n    typekey as tipo_key_ref,\n    -- userrequesterid as id_usuario,\n    emitted_at\nFROM \"delta\".\"bronze\".\"raw_mongo_audit\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_audit\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:12.453162Z", "completed_at": "2025-07-01T18:31:12.576126Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:12.604452Z", "completed_at": "2025-07-01T18:31:12.604452Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19105267524719238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_cnx_conversas", "compiled": true, "compiled_code": "\n\nselect \n\t_id as id_conversas,\n\tfrom_iso8601_timestamp(datetimeconversation) as data_hora_envio_mensagem,\n\tdate(substr(datetimeconversation,1,10)) as data_brt_envio_mensagem,\n\texternalmessage as flag_mensagem_externa,\n\t\"from\" as numero_mensagem_enviada,\n\tpathfile as caminho_arquivo,\n\tsource,\n\t\"text\" as texto,\n\tcase \n\t\twhen length(\"to\") = 11\n\t\t\tthen concat('55',\"to\")\n\t\telse \"to\"\n\tend as numero_mensagem_recebida,\n\t\"type\" as tipo_mensagem,\n\tcast(registeredsender._id as bigint) as id_usuario_profissional,\n\tregisteredsender.name as primeiro_nome_profissional,\n\tregisteredsender.perfil as tipo_perfil_profissional,\n\tcase \n\t\twhen \"from\" in ('551141184534') and \"source\" in ('CONEXA') and registeredsender is null\n\t\t\tthen 'Robo CNX'\n\t\twhen \"from\" in ('551141187830')\n\t\t\tthen 'Robo PV'\n\t\twhen \"from\" in ('551141184534') and \"source\" in ('CONEXA') and registeredsender is not null\n\t\t\tthen 'Profissional'\n\t\twhen \"from\" not in ('551141184534','551141187830')\n\t\t\tthen 'Paciente'\n\tend as perfil_envio_mensagem,\n\tfrom_iso8601_timestamp(_ab_cdc_deleted_at) as _ab_cdc_deleted_at,\n\tfrom_iso8601_timestamp(_ab_cdc_updated_at) as _ab_cdc_updated_at,\n\temitted_at\nFROM \"delta\".\"bronze\".\"raw_mongo_conversations\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_cnx_conversas\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:12.731560Z", "completed_at": "2025-07-01T18:31:12.764577Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:12.779714Z", "completed_at": "2025-07-01T18:31:12.779714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11182236671447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_elegibilidade_autorizacao", "compiled": true, "compiled_code": "\n\nSELECT \n    _id as id_elegibilidade_autorizacao,\n    carteiraconvenio as carteira_convenio,\n    replace(replace(cpf,'.',''),'-','') as cpf_paciente,\n    SPLIT(REGEXP_EXTRACT(dadosautorizacao, 'denialReasonMessage=([^,]*)'),'=')[2] AS mensagem_motivo_negacao,\n    SPLIT(REGEXP_EXTRACT(dadosautorizacao, 'authorizationDate=([0-9]{4}-[0-9]{2}-[0-9]{2})'),'=')[2] AS data_autorizacao,\n    SPLIT(REGEXP_EXTRACT(dadosautorizacao, 'expirationDate=([0-9]{4}-[0-9]{2}-[0-9]{2})'),'=')[2] AS data_expiracao_autorizacao,\n    from_iso8601_timestamp(datahora) as data_hora_solicitacao,\n    from_iso8601_timestamp(datahorareponse) as data_hora_resposta_aplicacao,\n    ehelegivel as flag_elegivel,\n    case\n        when foiautorizado = 'true' or foiautorizado = 'AUTORIZADO' then true\n        when foiautorizado = 'false' or foiautorizado in ('NEGADO', 'ERRO_DURANTE_AUTORIZACAO') then false\n        else null\n    end as flag_autorizado,\n    foiautorizado as msg_autorizado,\n    -- idatendimento as id_atendimento,\n    idclinica as id_clinica,\n    -- idfilaatendimento as id_fila_atendimento,\n    idpaciente as id_paciente,\n    idprofissional as id_profissional,\n    mododeatendimento as modo_atendimento,\n    numeroguiaprestador as numero_guia_prestador,\n    -- observacao,\n    response as response_body,\n    tiporequisicao as tipo_requisicao,\n    tokenautorizacao as token_autorizacao,\n    emitted_at\nFROM \"delta\".\"bronze\".\"raw_mongo_log_elegibilidade_autorizacao\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_elegibilidade_autorizacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:12.875755Z", "completed_at": "2025-07-01T18:31:12.898628Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:12.914560Z", "completed_at": "2025-07-01T18:31:12.914560Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09410548210144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_exams", "compiled": true, "compiled_code": "\n\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"raw_mongo_exams\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_exams\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:13.023359Z", "completed_at": "2025-07-01T18:31:13.052181Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:13.073657Z", "completed_at": "2025-07-01T18:31:13.073657Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10213589668273926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_nexodata_atestado", "compiled": true, "compiled_code": "\n\n\nselect\n\t_id as id_nexodata_atestado,\n\tcast(atestado.consentimentoCid as boolean) as flag_consentimento_cid,\n\tfrom_iso8601_timestamp(atestado.dataatestado) as data_atestado,\n\tfrom_iso8601_timestamp(atestado.datainicio) as data_inicio_afastamento,\n\tfrom_iso8601_timestamp(atestado.datatermino) as data_termino_afastamento,\n\tcast(atestado.declaracaocomparecimento as boolean) as flag_declaracao_comparecimento,\n\tatestado.observacao,\n\ttry_cast(atestado.periodo as int) as periodo_dias,\n\tatestado.tipoperiodo as tipo_periodo_afastamento,\n\tatestado.texto as texto_atestado,\n\tatestado.textocompleto as texto_completo_atestado,\n\tcardinality(atestado.cid10estruturado) quantidade_cid,\n\telement_at(atestado.cid10estruturado, 1).codigo as cid10,\n\telement_at(atestado.cid10estruturado, 1).descricao as cid10_descricao,\n\tfrom_iso8601_timestamp(dataregistro) as data_registro_atestado,\n\tcast(idatendimento as bigint) as id_atendimento,\n\ttype as tipo_prescricao,\n\tcast(idprescricaostatus as bigint) as id_prescricao_status,\n\tcast(idprescricao as bigint) as id_prescricao,\n\tcodigovalidacao as codigo_validacao,\n\treferenciainterna as referencia_interna,\n\tfrom_iso8601_timestamp(datacriacao) as data_criacao,\n\tnome_prescritor,\n\tdocumento_prescritor,\n\tnumero_prescritor,\n\tconselho_prescritor,\n\tuf_prescritor,\n\tuf_conselho_prescritor,\n\tnome_paciente,\n\tdate(substring(data_nascimento_paciente, 1, 10)) as data_nascimento_paciente,\n\tsexo_paciente,\n\tidade_paciente,\n\tcast(idpaciente as bigint) as id_paciente,\n\treferenciaexterna_paciente\nfrom \"delta\".\"bronze\".\"raw_mongo_finalprescricaonexodata\"\nwhere atestado is not null \n\tand _ab_cdc_deleted_at is null", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_nexodata_atestado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:13.154690Z", "completed_at": "2025-07-01T18:31:13.184881Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:13.205160Z", "completed_at": "2025-07-01T18:31:13.205160Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09820723533630371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_nexodata_encaminhamento", "compiled": true, "compiled_code": "\n\n\nselect\n\tto_hex(md5(to_utf8(_id || cast(idencaminhamentoprescricao as varchar)))) as id_nexodata_encaminhamento,\n\tcast(idatendimento as bigint) as id_atendimento,\n\ttype as tipo_prescricao,\n\tcast(idprescricaostatus as bigint) as id_prescricao_status,\n\tcast(idprescricao as bigint) as id_prescricao,\n\tcodigovalidacao as codigo_validacao,\n\treferenciainterna as referencia_interna,\n\tfrom_iso8601_timestamp(datacriacao) as data_criacao,\n\tencaminhamentos,\n\tespecialidade.idespecialidade,\n\tespecialidade.nome as nome_especialidade,\n\tespecialidade.nomeprofissional as nome_profissional,\n\tconduta, \n    dataencaminhamento as data_encaminhamento, \n    datainclusao as data_inclusao, \n    datamodificacao as data_modificacao, \n    historiaclinica as historia_clinica,\n    idencaminhamentoprescricao,\n    motivo as motivo_encaminhamento,\n\tnome_prescritor,\n\tdocumento_prescritor,\n\tnumero_prescritor,\n\tconselho_prescritor,\n\tuf_prescritor,\n\tuf_conselho_prescritor,\n\tnome_paciente,\n\tdate(substring(data_nascimento_paciente, 1, 10)) as data_nascimento_paciente,\n\tsexo_paciente,\n\tidade_paciente,\n\tcast(idpaciente as bigint) as id_paciente,\n\treferenciaexterna_paciente,\n    from_iso8601_timestamp(_ab_cdc_updated_at) as cdc_updated_at\nfrom \"delta\".\"bronze\".\"raw_mongo_finalprescricaonexodata\"\ncross join unnest (encaminhamentos) as t(conduta, dataencaminhamento, datainclusao, datamodificacao, especialidade,historiaclinica,idencaminhamentoprescricao,motivo)\nwhere 1=1\n\tand _ab_cdc_deleted_at is null\n\tand cardinality(encaminhamentos) > 0", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_nexodata_encaminhamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:13.281377Z", "completed_at": "2025-07-01T18:31:13.297338Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:13.327492Z", "completed_at": "2025-07-01T18:31:13.327492Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0816960334777832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_pvv_filtros_pesquisa", "compiled": true, "compiled_code": "\n\nselect \n    _id as id_filtros_pesquisa,\n    idpaciente as id_paciente,\n    from_iso8601_timestamp(data_inclusao) as data_inclusao,\n    date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n    from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n    date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n    usuario_ult_alteracao as usuario_ultima_alteracao,\n    from_iso8601_timestamp(datafinal) as data_final,\n    date(substr(datafinal,1,10)) as data_brt_final,\n    from_iso8601_timestamp(datainicial) as data_inicial,\n    date(substr(datainicial,1,10)) as data_brt_inicial,\n    emailpaciente as email_paciente,\n    sexo,\n    tema,\n    abordagem,\n    areaatuacao as area_atuacao,\n    especialidade,\n    idiomaatendimento as idioma_atendimento,\n    opcaoatendimento as opcao_atendimento,\n    palavrachave as palavra_chave,\n    cast(atendeemlibras as boolean) as flag_atende_em_libras,\n    cast(atendepresencial as boolean) as flag_atende_presencial,\n    cast(temvideo as boolean) as flag_tem_video,\n    cast(isfonasa as boolean) as flag_is_fonasa,\n    cidade,\n    estado,\n    pais,\n    _ab_cdc_deleted_at,\n    from_iso8601_timestamp(_ab_cdc_updated_at) as _ab_cdc_updated_at,\n    _class,\n    _airbyte_emitted_at as emitted_at\nFROM \"delta\".\"bronze\".\"raw_pvv_filtros_pesquisa\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_pvv_filtros_pesquisa\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:13.417319Z", "completed_at": "2025-07-01T18:31:13.434392Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:13.464702Z", "completed_at": "2025-07-01T18:31:13.464702Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09271359443664551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_pvv_typeform", "compiled": true, "compiled_code": "\n\nselect \n\t_id,\n\ttoken,\n\tdata_inclusao,\n\tdata_ult_alteracao,\n\tevent_id,\n\tanswers,\n\tdefinition,\n\ttype,\n\tvalue,\n\tform_id,\n\tdefinition.title,\n\tlanded_at,\n\tsubmitted_at,\n\tcalculated\nFROM \"delta\".\"bronze\".\"raw_mongo_typeform\"\nWHERE _id is not null", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_pvv_typeform\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:13.559604Z", "completed_at": "2025-07-01T18:31:13.585792Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:13.608461Z", "completed_at": "2025-07-01T18:31:13.608461Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09749889373779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_resultado_estratificacao", "compiled": true, "compiled_code": "\n\nselect \n\trespostaid as id_estratificacao,\n\ttoken as token_estratificacao,\n\tidpaciente as id_paciente,\n\tidprofissional as id_profissional,\n\tidclinica as id_clinica,\n\tidform as id_form,\n\tcase\n\t\twhen idform = 'sboE9uGJ' then 'SRQ-20'\n\t\telse tipotypeform \n\tend as tipo_typeform,\n\tautor as perfil_criador,\n\tcast(datacriacao as timestamp(3) with time zone) as data_hora_criacao,\n\tvalor as form_resultado,\n\tgrau as escala,\n\tqtdconsultas as quantidade_consultas,\n\tansiedade.nivel as escala_ansiedade,\n\tdepressao.nivel as escala_depressao,\n\testresse.nivel as escala_estresse,\n\tcast(\n\t\trow(ansiedade.valor, depressao.valor, estresse.valor)\n\t\tas row(ansiedade bigint, depressao bigint, estresse bigint)\n\t) as valores_dass21\nfrom mongo_cnx.\"doutor-virtual-producao\".resultados_estratificacao", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_resultado_estratificacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:13.689710Z", "completed_at": "2025-07-01T18:31:13.715728Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:13.732799Z", "completed_at": "2025-07-01T18:31:13.732799Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08621358871459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_resultados_dass21", "compiled": true, "compiled_code": "\n\nSELECT \n    _id as id_dass21, \n    from_iso8601_timestamp(criacao) as data_criacao,\n    idpaciente as id_paciente,\n\tcase\n\t\twhen nivel_ansiedade = 'MODERADO'\n\t\t\tthen 'Moderado'\n\t\twhen nivel_ansiedade = 'LEVE'\n\t\t\tthen 'Leve'\n\t\twhen nivel_ansiedade = 'NORMAL'\n\t\t\tthen 'Normal'\n\t\twhen nivel_ansiedade = 'SEVERO'\n\t\t\tthen 'Severo'\n\t\twhen nivel_ansiedade = 'EXTREMAMENTE_SEVERO'\n\t\t\tthen 'Extremamente severo'\n    end as nivel_ansiedade,\n    valor_ansiedade,\n\tcase\n\t\twhen nivel_depressao = 'MODERADO'\n\t\t\tthen 'Moderado'\n\t\twhen nivel_depressao = 'LEVE'\n\t\t\tthen 'Leve'\n\t\twhen nivel_depressao = 'NORMAL'\n\t\t\tthen 'Normal'\n\t\twhen nivel_depressao = 'SEVERO'\n\t\t\tthen 'Severo'\n\t\twhen nivel_depressao = 'EXTREMAMENTE_SEVERO'\n\t\t\tthen 'Extremamente severo'\n    end as nivel_depressao,\n    valor_depressao,\n\tcase\n\t\twhen nivel_estresse = 'MODERADO'\n\t\t\tthen 'Moderado'\n\t\twhen nivel_estresse = 'LEVE'\n\t\t\tthen 'Leve'\n\t\twhen nivel_estresse = 'NORMAL'\n\t\t\tthen 'Normal'\n\t\twhen nivel_estresse = 'SEVERO'\n\t\t\tthen 'Severo'\n\t\twhen nivel_estresse = 'EXTREMAMENTE_SEVERO'\n\t\t\tthen 'Extremamente severo'\n    end as nivel_estresse,\n    valor_estresse,\n    from_iso8601_timestamp(_ab_cdc_updated_at) as _ab_cdc_updated_at,\n    emitted_at\nFROM \"delta\".\"bronze\".\"raw_mongo_resultados_dass21\"\nwhere _ab_cdc_deleted_at is null", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_resultados_dass21\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:13.813402Z", "completed_at": "2025-07-01T18:31:13.842640Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:13.862211Z", "completed_at": "2025-07-01T18:31:13.862211Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08982229232788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_srq20", "compiled": true, "compiled_code": "\n\nselect \n\t_id as id_resultado_srq20,\n\tidpaciente as id_paciente,\n\tidclinica as id_clinica,\n\tidprofissional as id_profissional,\n\trespostaid as id_resposta,\n\tcast(datacriacao as timestamp(3) with time zone) as data_criacao,\n\tvalor as srq_resultado,\n\tcase\n\t\twhen valor <= 7 then 'LEVE'\n\t\twhen valor <= 14 then 'MODERADO'\n\t\twhen valor <= 20 then 'GRAVE'\n\t\telse 'NA'\n\tend as srq20_escala,\n\tqtdconsultas as quantidade_consultas,\n\tcast(datafinalizacao as timestamp(3) with time zone) as data_finalizacao,\n\tatendimentos as lista_atendimentos\nfrom mongo_cnx.\"doutor-virtual-producao\".resultados_srq20", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_srq20\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:13.948345Z", "completed_at": "2025-07-01T18:31:13.972588Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:13.996946Z", "completed_at": "2025-07-01T18:31:13.996946Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09059619903564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_triagem", "compiled": true, "compiled_code": "\n\nSELECT \n    _id as id_triagem,\n    alergiatriagem.temalergiacontrasteiodo as flag_alergia_contraste_iodo,\n    alergiatriagem.temalergiafrutosdomar as flag_alergia_frutos_mar,\n    alergiatriagem.temalergiamedicamentos as flag_alergia_medicamentos,\n    array_distinct(transform(alergiatriagem.alergiasmedicamentos,x -> x.alergia)) as descricao_alergia_medicamentos,\n    if(anexos is null, false, true) as flag_anexos,\n    from_iso8601_timestamp(datahora) as data_hora_triagem,\n    date(substr(datahora,1,10)) as data_brt_triagem,\n    array_distinct(transform(doencamedicamentotriagem.doencas,x -> x.descricao)) as descricao_doencas,\n    array_distinct(transform(doencamedicamentotriagem.medicamentos,x -> x.medicamentoid)) as id_medicamentos,\n    idclinica as id_clinica,\n    idpaciente as id_paciente,\n    npstriagem.comentario as comentario_nps_triagem,\n    from_iso8601_timestamp(npstriagem.datahora) as data_hora_nps_triagem,\n    date(substr(npstriagem.datahora,1,10)) as data_brt_nps_triagem,\n    npstriagem.nota as nota_nps,\n    sintomatriagem.intensidadesintomas as intensidade_sintomas,\n    array_distinct(transform(sintomatriagem.sintomas,x -> x.descricao)) as descricao_sintomas,\n    sintomatriagem.sintomasevidentes as descricao_sintomas_evidentes,\n    \"_ab_cdc_updated_at\",\n    \"_ab_cdc_deleted_at\",\n    emitted_at\nFROM \"delta\".\"bronze\".\"raw_mongo_triagem\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_triagem\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:14.108066Z", "completed_at": "2025-07-01T18:31:14.139480Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:14.160464Z", "completed_at": "2025-07-01T18:31:14.160464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09975409507751465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pbx_chamada", "compiled": true, "compiled_code": "\n\nselect\n    call_id as id_chamada_pbx,\n    wy_branch_email_agent as email_agente,\n    wy_branch_mask_agent as ramal_agente,\n    name as nome_agente,\n    substring(call_time_waiting,1,8) as tempo_espera,\n    call_time_total_duration as tempo_total_chamada,\n    call_url_audio as url_audio,\n    concat(wg_country_code,call_area_code,call_number) as numero_telefone,\n    date(DATE_PARSE(call_date, '%d/%m/%Y')) as data_ligacao,\n    substring(wb_call_hour,1,8) as hora_ligacao,\n    cast(concat(cast(date(DATE_PARSE(call_date, '%d/%m/%Y')) as varchar),' ',wb_call_hour) as timestamp (3) with time zone) as data_hora_ligacao,\n    week_day as dia_semana,\n    queue_name as nome_fila,\n    type_call as tipo_finalizacao,\n    wk_ivr_1_name as nome_0800,\n    xa_disconnection_reason as motivo_desligamento,\n    cast(wl_time_attended as timestamp (3) with time zone) as data_hora_inicio_atendimento,\n    date(DATE_PARSE(wl_attended_date, '%d/%m/%Y')) as data_inicio_atendimento,\n    substring(wl_attended_hour,1,8) as hora_inicio_atendimento,\n    try_cast(wi_quiz_id_paciente as bigint) as id_paciente\nfrom \"delta\".\"bronze\".\"raw_pbx_chamada\"", "relation_name": "\"delta\".\"bronze\".\"stg_pbx_chamada\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:14.246072Z", "completed_at": "2025-07-01T18:31:14.267608Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:14.282467Z", "completed_at": "2025-07-01T18:31:14.282467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07944393157958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_agenda_profissional", "compiled": true, "compiled_code": "\n\n    SELECT\n        agp.id AS id_agenda_profissional,\n        from_iso8601_timestamp(agp.data_ult_alteracao) as data_ultima_alteracao,\n        agp.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(agp.data_inclusao) as data_inclusao,\n        agp.descricao,\n        agp.profissional AS id_profissional,\n        agp.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at --\nFROM \"delta\".\"bronze\".\"raw_pvv_agenda_profissional\" AS agp\nINNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON agp.id = ids.table_id AND ids.table_name = 'agenda_profissional'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_agenda_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:14.378685Z", "completed_at": "2025-07-01T18:31:14.410529Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:14.437393Z", "completed_at": "2025-07-01T18:31:14.437393Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10724139213562012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_atendimento_pendente", "compiled": true, "compiled_code": "\n\nselect cp.id as id_atendimento_pendente,\n       from_iso8601_timestamp(cp.data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(cp.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       cp.usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(cp.data_inclusao) as data_inclusao,\n       date(substr(cp.data_inclusao,1,10)) as data_brt_inclusao,\n       cp.id_consulta as id_atendimento,\n       case \n            when cp.atendimento_fora_plataforma = 'S' then true\n            when cp.atendimento_fora_plataforma = 'N' then false\n            else null\n        end flag_atendimento_fora_plataforma,\n       case \n            when cp.problema_tecnico = 'S' then true\n            when cp.problema_tecnico = 'N' then false\n            else null\n        end flag_problema_tecnico,\n       cp.justificativa,\n       case \n            when cp.realizada = 'S' then true\n            when cp.realizada = 'N' then false\n            else null      \n        end flag_atendimento_realizado,\n        cp.outro_motivo_nao_realizacao_consulta as outro_motivo_nao_realizacao_atendimento,\n        cp.id_motivo_nao_realizacao_consulta as id_motivo_nao_realizacao_atendimento,\n        cp.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_consultas_pendentes\" as cp --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on cp.id = ids.table_id and ids.table_name = 'consultas_pendentes'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_atendimento_pendente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:14.529644Z", "completed_at": "2025-07-01T18:31:14.557455Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:14.579546Z", "completed_at": "2025-07-01T18:31:14.579546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09545779228210449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_avaliacao_clinica", "compiled": true, "compiled_code": "\n\n    SELECT\n\t   ac.id as id_avaliacao_clinica,\n       from_iso8601_timestamp(ac.data_ult_alteracao) as data_ultima_alteracao,\n       ac.usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(ac.data_inclusao) as data_inclusao, \n       ac.versao, \n       ac.consulta as id_atendimento, \n       ac.sintomas_queixas,\n       ac.qnt_consultas_indicadas as quantidade_consultas_indicadas,\n       ac.nomeclatura_cid,\n       ac.id_foto,\n       ac.grau_gravidade,\n       ac.id_paciente,\n       ac.nome_profissional,\n       ac.numero_conselho,\n       ac.estado_conselho,\n       ac.grau_depressao,\n       ac.grau_suicidio,\n       ac.grau_ansiedade,\n       ac.grau_amvh,\n       ac.grau_bdi2,\n\t   ac.emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_avaliacao_clinica\" as ac --\nINNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON ac.id = ids.table_id AND ids.table_name = 'avaliacao_clinica'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_avaliacao_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:14.673250Z", "completed_at": "2025-07-01T18:31:14.687879Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:14.719456Z", "completed_at": "2025-07-01T18:31:14.719456Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09471511840820312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_avaliacao_paciente", "compiled": true, "compiled_code": "\n\n    SELECT\n        ava.id AS id_avaliacao_paciente,\n        ava.psicologo_nps as nps_profissional,\n        ava.obs_nps,\n        ava.obs as paciente_comentario,\n        ava.pontos_audio_video as csat_audio_video_paciente,\n        ava.pontos_plataforma as csat_plataforma_paciente,\n        -- ava.pontos_nps,\n        -- ava.pontos as csat_profissional,\n        -- ava.pontos_cordialidade_psicologo,\n        ava.pontos_psicologo as csat_profissional,\n        -- ava.experiencia_plataforma,\n        -- ava.pontos_pontualidade_psicologo,\n        -- ava.pontos_conhecimento_tema,\n        -- ava.resposta,\n        from_iso8601_timestamp(ava.data_ult_alteracao) as data_ultima_alteracao,\n        ava.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(ava.data_inclusao) as data_inclusao,\n        ava.pagamento_consulta AS id_atendimento,\n        ava.exibir_perfil_publico,\n        CASE\n\t\t    WHEN ava.realizada = 'S' THEN true\n            WHEN ava.realizada = 'N' THEN false\n            ELSE null\n       END flag_realizada,\n       -- ava.justificativa,\n       ava.emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_avaliacoes\" AS ava --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON ava.id = ids.table_id AND ids.table_name = 'avaliacoes'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_avaliacao_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:14.829479Z", "completed_at": "2025-07-01T18:31:14.863906Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:14.894720Z", "completed_at": "2025-07-01T18:31:14.894720Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12122941017150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_avaliacao_psicologo", "compiled": true, "compiled_code": "\n\n    SELECT\n        id AS id_avaliacao_psicologo,\n        from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n        usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(data_inclusao) as data_inclusao,\n        pontos as csat_paciente, -- Avaliacao do paciente feita pelo profissional\n        pontos_audio_video as csat_audio_video_profissional,\n        pontos_plataforma as csat_plataforma_profissional,\n        tema_consulta as tema_relatado_profissional_atendimento,\n        obs,\n        pontos AS avaliacao_paciente,\n        CASE WHEN realizada = 'S' THEN true\n             WHEN realizada = 'N' THEN false\n             ELSE null\n       END flag_realizada,\n       resposta,\n       pagamento_consulta AS id_atendimento,\n       justificativa, \n       experiencia_plataforma,\n       emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_avaliacao_adm_psi\" AS aap --\nINNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON aap.id = ids.table_id AND ids.table_name = 'avaliacao_adm_psi'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_avaliacao_psicologo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:15.034419Z", "completed_at": "2025-07-01T18:31:15.078804Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:15.098908Z", "completed_at": "2025-07-01T18:31:15.098908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1252889633178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_cad_paciente_convenio", "compiled": true, "compiled_code": "\n\n    select cad.id as id_cadastro_paciente_convenio,\n           from_iso8601_timestamp(cad.data_ult_alteracao) as data_ultima_alteracao,\n           cad.usuario_ult_alteracao as usuario_ultima_alteracao,\n           from_iso8601_timestamp(cad.data_inclusao) as data_inclusao,\n           cad.versao,\n           ativo,\n           carteirinha,\n           login\n           nome,\n           senha,\n           email_medico,\n           motivo_encaminhamento,\n           nome_medico,\n           telefone_medico,\n           convenio,\n           complexidade,\n           case \n            when cast(substr(data_nascimento, 1, 4) as int) < 1902 then NULL\n            else cast(substr(data_nascimento, 1, 10) as date)\n           end data_nascimento,\n           sexo,\n           pacote,\n           valor_pacote,\n           vigencia,\n           numero_autorizacao,\n           idioma,\n           unimed_anhanguera_cidade,\n           convenios,\n           convenio_associado,\n           senha_autorizacao,\n           departamento,\n           id_herdado,\n           id_herdado_conflito,\n           status_convenio,\n           id_convenio,\n           id_paciente, \n           celular,\n           cpf,\n           cad.emitted_at,\n           0 as is_delete,\n           current_timestamp(3) as updated_at\n      FROM \"delta\".\"bronze\".\"raw_pvv_cad_paciente_convenio\" as cad\nINNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON cad.id = ids.table_id AND ids.table_name = 'cad_paciente_convenio'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_cad_paciente_convenio\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:15.189513Z", "completed_at": "2025-07-01T18:31:15.221108Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:15.246658Z", "completed_at": "2025-07-01T18:31:15.246658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10435080528259277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_cancelamento_consulta", "compiled": true, "compiled_code": "\n\nWITH t1 AS(\n    SELECT\n        id as id_cancelamento_consulta,\n        from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n        usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(data_inclusao) as data_inclusao,\n        versao,\n        motivo,\n        responsavel,\n        from_iso8601_timestamp(data_consulta) as data_consulta,\n        id_consulta as id_atendimento,\n        id_transaction,\n        rank() OVER (partition by id_consulta order by data_ult_alteracao desc) as ranking,\n        emitted_at,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_cancelamento_consulta\" AS cc\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON cc.id = ids.table_id AND ids.table_name = 'cancelamento_consulta'\n)\nSELECT *\nFROM t1\nWHERE ranking = 1 --", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_cancelamento_consulta\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:15.351007Z", "completed_at": "2025-07-01T18:31:15.379936Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:15.411489Z", "completed_at": "2025-07-01T18:31:15.411489Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10968470573425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_categoria_repasse", "compiled": true, "compiled_code": "\n\n    select cat.id as id_categoria_repasse,\n           from_iso8601_timestamp(cat.data_ult_alteracao) as data_ultima_alteracao,\n           cat.usuario_ult_alteracao as usuario_ultima_alteracao,\n           from_iso8601_timestamp(cat.data_inclusao) as data_inclusao,\n           cat.versao,\n           cat.categoria,\n           cat.emitted_at,\n           0 as is_delete,\n           current_timestamp(3) as updated_at\n      FROM \"delta\".\"bronze\".\"raw_pvv_categoria_repasse\" as cat --\nINNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON cat.id = ids.table_id AND ids.table_name = 'categoria_repasse'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_categoria_repasse\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:15.507785Z", "completed_at": "2025-07-01T18:31:15.537623Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:15.565521Z", "completed_at": "2025-07-01T18:31:15.566541Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09892487525939941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_consulta_instabilidade", "compiled": true, "compiled_code": "\n\n    SELECT\n        ci.id AS id_consulta_instabilidade,\n        from_iso8601_timestamp(ci.data_ult_alteracao) as data_ultima_alteracao,\n        ci.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(ci.data_inclusao) as data_inclusao,\n        ci.motivo,\n        ci.responsavel,\n        ci.id_consulta AS id_atendimento,\n        ci.observacao,\n        ci.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_consultas_instabilidade\" AS ci --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON ci.id = ids.table_id AND ids.table_name = 'consultas_instabilidade'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_consulta_instabilidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:15.650717Z", "completed_at": "2025-07-01T18:31:15.676913Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:15.699623Z", "completed_at": "2025-07-01T18:31:15.699623Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09669947624206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_contrato", "compiled": true, "compiled_code": "\n\nselect\n    cnt.id as id_contrato, \n    from_iso8601_timestamp(cnt.data_ult_alteracao) as data_ultima_alteracao,\n    date(substr(cnt.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n    cnt.usuario_ult_alteracao as usuario_ultima_alteracao,\n    from_iso8601_timestamp(cnt.data_inclusao) as data_inclusao,\n    date(substr(cnt.data_inclusao,1,10)) as data_brt_inclusao,\n    cnt.versao, \n    case \n        when cnt.aceito_paciente = 'S' then true\n        when cnt.aceito_paciente = 'N' then false\n        else null\n    end flag_aceito_paciente, \n    case \n        when cnt.aceito_psicologo = 'S' then true\n        when cnt.aceito_psicologo = 'N' then false\n        else null\n    end flag_aceito_psicologo,\n    cnt.login_paciente,\n    cnt.tipo_contrato, \n    from_iso8601_timestamp(cnt.data_assinatura) as data_assinatura,\n    date(substr(cnt.data_assinatura,1,10)) as data_brt_assinatura,\n    cnt.id_profissional,\n    cnt.id_paciente,\n    cnt.ip_usuario,\n    cnt.emitted_at,\n    0 as is_delete,\n    current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_contrato\" as cnt\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as icnt on cnt.id = icnt.table_id and icnt.table_name = 'contrato'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_contrato\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:15.774195Z", "completed_at": "2025-07-01T18:31:15.812554Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:15.829696Z", "completed_at": "2025-07-01T18:31:15.829696Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09031891822814941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_convenio", "compiled": true, "compiled_code": "\n\nselect conv.id as id_convenio,\n       from_iso8601_timestamp(conv.data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(conv.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       conv.usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(conv.data_inclusao) as data_inclusao,\n       date(substr(conv.data_inclusao,1,10)) as data_brt_inclusao,\n       from_iso8601_timestamp(conv.data_fim) as data_fim,\n       date(substr(conv.data_fim,1,10)) as data_brt_fim,\n       from_iso8601_timestamp(conv.data_inicio) as data_inicio,\n       date(substr(conv.data_inicio,1,10)) as data_brt_inicio,\n       from_iso8601_timestamp(conv.data_ativacao_auto_avaliacao) as data_ativacao_auto_avaliacao,\n       date(substr(conv.data_ativacao_auto_avaliacao,1,10)) as data_brt_ativacao_auto_avaliacao, \n       conv.faixa_desconto,\n       conv.nome as nome_convenio,\n       conv.percentual_empresa,\n       case \n           when conv.id in(999998,999999) then 'Particular'\n           when conv.tipo_convenio = 'O'  then 'Operadora'\n           when conv.tipo_convenio = 'E'  then 'Empresa'\n           when conv.tipo_convenio = 'A'  then 'Associa\u00e7\u00e3o'\n           else null\n        end tipo_convenio,\n       conv.triagem as flag_triagem,\n       conv.representante,\n       upper(conv.nome_sistema) as nome_convenio_sistema,\n       conv.chave_login,\n       case \n           when conv.pacote_consultas = 'S' then true\n           when conv.pacote_consultas = 'N' then false\n           else null\n        end flag_pacote_atendimento,\n       cast(if((conv.white_label='S'),1,0) as boolean) as flag_whitelabel,\n       if(conv.ativo is null, false, cast(conv.ativo as boolean)) as flag_ativo,\n       if(conv.publico_site is null, false, conv.publico_site) as flag_publico_site,\n       conv.publico_site_doc,\n       conv.limite_consultas as limite_atendimento,\n       conv.tipo_limite,\n       cast(conv.tempo_consulta as int) as tempo_atendimento,\n       case \n           when conv.elegibilidade = 'S' then true\n           when conv.elegibilidade = 'N' then false\n           else null\n        end flag_elegibilidade,\n       case \n           when conv.consulta_apos_limite = 'S' then true\n           when conv.consulta_apos_limite = 'N' then false\n           else null\n        end flag_atendimento_apos_limite,\n       conv.valor_consulta_apos_limite as valor_atendimento_apos_limite,\n       conv.quant_demais_consultas as quantidade_demais_atendimento,\n       conv.quant_primeira_consulta as quantidade_primeira_atendimento,\n       cast(if((conv.autorizacao_tiss='S'),1,0) as boolean) as flag_autorizacao_tiss,\n       conv.biometria_facial as flag_biometria_facial,\n       conv.encaminhamento_medico as flag_encaminhamento_medico,\n       conv.paciente_pagante as flag_paciente_pagante,\n       if(conv.utiliza_corpo_clinico is null, false, conv.utiliza_corpo_clinico) as flag_utiliza_corpo_clinico,\n       conv.tipo_limite_convenio,\n       conv.limite_consultas_convenio as limite_atendimento_convenio,\n       conv.regiao, \n       conv.cadastro_simples as flag_cadastro_simples,\n       conv.tipo_contrato,\n       conv.landing_page,\n       cast(if((conv.tipo_contrato = 'SMB'),1,0) as boolean) as flag_convenio_smb,\n       conv.convenio_conexa as flag_convenio_conexa,\n       conv.valor_por_consulta as valor_por_atendimento,\n       conv.valor_por_vida as valor_por_vida,\n       conv.diario_emocoes as flag_diario_emocoes,\n       cast(conv.conexa_plus as boolean) as flag_conexa_plus,\n       cast(acesso_exclusivo_beti as boolean) as flag_acesso_exclusivo_beti,\n       case \n           when conv.cancelar_tiss = 'S' then true\n           when conv.cancelar_tiss = 'N' then false\n           else null\n        end flag_cancelar_tiss,\n       cast(conv.exibir_auto_avaliacao as boolean) as flag_auto_avaliacao,\n       cast(conv.convenio_unificado_conexa as boolean) as flag_convenio_unificado_conexa,\n       if(conv.paciente_solicita_pacote is null, false, conv.paciente_solicita_pacote) as paciente_solicita_pacote,\n       if(conv.restringe_psi_valor_repasse is null, false, conv.restringe_psi_valor_repasse) as restringe_psicologo_valor_repasse,\n       conv.emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_convenio\" as conv --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids ON conv.id = ids.table_id and ids.table_name = 'convenio'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_convenio\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:15.913346Z", "completed_at": "2025-07-01T18:31:15.937966Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:15.960362Z", "completed_at": "2025-07-01T18:31:15.960362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0858147144317627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_convenio_repasses", "compiled": true, "compiled_code": "\n\n select cr.id as id_convenio_repasses,\n        from_iso8601_timestamp(cr.data_ult_alteracao) as data_ultima_alteracao,\n        cr.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(cr.data_inclusao) as data_inclusao,\n        cr.id_convenio,\n        cr.id_categoria_repasse,\n        cr.pais,\n        cr.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n      FROM \"delta\".\"bronze\".\"raw_pvv_convenio_repasses\" as cr --\nINNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" as t1  on cr.id = t1.table_id and t1.table_name = 'convenio_repasses'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_convenio_repasses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:16.042531Z", "completed_at": "2025-07-01T18:31:16.067568Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:16.085560Z", "completed_at": "2025-07-01T18:31:16.085560Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09182977676391602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_corpo_clinico_convenio", "compiled": true, "compiled_code": "\n\n select \n        id as id_corpo_clinico_convenio,\n        from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n        usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(data_inclusao) as data_inclusao,\n        versao,\n        nome as nome_convenio,\n        convenio as id_convenio,\n        cast(valor_repasse as int) as valor_repasse,\n        convenio_associado,\n        emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_corpo_clinico_convenio\" as cc -- \ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on cc.id = ids.table_id and table_name = 'corpo_clinico_convenio'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_corpo_clinico_convenio\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:16.159924Z", "completed_at": "2025-07-01T18:31:16.184437Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:16.203846Z", "completed_at": "2025-07-01T18:31:16.203846Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08392858505249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_corpo_clinico_profissional", "compiled": true, "compiled_code": "\n\n    select\n        ccp.id as id_corpo_clinico_profissional, \n        ccp.corpo_clinico_convenio as id_corpo_clinico_convenio,\n        from_iso8601_timestamp(ccp.data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(ccp.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n        ccp.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(ccp.data_inclusao) as data_inclusao,\n        date(substr(ccp.data_inclusao,1,10)) as data_brt_inclusao,\n        ccp.versao,\n        ccp.profissionais as id_profissional,\n        ccp.nome as nome_profissional,\n        ccp.enviado_notificacao as flag_enviado_notificacao, \n        if(ids.table_id is null, true, false) as is_delete,\n        ccp.emitted_at,\n        current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_corpo_clinico_pro\" as ccp --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on ccp.id = ids.table_id and table_name = 'corpo_clinico_pro'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_corpo_clinico_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:16.274887Z", "completed_at": "2025-07-01T18:31:16.310623Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:16.333544Z", "completed_at": "2025-07-01T18:31:16.333544Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09008932113647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_dado_site", "compiled": true, "compiled_code": "\n\n    SELECT\n        ds.id AS id_dado_site, \n\t    from_iso8601_timestamp(ds.data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(ds.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n        ds.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(ds.data_inclusao) as data_inclusao,\n        date(substr(ds.data_inclusao,1,10)) as data_brt_inclusao,\n        ds.termo_pesquia_bolas,\n        ds.termo_pesquisa_filtro,\n        ds.convenio,\n        ds.email,\n        ds.termo_pesquia_bcare,\n        ds.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_dados_site\" AS ds --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON ds.id = ids.table_id AND ids.table_name = 'dados_site'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_dado_site\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:16.425748Z", "completed_at": "2025-07-01T18:31:16.449819Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:16.483925Z", "completed_at": "2025-07-01T18:31:16.483925Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10661673545837402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_data_agenda_psicologo", "compiled": true, "compiled_code": "\n\nselect\n        id AS id_data_agenda_psicologo,\n        agenda_profissional as id_agenda_profissional,\n        from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n        usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(data_inclusao) as data_inclusao,\n        date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n        from_iso8601_timestamp(start) as start,\n        from_iso8601_timestamp(\"end\") as \"end\",\n        case\n            when hour(from_iso8601_timestamp(start)) >= 0 and hour(from_iso8601_timestamp(start)) < 6 then 'Madrugada'\n            when hour(from_iso8601_timestamp(start)) >= 6 and hour(from_iso8601_timestamp(start)) < 12 then 'Manh\u00e3'\n            when hour(from_iso8601_timestamp(start)) >= 12 and hour(from_iso8601_timestamp(start)) < 18 then 'Tarde'\n            when hour(from_iso8601_timestamp(start)) >= 18 and hour(from_iso8601_timestamp(start)) < 24 then 'Noite'\n        end turno_atendimento,\n        status,\n        title,\n        observacao,\n        nome_paciente,\n        CASE\n            WHEN nome_paciente is not null THEN true\n            ELSE false\n        END flag_agenda_preenchida,\n        emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_datas\" as dt --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON dt.id = ids.table_id AND ids.table_name = 'datas'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_data_agenda_psicologo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:16.600854Z", "completed_at": "2025-07-01T18:31:16.637852Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:16.667014Z", "completed_at": "2025-07-01T18:31:16.667014Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12737035751342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_decrypted_detalhes_motivo_adoecimento_laboral", "compiled": true, "compiled_code": "\n\n    SELECT\n        dmal.id AS id_detalhes_motivo_adoecimento_laboral,\n\t    from_iso8601_timestamp(dmal.data_ult_alteracao) as data_ultima_alteracao,\n        dmal.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(dmal.data_inclusao) as data_inclusao,\n        dmal.descricao,\n        dmal.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_decrypted_detalhes_motivo_adoecimento_laboral\" AS dmal\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON dmal.id = ids.table_id AND ids.table_name = 'detalhes_motivo_adoecimento_laboral'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_decrypted_detalhes_motivo_adoecimento_laboral\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:16.790009Z", "completed_at": "2025-07-01T18:31:16.824026Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:16.850918Z", "completed_at": "2025-07-01T18:31:16.850918Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12504816055297852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_decrypted_detalhes_relacao_adoecimento_laboral", "compiled": true, "compiled_code": "\n\nselect\n    dral.id as id_detalhes_relacao_adoecimento_laboral,\n    from_iso8601_timestamp(dral.data_ult_alteracao) as data_ultima_alteracao,\n    dral.usuario_ult_alteracao as usuario_ultima_alteracao,\n    from_iso8601_timestamp(dral.data_inclusao) as data_inclusao,\n    dral.descricao,\n    dral.emitted_at,\n    0 as is_delete,\n    current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_decrypted_detalhes_relacao_adoecimento_laboral\" as dral\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on dral.id = ids.table_id and ids.table_name = 'detalhes_relacao_adoecimento_laboral'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_decrypted_detalhes_relacao_adoecimento_laboral\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:16.934245Z", "completed_at": "2025-07-01T18:31:16.953738Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:16.975821Z", "completed_at": "2025-07-01T18:31:16.975821Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09039139747619629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_decrypted_diagnostico", "compiled": true, "compiled_code": "\n\nSELECT id as id_diagnostico,\n       codigo,\n       descricao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       versao,\n       --codigo_backup,\n       --descricao_backup,\n       emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_decrypted_diagnostico\" as d\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on d.id = ids.table_id and table_name = 'diagnostico'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_decrypted_diagnostico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:17.058919Z", "completed_at": "2025-07-01T18:31:17.076145Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:17.104239Z", "completed_at": "2025-07-01T18:31:17.104239Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08640027046203613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_decrypted_evolucao_tratamento", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(id as bigint) as id_evolucao,\n    cast(id_tratamento as bigint) as id_tratamento,\n    cast(id_consulta as bigint) as id_atendimento,\n    resumo_sessao,\n    procedimentos_tecnicos,\n    instrumentos_utilizados,\n    usuario_ult_alteracao,\n    from_iso8601_timestamp(data_inclusao) as data_inclusao,\n    from_iso8601_timestamp(data_ult_alteracao) as data_ult_alteracao,\n    versao,\n    cast(id_profissional as bigint) as id_profissional,\n    desfecho,\n    emitted_at,\n    from_iso8601_timestamp(data_liberacao_prontuario_para_paciente) as data_liberacao_prontuario_para_paciente,\n    registro_documental\nFROM \"delta\".\"bronze\".\"raw_pvv_decrypted_evolucao_tratamento\"", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_decrypted_evolucao_tratamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:17.179961Z", "completed_at": "2025-07-01T18:31:17.212117Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:17.240255Z", "completed_at": "2025-07-01T18:31:17.240255Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09131693840026855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_decrypted_novo_prontuario", "compiled": true, "compiled_code": "\n\nSELECT\n    np.id AS id_prontuario,\n    np.id_profissionais as id_profissional,\n    np.id_pacientes as id_paciente,\n    np.id_paciente_prontuario as id_paciente_prontuario,\n    np.id_diagnostico,\n    queixa_principal,\n    data_inicio_queixas,\n    case \n\t\twhen np.ocorrencia_queixas in ('0', 'REPENTINO') then 'Repentino'\n\t\twhen np.ocorrencia_queixas in ('0', 'GRADUAL') then 'Gradual'\n\t\telse np.ocorrencia_queixas\n    end ocorrencia_queixas,\n    mudancas_queixas,\n    sintomas_queixas,\n    queixas_cognitivas,\n    queixas_afetivas,\n    case\n        when np.psicomotricidade in ('0', 'NORMAL') then 'Normal'\n        when np.psicomotricidade in ('1', 'LENTO') then 'Lento'\n        when np.psicomotricidade in ('2', 'AGITADO') then 'Agitado'\n        when np.psicomotricidade in ('3', 'NAO_SE_APLICA') then 'N\u00e3o se aplica'\n        else np.psicomotricidade\n    end psicomotricidade,\n    detalhes_psicomotricidade,\n    habitos_rotina,\n    vida_social,\n    estado_atual_saude,\n    antecedentes_familiares,\n    historia_familiar,\n    from_iso8601_timestamp(np.data_inclusao) as data_inclusao,\n    date(substr(np.data_inclusao,1,10)) as data_brt_inclusao,\n    from_iso8601_timestamp(np.data_ult_alteracao) as data_ultima_alteracao,\n    date(substr(np.data_ult_alteracao,1,10)) as data_brt_alteracao,\n    np.usuario_ult_alteracao as usuario_ultima_alteracao,\n    nomeclatura_cid,\n    numero_consultas_previstas,\n    case\n        when np.regularidade_consultas in ('0', 'SEMANAL') then 'Semanal'\n        when np.regularidade_consultas in ('1', 'QUINZENAL') then 'Quinzenal'\n        when np.regularidade_consultas in ('2', 'MENSAL') then 'Mensal'\n        else np.regularidade_consultas\n    end regularidade_atendimento,\n    from_iso8601_timestamp(np.termino_previsto_tratamento) as data_termino_previsto_tratamento,\n    diagnostico_cid,\n    np.emitted_at,\n    0 as is_delete,\n    current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_decrypted_novo_prontuario\" AS np\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON np.id = ids.table_id AND ids.table_name = 'novo_prontuario'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_decrypted_novo_prontuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:17.332725Z", "completed_at": "2025-07-01T18:31:17.367888Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:17.386763Z", "completed_at": "2025-07-01T18:31:17.386763Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11049103736877441, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_desconto", "compiled": true, "compiled_code": "\n\nselect id as id_desconto,\n\tfrom_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n\tusuario_ult_alteracao as usuario_ultima_alteracao,\n\tfrom_iso8601_timestamp(data_inclusao) as data_inclusao,\n       date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n       versao,\n       if((em_uso = 'S'),true,false) as flag_em_uso,\n       login_pagamento,\n       id_paciente,\n       login_profissional,\n       id_profissional,\n       num_desconto,\n       cast(valor_desconto as decimal) as valor_desconto,\n       from_iso8601_timestamp(data_expiracao) as data_expiracao,\n       date(substr(data_expiracao,1,10)) as data_brt_expiracao,\n       qtd_consultas_pacote as quantidade_consultas_pacote,\n       qtd_utilizado_pacote as quantidade_utilizado_pacote,\n       tipo_voucher,\n       valor_pacote,\n       from_iso8601_timestamp(data_geracao) as data_geracao, \n       moeda,\n       emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_descontos\" as d --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on d.id = ids.table_id and table_name = 'descontos'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_desconto\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:17.465400Z", "completed_at": "2025-07-01T18:31:17.497199Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:17.512946Z", "completed_at": "2025-07-01T18:31:17.512946Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0865941047668457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_detalhes_relacao_adoecimento_laboral", "compiled": true, "compiled_code": "\n\n    SELECT\n        dral.id AS id_detalhes_relacao_adoecimento_laboral,\n\t    from_iso8601_timestamp(dral.data_ult_alteracao) as data_ultima_alteracao,\n        dral.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(dral.data_inclusao) as data_inclusao,\n        dral.descricao,\n        dral.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_detalhes_relacao_adoecimento_laboral\" AS dral --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON dral.id = ids.table_id AND ids.table_name = 'detalhes_relacao_adoecimento_laboral'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_detalhes_relacao_adoecimento_laboral\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:17.607978Z", "completed_at": "2025-07-01T18:31:17.645660Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:17.665360Z", "completed_at": "2025-07-01T18:31:17.665360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09747862815856934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_empresa_subsidiaria", "compiled": true, "compiled_code": "\n\n    SELECT\n        es.id AS id_empresa_subsidiaria,\n        from_iso8601_timestamp(es.data_ult_alteracao) as data_ultima_alteracao,\n        es.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(es.data_inclusao) as data_inclusao,\n        es.nome_empresa,\n        es.id_convenio AS id_convenio,\n        es.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_empresa_subsidiaria\" AS es --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON es.id = ids.table_id AND ids.table_name = 'empresa_subsidiaria'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_empresa_subsidiaria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:17.747958Z", "completed_at": "2025-07-01T18:31:17.772906Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:17.791682Z", "completed_at": "2025-07-01T18:31:17.791682Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09466886520385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_evolucao_tratamento", "compiled": true, "compiled_code": "\n\n    SELECT\n        evt.id AS id_evolucao_tratamento,\n\t    from_iso8601_timestamp(evt.data_ult_alteracao) as data_ultima_alteracao,\n        evt.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(evt.data_inclusao) as data_inclusao,\n        evt.id_tratamento AS id_tratamento,\n        evt.id_consulta AS id_atendimento,\n        evt.id_profissional AS id_profissional,\n        evt.resumo_sessao,\n        evt.procedimentos_tecnicos,\n        evt.instrumentos_utilizados,\n        case \n\t\t\twhen evt.desfecho in ('0', 'ATENDIMENTO_CONCLUIDO') then 'Atendimento conclu\u00eddo'\n\t\t\twhen evt.desfecho in ('1', 'ATENDIMENTO_EM_ABERTO') then 'Atendimento em aberto'\n\t\t\twhen evt.desfecho in ('2', 'ATENDIMENTO_INTERROMPIDO') then 'Atendimento interrompido'\n\t\t\twhen evt.desfecho in ('3', 'PACIENTE_FALTOU') then 'Paciente faltou'\n\t\t\telse evt.desfecho\n\t\tend as desfecho,\n\t\tevt.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_evolucao_tratamento\" AS evt --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON evt.id = ids.table_id AND ids.table_name = 'evolucao_tratamento'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_evolucao_tratamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:17.887749Z", "completed_at": "2025-07-01T18:31:17.903529Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:17.931300Z", "completed_at": "2025-07-01T18:31:17.931300Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09680438041687012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_foto", "compiled": true, "compiled_code": "\n\nselect \n    id as id_foto,\n    from_iso8601_timestamp(dat_seguranca) as data_seguranca,\n    date(substr(dat_seguranca,1,10)) as data_brt_seguranca,\n    extract(year from from_iso8601_timestamp(dat_seguranca)) as ano,\n    extract(month from from_iso8601_timestamp(dat_seguranca)) as mes,\n    tamanho,\n    nome,\n    tipo,\n    usu_seguranca as usuario_seguranca,\n    versao,\n    binary_content,\n    endereco,\n    id_herdado, \n    id_herdado_conflito,\n    emitted_at, \n    current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_foto\"", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_foto\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:18.030481Z", "completed_at": "2025-07-01T18:31:18.086399Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:18.109839Z", "completed_at": "2025-07-01T18:31:18.109839Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13245820999145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_informacoes_twilio", "compiled": true, "compiled_code": "\n\nselect id as id_informacoes_twilio,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       data_inclusao,\n       versao,\n       date_createdp1,\n       date_createdp2,\n       date_updatedp1,\n       date_updatedp2,\n       durationp1,\n       durationp2,\n       try(from_iso8601_timestamp(end_timep1)) as end_timep1,\n       try(from_iso8601_timestamp(end_timep2)) as end_timep2,\n       nome_twiliop1,\n       nome_twiliop2,\n       sid,\n       try(from_iso8601_timestamp(start_timep1)) as start_timep1,\n       try(from_iso8601_timestamp(start_timep2)) as start_timep2,\n       status_atualizacao,\n       statusp1,\n       statusp2,\n       status_sala,\n       type,\n       pagamentoconsulta as id_atendimento,\n       token_sala,\n       cast(duracao_sala as bigint) as duracao_sala,\n\t   emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_informacoes_twilio\" as it --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on it.id = ids.table_id and table_name = 'informacoes_twilio'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_informacoes_twilio\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:18.187847Z", "completed_at": "2025-07-01T18:31:18.214420Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:18.234269Z", "completed_at": "2025-07-01T18:31:18.234269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08212113380432129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_informacoes_vonage", "compiled": true, "compiled_code": "\n\nselect id as id_informacoes_vonage,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n\tfrom_iso8601_timestamp(data_inclusao) as data_inclusao,\n       versao,\n       session_id,\n       from_iso8601_timestamp(entrada_psi) as entrada_psi,\n       from_iso8601_timestamp(saida_psi) as saida_psi,\n       from_iso8601_timestamp(entrada_pac) as entrada_pac,\n       from_iso8601_timestamp(saida_pac) as saida_pac,\n       duracao_sala,\n       id_pagamento_consulta as id_atendimento,\n       psi_online,\n       pac_online,\n       compartilhamento_link,\n       ip_psicologo,\n       ip_paciente,\n       cookie_psicologo,\n       cookie_paciente,\n       tempo_simultaneo,\n       emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_informacoes_vonage\" as iv --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on iv.id = ids.table_id and table_name = 'informacoes_vonage'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_informacoes_vonage\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:18.323810Z", "completed_at": "2025-07-01T18:31:18.361701Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:18.377782Z", "completed_at": "2025-07-01T18:31:18.377782Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09557557106018066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_log_acesso", "compiled": true, "compiled_code": "\n\nselect \n       id as id_log_acesso,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n       versao,\n       cookie,\n       from_iso8601_timestamp(data_acesso) as data_acesso,\n       date(substr(data_acesso,1,10)) as data_brt_acesso,\n       id_seg_user as id_seguranca_usuario,\n       ip,\n       user_agent,\n       accept_language,\n\temitted_at,\n       -- if((ids.table_id is null),true,false) as is_delete,\n       current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_log_acesso\" as la --", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_log_acesso\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:18.504057Z", "completed_at": "2025-07-01T18:31:18.531635Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:18.545143Z", "completed_at": "2025-07-01T18:31:18.545143Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10041499137878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_log_integracao_operadora", "compiled": true, "compiled_code": "\n\nselect \n       id as id_log_integracao_operadora,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n       versao,\n       endpoint_integracao,\n       nome_classe,\n       mensagem_da_excecao,\n       status_code,\n       paciente as id_paciente,\n       origem,\n\t   emitted_at,\n       if((ids.table_id is null),true,false) as is_delete,\n       current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_log_integracao_operadoras\" as la --\nleft join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on la.id = ids.table_id and ids.table_name = 'log_integracao_operadora'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_log_integracao_operadora\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:18.634318Z", "completed_at": "2025-07-01T18:31:18.664110Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:18.678201Z", "completed_at": "2025-07-01T18:31:18.678201Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08592653274536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_lote_guia_tiss", "compiled": true, "compiled_code": "\n\n    SELECT\n        lote.id AS id_lote_guia_tiss,\n\t    from_iso8601_timestamp(lote.data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(lote.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n        lote.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(lote.data_inclusao) as data_inclusao,\n        date(substr(lote.data_inclusao,1,10)) as data_brt_inclusao,\n        lote.consulta_id AS id_atendimento,\n        lote.paciente_id AS id_paciente,\n        lote.profissional_id AS id_profissional,\n        lote.convenio as nome_convenio,\n        date(substr(lote.data_autorizacao_consulta,1,10)) as data_autorizacao_atendimento,\n        from_iso8601_timestamp(replace(lote.data_envio_lote, ' ', 'T')) as data_envio_lote,\n        date(substr(lote.data_envio_lote,1,10)) as data_brt_envio_lote,\n        lote.numero_guia_operadora,\n        lote.numero_guia_prestador,\n        lote.numero_lote,\n        lote.numero_protocolo,\n        lote.paciente_carteirinha,\n        lote.paciente_nome as nome_paciente,\n        lote.profissional_cbo,\n        lote.profissional_conselho,\n        lote.profissional_crp,\n        lote.profissional_nome as nome_profissional, \n        lote.senha_autorizacao,\n        lote.valor_guia,\n        lote.enviado_anexo,\n        lote.codigo_glosa_anexo,\n        lote.mensagem_glosa_anexo,\n        lote.codigo_glosa_faturamento,\n        lote.mensagem_glosa_faturamento,\n        lote.status_lote,\n        lote.old AS flag_old,\n        lote.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_lote_guias_tiss\" AS lote --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON lote.id = ids.table_id AND ids.table_name = 'lote_guias_tiss'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_lote_guia_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:18.767558Z", "completed_at": "2025-07-01T18:31:18.796407Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:18.817571Z", "completed_at": "2025-07-01T18:31:18.817571Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09996914863586426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_motivo_adoecimento_laboral_prontuario", "compiled": true, "compiled_code": "\n\n    SELECT\n        cast(malp.id as bigint) AS id_motivo_adoecimento_laboral_prontuario,\n \t    cast(malp.id_prontuario as bigint) as id_prontuario,\n        cast(malp.id_motivo_adoecimento_laboral as bigint) as id_detalhes_motivo_adoecimento_laboral,\n\t    from_iso8601_timestamp(malp.data_ult_alteracao) as data_ultima_alteracao,\n        malp.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(malp.data_inclusao) as data_inclusao,\n        cast(malp.emitted_at as bigint) as emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_motivo_adoecimento_laboral_prontuario\" AS malp --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON cast(malp.id as bigint) = ids.table_id AND ids.table_name = 'motivo_adoecimento_laboral_prontuario'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_motivo_adoecimento_laboral_prontuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:18.906251Z", "completed_at": "2025-07-01T18:31:18.953704Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:18.974977Z", "completed_at": "2025-07-01T18:31:18.974977Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11494135856628418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_motivo_nao_realizacao_consulta", "compiled": true, "compiled_code": "\n\n    SELECT\n        mnrc.id AS id_motivo_nao_realizacao_consulta,\n        from_iso8601_timestamp(mnrc.data_ult_alteracao) as data_ultima_alteracao,\n        mnrc.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(mnrc.data_inclusao) as data_inclusao,\n        mnrc.descricao,\n        mnrc.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_motivo_nao_realizacao_consulta\" AS mnrc --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON mnrc.id = ids.table_id AND ids.table_name = 'motivo_nao_realizacao_consulta'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_motivo_nao_realizacao_consulta\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:19.064332Z", "completed_at": "2025-07-01T18:31:19.088681Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:19.111660Z", "completed_at": "2025-07-01T18:31:19.111660Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09428834915161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_opcoes_atendimento", "compiled": true, "compiled_code": "\n\nselect op.id AS id_opcoes_atendimento,   \n       from_iso8601_timestamp(op.data_ult_alteracao) as data_ultima_alteracao,\n       op.usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(op.data_inclusao) as data_inclusao,\n       op.id_profissional,\n       if(op.adolescencia is null, false, op.adolescencia) AS flag_atende_adolescencia,\n       if(op.adulto is null, false, op.adulto) AS flag_atende_adulto,\n       if(op.infancia is null, false, op.infancia) AS flag_atende_infancia,\n       if(op.pre_adolescente is null, false, op.pre_adolescente) AS flag_atende_pre_adolescente,\n        op.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_opcoes_atendimento\" as op --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON op.id = ids.table_id AND ids.table_name = 'opcoes_atendimento'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_opcoes_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:19.188898Z", "completed_at": "2025-07-01T18:31:19.213929Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:19.232882Z", "completed_at": "2025-07-01T18:31:19.232882Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07703971862792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_pacientes", "compiled": true, "compiled_code": "\n\nselect id AS id_paciente,\n       nome as nome_paciente,\n       email as email_paciente,\n       email_notificacao,\n       endereco,\n       if((estado is null),'N\u00e3o informado',estado) as estado,\n       bairro,\n       complemento,\n       estado_civil,\n       cep,\n       cidade,\n       codigo_pais_celular,\n       codigo_pais_pessoa_contato,\n       codigo_pais_telefone,\n       codigo_pais_telefone_responsavel,\n       replace(replace(cpf,'.', ''),'-', '') as cpf,\n       celular,\n       idioma,\n       login_perfil,\n       login_titular,\n       nacionalidade,\n       pais,\n       pais_atuacao,\n       profissao,\n       documento,\n       documento_verso,\n       relacao_pessoa_contato,\n       status_convenio,\n       telefone,\n       telefone_pessoa_contato,\n       telefone_responsavel,\n       carteira_abertta_saude,\n       carteira_care_plus,\n       carteira_porto_seguro,\n       carteirinha_convenio,\n       nome_empresa,\n       nome_empresa_interna,\n       nome_responsavel,\n       case\n            when cast(extract(year from cast(substr(data_nascimento, 1, 10) as date)) as int) < 1902 or cast(substr(data_nascimento, 1, 10) as date) > current_date then NULL\n            else cast(date_diff('year', cast(substr(data_nascimento, 1, 10) as date),current_date) as int)\n        end idade,            \n       if((departamento is null),'N\u00e3o informado',departamento) as departamento,\n       if((cargo is null),'N\u00e3o informado',cargo) as cargo,\n       IF(pais_atuacao = 'BR', 'BR', 'LATAM') as origem,\n       case\n            when (pac.sexo = 'Feminino' or pac.sexo = 'Masculino' or pac.sexo = 'Outro') then sexo\n            else 'N\u00e3o informado'\n        end sexo,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n       from_iso8601_timestamp(data_liberacao_encaminhamento_medico) as data_liberacao_encaminhamento_medico,\n       date(substr(data_liberacao_encaminhamento_medico,1,10)) as data_brt_liberacao_encaminhamento_medico,           \n       case\n            when cast(substr(data_nascimento, 1, 4) as int) < 1902 then NULL\n            else cast(substr(data_nascimento, 1, 10) as date)\n        end data_nascimento,            \n       from_iso8601_timestamp(data_termo_aceite2) as data_termo_aceite2,\n       date(substr(data_termo_aceite2,1,10)) as data_brt_termo_aceite2,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       departamento_cliente_empresa,\n       case\n            when (pac.id_convenio IS NULL and pac.pais_atuacao = 'BR') then 999999\n            when (pac.id_convenio IS NULL and (pac.pais_atuacao not in('BR') or pac.pais_atuacao is null)) then 999998\n            else  CAST(pac.id_convenio as INT)\n        end id_convenio,\n       case\n            when (pac.carteira_unimed IS NULL or pac.carteira_unimed = '' or pac.carteira_unimed = 'null') then NULL\n            when  pac.id_convenio IN (24,153) then pac.carteira_porto_seguro \n            else pac.carteira_unimed\n        end carteira_unimed,\n       case \n            when (pac.plano_saude is null or pac.plano_saude = '' or pac.plano_saude = 'null') then ''\n\t\t\telse pac.plano_saude\n\t    end plano_saude,\n       id_empresa_subsidiaria,\n       id_encaminhamentomedico as id_encaminhamento_medico,\n       id_externo_conexa,\n       id_paciente_titular,\n       id_profissional_vinculado,\n       id_seg_user as id_seguranca_usuario,\n       case\n            when pac.termo_aceite2 = 'S' then true\n            when pac.termo_aceite2 = 'N' then false\n            else null\n        end termo_aceite2,\n       case\n            when pac.termo_aceite = 'S' then true\n            when pac.termo_aceite2 = 'S' then true\n            else false\n        end termo_aceite,\n       case\n            when ((pac.endereco IS NULL or pac.endereco = '' or pac.endereco = 'null'  or  pac.endereco = '...') or pac.data_nascimento is null or\n                      (pac.celular IS NULL or pac.celular  = '' or pac.celular  = 'null') or (pac.cpf IS NULL or pac.cpf = '' or pac.cpf = 'null') or \n                      (pac.nome_pessoa_contato IS NULL or pac.nome_pessoa_contato = '') or (pac.email_notificacao IS NULL or pac.email_notificacao = '')) then 'N\u00e3o'\n            else 'Sim'\n        end valida_cadastro,             \n       termo_autorizacao_enviado,\n       termo_autorizacao_menor_idade,\n       time_zone,\n       tipo_usuario_convenio,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       pac.emitted_at,\n       0 as is_delete,\n       pac.registro_ans,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_pacientes\" as pac --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on pac.id = ids.table_id and ids.table_name = 'pacientes'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_pacientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:19.302192Z", "completed_at": "2025-07-01T18:31:19.328504Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:19.350971Z", "completed_at": "2025-07-01T18:31:19.350971Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08418798446655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_pagamento_convenio_split", "compiled": true, "compiled_code": "\n\n    SELECT\n        pcs.id AS id_pagamento_convenio_split, \n\t    from_iso8601_timestamp(pcs.data_ult_alteracao) as data_ultima_alteracao,\n        pcs.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(pcs.data_inclusao) as data_inclusao,\n        from_iso8601_timestamp(pcs.data_data_transferancia) AS data_transferencia,\n        date(substr(pcs.data_data_transferancia,1,10)) as data_brt_transferencia,\n        pcs.consulta AS id_atendimento,\n        pcs.profissional AS id_profissional,\n        pcs.aprovacao AS flag_aprovacao,\n        if((pcs.id_confirmacao = 'S'),true,false) as flag_confirmacao_roi,\n        pcs.status,\n        cast(pcs.valor_consulta  as decimal(10,2)) as valor_consulta,\n        pcs.valor_total, \n        cast(CASE\n                 WHEN pcs.valor_consulta is not null THEN pcs.valor_consulta\n                 ELSE pcs.valor_total\n                 END  as decimal(10,2)) as valor_repasse,\n        pcs.antecipacao as flag_antecipacao,\n        pcs.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_pagamento_convenio_split\" AS pcs --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON pcs.id = ids.table_id AND ids.table_name = 'pagamento_convenio_split'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_pagamento_convenio_split\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:19.470063Z", "completed_at": "2025-07-01T18:31:19.492941Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:19.509397Z", "completed_at": "2025-07-01T18:31:19.509397Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11313271522521973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_perfil_usuario", "compiled": true, "compiled_code": "\n\n    SELECT\n        pu.id AS id_perfil_usuario,\n        from_iso8601_timestamp(pu.data_ult_alteracao) as data_ultima_alteracao,\n        pu.usuario_ult_alteracao as usuario_ultima_alteracao,\n        pu.role AS role_usuario,\n        pu.id_seg_user as id_seguranca_usuario,\n        from_iso8601_timestamp(pu.data_inclusao) as data_inclusao,\n        date(substr(pu.data_inclusao,1,10)) as data_brt_inclusao,\n        pu.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_perfil_usuario\" AS pu --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON pu.id = ids.table_id AND ids.table_name = 'perfil_usuario'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_perfil_usuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:19.587701Z", "completed_at": "2025-07-01T18:31:19.617325Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:19.642873Z", "completed_at": "2025-07-01T18:31:19.642873Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09366464614868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_plano_psicologo", "compiled": true, "compiled_code": "\n\n    SELECT\n         meu.id AS id_plano_psicologo,\n\t     from_iso8601_timestamp(meu.data_ult_alteracao) as data_ultima_alteracao,\n\t\t date(substr(meu.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n\t     meu.usuario_ult_alteracao as usuario_ultima_alteracao,\n\t     meu.profissional AS id_profissional,\n\t     meu.agencia,\n\t     meu.agencia_dv,\n\t     meu.bank_code,\n\t     meu.conta,\n\t     meu.conta_dv,\n\t     meu.document_number, \n\t     meu.nome_cartao,\n\t     meu.tipo_conta,\n  \t     meu.pix_tipo,\n\t     meu.pix_chave, \n\t\t concat(meu.bank_code,';',meu.agencia,';',meu.conta,'-', meu.conta_dv) as dados_bancarios,\n         meu.recipient,\n\t     meu.libras,\n\t     from_iso8601_timestamp(meu.data_vigencia) as data_vigencia,\n\t\t date(substr(meu.data_vigencia,1,10)) as data_brt_vigencia,\n\t     meu.plano,\n\t     meu.tempo_consulta,\n\t     meu.valor_consulta,\n\t\t case \n          when ((meu.convenio30 is null or meu.convenio30 = false) and (meu.convenio20 is null or meu.convenio20 = false) and (meu.convenio40 is null or meu.convenio40 = false) and\n                (meu.convenio50 is null or meu.convenio50 = false) and (meu.convenio60 is null or meu.convenio60 = false) and (meu.convenio25 is null or meu.convenio25 = false) and\n                (meu.convenio35 is null or meu.convenio35 = false) and  meu.exclusivo_seduc = false and meu.exclusivo_convenio_triagem = false and meu.convenio_acao_sa = false  and \n\t\t\t    (meu.convenio_seduc IS NULL or meu.convenio_seduc = false)) then true\n          else False\n         end flag_psicologo_particular,\n\t     cast(meu.desconto30 as boolean) AS flag_desconto_30,\n\t     cast(meu.desconto40 as boolean) AS flag_desconto_40,\n\t     cast(meu.desconto50 as boolean) AS flag_desconto_50,\n\t     meu.convenio20 AS flag_convenio_20,\n         meu.convenio25 AS flag_convenio_25,\n         meu.convenio30 AS flag_convenio_30,\n         if(meu.convenio35 is null, false, meu.convenio35) as flag_convenio_35,\n         meu.convenio40 AS flag_convenio_40,\n         meu.convenio50 AS flag_convenio_50,\n         meu.convenio60 AS flag_convenio_60, \n\t     meu.valor_consulta_presencial,\n         if(meu.vouchergratuito is null, false, meu.vouchergratuito) as flag_voucher_gratuito,\n\t     meu.envio_email_cortesia,\n\t     meu.quant_cortesia as quantidade_cortesia,\n\t     cast(meu.desconto50reais as boolean) AS flag_desconto_50_reais,\n\t     meu.quant_desconto,\n\t     meu.tempo_consulta_cortesia,\n\t     meu.pausar_conta AS flag_pausar_conta,\n\t     meu.tempo_antecedencia AS flag_tempo_antecedencia,\n         if(meu.confirmacao_paciente is null, false, meu.confirmacao_paciente) as flag_confirmacao_paciente,\n         meu.antecipacao_convenio AS flag_antecipacao_convenio,\n\t     meu.observacao,\n\t     meu.convenio_seduc,\n\t     meu.exclusivo_seduc,\n\t     meu.quantidade_max_escolas_seduc,\n         if(meu.bloqueado_seduc is null, false, meu.bloqueado_seduc) as flag_bloqueado_seduc,\n\t     meu.convenio_acao_sa,\n         if(meu.aceito_termo_seduc is null, false, meu.aceito_termo_seduc) as flag_aceito_termo_seduc,\n\t     from_iso8601_timestamp(meu.data_aceito_termo_seduc) as data_aceito_termo_seduc,\n\t\t date(substr(meu.data_aceito_termo_seduc,1,10)) as data_brt_aceito_termo_seduc,\n         if(meu.fonasa is null, false, meu.fonasa) as flag_fonasa,\n\t     meu.moeda,\n     \t meu.isapre AS flag_isapre,\n\t     meu.currency,\n\t     meu.moeda_local,\n\t     meu.moeda_local_presencial,\n\t     meu.paypal_id,\n         meu.exclusivo_convenio_triagem,\n\t     meu.valor_local_consulta,\n\t     meu.valor_local_consulta_presencial,\n         meu.emitted_at,\n         0 as is_delete,\n         current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_meu_plano\" AS meu --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON meu.id = ids.table_id AND ids.table_name = 'meu_plano'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_plano_psicologo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:19.726412Z", "completed_at": "2025-07-01T18:31:19.753648Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:19.770676Z", "completed_at": "2025-07-01T18:31:19.770676Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08103084564208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_profissionais", "compiled": true, "compiled_code": "\n\nselect pro.id as id_profissional,\n       from_iso8601_timestamp(pro.data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(pro.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       from_iso8601_timestamp(pro.data_inclusao) as data_inclusao,\n       date(substr(pro.data_inclusao,1,10)) as data_brt_inclusao,\n       from_iso8601_timestamp(pro.data_inativo) as data_inativo,\n       date(substr(pro.data_inativo,1,10)) as data_brt_inativo,\n       pro.usuario_ult_alteracao as usuario_ultima_alteracao,\n       pro.id_seg_user as id_seguranca_usuario,\n       pro.nome as nome_profissional,\n       pro.email as email_profissional,\n       pro.celular,\n       pro.telefone,\n       pro.perfil,\n       pro.crp,\n       pro.cpf,\n       pro.email_cs_responsavel,\n       pro.nada_consta,\n       if((pro.id_foto is not null),true,false) as flag_foto_perfil,\n       pro.quantmes as quantidade_visualizacoes_perfil_mes,\n       pro.sexo,\n       case\n            when pro.data_nascimento is null then null\n            when cast(substr(pro.data_nascimento, 1, 4) as int) < 1902 then null\n            else cast(substr(pro.data_nascimento, 1, 10) as date) \n        end data_nascimento,\n       case\n            when cast(extract(year from cast(substr(data_nascimento, 1, 10) as date)) as int) < 1902 or cast(substr(data_nascimento, 1, 10) as date) > current_date then NULL\n            else cast(date_diff('year', cast(substr(data_nascimento, 1, 10) as date),current_date) as int)\n        end idade,  \n       case\n            when pro.tipo_abordagem = 'C' then 'Cognitivas e Comportamentais'\n            when pro.tipo_abordagem = 'A' then 'Anal\u00edticas'\n            when pro.tipo_abordagem = 'H' then 'Humanistas'\n            when pro.tipo_abordagem = 'O' then 'Outras abordagens'\n            else null\n        end tipo_abordagem,\n       pro.pais_atuacao,\n       pro.estadocrp as estado_crp,\n       pro.conselho_regional,\n       pro.registro_conselho_profissional,\n       pro.email_vendedor_responsavel,\n       pro.email_supervisor_seduc,\n       pro.estado_civil,\n       pro.estado,\n       if((pro.desativado = 'Sim'),true,false) as flag_desativado, \n       pro.status_cancelamento,\n       pro.bairro,\n       pro.cep,\n       pro.cidade,\n       pro.complemento,\n       pro.descricao,\n       pro.endereco,\n       pro.endereco_perfil,\n       pro.especializacoes,\n       pro.formacao,\n       pro.numero,\n       pro.numero_registro,\n       pro.titulo,\n       pro.url_lattes,\n       pro.url_youtube,\n       if((pro.termo_aceite2 = 'S'),true,false) as flag_termo_aceite,\n       if((pro.termo_aceite_convenio = 'S'),true,false) as flag_termo_aceite_convenio,\n       pro.identidade,\n       pro.nacionalidade,\n       pro.profissao,\n       pro.termoe_psi,\n       pro.pais,\n       if((pro.pais_atuacao = 'BR'),'BR','LATAM') as origem,\n       pro.idioma,\n       pro.codigo_pais_celular,\n       pro.id_conta_salesforce,\n       pro.valor_base_consulta as valor_base_atendimento,\n       pro.valor_definido,\n       case \n           when email like '%triagem%' then true\n           else null\n       end flag_profissional_triagem,\n       if(pro.ativo is null, false, pro.ativo) as flag_ativo,\n       pro.aparece_roi as flag_aparece_roi,\n       if(pro.fonasa is null, false, pro.fonasa) as flag_fonasa,\n       case\n            when pro.tipo_profissionais = 1 then 'Nutricionista'\n            when pro.tipo_profissionais = 2 then 'Triagem'\n            else 'Psic\u00f3logo'\n        end tipo_profissional,\n       pro.emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_profissionais\" as pro --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on pro.id = ids.table_id and ids.table_name = 'profissionais'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_profissionais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:19.849954Z", "completed_at": "2025-07-01T18:31:19.880312Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:19.900964Z", "completed_at": "2025-07-01T18:31:19.900964Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09301066398620605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_prontuario", "compiled": true, "compiled_code": "\n\nselect \n  nvp.id AS id_prontuario,\n  from_iso8601_timestamp(nvp.data_ult_alteracao) as data_ultima_alteracao,\n   date(substr(nvp.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n  nvp.usuario_ult_alteracao as usuario_ultima_alteracao,\n  from_iso8601_timestamp(nvp.data_inclusao) as data_inclusao,\n  date(substr(nvp.data_inclusao,1,10)) as data_brt_inclusao,\n  nvp.data_inicio_queixas,\n  from_iso8601_timestamp(nvp.termino_previsto_tratamento) as termino_previsto_tratamento,\n  nvp.id_profissionais as id_profissional,\n  nvp.id_pacientes as id_paciente,\n  nvp.id_paciente_prontuario,\n  nvp.id_diagnostico,\n  nvp.numero_consultas_previstas as numero_atendimento_prevista,\n  nvp.queixa_principal,\n\tcase \n\t\twhen nvp.ocorrencia_queixas in ('0', 'REPENTINO') then 'Repentino'\n\t\twhen nvp.ocorrencia_queixas in ('0', 'GRADUAL') then 'Gradual'\n\t\telse nvp.ocorrencia_queixas\n  end ocorrencia_queixas,\n  nvp.mudancas_queixas,\n  nvp.sintomas_queixas,\n  nvp.queixas_cognitivas,\n  nvp.queixas_afetivas,\n  case\n    when nvp.psicomotricidade in ('0', 'NORMAL') then 'Normal'\n    when nvp.psicomotricidade in ('1', 'LENTO') then 'Lento'\n    when nvp.psicomotricidade in ('2', 'AGITADO') then 'Agitado'\n    when nvp.psicomotricidade in ('3', 'NAO_SE_APLICA') then 'N\u00e3o se aplica'\n    else nvp.psicomotricidade\n  end psicomotricidade,\n  nvp.detalhes_psicomotricidade,\n  nvp.habitos_rotina,\n  nvp.vida_social,\n  nvp.estado_atual_saude,\n  nvp.antecedentes_familiares,\n  nvp.historia_familiar,\n  nvp.nomeclatura_cid,\n  case\n    when nvp.regularidade_consultas in ('0', 'SEMANAL') then 'Semanal'\n    when nvp.regularidade_consultas in ('1', 'QUINZENAL') then 'Quinzenal'\n    when nvp.regularidade_consultas in ('2', 'MENSAL') then 'Mensal'\n    else nvp.regularidade_consultas\n  end regularidade_atendimento,\n  nvp.emitted_at,\n  0 as is_delete,\n  current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_novo_prontuario\" AS nvp --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON nvp.id = ids.table_id AND ids.table_name = 'novo_prontuario'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_prontuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:19.978244Z", "completed_at": "2025-07-01T18:31:20.003465Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:20.021343Z", "completed_at": "2025-07-01T18:31:20.021343Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07630753517150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_quantidade_reagendamento_atendimento", "compiled": true, "compiled_code": "\n\n select \n        id_consulta as id_atendimento,\n        count(id_consulta) as quantidade_reagendamento,\n        max(data_inclusao) as ultima_data_inclusao_reagendamento\nfrom \"delta\".\"bronze\".\"raw_pvv_reagendamento_consulta\" as ra\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on ra.id = ids.table_id and table_name = 'reagendamento_consulta'  \ngroup by id_consulta", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_quantidade_reagendamento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:20.088144Z", "completed_at": "2025-07-01T18:31:20.111012Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:20.126548Z", "completed_at": "2025-07-01T18:31:20.126548Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0724949836730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_reagendamento_atendimento", "compiled": true, "compiled_code": "\n\n select \n        id as id_reagendamento_atendimento,\n\tfrom_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n\tusuario_ult_alteracao as usuario_ultima_alteracao,\n\tfrom_iso8601_timestamp(data_inclusao) as data_inclusao,\n        date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n        from_iso8601_timestamp(data_consulta) as data_atendimento,\n        date(substr(data_consulta,1,10)) as data_brt_atendimento,\n        id_consulta as id_atendimento,\n        id_data_antiga as id_data_agenda_psicologo_antiga,\n        id_data_nova as id_data_agenda_psicologo_nova,\n        motivo,\n        from_iso8601_timestamp(nova_data) as nova_data_atendimento,\n        date(substr(nova_data,1,10)) as nova_data_brt_atendimento,\n        responsavel,\n        rank() OVER (PARTITION BY id_consulta ORDER BY ra.id DESC) AS ranking,\n        versao,\n        emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_reagendamento_consulta\" as ra\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on ra.id = ids.table_id and table_name = 'reagendamento_consulta'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_reagendamento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:20.196853Z", "completed_at": "2025-07-01T18:31:20.222848Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:20.237676Z", "completed_at": "2025-07-01T18:31:20.237676Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07635807991027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_realizar_pagamento_paciente", "compiled": true, "compiled_code": "\n\n    SELECT\n        rpac.id AS id_realizar_pagamento_paciente, \n\t    from_iso8601_timestamp(rpac.data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(rpac.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n        rpac.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(rpac.data_inclusao) as data_inclusao,\n        date(substr(rpac.data_inclusao,1,10)) as data_brt_inclusao,\n        from_iso8601_timestamp(rpac.data_pagamento) as data_pagamento,\n        date(substr(rpac.data_pagamento,1,10)) as data_brt_pagamento,\n        from_iso8601_timestamp(rpac.data_validade) as data_validade,\n        date(substr(rpac.data_validade,1,10)) as data_brt_validade,\n        rpac.id_paciente,\n        rpac.id_solicitacao_tiss,\n        rpac.pacote,\n        rpac.qtd_uso as quantidade_uso,\n        rpac.data_agenda,\n        rpac.bandeira,\n        rpac.codigo_cartao,\n        rpac.login_pagamento,\n        rpac.nome_cartao,\n        rpac.numero_cartao,\n        rpac.plano,\n        rpac.tipo_pagamento,\n        rpac.valor_pagamento,\n        rpac.vencimento_cartao,\n        rpac.convenio as nome_convenio,\n        rpac.id_assinatura,\n        rpac.status,\n        if((rpac.atingiu_limite = 'S'),true,false) as flag_atingiu_limite,\n        rpac.senha_care_plus,\n        rpac.moeda_pagamento,\n        rpac.plataforma_pagamento, \n        rpac.moeda,\n        rpac.usuario_inclusao,\n        rpac.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_realizar_pagamento_pac\" AS rpac --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON rpac.id = ids.table_id AND ids.table_name = 'realizar_pagamento_pac'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_realizar_pagamento_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:20.304338Z", "completed_at": "2025-07-01T18:31:20.326300Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:20.344907Z", "completed_at": "2025-07-01T18:31:20.344907Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07489466667175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_realizar_pagamento_psicologo", "compiled": true, "compiled_code": "\n\n    SELECT\n        rpag.id AS id_pagamento_psicologo,\n\t    from_iso8601_timestamp(rpag.data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(rpag.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n        rpag.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(rpag.data_inclusao) as data_inclusao,\n        date(substr(rpag.data_inclusao,1,10)) as data_brt_inclusao,\n        from_iso8601_timestamp(rpag.data_pagamento) as data_pagamento,\n        date(substr(rpag.data_pagamento,1,10)) as data_brt_pagamento,\n        from_iso8601_timestamp(rpag.vigencia_plano) as vigencia_plano,\n        from_iso8601_timestamp(rpag.data_vigencia) as data_vigencia,\n        date(substr(rpag.data_vigencia,1,10)) as data_brt_vigencia,\n        rpag.meu_plano AS id_plano_psicologo,\n        rpag.codigo_cartao,\n        rpag.login_pagamento,\n        rpag.id_profissional,\n        rpag.nome_cartao,\n        rpag.numero_cartao,\n        rpag.plano,\n        rpag.tipo_pagamento as flag_tipo_pagamento,\n        rpag.valor_pagamento,\n        rpag.vencimento_cartao,\n        rpag.id_assinatura as id_assinatura,\n        rpag.id_transaction,\n        rpag.status,\n        rpag.bandeira,\n        rpag.moeda_pagamento,\n        rpag.plataforma_pagamento,\n        rpag.moeda,\n        -- rpag.data_agenda,\n        rpag.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_realizar_pagamento\" AS rpag --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON rpag.id = ids.table_id AND ids.table_name = 'realizar_pagamento'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_realizar_pagamento_psicologo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:20.411944Z", "completed_at": "2025-07-01T18:31:20.435078Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:20.452012Z", "completed_at": "2025-07-01T18:31:20.452012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07385063171386719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_relacao_adoecimento_laboral_prontuario", "compiled": true, "compiled_code": "\n\n    SELECT\n        ralp.id AS id_relacao_adoecimento_laboral_prontuario,\n\t    from_iso8601_timestamp(ralp.data_ult_alteracao) as data_ultima_alteracao,\n        ralp.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(ralp.data_inclusao) as data_inclusao,\n        ralp.id_prontuario,\n        ralp.id_relacao_adoecimento_laboral,\n        ralp.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_relacao_adoecimento_laboral_prontuario\" AS ralp --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON ralp.id = ids.table_id AND ids.table_name = 'relacao_adoecimento_laboral_prontuario'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_relacao_adoecimento_laboral_prontuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:20.525821Z", "completed_at": "2025-07-01T18:31:20.549890Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:20.569890Z", "completed_at": "2025-07-01T18:31:20.569890Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08202838897705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_relacao_convenios", "compiled": true, "compiled_code": "\n\nSELECT id as relacao_convenios,\n\tfrom_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       versao,\n       cobertura,\n       condicoes,\n       regras,\n       repasse,\n       convenio as id_convenio,\n       moeda,\n\t   emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_relacao_convenios\" as rc --\nINNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON rc.id = ids.table_id AND ids.table_name = 'relacao_convenios'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_relacao_convenios\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:20.654600Z", "completed_at": "2025-07-01T18:31:20.698583Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:20.730373Z", "completed_at": "2025-07-01T18:31:20.730373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1222076416015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_seguranca_usuario", "compiled": true, "compiled_code": "\n\n    SELECT\n        segu.id as id_seguranca_usuario,\n        from_iso8601_timestamp(segu.data_ult_alteracao) as data_ultima_alteracao,\n        segu.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(segu.data_inclusao) as data_inclusao,\n        login,\n        cast(if(teste is null, 0, teste) as boolean) as flag_teste,\n        from_iso8601_timestamp(segu.data_ult_alteracao_senha) AS data_ultima_alteracao_senha,\n        segu.carteira_porto,\n        segu.role_equipe,\n        segu.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_seg_user\" AS segu --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON segu.id = ids.table_id AND ids.table_name = 'seg_user'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_seguranca_usuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:20.832889Z", "completed_at": "2025-07-01T18:31:20.864070Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:20.884324Z", "completed_at": "2025-07-01T18:31:20.884324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10304522514343262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_solicitacao_tiss", "compiled": true, "compiled_code": "\n\n    SELECT\n        tiss.id AS id_solicitacao_tiss,\n        from_iso8601_timestamp(tiss.data_ult_alteracao) as data_ultima_alteracao,\n        date(substr(tiss.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n        tiss.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(tiss.data_inclusao) as data_inclusao,\n        date(substr(tiss.data_inclusao,1,10)) as data_brt_inclusao,\n        from_iso8601_timestamp(tiss.data_solicitacao) as data_solicitacao,\n        date(substr(tiss.data_solicitacao,1,10)) as data_brt_solicitacao,\n        tiss.id_consulta as id_atendimento,\n        tiss.id_avaliacao_clinica,\n        tiss.id_paciente,\n        tiss.id_profissional,\n        tiss.cbo,\n        tiss.convenio as nome_convenio,\n        tiss.codigo_glosa,\n        tiss.mensagem_glosa,\n        tiss.numero_guia_operadora,\n        tiss.numero_guia_prestador,\n        tiss.quantidade,\n        tiss.quantidade_autorizada, \n        tiss.senha_autorizacao,\n        tiss.status as tiss_status,\n        CASE\n            WHEN tiss.status = '0' THEN '0 - NAO_INFORMADO'\n            WHEN tiss.status = '1' THEN '1 - AUTORIZADO'\n            WHEN tiss.status = '2' THEN '2 - EM_ANALISE'\n            WHEN tiss.status = '3' THEN '3 - NEGADO'\n            WHEN tiss.status = '4' THEN '4 - AGUARDANDO_JUSTIFICATIVA_TECNICA_SOLICITANTE'\n            WHEN tiss.status = '5' THEN '5 - AGUARDANDO_DOCUMENTACAO_PRESTADOR'\n            WHEN tiss.status = '6' THEN '6 - SOLICITACAO_CANCELADA'\n            WHEN tiss.status = '7' THEN '7 - AUTORIZADO_PARCIALMENTE'\n            WHEN tiss.status = '8' THEN '8 - PENDENTE'\n            ELSE tiss.status\n        END status,\n        tiss.registro_ans,\n        tiss.codigo_procedimento,\n        tiss.descricao_procedimento, \n        tiss.numero_carteirinha, \n        tiss.id_solicitacao_pai, \n        from_iso8601_timestamp(tiss.data_validade_senha) data_validade_senha,\n        date(substr(tiss.data_validade_senha,1,10)) as data_brt_validade_senha,\n        tiss.status_execucao,\n        tiss.reprocessado,\n        tiss.codigo_glosa_execucao,\n        tiss.mensagem_glosa_execucao,\n        tiss.guia_executada,\n        tiss.guia_externa,\n        tiss.token_solicitacao,\n        tiss.motivo_pendencia,\n        tiss.biometria_log,\n        tiss.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_solicitacao_tiss\" AS tiss --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON tiss.id = ids.table_id AND ids.table_name = 'solicitacao_tiss'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_solicitacao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:20.969115Z", "completed_at": "2025-07-01T18:31:20.992004Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:21.026424Z", "completed_at": "2025-07-01T18:31:21.026424Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09823441505432129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_status_usuario", "compiled": true, "compiled_code": "\n\n    WITH ST AS (\n    SELECT\n        st.id AS id_status_usuario,\n        from_iso8601_timestamp(st.data_inclusao) as data_inclusao,\n        from_iso8601_timestamp(st.data_ult_alteracao) as data_ultima_alteracao,\n        st.usuario_ult_alteracao as usuario_ultima_alteracao,\n        st.id_seg_user as id_seguranca_usuario,\n        cast(st.ativo as boolean) AS flag_ativo,\n        from_iso8601_timestamp(st.data_ult_alteracao) AS data_status,\n        date(substr(st.data_ult_alteracao,1,10)) as data_brt_status,\n        LAG(from_iso8601_timestamp(st.data_ult_alteracao)) OVER (PARTITION BY st.id_seg_user ORDER BY st.id) AS data_status_anterior,\n        LAG(date(substr(st.data_ult_alteracao,1,10))) OVER (PARTITION BY st.id_seg_user ORDER BY st.id) AS data_brt_status_anterior,\n        rank() OVER (PARTITION BY st.id_seg_user ORDER BY st.id DESC) AS ranking,\n        st.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_status_usuario\" AS st --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON st.id = ids.table_id AND ids.table_name = 'status_usuario'\n    )\n    SELECT * \n    FROM ST \n    WHERE ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_status_usuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:21.105869Z", "completed_at": "2025-07-01T18:31:21.141751Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:21.160447Z", "completed_at": "2025-07-01T18:31:21.160447Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09692001342773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_tabela_classificacao_paciente", "compiled": true, "compiled_code": "\n\nselect id as id_tabela_classificacao_paciente,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n       versao,\n       id_profissional,\n       id_realizar_pagamento_pac as id_realizar_pagamento_paciente,\n       id_paciente,\n       classificacao,\n       quantidade_consultas_indicadas,\n\temitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_tb_classificacao_paciente\" as tb --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on tb.id = ids.table_id and ids.table_name = 'tb_classificacao_paciente'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_tabela_classificacao_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:21.247424Z", "completed_at": "2025-07-01T18:31:21.271305Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:21.292444Z", "completed_at": "2025-07-01T18:31:21.292444Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08952713012695312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_tabela_configuracao_paciente", "compiled": true, "compiled_code": "\n\nselect id as id_tabela_configuracao_paciente,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n       versao,\n       id_paciente,\n       from_iso8601_timestamp(data_ultima_atualizacao_dados_cadastrais) as data_ultima_atualizacao_dados_cadastrais,\n       fator_randomico_recomendador,\n       nome_social,\n       identidade_de_genero,\n       from_iso8601_timestamp(data_psi_desvinculado) as data_psicologo_desvinculado,\n       case\n            when tem_codigo_cid is not null then cast(tem_codigo_cid as boolean)\n            else false \n       end as tem_codigo_cid,\n       case\n            when vinculo_solicitado is not null then cast(vinculo_solicitado as boolean)\n            else false \n       end as vinculo_solicitado, \n       id_plano_convenio,\n       dependente_oab,\n\temitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_tb_configuracoes_pacientes\" as tb --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on tb.id = ids.table_id and ids.table_name = 'tb_configuracoes_pacientes'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_tabela_configuracao_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:21.382201Z", "completed_at": "2025-07-01T18:31:21.412768Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:21.432165Z", "completed_at": "2025-07-01T18:31:21.432165Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09077644348144531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_tb_configuracoes_pagamento_consulta", "compiled": true, "compiled_code": "\n\n    SELECT\n        id AS id_tb_configuracoes_pagamento_consulta,\n        from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n        usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(data_inclusao) as data_inclusao,\n        versao,\n        id_pagamento_consulta as id_atendimento,\n        from_iso8601_timestamp(data_autorizacao_excecao) as data_autorizacao_excecao,\n        motivo_excecao,\n        consulta_excecao,\n        id_usuario_autorizacao_excecao,\n        id_usuario_criacao_excecao,\n        emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at --\n    FROM \"delta\".\"bronze\".\"raw_pvv_tb_configuracoes_pagamento_consulta\"", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_tb_configuracoes_pagamento_consulta\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:21.528904Z", "completed_at": "2025-07-01T18:31:21.562080Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:21.584930Z", "completed_at": "2025-07-01T18:31:21.584930Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10250401496887207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_tb_pendencias_profissional", "compiled": true, "compiled_code": "\n\n    SELECT\n        id as id_pendencias_profissional_prontuario, \n        from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao, \n        usuario_ult_alteracao, \n        from_iso8601_timestamp(data_inclusao) as data_inclusao, \n        versao, \n        cast(situacao as boolean) as situacao, \n        from_iso8601_timestamp(data_termino) as data_termino, \n        motivo, \n        id_profissional, \n        emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_tb_pendencias_profissional\" AS tpp\nINNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON tpp.id = ids.table_id AND ids.table_name = 'tb_pendencias_profissional'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_tb_pendencias_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:21.668871Z", "completed_at": "2025-07-01T18:31:21.699414Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:21.718044Z", "completed_at": "2025-07-01T18:31:21.718044Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0924689769744873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_temas", "compiled": true, "compiled_code": "\n\nselect tema.id AS id_temas,\n       tema.profissionais as id_profissional, \n       from_iso8601_timestamp(tema.data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(tema.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       tema.usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(tema.data_inclusao) as data_inclusao,\n       date(substr(tema.data_inclusao,1,10)) as data_brt_inclusao,\n       cast(tema.acompanhamento_idoso as boolean) as flag_acompanhamento_idoso,\n       cast(tema.acompanhamento_pessoal as boolean) as flag_acompanhamento_pessoal,\n       cast(tema.adocao_filho as boolean) as flag_adocao_filho,\n       cast(tema.adolescencia as boolean) as flag_adolescencia,\n       cast(tema.ansiedade as boolean) as flag_ansiedade,\n       cast(tema.aprendizagem as boolean) as flag_aprendizagem,\n       cast(tema.bipolar as boolean) as flag_bipolar,\n       cast(tema.casal as boolean) as flag_casal,\n       cast(tema.casamento as boolean) as flag_casamento,\n       cast(tema.cirugia_bariatrica as boolean) as flag_cirugia_bariatrica,\n       cast(tema.cognitiva as boolean) as flag_cognitiva,\n       cast(tema.compulsoes as boolean) as flag_compulsoes,\n       cast(tema.conflitos_amorosos as boolean) as flag_conflitos_amorosos,\n       cast(tema.conflitos_familiares as boolean) as flag_conflitos_familiares,\n       cast(tema.conflitos_lei as boolean) as flag_conflitos_lei, \n       cast(tema.dependencia_jogos as boolean) as flag_dependencia_jogos,\n       cast(tema.dependencia_quimica as boolean) as flag_dependencia_quimica,\n       cast(tema.depressao as boolean) as flag_depressao,\n       cast(tema.desenvolvimento_pessoal as boolean) as flag_desenvolvimento_pessoal,\n       cast(tema.disfuncoes_sexuais as boolean) as flag_disfuncoes_sexuais,\n       cast(tema.dor as boolean) as flag_dor, \n       cast(tema.emagrecimento as boolean) as flag_emagrecimento,\n       cast(tema.enfermos as boolean) as flag_enfermos,\n       cast(tema.entrevistas_psicologicas as boolean) as flag_entrevistas_psicologicas, \n       cast(tema.estresse as boolean) as flag_estresse,\n       cast(tema.estresse_traumatico as boolean) as flag_estresse_traumatico,\n       cast(tema.exames_psicologicos as boolean) as flag_exames_psicologicos,\n       cast(tema.familia as boolean) as flag_familia,\n       cast(tema.fobia_social as boolean) as flag_fobia_social,\n       cast(tema.fobias as boolean) as flag_fobias, \n       cast(tema.idoso_terceira_idade as boolean) as flag_idoso_terceira_idade, \n       cast(tema.ludoterapia as boolean) as flag_ludoterapia,\n       cast(tema.medos as boolean) as flag_medos,\n       cast(tema.morte_luto as boolean) as flag_morte_luto,\n       cast(tema.neuropsicologia as boolean) as flag_neuropsicologia, \n       cast(tema.obesidade as boolean) as flag_obesidade,\n       cast(tema.orientacao_aprendizagem as boolean) as flag_orientacao_aprendizagem,\n       cast(tema.orientacao_pais as boolean) as flag_orientacao_pais,\n       cast(tema.orientacao_profissional as boolean) as flag_orientacao_profissional,\n       cast(tema.orientacao_psicologica as boolean) as flag_orientacao_psicologica,\n       cast(tema.orientacao_psicopedagogica as boolean) as flag_orientacao_psicopedagogica, \n       cast(tema.pessoas_deficiencia as boolean) as flag_pessoas_deficiencia,\n       cast(tema.pla_psicopedagogico as boolean) as flag_pla_psicopedagogico,\n       cast(tema.preparacao_aposentadoria as boolean) as flag_preparacao_aposentadoria, \n       cast(tema.publicidade as boolean) as flag_publicidade,\n       cast(tema.recrutamento_pessoal as boolean) as flag_recrutamento_pessoal,\n       cast(tema.relacionamento_afetivos as boolean) as flag_relacionamento_afetivos,\n       cast(tema.saude_mental as boolean) as flag_saude_mental,\n       cast(tema.sindrome_panico as boolean) as flag_sindrome_panico,\n       cast(tema.suicidio as boolean) as flag_suicidio,\n       cast(tema.tdah as boolean) as flag_tdah,\n       cast(tema.toc as boolean) as flag_toc,\n       cast(tema.tanatologia as boolean) as flag_tanatologia,\n       cast(tema.tecnologia as boolean) as flag_tecnologia,\n       cast(tema.teste_psicologicos as boolean) as flag_teste_psicologicos,\n       cast(tema.transtorno_alimentar as boolean) as flag_transtorno_alimentar,\n       cast(tema.transtorno_humor as boolean) as flag_transtorno_humor,\n       cast(tema.transtorno_sono as boolean) as flag_transtorno_sono,\n       cast(tema.tratamento_memoria as boolean) as flag_tratamento_memoria,\n       cast(tema.treinamento_empresarial as boolean) as flag_treinamento_empresarial,\n       cast(tema.violencia_domestica as boolean) as flag_violencia_domestica,\n       cast(tema.violencia_sexual as boolean) as flag_violencia_sexual,\n       cast(tema.acompanhamento_gravidez as boolean) as flag_acompanhamento_gravidez, \n       cast(tema.adaptacao_home as boolean) as flag_adaptacao_home,\n       cast(tema.desenvolvimento_profissional as boolean) as flag_desenvolvimento_profissional,\n       cast(tema.incertezas as boolean) as flag_incertezas,\n       cast(tema.quarentena_isolamento as boolean) as flag_quarentena_isolamento,\n       tema.emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_temas\" as tema --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on tema.id = ids.table_id and ids.table_name = 'temas'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_temas\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:21.794881Z", "completed_at": "2025-07-01T18:31:21.831725Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:21.862820Z", "completed_at": "2025-07-01T18:31:21.862820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10140776634216309, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_tipo_profissional", "compiled": true, "compiled_code": "\n\nselect id as id_tipo_profissional,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       versao,\n       descricao,\n\temitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nfrom \"delta\".\"bronze\".\"raw_pvv_tipo_profissionais\" as tp --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on tp.id = ids.table_id and ids.table_name = 'tipo_profissionais'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_tipo_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:21.979969Z", "completed_at": "2025-07-01T18:31:21.997854Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:22.028078Z", "completed_at": "2025-07-01T18:31:22.028078Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10307550430297852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_tratamento_prontuario", "compiled": true, "compiled_code": "\n\n    SELECT\n        tp.id AS id_tratamento_prontuario, \n        tp.id_prontuario,\n        cast(tp.data_inicio_tratamento as date) as data_inicio_tratamento,\n\t    from_iso8601_timestamp(tp.data_ult_alteracao) as data_ultima_alteracao,\n        tp.usuario_ult_alteracao as usuario_ultima_alteracao,\n        from_iso8601_timestamp(tp.data_inclusao) as data_inclusao,\n        case\n            when tp.status_tratamento in ('0', 'EM_TRATAMENTO') then 'Em tratamento'\n            when tp.status_tratamento in ('1', 'ALTA') then 'Alta'\n            when tp.status_tratamento in ('2', 'ABANDONO') then 'Abandono'\n            when tp.status_tratamento in ('3', 'INTERRUPCAO') then 'Interrup\u00e7\u00e3o'\n            when tp.status_tratamento in ('4', 'ENCAMINHAMENTO') then 'Encaminhamento'\n            when tp.status_tratamento in ('5', 'OUTRO') then 'Outro'\n            else tp.status_tratamento\n        end as status_tratamento,\n        tp.emitted_at,\n        0 as is_delete,\n        current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_tratamento_prontuario\" AS tp --\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON tp.id = ids.table_id AND ids.table_name = 'tratamento_prontuario'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_tratamento_prontuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:22.106438Z", "completed_at": "2025-07-01T18:31:22.136175Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:22.157541Z", "completed_at": "2025-07-01T18:31:22.157541Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08499789237976074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_typeform_dass21_fields", "compiled": true, "compiled_code": "\n\nselect id,\n       field_id,\n       title,\n       case\n       \twhen field_id = '8r6klORI4LbE' then 01\n       \twhen field_id = 'thgXNZZWVReP' then 02\n       \twhen field_id = 'UaWyJbZKZRka' then 03\n       \twhen field_id = '7nI03JpfNCcd' then 04\n       \twhen field_id = 'q7kKqnpj6ZBn' then 05\n       \twhen field_id = 'tHDgUGsxVG1S' then 06\n       \twhen field_id = 'XK4q3zrSybs2' then 07\n       \twhen field_id = 'JKKJMFuqKc25' then 08\n       \twhen field_id = 'izp26wp43obw' then 09\n       \twhen field_id = 'MljHvsO9uuRO' then 10\n       \twhen field_id = 'oX7s8q0WjIUv' then 11\n       \twhen field_id = 'muEOKaNxJ37Q' then 12\n       \twhen field_id = 'xLphOkXJ9pYc' then 13\n       \twhen field_id = '4C1PNL6jpFJD' then 14\n       \twhen field_id = '1KGKutIMmoA4' then 15\n       \twhen field_id = 'h8d8z8bFLRe4' then 16\n       \twhen field_id = 'aijHvY7CfvOU' then 17\n       \twhen field_id = 'DVLZOk8u9EWQ' then 18\n       \twhen field_id = 'bd2xPL6pCnmS' then 19\n       \twhen field_id = 'GZ0FqhLoy3mr' then 20\n       \twhen field_id = 'JGhF7F6u6RMq' then 21\n       end numero_pergunta,\n       case\n\t    when field_id = 'UaWyJbZKZRka' then 'Depress\u00e3o'\n       \twhen field_id = 'q7kKqnpj6ZBn' then 'Depress\u00e3o'\n       \twhen field_id = 'MljHvsO9uuRO' then 'Depress\u00e3o'\n       \twhen field_id = 'xLphOkXJ9pYc' then 'Depress\u00e3o'\n       \twhen field_id = 'h8d8z8bFLRe4' then 'Depress\u00e3o'\n       \twhen field_id = 'aijHvY7CfvOU' then 'Depress\u00e3o'\n       \twhen field_id = 'JGhF7F6u6RMq' then 'Depress\u00e3o'\n       \twhen field_id = 'thgXNZZWVReP' then 'Ansiedade'\n       \twhen field_id = '7nI03JpfNCcd' then 'Ansiedade'\n       \twhen field_id = 'XK4q3zrSybs2' then 'Ansiedade'\n       \twhen field_id = 'izp26wp43obw' then 'Ansiedade'\n       \twhen field_id = '1KGKutIMmoA4' then 'Ansiedade'\n       \twhen field_id = 'bd2xPL6pCnmS' then 'Ansiedade'\n       \twhen field_id = 'GZ0FqhLoy3mr' then 'Ansiedade'\n       \twhen field_id = '8r6klORI4LbE' then 'Estresse'\n       \twhen field_id = 'tHDgUGsxVG1S' then 'Estresse'\n       \twhen field_id = 'JKKJMFuqKc25' then 'Estresse'\n       \twhen field_id = 'oX7s8q0WjIUv' then 'Estresse'\n       \twhen field_id = 'muEOKaNxJ37Q' then 'Estresse'\n       \twhen field_id = '4C1PNL6jpFJD' then 'Estresse'\n       \twhen field_id = 'DVLZOk8u9EWQ' then 'Estresse'\n       end grupo_pergunta,\n       ref\nfrom \"delta\".\"bronze\".\"typeform_fields\"", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_typeform_dass21_fields\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:22.257771Z", "completed_at": "2025-07-01T18:31:22.283257Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:22.309682Z", "completed_at": "2025-07-01T18:31:22.309682Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11089944839477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_typeform_dass21_responses", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect\n  response_id,\n  respostas.choice.label as resposta,\n  respostas.field.id as id_field,\n  calculated.score as score,\n  hidden.origin as origem,\n  hidden.type as tipo_id,\n  hidden.value as id,\n  from_iso8601_timestamp(submitted_at) as data_hora_enviado,\n  from_iso8601_timestamp(landed_at) as data_hora_recebido\nfrom \"delta\".\"bronze\".\"typeform_responses\" \ncross join unnest(answers) AS respostas (choice, field, type)\n)\nselect response_id,\n       resposta,\n       case \n       \twhen resposta = 'Nunca' then 0\n       \twhen resposta = '\u00c0s vezes' then 1\n       \twhen resposta = 'Frequentemente' then 2\n       \twhen resposta = 'Quase sempre' then 3\n       end valor_resposta,\n       id_field,\n       score,\n       origem,\n       tipo_id,\n       id,\n       data_hora_enviado,\n       data_hora_recebido\nfrom t1\nwhere tipo_id = 'PACIENTE_ID'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_typeform_dass21_responses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:22.389541Z", "completed_at": "2025-07-01T18:31:22.417291Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:22.437749Z", "completed_at": "2025-07-01T18:31:22.437749Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08466124534606934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_voucher", "compiled": true, "compiled_code": "\n\nSELECT id as id_voucher,\n       from_iso8601_timestamp(data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(data_inclusao) as data_inclusao,\n       date(substr(data_inclusao,1,10)) as data_brt_inclusao,\n       versao,\n       from_iso8601_timestamp(data_vencimento) as data_vencimento,\n       date(substr(data_vencimento,1,10)) as data_brt_vencimento,\n       if((em_uso = 'S'),true,false) as flag_em_uso,\n       if((enviado_pagamento = 'S'),true,false) as flag_enviado_pagamento,\n       login_paciente,\n       id_paciente,\n       login_profissional,\n       id_profissional,\n       numero_voucher,\n       valor_voucher,\n       case\n           when cartao = 'S' then true\n           when cartao = 'N' then false\n           else null\n        end flag_cartao,\n       quantidade_uso,\n       quantidade_utilizado,\n       cast(aparece_roi as boolean) as flag_aparece_roi,\n       moeda,\n       emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"raw_pvv_voucher\" as v --\ninner join \"delta\".\"bronze\".\"raw_pvv_ids\" as ids on v.id = ids.table_id and table_name = 'voucher'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_voucher\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:22.533037Z", "completed_at": "2025-07-01T18:31:22.565896Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:22.591989Z", "completed_at": "2025-07-01T18:31:22.591989Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11179971694946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_sf_account", "compiled": true, "compiled_code": "\n\n\nSELECT\n    a.id as id_account,\n\ta.\"name\" as cliente,\n\ta.parentid as id_conta_pai,\n\ta.razao_social__c as razao_social,\n\ta.cnpj__c as cnpj,\n\ta.\"type\" as tipo,\n\ta.status_da_conta__c as status_conta,\n\ta.industry as setor,\n\ta.modalidade__c as modalidade,\n\ta.codigo_ans__c as codigo_ans,\n\ta.range_de_funcion_rios__c as range_vidas,\n\ta.business_unit__c as bu,\n\ta.ownerid as id_cs_responsavel,\n\tu.name as cs_responsavel,\n\ta.classifica_o__c as classificacao,\n\ta.mes_de_renovacao__c as mes_renovacao,\n\ta.outros_indice_de_contrato__c as mes_renovacao_outros,\n\ta.indice_do_contrato__c as indice_contrato,\n\ta.vigencia_do_contrato__c as vigencia_contrato,\n\ta.vidas__c as total_funcionarios,\n\tfrom_iso8601_timestamp(a.systemmodstamp) as data_atualizacao,\n\ta.isdeleted\nFROM \"delta\".\"bronze\".\"raw_salesforce_account\" as a\nLEFT JOIN \"delta\".\"bronze\".\"raw_salesforce_user\" as u on a.ownerid = u.id", "relation_name": "\"delta\".\"bronze\".\"stg_sf_account\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:22.702924Z", "completed_at": "2025-07-01T18:31:22.734523Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:22.766346Z", "completed_at": "2025-07-01T18:31:22.766346Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10737967491149902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_sf_clinica", "compiled": true, "compiled_code": "\n\n\nSELECT\n    conta__c as id_account,\n\tempresa__c as plataforma,\n\tid_da_clinica__c as id_clinica,\n\t\"name\" as nome_clinica,\n\tpermite_comunica_o__c as flag_permite_comunicacao,\n\tfrom_iso8601_timestamp(systemmodstamp) as data_atualizacao,\n\tdate(substr(systemmodstamp,1,10)) as data_brt_atualizacao,\n\tisdeleted\nFROM \"delta\".\"bronze\".\"raw_salesforce_clinica__c\"", "relation_name": "\"delta\".\"bronze\".\"stg_sf_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:22.861078Z", "completed_at": "2025-07-01T18:31:22.892488Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:22.925581Z", "completed_at": "2025-07-01T18:31:22.925581Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11182904243469238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_sf_opportunity", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id as id_opportunity,\n\taccountid as id_account,\n\tfrom_iso8601_timestamp(systemmodstamp) as data_atualizacao,\n\t\"type\" as canal,\n\tconta_parceiro__c as id_parceiro,\n\tmodelo_de_parceria__c as modelo_parceria,\n\tfrom_iso8601_timestamp(data_de_lancamento__c) as data_lancamento,\n\tdate(closedate) as data_fechamento,\n\tisdeleted,\n\tiswon,\n\tsyncedquoteid as id_proposta_sync,\n\trank() OVER (PARTITION BY id ORDER BY systemmodstamp DESC) AS ranking\nFROM \"delta\".\"bronze\".\"raw_salesforce_opportunity\"", "relation_name": "\"delta\".\"bronze\".\"stg_sf_opportunity\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:23.021807Z", "completed_at": "2025-07-01T18:31:23.044601Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:23.060094Z", "completed_at": "2025-07-01T18:31:23.060094Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08692741394042969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_sf_precificacao", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id as id_precificacao,\n\tcreatedbyid,\n\tfrom_iso8601_timestamp(createddate) as data_criacao,\n\tdescri_o_do_item_da_proposta__c,\n\tfaturamento_m_nimo__c,\n\tlastmodifiedbyid,\n\tmodelo_de_proposta__c as modelo_proposta,\n\t\"name\" as nome_empresa_precificacao,\n\tproposta__c as id_proposta,\n\tquantidade__c,\n\ttaxa_de_utiliza_o__c as taxa_utilizacao,\n\tunidade__c as unidade_cobranca,\n\tvalor_mensal__c,\n\tvalor_unid__c,\n\tvalor_do_excedente__c,\n\tvidas__c,\t\n\tfrom_iso8601_timestamp(systemmodstamp) as data_atualizacao\nFROM \"delta\".\"bronze\".\"raw_salesforce_precifica_o__c\"\nwhere isdeleted = false", "relation_name": "\"delta\".\"bronze\".\"stg_sf_precificacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:23.140373Z", "completed_at": "2025-07-01T18:31:23.173715Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:23.201445Z", "completed_at": "2025-07-01T18:31:23.201445Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09456872940063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_sf_produto", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id as id_produto,\n\tcreatedbyid,\n\tfrom_iso8601_timestamp(createddate) as data_criacao,\n\tlastmodifiedbyid,\n\t\"name\" as nome_produto,\n\townerid,\n\tfrom_iso8601_timestamp(systemmodstamp) as data_atualizacao\nFROM \"delta\".\"bronze\".\"raw_salesforce_produto_cnx__c\"\nwhere isdeleted = false", "relation_name": "\"delta\".\"bronze\".\"stg_sf_produto\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:23.285410Z", "completed_at": "2025-07-01T18:31:23.313663Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:23.337100Z", "completed_at": "2025-07-01T18:31:23.337100Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09360790252685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_sf_produto_precificacao", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id as id_produto_precificacao,\n\tcreatedbyid,\n\tfrom_iso8601_timestamp(createddate) as data_criacao,\n\tlastmodifiedbyid,\n\t\"name\" as codigo_produto_precificacao,\n\tprecifica_o__c as id_precificacao,\n\tproduto_cnx__c as id_produto,\n\tfrom_iso8601_timestamp(systemmodstamp) as data_atualizacao\nFROM \"delta\".\"bronze\".\"raw_salesforce_produto_da_precifica_o__c\"\nwhere isdeleted = false", "relation_name": "\"delta\".\"bronze\".\"stg_sf_produto_precificacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:23.418375Z", "completed_at": "2025-07-01T18:31:23.445308Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:23.467350Z", "completed_at": "2025-07-01T18:31:23.467350Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08988165855407715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_sf_proposta", "compiled": true, "compiled_code": "\n\n\nSELECT\n    q.id as id_proposta,\n\tq.accountid as id_account,\n\tq.opportunityid as id_opportunity,\n\tq.createdbyid,\n\tfrom_iso8601_timestamp(q.createddate) as data_criacao,\n\tq.discount,\n\tq.email,\n\tdate(q.expirationdate) data_expiracao,\n\tq.faturamento_mensal_minimo__c,\n\tq.grandtotal,\n\tq.lastmodifiedbyid,\n\tq.\"name\" as nome_proposta,\n\tq.observa_o__c as observacao_proposta,\n\tq.ownerid as id_proposta_responsavel,\n\tu.name as nome_proposta_responsavel,\n\tq.phone,\n\tq.quantidade_total__c,\n\tq.quotenumber,\n\tq.\"status\" as status_proposta,\n\tq.subtotal,\n\tq.totalprice,\n\tq.valor_da_consulta_extra__c,\n\tq.vidas_total_dependentes__c,\n\tq.vidas_total_funcionarios__c,\n\tq.vidas_total_da_proposta__c,\n\tfrom_iso8601_timestamp(q.systemmodstamp) as data_atualizacao\nFROM \"delta\".\"bronze\".\"raw_salesforce_quote\" as q\nLEFT JOIN \"delta\".\"bronze\".\"raw_salesforce_user\" as u on q.ownerid = u.id\nwhere q.isdeleted = false\nand q.issyncing = true", "relation_name": "\"delta\".\"bronze\".\"stg_sf_proposta\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:23.547598Z", "completed_at": "2025-07-01T18:31:23.574608Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:23.594435Z", "completed_at": "2025-07-01T18:31:23.594435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09584975242614746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_spo_nilo_messages", "compiled": true, "compiled_code": "\n\nSELECT \n    patient_id, \n    patient_name, \n    lpad(cpf, 11, '0') AS cpf, \n    cohort, \n    template, \n    from_iso8601_timestamp(sent_at) as sent_at, \n    from_iso8601_timestamp(delivered_at) as delivered_at, \n    from_iso8601_timestamp(seen_at) as seen_at, \n    from_iso8601_timestamp(answered_at) as answered_at, \n    status\nFROM \"delta\".\"bronze\".\"raw_sharepoint_nilo\"\nWHERE cpf is not null;", "relation_name": "\"delta\".\"bronze\".\"stg_spo_nilo_messages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:23.690977Z", "completed_at": "2025-07-01T18:31:23.719177Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:23.743341Z", "completed_at": "2025-07-01T18:31:23.743341Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10185503959655762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_brands", "compiled": true, "compiled_code": "\n\nWITH temp_brands AS (\n    SELECT \n        *,\n        rank() over (partition by id, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_brands\"\n)\n\nSELECT\n    id as id_brand,\n    name as nome_brand,\n    source\nFROM temp_brands\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_brands\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:23.817052Z", "completed_at": "2025-07-01T18:31:23.845788Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:23.861952Z", "completed_at": "2025-07-01T18:31:23.861952Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08434033393859863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_custom_empresa_cliente", "compiled": true, "compiled_code": "\n\nWITH temp_custom_empresa_cliente AS (\n    SELECT \n        *,\n        rank() over (partition by id, id_custom_field, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_tickets_custom_fields\"\n    where id_custom_field in (10622258037271, 7504229368087, 10264339577751)\n)\n\nSELECT\n    id as id_ticket,\n    source,\n    max(case when id_custom_field in (10622258037271, 10264339577751) then value end) as empresa,\n    max(case when id_custom_field = 7504229368087 then value end) as cliente\nFROM temp_custom_empresa_cliente\nWHERE rn = 1\ngroup by id, source", "relation_name": "\"delta\".\"bronze\".\"stg_zd_custom_empresa_cliente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:23.939080Z", "completed_at": "2025-07-01T18:31:23.962216Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:23.980384Z", "completed_at": "2025-07-01T18:31:23.980384Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08058333396911621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_groups", "compiled": true, "compiled_code": "\n\nWITH temp_groups AS (\n    SELECT \n        *,\n        rank() over (partition by id, source order by _airbyte_emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_groups\"\n)\n\nSELECT\n    id as id_group,\n    name as nome_group,\n    source\nFROM temp_groups\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_groups\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:24.064264Z", "completed_at": "2025-07-01T18:31:24.084740Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:24.113004Z", "completed_at": "2025-07-01T18:31:24.113004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09564971923828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_organizations", "compiled": true, "compiled_code": "\n\nWITH temp_organizations AS (\n    SELECT \n        *,\n        rank() over (partition by id, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_organizations\"\n)\n\nSELECT\n    id as id_organization,\n    name as nome_organization,\n    source\nFROM temp_organizations\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_organizations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:24.205603Z", "completed_at": "2025-07-01T18:31:24.244221Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:24.271001Z", "completed_at": "2025-07-01T18:31:24.271001Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10659670829772949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_ticket_fields", "compiled": true, "compiled_code": "\n\nWITH temp_ticket_fields AS (\n    SELECT \n        *,\n        rank() over (partition by id, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_ticket_fields\"\n)\n\nSELECT\n    id as id_custom_field,\n    title,\n    required,\n    type,\n    source\nFROM temp_ticket_fields\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_ticket_fields\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:24.406507Z", "completed_at": "2025-07-01T18:31:24.439826Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:24.465734Z", "completed_at": "2025-07-01T18:31:24.465734Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13269329071044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_ticket_forms", "compiled": true, "compiled_code": "\n\nWITH temp_ticket_forms AS (\n    SELECT \n        *,\n        rank() over (partition by id, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_ticket_forms\"\n)\n\nSELECT\n    id as id_ticket_form,\n    name as nome_ticket_form,\n    source\nFROM temp_ticket_forms\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_ticket_forms\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:24.556155Z", "completed_at": "2025-07-01T18:31:24.585631Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:24.618329Z", "completed_at": "2025-07-01T18:31:24.618329Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10973095893859863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_ticket_metric_events", "compiled": true, "compiled_code": "\n\nWITH temp_ticket_metric_events AS (\n    SELECT \n        *,\n        rank() over (partition by ticket_id, metric, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_ticket_metric_events\"\n)\n\nSELECT\n    ticket_id as id_ticket,\n    source,\n    max(if(metric = 'requester_wait_time', time, null)) as requester_wait_time,\n    max(if(metric = 'reply_time', time, null)) as reply_time,\n    max(if(metric = 'agent_work_time', time, null)) as agent_work_time,\n    max(if(metric = 'resolution_time', time, null)) as resolution_time\nFROM temp_ticket_metric_events\nWHERE rn = 1\ngroup by ticket_id, source", "relation_name": "\"delta\".\"bronze\".\"stg_zd_ticket_metric_events\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:24.741144Z", "completed_at": "2025-07-01T18:31:24.789436Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:24.804882Z", "completed_at": "2025-07-01T18:31:24.804882Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11922645568847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_ticket_metrics", "compiled": true, "compiled_code": "\n\nWITH temp_ticket_metrics AS (\n    SELECT \n        *,\n        rank() over (partition by ticket_id, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_ticket_metrics\"\n)\n\nSELECT\n    ticket_id as id_ticket,\n    solved_at,\n    reopens,\n    replies,\n    assigned_at,\n    agent_wait_time_in_minutes_business,\n    agent_wait_time_in_minutes_calendar,\n    first_resolution_time_in_minutes_business,\n    first_resolution_time_in_minutes_calendar,\n    full_resolution_time_in_minutes_business,\n    full_resolution_time_in_minutes_calendar,\n    on_hold_time_in_minutes_business,\n    on_hold_time_in_minutes_calendar,\n    reply_time_in_minutes_business,\n    reply_time_in_minutes_calendar,\n    requester_wait_time_in_minutes_business,\n    requester_wait_time_in_minutes_calendar,\n    source\nFROM temp_ticket_metrics\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_ticket_metrics\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:24.886129Z", "completed_at": "2025-07-01T18:31:24.916004Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:24.944056Z", "completed_at": "2025-07-01T18:31:24.944056Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0918881893157959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets", "compiled": true, "compiled_code": "\n\nWITH temp_tickets AS (\n    SELECT \n        *,\n        rank() over (partition by id, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_tickets\"\n)\n\nSELECT\n    id as id_ticket,\n    canal,\n    id_clinica,\n    priority,\n    ticket_form_id as id_ticket_form,\n    created_at,\n    updated_at,\n    status,\n    subject,\n    description,\n    type,\n    group_id as id_group,\n    brand_id as id_brand,\n    organization_id as id_organization,\n    rating_score,\n    rating_comment,\n    source AS ticket_source,\n    requester_id as id_requester,\n    assignee_id as id_assignee\nFROM temp_tickets\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:25.018929Z", "completed_at": "2025-07-01T18:31:25.042004Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:25.058513Z", "completed_at": "2025-07-01T18:31:25.058513Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07216620445251465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets_comments", "compiled": true, "compiled_code": "\n\nselect\n\tid as id_ticket_comment,\n\tticket_id as id_ticket,\n\tauthor_id as id_autor,\n\tfrom_iso8601_timestamp(created_at) as created_at,\n\tbody,\n\tplain_body,\n\tpublic as flag_public,\n\t\"source\" as ticket_source,\n\tattachments\nfrom \"delta\".\"bronze\".\"zendesk_ticket_comments\"", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets_comments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:25.140030Z", "completed_at": "2025-07-01T18:31:25.160124Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:25.186696Z", "completed_at": "2025-07-01T18:31:25.186696Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08814334869384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets_custom_fields", "compiled": true, "compiled_code": "\n\nWITH temp_tickets_custom_fields AS (\n    SELECT \n        *,\n        rank() over (partition by id, id_custom_field, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_tickets_custom_fields\"\n)\n\nSELECT\n    id as id_ticket,\n    updated_at,\n    id_custom_field,\n    value,\n    source,\n    emitted_at\nFROM temp_tickets_custom_fields\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets_custom_fields\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:25.270373Z", "completed_at": "2025-07-01T18:31:25.295574Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:25.302327Z", "completed_at": "2025-07-01T18:31:25.302327Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07855868339538574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets_motivo_contato", "compiled": true, "compiled_code": "\n\nWITH temp_tickets_motivo_contato AS (\n\tselect\n\tid,\n\tid_custom_field,\n\tsource,\n\tcase\n\t\twhen value = '' then null\n\t\twhen value = 'br_motivo_demandas_pessoais' then 'atendimento cvv'\n\t\telse value\n\tend as value,\n\temitted_at,\n\trank() over (partition by id, id_custom_field, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_tickets_custom_fields\"\n    where id_custom_field in (6700869439895,17009448768407,13361527869975,13362819651607,6497069164695,6502728182551,6682543303959,\n\t16639766234007,17010266530327,1500007037022,1500006644402,5843917935895,4931018526999)\n)\n\nSELECT\n\tid as id_ticket,\n\tsource,\n\tmax(case when id_custom_field in (6700869439895,17009448768407) then replace(replace(value, 'br_motivo_', ''),'_',' ') end) as br_motivo_contato,\n\tmax(case when id_custom_field = 13361527869975 then replace(replace(value, 'sulamerica_motivo_', ''),'_',' ') end) as sulamerica_motivo_contato,\n\tmax(case when id_custom_field in (13362819651607,6497069164695) then replace(replace(value, 'latam_motivo_ctt_', ''),'_',' ') end) as latam_motivo_contato,\n\tmax(case when id_custom_field = 6502728182551 then replace(replace(value, 'tipo_contacto_', ''),'_',' ') end) as latam_tipo_contato,\n\tmax(case when id_custom_field = 6682543303959 then value end) as br_tipo_contato,\n\tmax(case when id_custom_field = 16639766234007 then value end) as ouvidoria_motivo_contato,\n\tmax(case when id_custom_field in (17010266530327,1500007037022) then replace(replace(value, 'motivo_de_contato_', ''),'_',' ') end) as cnx_motivo_contato,\n\tmax(case when id_custom_field = 1500006644402 then replace(replace(value, 'gestor_motivo_contato_', ''),'_',' ') end) as g_motivo_contato,\n\tmax(case when id_custom_field = 5843917935895 then replace(replace(value, 'motivo_imed_', ''),'_',' ') end) as imed_motivo_contato,\n\tmax(case when id_custom_field = 4931018526999 then replace(replace(value, 'car_', ''),'_',' ') end) as car_motivo_contato\nFROM temp_tickets_motivo_contato\nWHERE rn = 1\ngroup by 1,2", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets_motivo_contato\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:25.419460Z", "completed_at": "2025-07-01T18:31:25.444719Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:25.484558Z", "completed_at": "2025-07-01T18:31:25.484558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13180255889892578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets_submotivo_complemento", "compiled": true, "compiled_code": "\n\nWITH temp_tickets_submotivo_complemento AS (\n\tselect\n\tid,\n\tid_custom_field,\n\tsource,\n\tcase\n\t\twhen value = '' then null\n\t\telse value\n\tend as value,\n\temitted_at,\n\trank() over (partition by id, id_custom_field, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_tickets_custom_fields\"\n    WHERE id_custom_field in (17012939360279,17012885486487,17012785013527,17012281627799)\n)\n\nselect \n\tid as id_ticket,\n\tsource,\n\tmax(case when id_custom_field = 17012939360279 then value end) as cnx_complemento_sub_pos_prontuario,\n\tmax(case when id_custom_field = 17012885486487 then value end) as cnx_complemento_sub_pos_documentacao,\n\tmax(case when id_custom_field = 17012785013527 then value end) as cnx_complemento_sub_consulta_prontuario,\n\tmax(case when id_custom_field = 17012281627799 then value end) as cnx_complemento_sub_cadastro_manutencao\nfrom temp_tickets_submotivo_complemento\nWHERE rn = 1\ngroup by 1,2", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets_submotivo_complemento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:25.571858Z", "completed_at": "2025-07-01T18:31:25.605903Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:25.620566Z", "completed_at": "2025-07-01T18:31:25.620566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09214162826538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets_submotivo_contato", "compiled": true, "compiled_code": "\n\nWITH temp_tickets_submotivo_contato AS (\n\tselect\n\tid,\n\tid_custom_field,\n\tsource,\n\tcase\n\t\twhen value = '' then null\n\t\telse value\n\tend as value,\n\temitted_at,\n\trank() over (partition by id, id_custom_field, source order by emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_tickets_custom_fields\"\n    WHERE id_custom_field in (17010071901079,6701030587287,6701826128151,17010192696855,6701800382231,17010301868311,6701814741015,6701144253207,\n    6701773352471,17010158023447,6701599355415,17010134013463,6701793539607,6701470643991,17010392845975,6701080852887,17010139705623,\n    6701858775959,6701890111383,17013664555031,6701818550423,6701829095703,17010346976663,13361553178775,6498913698071,13362861660695,\n    6498999877399,13362879314839,6499003417495,13362864083095,6499020599575,13362857347223,6499110001943,13362874080407,6502615680919,13362936570647,\n    6502667542807,13362960451479,6502594695063,13362929439639,6502663974679,13362971347095,17010849932567,17010760435735,17010636286231,1900002758525,1900002758285)\n)\n\nselect \n\tid as id_ticket,\n\tsource,\n\tmax(case when id_custom_field in (17010071901079,6701030587287) then value end) as br_submotivo_cadastro,\n\tmax(case when id_custom_field = 6701826128151 then value end) as br_submotivo_vendas,\n\tmax(case when id_custom_field in (17010192696855,6701800382231) then value end) as br_submotivo_pos_consulta,\n\tmax(case when id_custom_field in (17010301868311,6701814741015) then value end) as br_submotivo_etica_contratos,\n\tmax(case when id_custom_field = 6701144253207 then value end) as br_submotivo_seduc,\n\tmax(case when id_custom_field in (6701773352471,17010158023447) then value end) as br_submotivo_consulta,\n\tmax(case when id_custom_field in (6701599355415,17010134013463) then value end) as br_submotivo_agendamento,\n\tmax(case when id_custom_field = 6701793539607 then value end) as br_submotivo_triagem,\n\tmax(case when id_custom_field in (6701470643991,17010392845975) then value end) as br_submotivo_liberacao_consulta,\n\tmax(case when id_custom_field in (6701080852887,17010139705623) then value end) as br_submotivo_acesso_login,\n\tmax(case when id_custom_field = 6701858775959 then value end) as br_submotivo_psicoguia,\n\tmax(case when id_custom_field in (6701890111383,17013664555031) then value end) as br_submotivo_sem_atendimento,\n\tmax(case when id_custom_field = 6701818550423 then value end) as br_submotivo_sala_atendimento,\n\tmax(case when id_custom_field in (6701829095703,17010346976663) then value end) as br_submotivo_financeiro,\n\tmax(case when id_custom_field = 13361553178775 then value end) as sulamerica_submotivo,\n\tmax(case when id_custom_field in (6498913698071,13362861660695) then value end) as latam_submotivo_financeiro,\n\tmax(case when id_custom_field in (6498999877399,13362879314839) then value end) as latam_submotivo_cs,\n\tmax(case when id_custom_field in (6499003417495,13362864083095) then value end) as latam_submotivo_vendas,\n\tmax(case when id_custom_field in (6499020599575,13362857347223) then value end) as latam_submotivo_consulta,\n\tmax(case when id_custom_field in (6499110001943,13362874080407) then value end) as latam_submotivo_agendamento,\n\tmax(case when id_custom_field in (6502615680919,13362936570647) then value end) as latam_submotivo_acesso_login,\n\tmax(case when id_custom_field in (6502667542807,13362960451479) then value end) as latam_submotivo_experiencia_cliente,\n\tmax(case when id_custom_field in (6502594695063,13362929439639) then value end) as latam_submotivo_registro,\n\tmax(case when id_custom_field in (6502663974679,13362971347095) then value end) as latam_submotivo_sala_atendimento,\n\tmax(case when id_custom_field = 17010849932567 then value end) as cnx_submotivo_pos_consulta,\n\tmax(case when id_custom_field = 17010760435735 then value end) as cnx_submotivo_consulta,\n\tmax(case when id_custom_field = 17010636286231 then value end) as cnx_submotivo_cadastro,\n\tmax(case when id_custom_field = 1900002758525 then value end) as g_submotivo_pos_consulta,\n\tmax(case when id_custom_field = 1900002758285 then value end) as g_submotivo_consulta\nfrom temp_tickets_submotivo_contato\nWHERE rn = 1\ngroup by 1,2", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets_submotivo_contato\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:25.712839Z", "completed_at": "2025-07-01T18:31:25.735292Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:25.754185Z", "completed_at": "2025-07-01T18:31:25.754185Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0776369571685791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets_tags", "compiled": true, "compiled_code": "\n\nSELECT \n    id,\n\tsource,\n\tupdated_at,\n\tcreated_at,\n    col,\n\temitted_at\nfrom \"delta\".\"bronze\".\"zendesk_tickets_tags\"", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets_tags\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:25.824237Z", "completed_at": "2025-07-01T18:31:25.845540Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:25.867948Z", "completed_at": "2025-07-01T18:31:25.867948Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08004117012023926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets_tags_gatilho", "compiled": true, "compiled_code": "\n\nWITH temp_tickets_tags AS (\n    SELECT \n        id,\n\t\tsource,\n        col,\n\t\temitted_at,\n        rank() over (partition by id, col, source order by emitted_at desc) as rn\n    from \"delta\".\"bronze\".\"zendesk_tickets_tags\"\n    WHERE col in ('br_gatilho_criacao_tkt_filho_n3','latam_gatilho_criacao_tkt_filho_n3')\n)\nselect \n\tid as id_ticket,\n\tsource,\n\tmax(case when col = 'br_gatilho_criacao_tkt_filho_n3' then true else false end) as br_gatilho_criacao_tkt_filho_n3,\n\tmax(case when col = 'latam_gatilho_criacao_tkt_filho_n3' then true else false end) as latam_gatilho_criacao_tkt_filho_n3\nfrom temp_tickets_tags\nWHERE rn = 1\ngroup by 1,2", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets_tags_gatilho\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:25.953105Z", "completed_at": "2025-07-01T18:31:25.999303Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:26.020355Z", "completed_at": "2025-07-01T18:31:26.020355Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10899090766906738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_users", "compiled": true, "compiled_code": "\n\nWITH temp_users AS (\n    SELECT \n        *,\n        rank() over (partition by id, source order by _airbyte_emitted_at desc) as rn\n    FROM \"delta\".\"bronze\".\"zendesk_users\"\n)\n\nSELECT\n    id as id_user,\n    role as role_user,\n    name as nome_user,\n    email as email_user,\n    source\nFROM temp_users\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_zd_users\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:26.106703Z", "completed_at": "2025-07-01T18:31:26.129264Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:26.151510Z", "completed_at": "2025-07-01T18:31:26.152026Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08134007453918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.view_sankhya_apoio_faturamento", "compiled": true, "compiled_code": "-- Relat\u00f3rio de apoio de faturamento real time\n\n\n\nselect \n    cab.nunota as nunota_cab,\n    nfse.nunota as nunota_nfse,\n    fin.nunota as nunota_fin,\n    ite.nunota as nunota_ite,\n    cab.codtipoper as codtipoper_cab,\n    cab.codcencus as codcencus_cab,\n    cab.codparc as codparc_cab,\n    fin.codparc as codparc_fin,\n    par.nomeparc as nome_parceiro,\n    par.razaosocial as razao_social_parceiro,\n    par.ad_company_id as id_company,\n    par.cgc_cpf as cnpj_cpf,\n    cab.numnfse as num_nfse_cab,\n    fin.numnfse as num_nfse_fin,\n    cab.dtalter as data_alter_cab,\n    cab.dtfatur as data_fatura_cab,\n    nfse.dhemissnfse as data_emisssao_nfse,\n    nfse.linknfse as link_nfse,\n    fin.dhbaixa as data_baixa_fin,\n    fin.vlrbaixa as vlr_baixa_fin,\n    ite.vlrtot as vlr_total_item,\n    ite.numpedido as num_pedido_ite\nfrom sqlserver_sankhya.sankhya.tgfcab as cab\nleft join sqlserver_sankhya.sankhya.tgfpar as par on cab.codparc = par.codparc \nleft join sqlserver_sankhya.sankhya.tgfnfse as nfse on cab.nunota = nfse.nunota\nleft join sqlserver_sankhya.sankhya.tgffin as fin on cab.nunota = fin.nunota \nleft join sqlserver_sankhya.sankhya.tgfite as ite on cab.nunota = ite.nunota", "relation_name": "\"delta\".\"gold\".\"view_sankhya_apoio_faturamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:26.226442Z", "completed_at": "2025-07-01T18:31:26.257622Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:26.273609Z", "completed_at": "2025-07-01T18:31:26.273609Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08489704132080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.view_sankhya_notas_fiscais", "compiled": true, "compiled_code": "-- Relat\u00f3rio de apoio de faturamento real time\n\n\n\nwith top as (\nselect\n    codtipoper\n    ,descroper\n    ,ROW_NUMBER() OVER (PARTITION BY codtipoper ORDER BY dhalter DESC) AS ranking\nfrom sqlserver_sankhya.sankhya.tgftop\n)\nselect\n    par.codparc as codigo_parceiro\n    ,par.nomeparc as nome_parceiro\n    ,par.cgc_cpf as cpf_cnpj\n    ,pro.descrprod as descricao_produto\n    ,cab.dtfatur as data_faturamento\n    ,cab.numnfse as nota_fiscal\n    ,ite.vlrtot as valor_bruto\n    ,concat('https://nfe.prefeitura.sp.gov.br/contribuinte/notaprint.aspx?ccm=54116961&nf=', cab.numnfse, '&cod=', nf.codverifnfse) as link\n    ,cab.observacao as observacao\n    ,cab.codtipoper as codigo_tipo_operacao\n    ,top.descroper as tipo_operacao\nfrom sqlserver_sankhya.sankhya.tgfcab  cab\njoin sqlserver_sankhya.sankhya.tgfite  ite on cab.nunota = ite.nunota\njoin sqlserver_sankhya.sankhya.tgfpar  par on cab.codparc = par.codparc\njoin sqlserver_sankhya.sankhya.tgfnfse  nf on cab.nunota = nf.nunota\njoin sqlserver_sankhya.sankhya.tgfpro  pro on ite.codprod = pro.codprod\njoin top on cab.codtipoper = top.codtipoper and ranking = 1\n--join sqlserver_sankhya.sankhya.tgftop top  on cab.codtipoper = top.codtipoper", "relation_name": "\"delta\".\"gold\".\"view_sankhya_notas_fiscais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:26.354184Z", "completed_at": "2025-07-01T18:31:26.354184Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:26.388943Z", "completed_at": "2025-07-01T18:31:26.388943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06702589988708496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.lakehouse.calendar_holidays", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:26.496743Z", "completed_at": "2025-07-01T18:31:26.496743Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:26.529091Z", "completed_at": "2025-07-01T18:31:26.529091Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09553813934326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.lakehouse.cnx_atestado_category", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:26.624638Z", "completed_at": "2025-07-01T18:31:26.624638Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:26.655736Z", "completed_at": "2025-07-01T18:31:26.657071Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06313705444335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.lakehouse.sftp_discadora_desfechos", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:26.730602Z", "completed_at": "2025-07-01T18:31:26.773209Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:26.794351Z", "completed_at": "2025-07-01T18:31:26.794351Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0960090160369873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_company_id_zk", "compiled": true, "compiled_code": "\nselect event_id \nfrom zenklub.core.events\nwhere new_b2_type = 'B2B'\nand company_id is null\nand status = 'paid'\nand day > date('2022-01-01')", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:26.890477Z", "completed_at": "2025-07-01T18:31:26.904491Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:26.937562Z", "completed_at": "2025-07-01T18:31:26.937562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0958869457244873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_idatendimento_flagresponsavel_unique_cnx", "compiled": true, "compiled_code": "\n\nselect idatendimento\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_profissional\ngroup by idatendimento\nhaving count(case when flag_responsavel = '1' then 1 end) > 1", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:27.035440Z", "completed_at": "2025-07-01T18:31:27.047108Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:27.078466Z", "completed_at": "2025-07-01T18:31:27.078466Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09365272521972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_validity_validation_code_zk", "compiled": true, "compiled_code": "\n\nselect id\nfrom zenklub.dump.validation_code\nwhere coalesce(date(canceled_at), deleted_at) < date(created_at)\nunion\nselect id\nfrom zenklub.dump.validation_code\nwhere active = false \nand coalesce(date(canceled_at), deleted_at) is null", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:27.174780Z", "completed_at": "2025-07-01T18:31:27.200926Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:27.224580Z", "completed_at": "2025-07-01T18:31:27.224580Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09894800186157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_anamnesis", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_anamnesis\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_anamnesis\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_anamnesis\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:27.331594Z", "completed_at": "2025-07-01T18:31:27.358659Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:27.381680Z", "completed_at": "2025-07-01T18:31:27.381680Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10660052299499512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_anamnesis_cognitive_complaints", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_anamnesis_cognitive_complaints\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_anamnesis_cognitive_complaints\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_anamnesis_cognitive_complaints\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:27.475967Z", "completed_at": "2025-07-01T18:31:27.521792Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:27.554481Z", "completed_at": "2025-07-01T18:31:27.554481Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12894654273986816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_anamnesis_emotional_affective_complaints", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_anamnesis_emotional_affective_complaints\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_anamnesis_emotional_affective_complaints\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_anamnesis_emotional_affective_complaints\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:27.645636Z", "completed_at": "2025-07-01T18:31:27.692698Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:27.718494Z", "completed_at": "2025-07-01T18:31:27.718494Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1216118335723877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_anamnesis_psychomotricity", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_anamnesis_psychomotricity\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_anamnesis_psychomotricity\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_anamnesis_psychomotricity\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:27.823276Z", "completed_at": "2025-07-01T18:31:27.858734Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:27.881324Z", "completed_at": "2025-07-01T18:31:27.881324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10728716850280762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_anamnesis_reason_for_illness_at_work", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_anamnesis_reason_for_illness_at_work\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_anamnesis_reason_for_illness_at_work\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_anamnesis_reason_for_illness_at_work\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:27.978053Z", "completed_at": "2025-07-01T18:31:28.002515Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:28.034278Z", "completed_at": "2025-07-01T18:31:28.034278Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10394001007080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento\"\n\n\nwhere (data_hora_ultima_atualizacao is not null and data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento\"))\nor (data_hora_ultima_atualizacao is null and data_hora_criacao >= (select max(data_hora_criacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento\"))\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:28.117507Z", "completed_at": "2025-07-01T18:31:28.149817Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:28.170795Z", "completed_at": "2025-07-01T18:31:28.170795Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09634089469909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_anexo", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_anexo\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_anexo\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_anexo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:28.251393Z", "completed_at": "2025-07-01T18:31:28.284365Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:28.304712Z", "completed_at": "2025-07-01T18:31:28.304712Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09625792503356934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_avaliacao", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_avaliacao\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:28.393453Z", "completed_at": "2025-07-01T18:31:28.424648Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:28.441215Z", "completed_at": "2025-07-01T18:31:28.441215Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09659218788146973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_avaliacao_item", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_avaliacao_item\"\n\n\nwhere data_hora_insert >= (select max(data_hora_insert) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao_item\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao_item\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:28.519317Z", "completed_at": "2025-07-01T18:31:28.551154Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:28.583987Z", "completed_at": "2025-07-01T18:31:28.583987Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0942533016204834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_comorbidade", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_comorbidade\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_comorbidade\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_comorbidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:28.664677Z", "completed_at": "2025-07-01T18:31:28.697422Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:28.712598Z", "completed_at": "2025-07-01T18:31:28.712598Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08795547485351562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_diagnostico", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_diagnostico\"\n\n\nwhere data_hora_insert >= (select max(data_hora_insert) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_diagnostico\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_diagnostico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:28.798837Z", "completed_at": "2025-07-01T18:31:28.834094Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:28.846140Z", "completed_at": "2025-07-01T18:31:28.846140Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08814167976379395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_informacao_complementar", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_informacao_complementar\" \n\n\nwhere (data_hora_ultima_atualizacao is not null and data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\"))\nor (data_hora_ultima_atualizacao is null and data_hora_criacao >= (select max(data_hora_criacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\"))\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:28.934361Z", "completed_at": "2025-07-01T18:31:28.962654Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:28.980408Z", "completed_at": "2025-07-01T18:31:28.980408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08519887924194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_profissional", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_profissional\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_profissional\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:29.051493Z", "completed_at": "2025-07-01T18:31:29.083078Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:29.101919Z", "completed_at": "2025-07-01T18:31:29.101919Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08682584762573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_pviva", "compiled": true, "compiled_code": "\n\n\nSELECT\n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_pviva\"\n\n\nwhere (updated_at is not null and updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\"))\nor (updated_at is null and created_at >= (select max(created_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\"))\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:29.180920Z", "completed_at": "2025-07-01T18:31:29.214240Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:29.239778Z", "completed_at": "2025-07-01T18:31:29.239778Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09654712677001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_atendimento_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT *\nFROM \"delta\".\"bronze\".\"landing_cnx_atendimento_tiss\"\n\n\n\nWHERE data_ultima_alteracao >= (SELECT MAX(data_ultima_alteracao) - INTERVAL '10' MINUTE\nFROM \"delta\".\"bronze\".\"raw_cnx_atendimento_tiss\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_atendimento_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:29.316249Z", "completed_at": "2025-07-01T18:31:29.347417Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:29.363391Z", "completed_at": "2025-07-01T18:31:29.363391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10187411308288574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_beneficiario_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT *\nFROM \"delta\".\"bronze\".\"landing_cnx_beneficiario_tiss\"\n\n\n\nWHERE data_ultima_alteracao >= (SELECT MAX(data_ultima_alteracao) - INTERVAL '10' MINUTE\nFROM \"delta\".\"bronze\".\"raw_cnx_beneficiario_tiss\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_beneficiario_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:29.459772Z", "completed_at": "2025-07-01T18:31:29.488509Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:29.510932Z", "completed_at": "2025-07-01T18:31:29.510932Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08926033973693848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_chamada", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_chamada\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_chamada\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_chamada\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:29.594736Z", "completed_at": "2025-07-01T18:31:29.631609Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:29.658292Z", "completed_at": "2025-07-01T18:31:29.658292Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1062767505645752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_chamada_eventos", "compiled": true, "compiled_code": "\n\n\nselect\n    _id\n    ,callid\n    ,clinicid\n    ,appointmentid\n    ,meetservice\n    ,generaluserinformation\n    ,datetime\nfrom \"delta\".\"bronze\".\"landing_cnx_chamada_eventos\"\n\n\n\tWHERE datetime >= (SELECT MAX(datetime) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_chamada_eventos\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_chamada_eventos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:29.759686Z", "completed_at": "2025-07-01T18:31:29.795672Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:29.817232Z", "completed_at": "2025-07-01T18:31:29.817232Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10603213310241699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_chamada_log", "compiled": true, "compiled_code": "\n\nSELECT \n    _id,\n\t_class,\n\tidchamada,\n\tevento,\n\tdatahoraevento,\n\tdatahora,\n\tmeetinguserid,\n\tdetalhes\nFROM \"delta\".\"bronze\".\"landing_cnx_chamada_log\"\n\n\n\tWHERE datahora >= (SELECT MAX(datahora) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_chamada_log\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_chamada_log\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:29.931814Z", "completed_at": "2025-07-01T18:31:29.986323Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:30.017552Z", "completed_at": "2025-07-01T18:31:30.017552Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14648103713989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_chamada_participante", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_chamada_participante\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_chamada_participante\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_chamada_participante\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:30.119221Z", "completed_at": "2025-07-01T18:31:30.148643Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:30.168285Z", "completed_at": "2025-07-01T18:31:30.168285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09679484367370605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_evento_prescricao", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_evento_prescricao\"\n\n\nwhere data_hora_inicio >= (select max(data_hora_inicio) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_evento_prescricao\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_evento_prescricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:30.257811Z", "completed_at": "2025-07-01T18:31:30.285620Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:30.309731Z", "completed_at": "2025-07-01T18:31:30.309731Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09581828117370605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_faturamento_arquivo_atendimento_processado", "compiled": true, "compiled_code": "\n\n\nSELECT *\nFROM \"delta\".\"bronze\".\"landing_cnx_faturamento_arquivo_atendimento_processado\"\n\n\n\nWHERE data_ultima_atualizacao >= (SELECT MAX(data_ultima_atualizacao) - INTERVAL '10' MINUTE\nFROM \"delta\".\"bronze\".\"raw_cnx_faturamento_arquivo_atendimento_processado\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_faturamento_arquivo_atendimento_processado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:30.399231Z", "completed_at": "2025-07-01T18:31:30.431170Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:30.454259Z", "completed_at": "2025-07-01T18:31:30.454259Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0972750186920166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_motivo_cancelamento_atendimento", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_motivo_cancelamento_atendimento\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_motivo_cancelamento_atendimento\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_motivo_cancelamento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:30.557872Z", "completed_at": "2025-07-01T18:31:30.606374Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:30.638158Z", "completed_at": "2025-07-01T18:31:30.638158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12827396392822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_paciente", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_paciente\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_paciente\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:30.748860Z", "completed_at": "2025-07-01T18:31:30.787538Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:30.812087Z", "completed_at": "2025-07-01T18:31:30.812087Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11045241355895996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_paciente_informacao_complementar", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_paciente_informacao_complementar\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_paciente_informacao_complementar\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_paciente_informacao_complementar\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:30.895242Z", "completed_at": "2025-07-01T18:31:30.915767Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:30.947662Z", "completed_at": "2025-07-01T18:31:30.947662Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10251069068908691, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_paciente_pagamento", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_paciente_pagamento\"\n\n\nwhere data_hora_update >= (select max(data_hora_update) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:31.058498Z", "completed_at": "2025-07-01T18:31:31.093026Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:31.109665Z", "completed_at": "2025-07-01T18:31:31.109665Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11164021492004395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_prescricao", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_prescricao\"\n\n\nwhere data_hora_insert >= (select max(data_hora_insert) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_prescricao\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_prescricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:31.202163Z", "completed_at": "2025-07-01T18:31:31.234241Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:31.255783Z", "completed_at": "2025-07-01T18:31:31.255783Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10208702087402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_prescricao_item", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_prescricao_item\"\n\n\nwhere data_hora_insert >= (select max(data_hora_insert) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_prescricao_item\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_prescricao_item\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:31.329176Z", "completed_at": "2025-07-01T18:31:31.362112Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:31.377918Z", "completed_at": "2025-07-01T18:31:31.377918Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08440089225769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_profissional_repasses", "compiled": true, "compiled_code": "\n\nSELECT\n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_profissional_repasses\"\n\n\nWHERE (data_atualizacao IS NOT NULL AND data_atualizacao >= (SELECT MAX(data_atualizacao) - INTERVAL '10' MINUTE FROM \"delta\".\"bronze\".\"raw_cnx_profissional_repasses\"))\nOR (data_atualizacao IS NULL AND data_vinculacao >= (SELECT MAX(data_vinculacao) - INTERVAL '10' MINUTE FROM \"delta\".\"bronze\".\"raw_cnx_profissional_repasses\"))\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_profissional_repasses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:31.472676Z", "completed_at": "2025-07-01T18:31:31.609048Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:31.640792Z", "completed_at": "2025-07-01T18:31:31.640792Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21228432655334473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_profissional_tipo_pagamento", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_profissional_tipo_pagamento\"\n\n\nwhere data_criacao >= (select max(data_criacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_profissional_tipo_pagamento\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_profissional_tipo_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:31.779895Z", "completed_at": "2025-07-01T18:31:31.811391Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:31.834973Z", "completed_at": "2025-07-01T18:31:31.834973Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10593748092651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_profissional_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT *\nFROM \"delta\".\"bronze\".\"landing_cnx_profissional_tiss\"\n\n\n\nWHERE data_ultima_alteracao >= (SELECT MAX(data_ultima_alteracao) - INTERVAL '10' MINUTE\nFROM \"delta\".\"bronze\".\"raw_cnx_profissional_tiss\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_profissional_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:31.958374Z", "completed_at": "2025-07-01T18:31:32.007971Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:32.035738Z", "completed_at": "2025-07-01T18:31:32.035738Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1438589096069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_reagendamento_atendimento", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_reagendamento_atendimento\"\n\n\nwhere data_hora_ultima_alteracao >= (select max(data_hora_ultima_alteracao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_reagendamento_atendimento\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_reagendamento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:32.126854Z", "completed_at": "2025-07-01T18:31:32.158387Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:32.172039Z", "completed_at": "2025-07-01T18:31:32.172039Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09568405151367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_registro_encaminhamento", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_registro_encaminhamento\"\n\n\nwhere data_hora >= (select max(data_hora) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_registro_encaminhamento\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_registro_encaminhamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:32.252785Z", "completed_at": "2025-07-01T18:31:32.295725Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:32.316871Z", "completed_at": "2025-07-01T18:31:32.316871Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09615087509155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_reserva_consulta", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_reserva_consulta\" \n\n\nwhere (data_hora_ultima_atualizacao is not null and data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_reserva_consulta\"))\nor (data_hora_ultima_atualizacao is null and data_hora_criacao >= (select max(data_hora_criacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_reserva_consulta\"))\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_reserva_consulta\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:32.400256Z", "completed_at": "2025-07-01T18:31:32.432396Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:32.449034Z", "completed_at": "2025-07-01T18:31:32.449034Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08653926849365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_solicitacao_tiss", "compiled": true, "compiled_code": "\n\n\nselect \n    id\n    ,data_inclusao\n    ,data_solicitacao\n    ,usuario_ultima_alteracao\n    ,data_ultima_alteracao\n    ,data_autorizacao\n    ,versao\n    ,prestador\n    ,versao_tiss\n    ,id_consulta_prestador\n    ,id_paciente_prestador\n    ,numero_carteirinha\n    ,id_convenio_prestador\n    ,convenio\n    ,status\n    ,motivo_pendencia\n    ,numero_guia_operadora\n    ,numero_guia_prestador\n    ,quantidade_solicitada\n    ,quantidade_autorizada\n    ,quantidade_utilizada\n    ,codigo_glosa\n    ,mensagem_glosa\n    ,senha_autorizacao\n    ,data_validade_senha\n    ,token_solicitacao\n    ,token_confirmado\nfrom \"delta\".\"bronze\".\"landing_cnx_solicitacao_tiss\"\n\n\nwhere data_ultima_alteracao >= (select max(data_ultima_alteracao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_solicitacao_tiss\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_solicitacao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:32.548381Z", "completed_at": "2025-07-01T18:31:32.580832Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:32.600411Z", "completed_at": "2025-07-01T18:31:32.600411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10016059875488281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_tb_global_clinical_impression_cycle", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_tb_global_clinical_impression_cycle\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_tb_global_clinical_impression_cycle\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_tb_global_clinical_impression_cycle\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:32.688578Z", "completed_at": "2025-07-01T18:31:32.719465Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:32.736919Z", "completed_at": "2025-07-01T18:31:32.736919Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09542083740234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_tb_global_clinical_impression_cycle_evaluation", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_tb_global_clinical_impression_cycle_evaluation\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_tb_global_clinical_impression_cycle_evaluation\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_tb_global_clinical_impression_cycle_evaluation\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:32.819621Z", "completed_at": "2025-07-01T18:31:32.849002Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:32.865697Z", "completed_at": "2025-07-01T18:31:32.865697Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08583664894104004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_tb_treatment_reason_session", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_tb_treatment_reason_session\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_tb_treatment_reason_session\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_tb_treatment_reason_session\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:32.959455Z", "completed_at": "2025-07-01T18:31:32.991765Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:33.007928Z", "completed_at": "2025-07-01T18:31:33.007928Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09593486785888672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_treatment", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_treatment\"\n\n\nwhere updated_at >= (select max(updated_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_treatment\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_treatment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:33.111835Z", "completed_at": "2025-07-01T18:31:33.142582Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:33.165996Z", "completed_at": "2025-07-01T18:31:33.165996Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09342479705810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_cnx_usuario", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_cnx_usuario\"\n\n\nwhere data_hora_ultima_atualizacao >= (select max(data_hora_ultima_atualizacao) - interval '10' minute from \"delta\".\"bronze\".\"raw_cnx_usuario\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_cnx_usuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:33.240592Z", "completed_at": "2025-07-01T18:31:33.270446Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:33.304324Z", "completed_at": "2025-07-01T18:31:33.304324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09715771675109863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_ga_events", "compiled": true, "compiled_code": "\n\nselect\n    *,\n    now() as execution_time\nfrom \"delta\".\"bronze\".\"landing_ga_events\"\n\n\n\nwhere\n    event_timestamp > (select max(event_timestamp) from \"delta\".\"bronze\".\"raw_ga_events\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_ga_events\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:33.382266Z", "completed_at": "2025-07-01T18:31:33.422195Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:33.444314Z", "completed_at": "2025-07-01T18:31:33.444314Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11055302619934082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_lina_condicao_tuss", "compiled": true, "compiled_code": "\n\n\nSELECT\n    *\n    , CURRENT_TIMESTAMP(3) AS emitted_at\nFROM \"delta\".\"bronze\".\"landing_lina_condicao_tuss\"\n\n\nWHERE updated_at >= (SELECT MAX(updated_at) - INTERVAL '10' MINUTE FROM \"delta\".\"bronze\".\"raw_lina_condicao_tuss\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_lina_condicao_tuss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:33.543324Z", "completed_at": "2025-07-01T18:31:33.584227Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:33.601950Z", "completed_at": "2025-07-01T18:31:33.601950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11049413681030273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_mongo_csat_responses", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"landing_mongo_csat_responses\"\n\n\nwhere createdat >= (select max(createdat) - interval '10' minute from \"delta\".\"bronze\".\"raw_mongo_csat_responses\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_mongo_csat_responses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:33.698312Z", "completed_at": "2025-07-01T18:31:33.740094Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:33.770163Z", "completed_at": "2025-07-01T18:31:33.770163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11584091186523438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_mongo_filaatendimentolog", "compiled": true, "compiled_code": "\n\n\nselect \n\t_id, \n\tdataagendamento, \n\tcast(null as timestamp(3) with time zone) as databackoffice, \n\tdatacancelamento, \n\tdatacriacaoatendimento,\n\tdataentrada, \n\tdataultimavezonline, \n\tflagaguardandoativacao,\n\tflagretornonoshow,\n\tidatendimento, \n\tidclinica, \n\tidespecialidade, \n\tidfila, \n\tidpaciente, \n\tidpacienteconvenio, \n\tidprofissional, \n\tcast(null as int) as idusuariobackoffice, \n\tidusuariocancelamento, \n\tidusuarioinclusao, \n\tidade, \n\tmedicamentos, \n\tnomeclinica, \n\tnomeespecialidade, \n\tnomepaciente, \n\tcast(null as varchar) as nomeusuariobackoffice, \n\tnomeusuarioinclusao, \n\tsintomas, \n\tsintomasevidentes, \n\ttelefone, \n\ttempoestimadoinicial, \n\ttipoprofissional\nfrom \"delta\".\"bronze\".\"landing_mongo_filaatendimentolog\"\n\n\nwhere (datacriacaoatendimento is not null and datacriacaoatendimento >= (select max(datacriacaoatendimento) - interval '10' minute from \"delta\".\"bronze\".\"raw_mongo_filaatendimentolog\"))\nor (datacriacaoatendimento is null and dataentrada >= (select max(dataentrada) - interval '10' minute from \"delta\".\"bronze\".\"raw_mongo_filaatendimentolog\"))\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_mongo_filaatendimentolog\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:33.880449Z", "completed_at": "2025-07-01T18:31:33.912724Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:33.923755Z", "completed_at": "2025-07-01T18:31:33.923755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10087037086486816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_mongo_log_acao_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT *\n    , CURRENT_TIMESTAMP(3) AS emitted_at\nFROM \"delta\".\"bronze\".\"landing_mongo_log_acao_tiss\"\n\n\n\nWHERE data_criacao >= (SELECT MAX(data_criacao) - INTERVAL '10' MINUTE\nFROM \"delta\".\"bronze\".\"raw_mongo_log_acao_tiss\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_mongo_log_acao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.011943Z", "completed_at": "2025-07-01T18:31:34.043494Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.060839Z", "completed_at": "2025-07-01T18:31:34.060839Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09383583068847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_mongo_log_enterprise_caller", "compiled": true, "compiled_code": "\n\nselect \n\t*\nfrom \"delta\".\"bronze\".\"landing_mongo_log_enterprise_caller\"\n\n\n\nwhere called_at >= (select max(called_at) - interval '10' minute from \"delta\".\"bronze\".\"raw_mongo_log_enterprise_caller\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_mongo_log_enterprise_caller\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.150964Z", "completed_at": "2025-07-01T18:31:34.178783Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.198494Z", "completed_at": "2025-07-01T18:31:34.198494Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1001596450805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_mongo_log_medical_record_ia_usage", "compiled": true, "compiled_code": "\n\n\nselect \n\t_id\n\t,appointmentid\n\t,professionalid\n\t,createdat\n\t,action\nfrom \"delta\".\"bronze\".\"landing_mongo_log_medical_record_ia_usage\"\n\n\nwhere createdat >= (select max(createdat) - interval '10' minute from \"delta\".\"bronze\".\"raw_mongo_log_medical_record_ia_usage\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_mongo_log_medical_record_ia_usage\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.280561Z", "completed_at": "2025-07-01T18:31:34.319696Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.339504Z", "completed_at": "2025-07-01T18:31:34.339504Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11115765571594238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_mongo_ms_auditoria", "compiled": true, "compiled_code": "\n\n\nselect \n\t_id\n\t,autorizador_id\n\t,clinica\n\t,convenio\n\t,data\n\t,evento\n\t,paciente\n\t,usuario\n\t,sistema\n\t,requisicoes\n    ,respostas\n    ,versao\n\t,erro\n\t,current_timestamp(3) as emitted_at\nfrom \"delta\".\"bronze\".\"landing_mongo_ms_auditoria\"\n\n\nwhere \"data\" >= (select max(\"data\") - interval '10' minute from \"delta\".\"bronze\".\"raw_mongo_ms_auditoria\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_mongo_ms_auditoria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.417123Z", "completed_at": "2025-07-01T18:31:34.443173Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.466684Z", "completed_at": "2025-07-01T18:31:34.466684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08329439163208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_mongo_transcription_feedback", "compiled": true, "compiled_code": "\n\n\nselect \n    idatendimento\n    ,threadid\n    ,feedbacksofyaprocessorsentbody\n    ,createdat\nfrom \"delta\".\"bronze\".\"landing_mongo_transcription_feedback\"\n\n\nwhere createdat >= (select max(createdat) - interval '10' minute from \"delta\".\"bronze\".\"raw_mongo_transcription_feedback\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_mongo_transcription_feedback\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.538920Z", "completed_at": "2025-07-01T18:31:34.564253Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.583263Z", "completed_at": "2025-07-01T18:31:34.583263Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0832064151763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.raw_mongo_transcription_processado", "compiled": true, "compiled_code": "\n\n\nselect \n\tidatendimento\n\t,threadid\n    ,createdat\n    ,textprocessorresult\nfrom \"delta\".\"bronze\".\"landing_mongo_transcription_processado\"\n\n\nwhere createdat >= (select max(createdat) - interval '10' minute from \"delta\".\"bronze\".\"raw_mongo_transcription_processado\")\n\n", "relation_name": "\"delta\".\"bronze\".\"raw_mongo_transcription_processado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.652809Z", "completed_at": "2025-07-01T18:31:34.659127Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.676218Z", "completed_at": "2025-07-01T18:31:34.676218Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.057482242584228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.pvv_snp_escore", "compiled": true, "compiled_code": "\n\n\n\nselect \n\t*\nfrom \"delta\".\"silver\".\"pvv_view_escore_profissional\" as p\n", "relation_name": "\"delta\".\"silver\".\"pvv_snp_escore\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.742294Z", "completed_at": "2025-07-01T18:31:34.748821Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.759163Z", "completed_at": "2025-07-01T18:31:34.759163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05753302574157715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.pvv_snp_iqe", "compiled": true, "compiled_code": "\n\n\n\nselect \n\t*\nfrom \"delta\".\"silver\".\"pvv_view_iqe_profissional\" as p\n", "relation_name": "\"delta\".\"silver\".\"pvv_snp_iqe\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.837996Z", "completed_at": "2025-07-01T18:31:34.859558Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.877735Z", "completed_at": "2025-07-01T18:31:34.877735Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0750112533569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_availabilities", "compiled": true, "compiled_code": "\n\nSELECT \n    id as id_disponibilidade,\n    availability_settings_id as id_configuracao_disponibilidade,\n    type as tipo_disponibilidade,\n    start_date as data_inicio,\n    end_date as data_fim,\n    created_at as data_criacao,\n    updated_at as data_atualizacao,\n    deleted_at as data_exclusao,\n    cast(is_deleted as boolean) as flag_excluido\nFROM \"delta\".\"bronze\".\"raw_cnx_availabilities\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_availabilities\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:34.949466Z", "completed_at": "2025-07-01T18:31:34.980688Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:34.999107Z", "completed_at": "2025-07-01T18:31:34.999107Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08203339576721191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_availability_intervals", "compiled": true, "compiled_code": "\n\nSELECT \n    id as id_intervalo_disponibilidade,\n    availability_id as id_disponibilidade,\n    day_of_week as dia_da_semana,\n    start_time as hora_inicio,\n    end_time as hora_fim,\n    slot_processing_status as status_processamento_slot,\n    created_at as data_criacao,\n    updated_at as data_atualizacao,\n    processing_retry_count as tentativas_processamento,\n    deleted_at as data_exclusao,\n    cast(is_deleted as boolean) as flag_excluido\nFROM \"delta\".\"bronze\".\"raw_cnx_availability_intervals\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_availability_intervals\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:35.074514Z", "completed_at": "2025-07-01T18:31:35.103408Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:35.123522Z", "completed_at": "2025-07-01T18:31:35.123522Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08502650260925293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_availability_settings", "compiled": true, "compiled_code": "\n\nSELECT \n    id as id_configuracao_disponibilidade,\n    professional_id as id_profissional,\n    time_zone as fuso_horario,\n    appointment_duration as duracao_consulta,\n    booking_advance_time as tempo_antecedencia_agendamento,\n    created_at as data_criacao,\n    updated_at as data_atualizacao,\n    deleted_at as data_exclusao,\n    cast(is_deleted as boolean) as flag_excluido\nFROM \"delta\".\"bronze\".\"raw_cnx_availability_settings\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_availability_settings\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:35.207504Z", "completed_at": "2025-07-01T18:31:35.235738Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:35.253875Z", "completed_at": "2025-07-01T18:31:35.253875Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09287548065185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_info_ic_lote_guia", "compiled": true, "compiled_code": "\n\n\nSELECT\n      CAST(id AS BIGINT) AS id_info_ic_lote_guia\n\t, CAST(lote_faturavel_id AS BIGINT) AS id_lote_faturavel\n\t, CAST(status_processo AS INT) AS status_processo\n\t, CAST(status_envio AS INT) AS status_envio\n\t, prestador\n\t, operadora\n\t, resumo\n\t, protocolo_envio\n\t, status_recebimento  -- SALVO_SEM_ERROS/SALVO_COM_ERROS\n\t, CAST(data_criacao AS TIMESTAMP(3) WITH TIME ZONE) AS data_criacao\n\t, DATE(data_criacao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_criacao\n\t, CURRENT_TIMESTAMP(3) AS emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_info_ic_lote_guia\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_info_ic_lote_guia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:35.340756Z", "completed_at": "2025-07-01T18:31:35.356604Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:35.392342Z", "completed_at": "2025-07-01T18:31:35.392342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09273910522460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_schedule_slots", "compiled": true, "compiled_code": "\n\nSELECT \n    id as id_slot,\n    professional_id as id_profissional,\n    availability_interval_id as id_intervalo_disponibilidade,\n    start_datetime as slot,\n    end_datetime as slot_fim,\n    cast(is_available as boolean) as flag_disponivel,\n    cast(is_active as boolean) as flag_ativo,\n    blocker_id as id_bloqueio,\n    blocker_type as tipo_bloqueio,\n    blocker_owner_id as id_proprietario_bloqueio,\n    created_at as data_criacao,\n    updated_at as data_atualizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_schedule_slots\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_schedule_slots\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:35.505310Z", "completed_at": "2025-07-01T18:31:35.532685Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:35.567729Z", "completed_at": "2025-07-01T18:31:35.567729Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12913918495178223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_sankhya_cabecalhos", "compiled": true, "compiled_code": "\n\n\nselect distinct \n \tconcat('sessao-', observacao) as identificador,\n    case\n        when codparc = 1 then cast('24166595000118' as varchar)\n        when cgc_cpf is null then cast('24166595000118'  as varchar)\n        else cgc_cpf\n        end  as cgc_cpf,\n    cast(codtipoper as bigint) as codtipoper,\n    cast(codtipvenda as bigint) as codtipvenda,\n    cast(codnat as bigint) as codnat,\n    cast(CODCENCUS as bigint) as  codcencus,\n    cast(codemp as bigint) as codemp,\n    ad_chid,\n    observacao,\n    cast(0.0 as double)  as vlrdesctot,\n    'erp_vendas_cabecalho_sessoes' as cabecalho\nfrom \"delta\".\"gold\".\"sankhya_cabecalho_vendas_sessoes\" -- erp_vendas_cabecalho_sessoes\nwhere not (ad_chid in(select ad_chid from zenklub.sankhya.tgfcab where ad_chid is not null))\n union\n select distinct \n \tconcat('subs-cli-', ad_chid) as identificador,\n    case\n        when codparc = cast(1  as double) then cast('24166595000118' as varchar)\n        when cgc_cpf is null then cast('24166595000118' as varchar)\n        else cgc_cpf\n        end as cgc_cpf,\n    cast(codtipoper as bigint) as codtipoper,\n    cast(codtipvenda as bigint) as codtipvenda,\n    cast(codnat as bigint) as codnat,\n    cast(codcencus  as bigint) as codcencus,\n    cast(codemp as bigint) as codemp,\n    ad_chid,\n    cast(null as varchar)  as observacao,\n    cast(0.0 as double) as vlrdesctot,\n    'erp_vendas_cabecalho_subs_clientes' as cabecalho\nfrom \"delta\".\"gold\".\"sankhya_cabecalho_vendas_subs_clientes\" -- erp_vendas_cabecalho_subs_clientes\nwhere  not (ad_chid in (select ad_chid from zenklub.sankhya.tgfcab where ad_chid is not null))\n union\nselect distinct \n \tconcat('subs-prof-', ad_chid) as identificador,\n    case\n        when codparc = cast(1 as double) then cast('24166595000118' as varchar)\n        else cgc_cpf\n        end as cgc_cpf,\n    cast(codtipoper as bigint) as codtipoper,\n    cast(codtipvenda as bigint) as codtipvenda,\n    cast(codnat as bigint) as codnat,\n    cast(codcencus  as bigint) as codcencus,\n    cast(codemp as bigint) as codemp,\n    ad_chid,\n    cast(null as varchar) as observacao,\n    cast(0.0 as double) as vlrdesctot,\n    'erp_vendas_cabecalho_subs_profissionais' as cabecalho\nfrom \"delta\".\"gold\".\"sankhya_cabecalho_vendas_subs_profissionais\" -- erp_vendas_cabecalho_subs_profissionais\nwhere  not (ad_chid in (select ad_chid from zenklub.sankhya.tgfcab where ad_chid is not null))\n union\n select distinct \n \tconcat('compra-b2b-', professional_id, '-', cast(date_first_session as varchar), '-', cast(date_last_session as varchar)) as identificador,\n    case\n        when codparc = 1 then cast('24166595000118' as varchar)\n        else cgc_cpf\n        end  as cgc_cpf,\n    cast(codtipoper as bigint) as codtipoper,\n    cast(codtipvenda as bigint) as codtipvenda,\n    cast(codnat as bigint) as codnat,\n    cast(codcencus  as bigint) as codcencus,\n    cast(codemp as bigint) as codemp,\n    cast(null as varchar) as ad_chid,\n    cast(null as varchar) as observacao,\n    cast(0.0 as double) as vlrdesctot,\n    'erp_pagamentos_b2b_cabecalho' as cabecalho\nfrom \"delta\".\"gold\".\"sankhya_cabecalho_compras_b2b\" -- erp_pagamentos_b2b_cabecalho\n union\n select distinct \n    concat('compra-b2c-', professional_id, '-',cast(date_first_session as varchar), '-',cast(date_last_session as varchar)) as identificador,\n    case\n        when codparc = 1 then cast('24166595000118' as varchar)\n        else cgc_cpf\n        end  as cgc_cpf,\n    cast(codtipoper as bigint) as codtipoper,\n    cast(codtipvenda as bigint) as codtipvenda,\n    cast(codnat as bigint) as codnat,\n    cast(codcencus  as bigint) as codcencus,\n    cast(codemp as bigint) as codemp,\n    cast(null as varchar) as ad_chid,\n    cast(null as varchar) as observacao,\n    cast(0.0 as double) as vlrdesctot,\n    'erp_pagamentos_b2c_cabecalho' as cabecalho\nfrom \"delta\".\"gold\".\"sankhya_cabecalho_compras_b2c\" -- erp_pagamentos_b2c_cabecalho\n union\n select distinct \n \tconcat('compra-take-',professional_id, '-',cast(date_first_session as varchar), '-',cast(date_last_session as varchar)) as identificador,\n    case\n        when codparc =  1  then cast('24166595000118' as varchar)\n        else cgc_cpf\n        end as cgc_cpf,\n    cast(codtipoper as bigint) as codtipoper,\n    cast(codtipvenda as bigint) as codtipvenda,\n    cast(codnat as bigint) as codnat,\n    cast(codcencus  as bigint) as codcencus,\n    cast(codemp as bigint) as codemp,\n    cast(null as varchar) as ad_chid,\n    cast(null as varchar) as observacao,\n    cast(0.0 as double) as vlrdesctot,\n    'erp_faturamento_take_cabecalho' as cabecalho\nfrom \"delta\".\"gold\".\"sankhya_cabecalho_compras_take\" -- erp_faturamento_take_cabecalho", "relation_name": "\"delta\".\"gold\".\"az_sankhya_cabecalhos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:35.667670Z", "completed_at": "2025-07-01T18:31:35.713727Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:35.729802Z", "completed_at": "2025-07-01T18:31:35.729802Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10234451293945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_sankhya_cadastros", "compiled": true, "compiled_code": "\n\nselect distinct \n\tconcat('usuario-', id_usuario) as identificador,\n    cgc_cpf as  cgc_cpf,\n    nomeparc,\n    razaosocial,\n    cpl_cepentrega as cep,\n    cpl_numentrega as numend,\n    case\n        when estrangeiro = false  then cidade\n        else null\n    end as cidade,\n    case\n        when estrangeiro = false then coalesce(estado, 'SP')\n        else null\n    end as uf,\n    case\n        when estrangeiro = false then 'BR'\n        else null\n    end as pais,\n    identinscestad as identincestad,\n    email,\n    tippessoa as tipo_pessoa,\n    address,\n    substring(complemento, 1, 30) as complemento,\n    cast(null as varchar) as codbco,\n    cast(null as varchar) as codctabco,\n    cast(null as int) as  ad_tipo_chave_pix,\n    cast(null as varchar) as ad_chave_pix,\n    cast(null as varchar) as idprof,\n    current_timestamp(3) as emitted_at \nfrom \"delta\".\"gold\".\"sankhya_erp_clientes_sessions\"\nwhere cgc_cpf is not null\n  and cgc_cpf <> '24166595000118'\nunion\nselect distinct\n\tconcat('usuario-', id_usuario) as identificador,\n    cgc_cpf as  cgc_cpf,\n    nomeparc,\n    razaosocial,\n    cpl_cepentrega as cep,\n    cpl_numentrega as numend,\n    case\n        when estrangeiro = false  then cidade\n        else null\n    end as cidade,\n    case\n        when estrangeiro = false then coalesce(estado, 'SP')\n        else null\n    end as uf,\n    case\n        when estrangeiro = false then 'BR'\n        else null\n    end as pais,\n    identinscestad as identincestad,\n    email,\n    tippessoa as tipo_pessoa,\n    address,\n    substring(complemento, 1, 30) as complemento,\n    cast(null as varchar) as codbco,\n    cast(null as varchar) as codctabco,\n    cast(null as int) as  ad_tipo_chave_pix,\n    cast(null as varchar) as ad_chave_pix,\n    cast(null as varchar) as idprof,\n    current_timestamp(3) as emitted_at\nfrom \"delta\".\"gold\".\"sankhya_erp_clientes_subscriptions\"\nwhere cgc_cpf is not null\n  and cgc_cpf <> '24166595000118'\nunion\nselect distinct\n\tconcat('profissional-', id_usuario) as identificador,\n    cgc_cpf as cgc_cpf,\n    nomeparc,\n    razaosocial,\n    cpl_cepentrega as cep,\n    cast(null as varchar)  as numend, -- cpl_numentrega as numend,\n    cidade,\n    estado   as  uf,\n    'BR' as pais,\n    identinscestad as identincestad,\n    email,\n    tippessoa as tipo_pessoa,\n    complemento as address,\n    substring(complemento, 1, 30) as complemento,\n    codbco,\n    codctabco,\n    ad_tipo_chave_pix,\n    ad_chave_pix,\n    id_usuario as idprof,\n    current_timestamp(3) as emitted_at \nFROM \"delta\".\"gold\".\"sankhya_erp_profissionais\"", "relation_name": "\"delta\".\"gold\".\"az_sankhya_cadastros\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:35.826541Z", "completed_at": "2025-07-01T18:31:35.857269Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:35.878047Z", "completed_at": "2025-07-01T18:31:35.878047Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09641671180725098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_sankhya_itens", "compiled": true, "compiled_code": "\n\nselect distinct \n    concat('sessao-',  id_sessao) as identificador,\n    1 as seqitem,\n    codprod,\n    qtdneg,\n    vlrunit\nfrom \"delta\".\"gold\".\"sankhya_itens_vendas_sessoes\"\nwhere  not (ad_chid in(select ad_chid from zenklub.sankhya.tgfcab where ad_chid is not null))\n union\nselect distinct \n\tconcat('subs-cli-',  ad_chid) as identificador,\n    1 as seqitem,\n    codprod,\n    qtdneg,\n    vlrunit\nfrom \"delta\".\"gold\".\"sankhya_itens_vendas_subs_clientes\"\nwhere  not (ad_chid in(select ad_chid from zenklub.sankhya.tgfcab where ad_chid is not null))\n union\nselect distinct \n\tconcat('subs-prof-',  ad_chid) as identificador,\n    1 as seqitem,\n    codprod,\n    qtdneg,\n    vlrunit\nfrom \"delta\".\"gold\".\"sankhya_itens_vendas_subs_profissionais\"\nwhere  not (ad_chid in(select ad_chid from zenklub.sankhya.tgfcab where ad_chid is not null))\n union\nselect distinct \n\tconcat('compra-b2b-',  professional_id, '-',cast(date_first_session as varchar), '-',cast(date_last_session as varchar)) as identificador,\n    1  as seqitem,\n    codprod,\n    cast(qtdneg as int) as qtdneg ,\n    vlrunit\nfrom \"delta\".\"gold\".\"sankhya_itens_compras_b2b\"\n union\nselect distinct \n\tconcat('compra-b2c-',  professional_id, '-',cast(date_first_session as varchar), '-',cast(date_last_session as varchar)) as identificador,\n    1 as seqitem,\n    codprod,\n    cast(qtdneg as int) as qtdneg,\n    vlrunit\nfrom \"delta\".\"gold\".\"sankhya_itens_compras_b2c\"\n union\nselect distinct\n\tconcat('compra-take-',  professional_id, '-',cast(date_first_session as varchar), '-',cast(date_last_session as varchar)) as identificador,\n    1 as seqitem,\n    cast(codprod as int) as codprod,\n    cast(qtdneg as int) as qtdneg,\n     vlrunit\nfrom \"delta\".\"gold\".\"sankhya_itens_compras_take\"", "relation_name": "\"delta\".\"gold\".\"az_sankhya_itens\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:35.969754Z", "completed_at": "2025-07-01T18:31:35.984382Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:36.018344Z", "completed_at": "2025-07-01T18:31:36.018344Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09621930122375488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.aml_fact_atendimento", "compiled": true, "compiled_code": "\n\nSELECT\n    data_atendimento_fila,\n    data_atendimento, -- in\u00edcio\n    data_atendimento_fim,\n    id_atendimento,\n    id_referencia,\n    unidade_atendimento,\n    tipo_profissional,\n    produto,\n    nome_profissional,\n    cpf_profissional,\n    tipo_conselho,\n    regiao_conselho,\n    numero_conselho,\n    conselho_profissional,\n    especialidade,\n    id_paciente,\n    nome_paciente,\n    idade_paciente,\n    operadora_paciente,\n    status_autorizacao,\n    senha_autorizacao,\n    mensagem_autorizacao,\n    status_confirmacao,\n    status_atendimento,\n    status_amil,\n    encaminhamento_especialidade,\n    desfecho,\n    usuario_retroativo\nFROM\n    \"delta\".\"bronze\".\"stg_amil_atendimento\"\nWHERE rnk_inverso = 1", "relation_name": "\"delta\".\"silver\".\"aml_fact_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:36.100040Z", "completed_at": "2025-07-01T18:31:36.122154Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:36.145903Z", "completed_at": "2025-07-01T18:31:36.145903Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08609175682067871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.aml_dim_profissional", "compiled": true, "compiled_code": "\n\nselect \n\tnome_profissional,\n\tnome_profissional_amil,\n\tcpf_profissional,\n\tid_profissional,\n\ttipo_conselho,\n\tnumero_conselho,\n\tnumero_conselho_amil\nfrom \"delta\".\"bronze\".\"stg_amil_profissional\"", "relation_name": "\"delta\".\"silver\".\"aml_dim_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:36.229194Z", "completed_at": "2025-07-01T18:31:36.247330Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:36.263023Z", "completed_at": "2025-07-01T18:31:36.263023Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07772612571716309, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.aml_dim_profissional_novo_modelo_pagamento", "compiled": true, "compiled_code": "\n\nselect\n    nome_profissional,\n    cpf_profissional,\n    data_entrada\nfrom \"delta\".\"bronze\".\"stg_amil_profissional_novo_modelo_pagamento\"", "relation_name": "\"delta\".\"silver\".\"aml_dim_profissional_novo_modelo_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:36.358384Z", "completed_at": "2025-07-01T18:31:36.390706Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:36.415080Z", "completed_at": "2025-07-01T18:31:36.415080Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0978853702545166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_assinatura_profissional", "compiled": true, "compiled_code": "\n\nSELECT\n     id_assinatura\n   , id_profissional_plataforma\n   , id_profissional_prestador\n   , id_plano\n   , recorrencia_plano\n   , valor_plano\n   , status\n   , data_hora_assinatura\n   , data_brt_hora_assinatura\n   , data_vigencia\n   , id_transacao\n   , data_hora_cancelamento\n   , data_brt_hora_cancelamento\n   , forma_pagamento\n   , id_assinatura_plataforma\n   , data_hora_reativacao\n   , data_brt_hora_reativacao\n   , emitted_at\nFROM  \"delta\".\"bronze\".\"stg_cnx_assinatura_profissional\"", "relation_name": "\"delta\".\"silver\".\"cnx_dim_assinatura_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:36.500294Z", "completed_at": "2025-07-01T18:31:36.517202Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:36.549183Z", "completed_at": "2025-07-01T18:31:36.549183Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09435534477233887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_atendimento_autorizacao", "compiled": true, "compiled_code": "\n\nSELECT\n    *\nFROM \"delta\".\"bronze\".\"stg_cnx_atendimento_autorizacao\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_atendimento_autorizacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:36.645053Z", "completed_at": "2025-07-01T18:31:36.676534Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:36.692326Z", "completed_at": "2025-07-01T18:31:36.692326Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09190106391906738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_aux_clinica", "compiled": true, "compiled_code": "\n\nSELECT\n    id_clinica,\n    nome_clinica,\n    nome_cliente,\n    unidade_negocio,\n    produto_origem,\n    produto_tratado,\n    tipo_ambiente,\n    updated_at\nFROM \"delta\".\"bronze\".\"stg_cnx_aux_clinica\"", "relation_name": "\"delta\".\"silver\".\"cnx_dim_aux_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:36.781991Z", "completed_at": "2025-07-01T18:31:36.811790Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:36.842750Z", "completed_at": "2025-07-01T18:31:36.842750Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10364317893981934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_ciap2", "compiled": true, "compiled_code": "\n\nSELECT\n    a.id_atendimento,\n    array_agg(c.descricao_ciap2 order by c.id_ciap2) as lista_descricao_ciap2,\n    array_agg(c.codigo_ciap2 order by c.id_ciap2) as lista_codigo_ciap2\nFROM \"delta\".\"bronze\".\"stg_cnx_atendimento_ciap2\" a\nINNER JOIN \"delta\".\"bronze\".\"stg_cnx_ciap2\" c on c.id_ciap2 = a.id_ciap2\nGROUP BY 1", "relation_name": "\"delta\".\"silver\".\"cnx_dim_ciap2\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:36.939874Z", "completed_at": "2025-07-01T18:31:36.953047Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:36.988848Z", "completed_at": "2025-07-01T18:31:36.988848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09900307655334473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_clinica_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT\n     id_clinica_tiss\n   , data_inclusao\n   , data_brt_inclusao\n   , data_ultima_alteracao\n   , data_brt_ultima_alteracao\n   , usuario_ultima_alteracao\n   , versao\n   , id_cliente_tiss\n   , nome\n   , flag_ativo\n   , sistema\n   , id_clinica_prestador_tiss\n   , emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_clinica_tiss\"", "relation_name": "\"delta\".\"silver\".\"cnx_dim_clinica_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:37.067791Z", "completed_at": "2025-07-01T18:31:37.106502Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:37.128179Z", "completed_at": "2025-07-01T18:31:37.128179Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09520769119262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_encaminhamento_servico", "compiled": true, "compiled_code": "\n\n\nSELECT\n\t  es.id_encaminhamento_servico\n\t, es.id_clinica\n\t, es.id_paciente\n\t, es.data_hora_criacao\n\t, es.data_brt_criacao\n\t, es.id_especialidade\n    , epc.nome_especialidade\n\t, es.id_council_type\n\t, es.data_emissao\n\t, es.data_validade\n\t, es.nome_profissional\n\t, es.numero_conselho\n\t, es.uf_conselho\n\t, es.codigo_cid\n\t, es.quantidade_consultas\n\t, es.status\n\t, es.id_usuario_alteracao_status\n\t, es.id_atendimento_tiss\n\t, es.data_hora_envio\n\t, es.data_brt_envio\n\t, es.data_hora_resultado\n\t, es.data_brt_resultado\n\t, es.emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_encaminhamento_servico\" AS es\n\nJOIN \"delta\".\"bronze\".\"stg_cnx_especialidade\" epc\n    ON epc.id_especialidade = es.id_especialidade", "relation_name": "\"delta\".\"silver\".\"cnx_fact_encaminhamento_servico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:37.208325Z", "completed_at": "2025-07-01T18:31:37.236083Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:37.259297Z", "completed_at": "2025-07-01T18:31:37.259297Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09895730018615723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_appointment_threshold_exception", "compiled": true, "compiled_code": "\n\nwith limite_pac as (\nselect\n\tex.idappointment_threshold_exception as id_limite_atendimento_excecao,\n\tex.idappointment_threshold_product as id_limite_atendimento_produto,\n\tcast(ex.idpatient as bigint) as id_paciente,\n\tex.exception_quantity as quantidade_excecao,\n\tcast(ex.insert_date_time as timestamp(3) with time zone) as data_hora_insert,\n\tcast(ex.last_update_date_time as timestamp(3) with time zone) as data_hora_ultima_atualizacao,\n\tex.idclinic as id_clinica,\n\tp.council_type as tipo_conselho,\n\tp.appointment_mode as modo_atendimento,\n\te.nome_especialidade\nFROM mysql_cnx.\"connectdoctor-prod\".appointment_threshold_exception as ex\nleft join mysql_cnx.\"connectdoctor-prod\".appointment_threshold_product as p on ex.idappointment_threshold_product = p.idappointment_threshold_product\nleft join \"delta\".\"bronze\".\"stg_cnx_especialidade\" as e on p.idspecialty = e.id_especialidade\n)\nSELECT\n\tid_clinica,\n\tARRAY_AGG(\n\t\tCAST(\n\t\t\tROW(\n\t\t\t\t\tid_paciente,\n\t\t\t\t\tquantidade_excecao,\n\t\t\t\t\ttipo_conselho,\n\t\t\t\t\tnome_especialidade,\n\t\t\t\t\tmodo_atendimento,\n\t\t\t\t\tid_limite_atendimento_produto,\n\t\t\t\t\tid_limite_atendimento_excecao\n\t            ) AS ROW(\n\t                id_paciente VARCHAR,\n\t                quantidade_excecao VARCHAR,\n\t\t\t\t\ttipo_conselho VARCHAR,\n\t\t\t\t\tnome_especialidade VARCHAR,\n\t\t\t\t\tmodo_atendimento VARCHAR,\n\t                id_limite_atendimento_produto VARCHAR,\n\t\t\t\t\tid_limite_atendimento_excecao VARCHAR\n\t            )\n\t        )\n\t    ) AS informacoes_limites_atendimentos_excecao_novo\nfrom limite_pac\ngroup by 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_appointment_threshold_exception\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:37.337107Z", "completed_at": "2025-07-01T18:31:37.366322Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:37.381817Z", "completed_at": "2025-07-01T18:31:37.381817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07906031608581543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_appointment_threshold_product", "compiled": true, "compiled_code": "\n\nwith limite as (\nSELECT\n\tp.idappointment_threshold_product as id_limite_atendimento_produto,\n\tp.idclinic as id_clinica,\n\tp.periodicity as periodicidade_limite_atendimento,\n\tp.council_type as tipo_conselho,\n\tp.appointment_mode as modo_atendimento,\n\tp.idspecialty as id_especialidade,\n\te.nome_especialidade,\n\tp.limitation_type as tipo_limitacao,\n\tp.quantity as quantidade_limite_atendimento,\n\tp.appointment_threshold_type as tipo_limite_atendimento\nFROM mysql_cnx.\"connectdoctor-prod\".appointment_threshold_product as p \nleft join \"delta\".\"bronze\".\"stg_cnx_especialidade\" as e on p.idspecialty = e.id_especialidade\n)\nselect \n\tid_clinica,\n\tARRAY_AGG(\n\t\tCAST(\n\t\t\tROW(\n\t                periodicidade_limite_atendimento,\n\t                nome_especialidade,\n\t                quantidade_limite_atendimento,\n\t\t\t\t\ttipo_conselho,\n\t\t\t\t\ttipo_limitacao,\n\t                tipo_limite_atendimento,\n\t\t\t\t\tid_limite_atendimento_produto\n\t            ) AS ROW(\n\t                periodicidade_limite_atendimento VARCHAR,\n\t                nome_especialidade VARCHAR,\n\t                quantidade_limite_atendimento VARCHAR,\n\t\t\t\t\ttipo_conselho VARCHAR,\n\t\t\t\t\ttipo_limitacao VARCHAR,\n\t                tipo_limite_atendimento VARCHAR,\n\t\t\t\t\tid_limite_atendimento_produto VARCHAR\n\t            )\n\t        )\n\t    ) FILTER (WHERE modo_atendimento = 'AGENDADO') AS informacoes_limites_atendimentos_produto_agendados_novo,\n\tARRAY_AGG(\n\t\tCAST(\n\t\t\tROW(\n\t                periodicidade_limite_atendimento,\n\t                nome_especialidade,\n\t                quantidade_limite_atendimento,\n\t\t\t\t\ttipo_conselho,\n\t\t\t\t\ttipo_limitacao,\n\t                tipo_limite_atendimento,\n\t\t\t\t\tid_limite_atendimento_produto\n\t            ) AS ROW(\n\t                periodicidade_limite_atendimento VARCHAR,\n\t                nome_especialidade VARCHAR,\n\t                quantidade_limite_atendimento VARCHAR,\n\t\t\t\t\ttipo_conselho VARCHAR,\n\t\t\t\t\ttipo_limitacao VARCHAR,\n\t                tipo_limite_atendimento VARCHAR,\n\t\t\t\t\tid_limite_atendimento_produto VARCHAR\n\t            )\n\t        )\n\t    ) FILTER (WHERE modo_atendimento = 'IMEDIATO') AS informacoes_limites_atendimentos_produto_imediatos_novo\nfrom limite \ngroup by 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_appointment_threshold_product\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:37.447008Z", "completed_at": "2025-07-01T18:31:37.475284Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:37.501518Z", "completed_at": "2025-07-01T18:31:37.501518Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08424139022827148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_listagem_cid10", "compiled": true, "compiled_code": "\n\n\nSELECT\n\tid_doenca\n\t,codigo_cid10\n\t,descricao_cid10\n\t,idioma\n\t,edicao\n\t,flag_ativo\n\t,id_grupo\n\t,capitulo_cid\n\t,titulo_cid AS grupo_cid\nFROM \"delta\".\"bronze\".\"stg_cnx_doenca_cid10\" t1\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_grupo_cid10\" t2\nUSING(id_grupo)", "relation_name": "\"delta\".\"gold\".\"stg_listagem_cid10\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:37.570003Z", "completed_at": "2025-07-01T18:31:37.602973Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:37.624365Z", "completed_at": "2025-07-01T18:31:37.624365Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08238673210144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_item_lote_guia", "compiled": true, "compiled_code": "\n\n\nSELECT\n      id_item_lote_guia\n\t, id_lote_faturavel\n\t, id_atendimento\n\t, id_guia_taxa\n\t, atendimento_indicacao_acidente\n\t, atendimento_tipo\n\t, autorizacao_data\n\t, autorizacao_data_validade\n\t, autorizacao_numero_guia_operadora\n\t, autorizacao_senha\n\t, beneficiario_atendimento_rn\n\t, beneficiario_nome\n\t, beneficiario_numero_carteira\n\t, data_hora_registro_transacao\n\t, destino_registro_ans\n\t, equipe_cbos\n\t, equipe_codigo_prestador_na_operadora\n\t, equipe_conselho_profissional\n\t, equipe_cpf_contratado\n\t, equipe_grau_part\n\t, equipe_nome_profissional\n\t, equipe_numero_conselho_profissional\n\t, equipe_uf\n\t, executante_cnes\n\t, executante_cnpj_contratado\n\t, executante_codigo_prestador_na_operadora\n\t, executante_conselho_profissional\n\t, executante_cpf_contratado\n\t, executante_nome_contratado\n\t, executante_nome_profissional\n\t, executante_numero_conselho_profissional\n\t, executante_profissional_cbos\n\t, executante_profissional_uf\n\t, guia_identificador\n\t, guia_numero_operadora\n\t, guia_numero_prestador\n\t, guia_principal\n\t, guia_registro_ans\n\t, identificador_receita\n\t, item_codigo_procedimento\n\t, item_codigo_tabela\n\t, item_descricao_procedimento\n\t, data_hora_item_execucao_inicial\n\t, data_hora_item_execucao_final\n\t, item_quantidade_executada\n\t, item_reducao_acrescimo\n\t, item_sequencial_item\n\t, item_valor_total\n\t, item_valor_unitario\n\t, login_prestador\n\t, numero_lote\n\t, origem_cnpj\n\t, origem_codigo_prestador_na_operadora\n\t, origem_registro_ans\n\t, padrao_tiss\n\t, senha_prestador\n\t, sequencial_transacao\n\t, solicitacao_carater_atendimento\n\t, solicitacao_data\n\t, solicitacao_indicacao_clinica\n\t, solicitante_cnpj\n\t, solicitante_cpf\n\t, solicitante_codigo_prestador_na_operadora\n\t, solicitante_conselho_profissional\n\t, solicitante_nome_contratado\n\t, solicitante_nome_profissional\n\t, solicitante_numero_conselho_profissional\n\t, solicitante_profissional_cbos\n\t, solicitante_profissional_uf\n\t, tipo_transacao\n\t, valor_procedimentos\n\t, valor_total_geral\n\t, tipo_identidade\n\t, regime_atendimento\n\t, atendimento_saude_ocupacional\n\t, solicitacao_ind_cob_especial\n\t, nome_contratado_solicitante\n\t, codigo_glosa\n\t, descricao_glosa\n\t, numero_protocolo\n\t, numero_documento\n\t, protocolo_documento\n\t, natureza_guia\n\t, formato_documento\n\t, documento\n\t, tipo_documento\n\t, autorizacao_ausencia_cod_validacao\n\t, autorizacao_cod_validacao\n\t, atendimento_cobertura_especial\n\t, atendimento_regime_atendimento\n\t, consulta_atendimento_saude_ocupacional\n\t, atendimento_data_atendimento\n\t, atendimento_tipo_consulta\n\t, atendimento_valor_procedimento\n\t, assinatura_digital_guia\n\t, dados_atendimento_tipo_consulta\n\t, status_faturamento_guia\n\t, desfecho_atendimento\n\t, observacoes_procedimento\n\t, item_codigo_despesa\n\t, emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_item_lote_guia\"", "relation_name": "\"delta\".\"silver\".\"cnx_dim_item_lote_guia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:37.701952Z", "completed_at": "2025-07-01T18:31:37.729007Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:37.747591Z", "completed_at": "2025-07-01T18:31:37.747591Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07766151428222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_limite_atendimento", "compiled": true, "compiled_code": "\n\n\nselect\n    id_clinica,\n    periodicidade_limite_atendimento,\n    tipo_limite_atendimento,\n    quantidade_limite_atendimento,\n    null as tipo_limitacao,\n    null as tipo_conselho,\n    null as id_especialidade,\n    null as nome_especialidade,\n    null as modo_atendimento\nfrom \"delta\".\"bronze\".\"stg_cnx_limite_atendimento\"\n\nunion all\n\nselect\n    p.id_clinica,\n    p.periodicidade_limite_atendimento,\n    p.tipo_limite_atendimento,\n    p.quantidade_limite_atendimento,\n    p.tipo_limitacao,\n    p.tipo_conselho,\n    p.id_especialidade,\n    es.nome_especialidade,\n    p.modo_atendimento\nfrom \"delta\".\"bronze\".\"stg_cnx_limite_atendimento_produto\" p\nleft join \"delta\".\"bronze\".\"stg_cnx_especialidade\" es on es.id_especialidade = p.id_especialidade", "relation_name": "\"delta\".\"silver\".\"cnx_fact_limite_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:37.818590Z", "completed_at": "2025-07-01T18:31:37.847355Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:37.866985Z", "completed_at": "2025-07-01T18:31:37.866985Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0817720890045166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_lote_faturavel", "compiled": true, "compiled_code": "\n\n\nSELECT\n      id_lote_faturavel\n\t, id_prestador\n\t, id_clinica_prestador\n\t, id_clinica\n\t, id_prestador_cliente\n\t, optimistic_lock\n\t, data_status_processamento\n\t, data_brt_status_processamento\n\t, informacao_tracing\n\t, status_processamento\n\t, numero_lote\n\t, operadora\n\t, versao_tiss\n\t, status_faturamento\n\t, flag_tem_resposta_faturamento_ic\n\t, caminho_arquivo_s3\n\t, clinica_nome\n\t, tipo_guia\n\t, data_competencia\n\t, valor_total\n\t, emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_lote_faturavel\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_lote_faturavel\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:37.947011Z", "completed_at": "2025-07-01T18:31:37.977522Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:38.002296Z", "completed_at": "2025-07-01T18:31:38.002296Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09233784675598145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_paciente_encaminhamento_especialidade", "compiled": true, "compiled_code": "\n\nselect \n    p.id_atendimento, \n    p.data_hora_insert, \n    p.data_brt_hora_insert, \n    p.data_hora, \n    p.data_brt_hora, \n    p.id_especialidade,\n    e.nome_especialidade, \n    e.tipo_conselho as tipo_conselho_especialidade,\n    p.id_paciente, \n    p.id_usuario_responsavel, \n    p.motivo_encaminhamento\nfrom \"delta\".\"bronze\".\"stg_cnx_paciente_encaminhamento_espec\" p\nleft join \"delta\".\"bronze\".\"stg_cnx_especialidade\" e on p.id_especialidade = e.id_especialidade", "relation_name": "\"delta\".\"silver\".\"cnx_fact_paciente_encaminhamento_especialidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:38.086061Z", "completed_at": "2025-07-01T18:31:38.118196Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:38.146498Z", "completed_at": "2025-07-01T18:31:38.146498Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10525083541870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_corpo_clinico_clinica", "compiled": true, "compiled_code": "\n\n\nSELECT\n      CAST(p.id_profissional AS BIGINT) AS id_profissional\n    , CAST(cc.idclinica_destino AS BIGINT) AS id_clinica_profissional\n    , CAST(cc.idclinica_origem AS BIGINT) AS id_clinica_paciente -- cl\u00ednica atendida (paciente) (corpo_clinico)\n    , FALSE AS flag_bloquear_agenda\n    , FALSE AS flag_bloquear_fila\n    , FALSE AS flag_profissional_transbordo\n    , 'clinica_conexao' AS fonte\nFROM mysql_cnx.\"connectdoctor-prod\".clinica_conexao AS cc\n\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_profissional\" AS p\n    ON cc.idclinica_destino = p.id_clinica\n\nWHERE cc.flag_ativo = '1'", "relation_name": "\"delta\".\"bronze\".\"stg_corpo_clinico_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:38.229564Z", "completed_at": "2025-07-01T18:31:38.257789Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:38.279604Z", "completed_at": "2025-07-01T18:31:38.279604Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09370231628417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_corpo_clinico_profissional", "compiled": true, "compiled_code": "\n\n\nSELECT\n     CAST(cpe.idprofissional AS BIGINT) AS id_profissional\n   , p.id_profissional AS id_clinica_profissional\n   , CAST(cpe.idclinica AS BIGINT) AS id_clinica_paciente -- cl\u00ednica atendida (paciente) (corpo_clinico)\n   , IF(cpe.flag_bloquear_agenda = '1', TRUE, FALSE) AS flag_bloquear_agenda\n   , IF(cpe.flag_bloquear_fila = '1', TRUE, FALSE) AS flag_bloquear_fila\n   , IF(cpe.flag_profissional_transbordo = '1', TRUE, FALSE) AS flag_profissional_transbordo\n   , 'clinica_profissional_exclusivo' AS fonte\nFROM mysql_cnx.\"connectdoctor-prod\".clinica_profissional_exclusivo AS cpe\n\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_profissional\" AS p\n    ON cpe.idprofissional = p.id_profissional\n\nWHERE cpe.flag_ativo = '1'", "relation_name": "\"delta\".\"bronze\".\"stg_corpo_clinico_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:38.380379Z", "completed_at": "2025-07-01T18:31:38.413739Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:38.427974Z", "completed_at": "2025-07-01T18:31:38.427974Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09844541549682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_tema_profissional_atende", "compiled": true, "compiled_code": "\n\n\nSELECT\n\t  id_profissional\n\t, id_tema\n\t, valor_tema\n\t, descricao_tema\n    , emitted_at\n\nFROM \"delta\".\"bronze\".\"stg_cnx_tema_profissional_atende\"", "relation_name": "\"delta\".\"silver\".\"cnx_dim_tema_profissional_atende\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:38.523184Z", "completed_at": "2025-07-01T18:31:38.557209Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:38.578706Z", "completed_at": "2025-07-01T18:31:38.578706Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10317754745483398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.did_fact_checks", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"stg_doctorid_checks\"", "relation_name": "\"delta\".\"silver\".\"did_fact_checks\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:38.673816Z", "completed_at": "2025-07-01T18:31:38.703291Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:38.724033Z", "completed_at": "2025-07-01T18:31:38.724033Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10419225692749023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.did_fact_shifts", "compiled": true, "compiled_code": "\n\nSELECT \n    *\nFROM \"delta\".\"bronze\".\"stg_doctorid_shifts\"", "relation_name": "\"delta\".\"silver\".\"did_fact_shifts\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:38.812443Z", "completed_at": "2025-07-01T18:31:38.844277Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:38.865816Z", "completed_at": "2025-07-01T18:31:38.865816Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09777569770812988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.ds_fact_antifraude", "compiled": true, "compiled_code": "\n\nSELECT \n    id_fraude,\n\tdata_processamento,\n\tid_profissional,\n\tlog,\n\tlog_json,\n\ttitulo,\n\tnome_profissional,\n\ttipo_conselho,\n\tnumero_conselho,\n\tregiao_conselho,\n\tplataforma,\n\tquantidade,\n\trecorrencia,\n\tupdated_at\nFROM \"delta\".\"bronze\".\"stg_ds_antifraude\"", "relation_name": "\"delta\".\"silver\".\"ds_fact_antifraude\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:38.957457Z", "completed_at": "2025-07-01T18:31:38.977037Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:38.991660Z", "completed_at": "2025-07-01T18:31:38.991660Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06909942626953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.ds_dim_cluster_psicologos", "compiled": true, "compiled_code": "\n\nSELECT \n    id_profissional,\n    classe,\n    data_referencia,\n    updated_at,\n    ranking\nFROM \"delta\".\"bronze\".\"stg_ds_cluster_psicologos\"", "relation_name": "\"delta\".\"silver\".\"ds_dim_cluster_psicologos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:39.075692Z", "completed_at": "2025-07-01T18:31:39.103987Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:39.121510Z", "completed_at": "2025-07-01T18:31:39.121510Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08365726470947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.ds_cnx_fact_classificacao_cancelamento", "compiled": true, "compiled_code": "\n\n\nselect\n    id_atendimento,\n    classificacao_cancelamento,\n    data_hora_classificacao_cancelamento,\n    modelo_utilizado_llm\nfrom \"delta\".\"bronze\".\"stg_ds_cnx_classificacao_cancelamento\"", "relation_name": "\"delta\".\"silver\".\"ds_cnx_fact_classificacao_cancelamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:39.209329Z", "completed_at": "2025-07-01T18:31:39.245604Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:39.263252Z", "completed_at": "2025-07-01T18:31:39.263252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08828234672546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.ds_fact_dataholter", "compiled": true, "compiled_code": "\n\nSELECT\n\tid_outlier_evento,\n\tid_outlier,\n  plataforma,\n  data_referencia,\n  id_clinica_plano,\n  nome_clinica_plano,\n  metrica,\n  algoritmo,\n  recorrencia,\n  log_json,\n  data_processamento,\n  execution_time\nFROM \"delta\".\"bronze\".\"stg_ds_dataholter\" dh\n\n\n\n  where dh.data_referencia > (select max(tmp_dh.data_referencia) from \"delta\".\"silver\".\"ds_fact_dataholter\" tmp_dh)\n\n", "relation_name": "\"delta\".\"silver\".\"ds_fact_dataholter\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:39.336478Z", "completed_at": "2025-07-01T18:31:39.378854Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:39.399410Z", "completed_at": "2025-07-01T18:31:39.399410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09100103378295898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.ds_fact_predictions_noshow", "compiled": true, "compiled_code": "\n\n\nselect \n\tid_atendimento\n\t,model_type\n\t,reuse_proba\n\t,data_processamento\nfrom \"delta\".\"bronze\".\"stg_ds_predictions_noshow\"", "relation_name": "\"delta\".\"silver\".\"ds_fact_predictions_noshow\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:39.487123Z", "completed_at": "2025-07-01T18:31:39.512526Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:39.530426Z", "completed_at": "2025-07-01T18:31:39.530426Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08182334899902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.ds_dim_analise_sentimento_atendimento", "compiled": true, "compiled_code": "\n\nSELECT \n    id_atendimento,\n\tsentimento_negativo,\n\tsentimento_neutro,\n\tsentimento_positivo,\n\tsentimento_composto,\n    updated_at\nFROM \"delta\".\"bronze\".\"stg_ds_sentiment_analysis_atendimento\"", "relation_name": "\"delta\".\"silver\".\"ds_dim_analise_sentimento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:39.612969Z", "completed_at": "2025-07-01T18:31:39.639835Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:39.658255Z", "completed_at": "2025-07-01T18:31:39.658255Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09034848213195801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.ds_fact_sofya_text_analysis", "compiled": true, "compiled_code": "\n\n\nselect \n\tid_atendimento\n\t,subjetivo_utilization\n\t,subjetivo_originality\n\t,objetivo_utilization\n\t,objetivo_originality\n\t,avaliacao_utilization\n\t,avaliacao_originality\n\t,plano_utilization\n\t,plano_originality\n\t,data_processamento\nfrom \"delta\".\"bronze\".\"stg_ds_sofya_text_analysis\"", "relation_name": "\"delta\".\"silver\".\"ds_fact_sofya_text_analysis\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:39.745286Z", "completed_at": "2025-07-01T18:31:39.760651Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:39.792589Z", "completed_at": "2025-07-01T18:31:39.792589Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08796501159667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.engajamento", "compiled": true, "compiled_code": "\n\nSELECT \n    sk_teste as sk_engajamento,\n    plataforma,\n    tipo,\n    acao,\n    id_paciente,\n    data_base,\n    data_brt_base,\n    ano_base,\n    mes_base,\n    dia_base,\n    detalhe\nFROM \"delta\".\"gold\".\"stg_engajamento\"\n\n\n\n  where data_base > (select coalesce(max(data_base), cast('1900-01-01' as date)) from \"delta\".\"gold\".\"engajamento\")\n\n", "relation_name": "\"delta\".\"gold\".\"engajamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:39.872937Z", "completed_at": "2025-07-01T18:31:39.911496Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:39.931520Z", "completed_at": "2025-07-01T18:31:39.931520Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09353160858154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.hs_dim_companies", "compiled": true, "compiled_code": "\n\nSELECT \n    id_company_hubspot,\n\tnome_company_hubspot,\n\tbu,\n\trazao_social,\n\tcnpj,\n\tstatus_conta,\n\tsetor,\n\tmodalidade,\n\tcodigo_ans,\n\trange_vidas,\n\tid_cs_responsavel,\n\ttotal_funcionarios,\n\tquantidade_vidas_ans,\n\tnome_conta_pai_operadoras,\n\tnome_canal,\n\tcategoria_cliente,\n\tcategoria_operadora,\n\tacesso_conexa_manager\nFROM \"delta\".\"bronze\".\"stg_hs_companies\"", "relation_name": "\"delta\".\"silver\".\"hs_dim_companies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:40.027581Z", "completed_at": "2025-07-01T18:31:40.063536Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:40.090070Z", "completed_at": "2025-07-01T18:31:40.090070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11092472076416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.hs_fact_deals", "compiled": true, "compiled_code": "\n\nSELECT \n    id_deals,\n\tdata_ultima_atualizacao_hubspot,\n\tdata_brt_ultima_atualizacao_hubspot,\n\tpipeline,\n\tmacro_estrategia,\n\ttipo_expansao_aditivo,\n\tetapa_negocio,\n\tcanais_modelo_parceria,\n\tdata_fechamento,\n\tdata_brt_fechamento,\n\tdata_inicio_churn,\n\tdata_brt_inicio_churn,\n\tdata_cs_fim_contrato_atual,\n\tdata_brt_cs_fim_contrato_atual,\n\tdata_cs_inicio_contrato_atual,\n\tdata_brt_cs_inicio_contrato_atual,\n\tdata_criacao,\n\tdata_brt_criacao,\n\tassociated_companies,\n\tassociated_ids_companies,\n\tad.id_to as id_company_hubspot,\n\tc.nome_company_hubspot,\n\td.nome_canal,\n\td.tipo_canal,\n\td.data_insert_engenharia,\n\td.data_brt_insert_engenharia\nFROM \"delta\".\"bronze\".\"stg_hs_deals\" as d\nLEFT JOIN \"delta\".\"bronze\".\"stg_hs_associations_deals\" as ad on d.id_deals = ad.id_from\nLEFT JOIN \"delta\".\"bronze\".\"stg_hs_companies\" as c on ad.id_to = c.id_company_hubspot", "relation_name": "\"delta\".\"silver\".\"hs_fact_deals\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:40.223789Z", "completed_at": "2025-07-01T18:31:40.247353Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:40.263434Z", "completed_at": "2025-07-01T18:31:40.263434Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10262370109558105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.indices_pacientes", "compiled": true, "compiled_code": "\n\nselect \n\tid_paciente,\n\tsk_paciente,\n\tdata_indice,\n\tresultado_ism,\n\tresultado_icm,\n\tresultado_iscm,\n\tdetalhes,\n\tid_empresa,\n\tnome_empresa,\n\tplataforma\nfrom \"delta\".\"gold\".\"stg_indices_pacientes\"", "relation_name": "\"delta\".\"gold\".\"indices_pacientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:40.358153Z", "completed_at": "2025-07-01T18:31:40.378882Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:40.406231Z", "completed_at": "2025-07-01T18:31:40.406231Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09585738182067871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_inter_compromisso_acompanhamento_detalhe", "compiled": true, "compiled_code": "\n\nSELECT\n    id_paciente,\n    nome_paciente,\n    cpf,\n    grupo_economico,\n    equipe_aps,\n    tipo,\n    condicoes_de_saude_do_beneficiario,\n    id_grupo_tuss,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    adicionado_por,\n    id_do_usuario as id_resp_tecnico,\n    nome_do_usuario as resp_tecnico,\n    codigo_do_usuario as cod_resp_tecnico,\n    plataforma,\n    data_compromisso_realizado,\n    data_inclusao,\n    data_ultima_atualizacao,\n    execution_time\nFROM \"delta\".\"bronze\".\"stg_lina_compromisso_acompanhamento_detalhe\"", "relation_name": "\"delta\".\"bronze\".\"lina_inter_compromisso_acompanhamento_detalhe\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:40.496966Z", "completed_at": "2025-07-01T18:31:40.525753Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:40.547348Z", "completed_at": "2025-07-01T18:31:40.547348Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09595227241516113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_inter_compromisso_aderencia_atividade_fisica", "compiled": true, "compiled_code": "\n\nSELECT\n    id_paciente,\n    nome_paciente,\n    cpf,\n    grupo_economico,\n    equipe_aps,\n    condicoes_de_saude_do_beneficiario,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    adicionado_por,\n    id_do_usuario as id_resp_tecnico,\n    nome_do_usuario as resp_tecnico,\n    codigo_do_usuario as cod_resp_tecnico,\n    plataforma,\n    data_compromisso_realizado,\n    data_inclusao,\n    data_ultima_atualizacao,\n    execution_time\nFROM \"delta\".\"bronze\".\"stg_lina_compromisso_aderencia_atividade_fisica\"", "relation_name": "\"delta\".\"bronze\".\"lina_inter_compromisso_aderencia_atividade_fisica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:40.639804Z", "completed_at": "2025-07-01T18:31:40.671626Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:40.703407Z", "completed_at": "2025-07-01T18:31:40.703407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11106133460998535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_inter_compromisso_adesao_nutricao", "compiled": true, "compiled_code": "\n\nSELECT\n    id_paciente,\n    nome_paciente,\n    cpf,\n    grupo_economico,\n    equipe_aps,\n    condicoes_de_saude_do_beneficiario,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    adicionado_por,\n    id_do_usuario as id_resp_tecnico,\n    nome_do_usuario as resp_tecnico,\n    codigo_do_usuario as cod_resp_tecnico,\n    plataforma,\n    data_compromisso_realizado,\n    data_inclusao,\n    data_ultima_atualizacao,\n    execution_time\nFROM \"delta\".\"bronze\".\"stg_lina_compromisso_adesao_nutricao\"", "relation_name": "\"delta\".\"bronze\".\"lina_inter_compromisso_adesao_nutricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:40.806682Z", "completed_at": "2025-07-01T18:31:40.838404Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:40.850025Z", "completed_at": "2025-07-01T18:31:40.850025Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08139157295227051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_inter_compromisso_frequencia_atividade_fisica", "compiled": true, "compiled_code": "\n\nSELECT\n    id_paciente,\n    nome_paciente,\n    cpf,\n    grupo_economico,\n    equipe_aps,\n    condicoes_de_saude_do_beneficiario,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    adicionado_por,\n    id_do_usuario as id_resp_tecnico,\n    nome_do_usuario as resp_tecnico,\n    codigo_do_usuario as cod_resp_tecnico,\n    plataforma,\n    data_compromisso_realizado,\n    data_inclusao,\n    data_ultima_atualizacao,\n    execution_time\nFROM \"delta\".\"bronze\".\"stg_lina_compromisso_frequencia_atividade_fisica\"", "relation_name": "\"delta\".\"bronze\".\"lina_inter_compromisso_frequencia_atividade_fisica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:40.962570Z", "completed_at": "2025-07-01T18:31:40.986864Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:41.006991Z", "completed_at": "2025-07-01T18:31:41.006991Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10004520416259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_inter_compromisso_liberacao_atividade_fisica", "compiled": true, "compiled_code": "\n\nSELECT\n    id_paciente,\n    nome_paciente,\n    cpf,\n    grupo_economico,\n    equipe_aps,\n    condicoes_de_saude_do_beneficiario,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    adicionado_por,\n    id_do_usuario as id_resp_tecnico,\n    nome_do_usuario as resp_tecnico,\n    codigo_do_usuario as cod_resp_tecnico,\n    plataforma,\n    data_compromisso_realizado,\n    data_inclusao,\n    data_ultima_atualizacao,\n    execution_time\nFROM \"delta\".\"bronze\".\"stg_lina_compromisso_liberacao_atividade_fisica\"", "relation_name": "\"delta\".\"bronze\".\"lina_inter_compromisso_liberacao_atividade_fisica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:41.094349Z", "completed_at": "2025-07-01T18:31:41.114133Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:41.147639Z", "completed_at": "2025-07-01T18:31:41.147639Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09501123428344727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_fact_carelines", "compiled": true, "compiled_code": "\n\n\nSELECT \n\tid_linha_de_cuidado,\n\tid_paciente,\n\tnome_paciente,\n\tid_clinica,\n\tgrupo_linhadecuidado,\n\tcareline_category as tipo,\n\tlinha_de_cuidado,\n\tdata_identificacao,\n\ttipo_identificacao,\n\tstatus_validacao,\n\tid_do_usuario,\n\tvalidacao_usuario,\n\tmedico_de_referencia,\n\tplataforma,\n\tdata_validacao,\n\tdata_inativacao,\n\tdata_execucao,\n\tstatus_ativacao,\n\tdata_criacao,\n\tcase\n\t\twhen linha_de_cuidado like 'Gestantes%' then date(data_identificacao + interval '280' day)\n\t\telse null\n\tend as data_prevista_do_parto,\n\tcase\n\t\twhen linha_de_cuidado like 'Gestantes%' and data_identificacao + interval '280' day > now() then date_diff('day', data_identificacao, now()) / 7\n\t\twhen linha_de_cuidado like 'Gestantes%' then 42\n\t\telse null\n\tend as idade_gestacional,\n\tcase\n\t\twhen linha_de_cuidado like 'Gestantes%' and data_identificacao + interval '280' day > now() and  date_diff('day', data_identificacao, now()) / 7 <= 12 then '1 Trimestre'\n\t\twhen linha_de_cuidado like 'Gestantes%' and data_identificacao + interval '280' day > now() and  date_diff('day', data_identificacao, now()) / 7 <= 26 then '2 Trimestre'\n\t\twhen linha_de_cuidado like 'Gestantes%' and date_diff('day', data_identificacao, now()) / 7 > 26 then '3 Trimestre'\n\t\telse null\n\tend as trimestre_gestacional,\n\tuse_date,\n\tmotivo_de_recusa,\n\tacompanhamento_individual,\n\tcreated_at\nFROM \"delta\".\"bronze\".\"stg_lina_getbeneficiariescarelines\"", "relation_name": "\"delta\".\"silver\".\"lina_fact_carelines\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:41.266815Z", "completed_at": "2025-07-01T18:31:41.295488Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:41.315469Z", "completed_at": "2025-07-01T18:31:41.315469Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10002493858337402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_fact_status_compromisso", "compiled": true, "compiled_code": "\n\nSELECT\n    nome_paciente,\n    id_paciente,\n    id_clinica,\n    condicoes_de_saude_do_beneficiario,\n    id_linha_de_cuidado,\n    condicao_titulo,\n    condicao_status,\n    coordenacao_status,\n    modal_url,\n    lista_equipe_aps,\n    telefone_paciente,\n    plataforma,\n    execution_time\nFROM \"delta\".\"bronze\".\"stg_lina_getcommitmentsstatus\"", "relation_name": "\"delta\".\"silver\".\"lina_fact_status_compromisso\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:41.410315Z", "completed_at": "2025-07-01T18:31:41.438264Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:41.458648Z", "completed_at": "2025-07-01T18:31:41.458648Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09548020362854004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_fact_kanban", "compiled": true, "compiled_code": "\n\nSELECT\n    id_lina_beneficiario,\n    nome_paciente,\n    id_paciente,\n    modal_url,\n    telefone_paciente,\n    lista_equipe_aps,\n    condicoes_de_saude_do_beneficiario,\n    execution_time\nFROM \"delta\".\"bronze\".\"stg_lina_getkanbantodocommitments\"", "relation_name": "\"delta\".\"silver\".\"lina_fact_kanban\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:41.532942Z", "completed_at": "2025-07-01T18:31:41.563115Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:41.596081Z", "completed_at": "2025-07-01T18:31:41.596081Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0948188304901123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_fact_desligamento", "compiled": true, "compiled_code": "\n\nSELECT\n    id_paciente,\n    nome_paciente,\n    plataforma,\n    condicao_de_saude_desativada, \n    data_exclusao, \n    desativado_por, \n    grupo_economico, \n    motivo\nFROM \"delta\".\"bronze\".\"stg_lina_getpersoncarelinestatus\"", "relation_name": "\"delta\".\"silver\".\"lina_fact_desligamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:41.720620Z", "completed_at": "2025-07-01T18:31:41.761858Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:41.773302Z", "completed_at": "2025-07-01T18:31:41.773302Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12117815017700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_fact_medicacao_continua", "compiled": true, "compiled_code": "\n\n\nselect\n\tid_medicacao_continua\n\t,id_paciente\n\t,nome_paciente\n\t,data_medicacao\n\t,nome_medicacao\n\t,quantidade\n\t,unidade_medida\n\t,frequencia\n    ,plataforma\n\t,data_inclusao\n\t,data_ultima_atualizacao\nfrom \"delta\".\"bronze\".\"stg_lina_medicacao_continua\"", "relation_name": "\"delta\".\"silver\".\"lina_fact_medicacao_continua\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:41.893976Z", "completed_at": "2025-07-01T18:31:41.933447Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:41.960542Z", "completed_at": "2025-07-01T18:31:41.960542Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1258406639099121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_fact_mensageria", "compiled": true, "compiled_code": "\n\n\nselect\n    id_mensagem\n    ,id_paciente\n    ,id_clinica\n    ,telefone_paciente\n    ,id_campanha\n    ,nome_campanha\n    ,flag_campanha_pausada\n    ,id_template\n    ,nome_template\n    ,flag_template_ativo\n    ,id_usuario\n    ,nome_usuario\n    ,codigo_do_usuario\n    ,flag_enviado_pela_lina\n    ,flag_respondido_pelo_paciente\n    ,tipo_mensagem\n    ,tipo_template\n    ,data_mensagem\n    ,status_mensagem\n    ,mensagem\n    ,true as flag_status_enviado\n    ,case\n      when status_mensagem in ('delivered', 'read') then true\n      else false\n    end as flag_status_recebido\n    ,case\n      when status_mensagem = 'read' then true\n      else false\n    end as flag_status_lido\n    ,plataforma\n    ,data_hora_criacao\n    ,data_hora_ultima_atualizacao\nfrom \"delta\".\"bronze\".\"stg_lina_mensageria\"", "relation_name": "\"delta\".\"silver\".\"lina_fact_mensageria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:42.049674Z", "completed_at": "2025-07-01T18:31:42.080990Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:42.104267Z", "completed_at": "2025-07-01T18:31:42.104267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09431004524230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_fact_typeform", "compiled": true, "compiled_code": "\n\n\nselect\n    t.response_id,\n    t.form_id,\n    t.form_title,\n    t.form_type,\n    t.language,\n    t.form_created_at,\n    t.form_last_updated_at,\n    t.form_published_at,\n    t.user_id,\n    t.person_id,\n    p.id_paciente,\n    t.name,\n    t.token,\n    t.score,\n    t.landed_at,\n    t.submitted_at,\n    t.field_id,\n    t.field_ref,\n    t.field_type,\n    t.field_title,\n    t.field_description,\n    t.field_required,\n    t.answer_type,\n    t.answer\nfrom \"delta\".\"bronze\".\"stg_lina_typeform\" t\nleft join delta.silver.lina_dim_paciente p\n    on p.id_lina = t.person_id", "relation_name": "\"delta\".\"silver\".\"lina_fact_typeform\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:42.180117Z", "completed_at": "2025-07-01T18:31:42.209025Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:42.232048Z", "completed_at": "2025-07-01T18:31:42.232048Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08778762817382812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_log_auditoria", "compiled": true, "compiled_code": "\n\nSELECT \n    id_audit, \n    actiontype,\n    bodydata,\n    data_inclusao,\n    date(data_inclusao at time zone 'America/Sao_Paulo') as data_brt_inclusao,\n    -- ip,\n    id_ref,\n    tipo_key_ref,\n    -- id_usuario,\n    emitted_at\nFROM \"delta\".\"bronze\".\"stg_mongo_audit\"", "relation_name": "\"delta\".\"silver\".\"cnx_log_auditoria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:42.322666Z", "completed_at": "2025-07-01T18:31:42.336011Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:42.367416Z", "completed_at": "2025-07-01T18:31:42.367416Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09444999694824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_elegibilidade_autorizacao", "compiled": true, "compiled_code": "\n\nSELECT \n    id_elegibilidade_autorizacao,\n    carteira_convenio,\n    cpf_paciente,\n    CASE\n        WHEN mensagem_motivo_negacao = 'null' \n            THEN null\n        WHEN mensagem_motivo_negacao = ''\n            THEN null\n        ELSE mensagem_motivo_negacao\n    END AS mensagem_motivo_negacao,\n    date(data_autorizacao) as data_autorizacao,\n    date(data_expiracao_autorizacao) as data_expiracao_autorizacao,\n    data_hora_solicitacao,\n    date(data_hora_solicitacao at time zone 'America/Sao_Paulo') as data_brt_solicitacao,\n    data_hora_resposta_aplicacao,\n    date(data_hora_resposta_aplicacao at time zone 'America/Sao_Paulo') as data_brt_resposta_aplicacao,\n    flag_elegivel,\n    flag_autorizado,\n    -- id_atendimento,\n    id_clinica,\n    -- id_fila_atendimento,\n    id_paciente,\n    id_profissional,\n    modo_atendimento,\n    numero_guia_prestador,\n    -- observacao,\n    response_body,\n    tipo_requisicao,\n    token_autorizacao,\n    emitted_at\nFROM \"delta\".\"bronze\".\"stg_mongo_elegibilidade_autorizacao\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_elegibilidade_autorizacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:42.449853Z", "completed_at": "2025-07-01T18:31:42.480231Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:42.493630Z", "completed_at": "2025-07-01T18:31:42.493630Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08384394645690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_inter_nexodata_atestado", "compiled": true, "compiled_code": "\n\nSELECT\n    id_nexodata_atestado,\n    id_atendimento,\n    id_prescricao,\n    data_registro_atestado,\n    data_atestado,\n    data_inicio_afastamento,\n    data_termino_afastamento,\n    texto_atestado,\n    texto_completo_atestado,\n    observacao,\n    case\n        when periodo_dias is null and texto_atestado like '% em repouso hoje' then 1\n        when periodo_dias is null and texto_completo_atestado like '%Foi orientado a permanecer em repouso hoje%' then 1\n        else periodo_dias\n    end as dias_afastamento,\n    cid10,\n    cid10_descricao,\n    codigo_validacao,\n    id_paciente\nFROM\n    \"delta\".\"bronze\".\"stg_mongo_nexodata_atestado\"\nWHERE \n    flag_declaracao_comparecimento = false\n    and texto_atestado != 'Foi orientado a retornar ao trabalho'\n    and texto_atestado not like '%pr\u00e1ticas esportivas'\n    and texto_atestado not like '%ENCAMINHAMENTO%'", "relation_name": "\"delta\".\"silver\".\"cnx_inter_nexodata_atestado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:42.584296Z", "completed_at": "2025-07-01T18:31:42.616673Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:42.641103Z", "completed_at": "2025-07-01T18:31:42.641103Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09770512580871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_encaminhamento", "compiled": true, "compiled_code": "\n\nselect\n\tid_nexodata_encaminhamento,\n\tid_atendimento,\n\ttipo_prescricao,\n\tid_prescricao_status,\n\tid_prescricao,\n\tcodigo_validacao,\n\treferencia_interna,\n\tdata_criacao,\n\tidespecialidade,\n\tnome_especialidade,\n\tnome_profissional,\n\tconduta, \n    data_encaminhamento, \n    data_inclusao, \n    data_modificacao, \n    historia_clinica,\n    idencaminhamentoprescricao,\n    motivo_encaminhamento,\n\tnome_prescritor,\n\tdocumento_prescritor,\n\tnumero_prescritor,\n\tconselho_prescritor,\n\tuf_prescritor,\n\tuf_conselho_prescritor,\n\tnome_paciente,\n\tsexo_paciente,\n\tidade_paciente,\n\tid_paciente,\n\treferenciaexterna_paciente,\n    cdc_updated_at\nfrom \"delta\".\"bronze\".\"stg_mongo_nexodata_encaminhamento\"\n\n\n\nwhere cdc_updated_at >= (select coalesce(max(cdc_updated_at),timestamp'1900-01-01') from \"delta\".\"silver\".\"cnx_fact_encaminhamento\" )\n\n", "relation_name": "\"delta\".\"silver\".\"cnx_fact_encaminhamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:42.725127Z", "completed_at": "2025-07-01T18:31:42.757003Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:42.773105Z", "completed_at": "2025-07-01T18:31:42.773105Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08919429779052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_estratificacao", "compiled": true, "compiled_code": "\n\nselect \n\tid_estratificacao,\n\ttoken_estratificacao,\n\tid_paciente,\n\tid_profissional,\n\tid_clinica,\n\tid_form,\n\ttipo_typeform,\n\tperfil_criador,\n\tdata_hora_criacao,\n\tform_resultado,\n\tescala,\n\tquantidade_consultas,\n\tescala_ansiedade,\n\tescala_depressao,\n\tescala_estresse,\n\tvalores_dass21\nfrom \"delta\".\"bronze\".\"stg_mongo_resultado_estratificacao\"\n\n\nwhere data_hora_criacao >= (select coalesce(max(data_hora_criacao),timestamp'1900-01-01') from \"delta\".\"silver\".\"cnx_fact_estratificacao\" )\n", "relation_name": "\"delta\".\"silver\".\"cnx_fact_estratificacao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:42.869753Z", "completed_at": "2025-07-01T18:31:42.901831Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:42.920223Z", "completed_at": "2025-07-01T18:31:42.920223Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08935809135437012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_srq20", "compiled": true, "compiled_code": "\n\nselect \n\tid_resultado_srq20,\n\tid_paciente,\n\tid_clinica,\n\tid_profissional,\n\tid_resposta,\n\tdata_criacao,\n\tsrq_resultado,\n\tsrq20_escala,\n\tquantidade_consultas,\n\tdata_finalizacao,\n\tlista_atendimentos\nfrom \"delta\".\"bronze\".\"stg_mongo_srq20\"\n\n\n\nwhere data_criacao >= (select coalesce(max(data_criacao),timestamp'1900-01-01') from \"delta\".\"silver\".\"cnx_fact_srq20\" )\n    or data_finalizacao >= (select coalesce(max(data_finalizacao),timestamp'1900-01-01') from \"delta\".\"silver\".\"cnx_fact_srq20\" )\n\n", "relation_name": "\"delta\".\"silver\".\"cnx_fact_srq20\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:43.012223Z", "completed_at": "2025-07-01T18:31:43.034636Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:43.065592Z", "completed_at": "2025-07-01T18:31:43.065592Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10067939758300781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_triagem", "compiled": true, "compiled_code": "\n\nSELECT \n    id_triagem,\n    flag_alergia_contraste_iodo,\n    flag_alergia_frutos_mar,\n    flag_alergia_medicamentos,\n    descricao_alergia_medicamentos,\n    flag_anexos,\n    data_hora_triagem,\n    data_brt_triagem,\n    descricao_doencas,\n    id_medicamentos,\n    id_clinica,\n    id_paciente,\n    comentario_nps_triagem,\n    data_hora_nps_triagem,\n    data_brt_nps_triagem,\n    nota_nps,\n    intensidade_sintomas,\n    descricao_sintomas,\n    descricao_sintomas_evidentes,\n    \"_ab_cdc_updated_at\",\n    \"_ab_cdc_deleted_at\",\n    emitted_at\nFROM \"delta\".\"bronze\".\"stg_mongo_triagem\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_triagem\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:43.180057Z", "completed_at": "2025-07-01T18:31:43.226752Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:43.258844Z", "completed_at": "2025-07-01T18:31:43.258844Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14432024955749512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_triagem_alergia", "compiled": true, "compiled_code": "\n\nwith alergia as(\nselect\n\tid_triagem,\n\tdata_hora_triagem,\n\tdata_brt_triagem,\n\tfrom_iso8601_timestamp(_ab_cdc_updated_at) as _ab_cdc_updated_at,\n\tid_clinica,\n\tid_paciente,\n\talergia.*\nFROM \"delta\".\"bronze\".\"stg_mongo_triagem\"\ncross join unnest (\n\tarray[flag_alergia_contraste_iodo,flag_alergia_frutos_mar,flag_alergia_medicamentos],\n\tarray[descricao_alergia_medicamentos,descricao_alergia_medicamentos,descricao_alergia_medicamentos],\n\tarray['Alergia de contraste iodado','Alergia a frutos do mar','Alergia ao medicamento'],\n\tarray['iodo','frutos','medicamento']\n) alergia(flag_alergia,descricao_alergia_medicamentos,nome_diagnostico,parametro)\n),\nmedicamento as (\nselect\n    id_triagem,\n    t2.* as (nome_medicamento)\nfrom alergia\ncross join unnest\n(descricao_alergia_medicamentos)t2\nwhere parametro = 'medicamento'\n)\nselect\n    a.*,\n    m.nome_medicamento\nfrom alergia as a\nleft join medicamento as m on a.id_triagem = m.id_triagem and a.parametro = 'medicamento'\nwhere flag_alergia = 'SIM'", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_triagem_alergia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:43.339301Z", "completed_at": "2025-07-01T18:31:43.384660Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:43.400679Z", "completed_at": "2025-07-01T18:31:43.400679Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09051775932312012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_triagem_doenca_sintoma", "compiled": true, "compiled_code": "\n\nwith doenca as (\nselect\n    id_triagem,\n    t1.* as (doenca)\nfrom \"delta\".\"bronze\".\"stg_mongo_triagem\"\ncross join unnest\n(descricao_doencas)t1\n)\nselect\nt.id_triagem,\nt.id_clinica,\nt.id_paciente,\nt.intensidade_sintomas,\nt.data_hora_triagem,\nt.data_brt_triagem,\nfrom_iso8601_timestamp(t._ab_cdc_updated_at) as _ab_cdc_updated_at,\nd.doenca,\nt.descricao_sintomas as lista_sintomas\nfrom \"delta\".\"bronze\".\"stg_mongo_triagem\" as t\nleft join doenca as d on t.id_triagem = d.id_triagem\nwhere t.descricao_doencas is not null", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_triagem_doenca_sintoma\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:43.536011Z", "completed_at": "2025-07-01T18:31:43.613347Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:43.636322Z", "completed_at": "2025-07-01T18:31:43.636322Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17119717597961426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_agenda_profissional_data_ultima_alteracao__day__5.3e407b5475", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_agenda_profissional\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:43.729021Z", "completed_at": "2025-07-01T18:31:43.761911Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:43.782411Z", "completed_at": "2025-07-01T18:31:43.782411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09784603118896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_atendimento_pendente", "compiled": true, "compiled_code": "\n\nselect cp.id_atendimento_pendente,\n       cp.data_ultima_alteracao,\n       cp.data_brt_ultima_alteracao,\n       cp.usuario_ultima_alteracao,\n       cp.data_inclusao,\n       cp.data_brt_inclusao,\n       cp.id_atendimento,\n       cp.flag_atendimento_fora_plataforma,\n       cp.flag_problema_tecnico,\n       cp.justificativa,\n       cp.flag_atendimento_realizado,\n       cp.outro_motivo_nao_realizacao_atendimento,\n       cp.id_motivo_nao_realizacao_atendimento,\n       cp.emitted_at,\n       cp.is_delete,\n       cp.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_atendimento_pendente\" as cp --", "relation_name": "\"delta\".\"silver\".\"pvv_fact_atendimento_pendente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:43.856997Z", "completed_at": "2025-07-01T18:31:43.887184Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:43.919252Z", "completed_at": "2025-07-01T18:31:43.919252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09447908401489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_atendimento_pendente_data_ultima_alteracao__day__5.8e1104fff3", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_atendimento_pendente\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:44.011771Z", "completed_at": "2025-07-01T18:31:44.039449Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:44.057181Z", "completed_at": "2025-07-01T18:31:44.057181Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09031820297241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_dim_avaliacao_clinica", "compiled": true, "compiled_code": "\n\nselect \n    id_avaliacao_clinica,\n    data_ultima_alteracao,\n    usuario_ultima_alteracao,\n    data_inclusao, \n    versao, \n    id_atendimento, \n    sintomas_queixas,\n    quantidade_consultas_indicadas,\n    nomeclatura_cid,\n    id_foto,\n    grau_gravidade,\n    id_paciente,\n    nome_profissional,\n    numero_conselho,\n    estado_conselho,\n    grau_depressao,\n    grau_suicidio,\n    grau_ansiedade,\n    grau_amvh,\n    grau_bdi2,\n\temitted_at,\n    is_delete,\n    updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_avaliacao_clinica\"", "relation_name": "\"delta\".\"silver\".\"pvv_dim_avaliacao_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:44.140748Z", "completed_at": "2025-07-01T18:31:44.165532Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:44.190902Z", "completed_at": "2025-07-01T18:31:44.190902Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0941917896270752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_avaliacao_clinica_data_ultima_alteracao__day__5.bad222c87f", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_avaliacao_clinica\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:44.291475Z", "completed_at": "2025-07-01T18:31:44.326809Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:44.351883Z", "completed_at": "2025-07-01T18:31:44.351883Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11145520210266113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_avaliacao_paciente_data_ultima_alteracao__day__5.d0a84cbffa", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_avaliacao_paciente\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:44.423649Z", "completed_at": "2025-07-01T18:31:44.455059Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:44.483991Z", "completed_at": "2025-07-01T18:31:44.483991Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09720897674560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_avaliacao_psicologo_data_ultima_alteracao__day__5.3c0aa27c1d", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_avaliacao_psicologo\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:44.572690Z", "completed_at": "2025-07-01T18:31:44.593956Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:44.614733Z", "completed_at": "2025-07-01T18:31:44.614733Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08575582504272461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_cadastro_paciente_convenio", "compiled": true, "compiled_code": "\n\nSELECT \n    id_cadastro_paciente_convenio, \n    data_ultima_alteracao, \n    usuario_ultima_alteracao, \n    data_inclusao, \n    id_paciente,   \n    ativo, \n    carteirinha, \n    senha,  \n    motivo_encaminhamento,  \n    senha_autorizacao, \n    id_convenio,  \n    convenio,   \n    convenios,  \n    status_convenio,\n    pacote, \n    valor_pacote, \n    vigencia, \n    numero_autorizacao, \n    unimed_anhanguera_cidade,\n    emitted_at, \n    is_delete, \n    updated_at\nFROM \"delta\".\"bronze\".\"stg_pvv_cad_paciente_convenio\"", "relation_name": "\"delta\".\"silver\".\"pvv_fact_cadastro_paciente_convenio\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:44.698899Z", "completed_at": "2025-07-01T18:31:44.729452Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:44.752323Z", "completed_at": "2025-07-01T18:31:44.752323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09688973426818848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_cad_paciente_convenio_data_ultima_alteracao__day__5.6b8b3c5b6b", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_cad_paciente_convenio\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:44.835730Z", "completed_at": "2025-07-01T18:31:44.866834Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:44.888719Z", "completed_at": "2025-07-01T18:31:44.888719Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09601759910583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_cancelamento_consulta_data_ultima_alteracao__day__5.a89ef7a8a4", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_cancelamento_consulta\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:44.970951Z", "completed_at": "2025-07-01T18:31:45.013460Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:45.030887Z", "completed_at": "2025-07-01T18:31:45.030887Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09576749801635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_categoria_repasse_data_ultima_alteracao__day__5.8f68574b9d", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_categoria_repasse\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:45.126998Z", "completed_at": "2025-07-01T18:31:45.159105Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:45.176962Z", "completed_at": "2025-07-01T18:31:45.176962Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09879708290100098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_consulta_instabilidade_data_ultima_alteracao__day__5.5b77a15aa2", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_consulta_instabilidade\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:45.280267Z", "completed_at": "2025-07-01T18:31:45.312922Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:45.342816Z", "completed_at": "2025-07-01T18:31:45.342816Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11789393424987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_contrato_data_ultima_alteracao__day__5.cd03d8460a", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_contrato\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:45.442206Z", "completed_at": "2025-07-01T18:31:45.477562Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:45.528373Z", "completed_at": "2025-07-01T18:31:45.528373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13006305694580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_convenio_data_ultima_alteracao__day__5.b1bdd554ce", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_convenio\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:45.625517Z", "completed_at": "2025-07-01T18:31:45.656400Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:45.677494Z", "completed_at": "2025-07-01T18:31:45.677494Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11101889610290527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_convenio_repasses_data_ultima_alteracao__day__5.5bdf4d9b20", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_convenio_repasses\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:45.765715Z", "completed_at": "2025-07-01T18:31:45.798513Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:45.823806Z", "completed_at": "2025-07-01T18:31:45.823806Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09993863105773926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_corpo_clinico_convenio_data_ultima_alteracao__day__5.dfc4fdc691", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_corpo_clinico_convenio\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:45.913725Z", "completed_at": "2025-07-01T18:31:45.944038Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:45.975202Z", "completed_at": "2025-07-01T18:31:45.975202Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10818219184875488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_corpo_clinico_profissional", "compiled": true, "compiled_code": "\n\nselect \n        ccp.id_corpo_clinico_profissional, \n        ccp.id_corpo_clinico_convenio,\n        ccp.data_ultima_alteracao,\n        ccp.data_brt_ultima_alteracao,\n        ccp.usuario_ultima_alteracao,\n        ccp.data_inclusao,\n        ccp.data_brt_inclusao,\n        ccp.versao,\n        ccp.id_profissional,\n        ccp.nome_profissional,\n        ccp.flag_enviado_notificacao,\n        ccc.nome_convenio,\n        ccc.id_convenio,\n        ccc.valor_repasse,\n        ccc.convenio_associado,\n        ccc.data_inclusao as data_criacao_corpo_clinico_convenio,\n        ccp.is_delete,\n        ccp.emitted_at,\n        ccp.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_corpo_clinico_profissional\" as ccp --\ninner join \"delta\".\"bronze\".\"stg_pvv_corpo_clinico_convenio\" as ccc on ccp.id_corpo_clinico_convenio = ccc.id_corpo_clinico_convenio", "relation_name": "\"delta\".\"silver\".\"pvv_fact_corpo_clinico_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:46.070620Z", "completed_at": "2025-07-01T18:31:46.101245Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:46.118234Z", "completed_at": "2025-07-01T18:31:46.118234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09670138359069824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_corpo_clinico_profissional_data_ultima_alteracao__day__5.96138fe748", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_corpo_clinico_profissional\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:46.195695Z", "completed_at": "2025-07-01T18:31:46.223453Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:46.244225Z", "completed_at": "2025-07-01T18:31:46.244225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08621454238891602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_dado_site_data_ultima_alteracao__day__5.0dbe4248e1", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_dado_site\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:46.331968Z", "completed_at": "2025-07-01T18:31:46.362265Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:46.380119Z", "completed_at": "2025-07-01T18:31:46.380119Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0957489013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_data_agenda_psicologo_data_ultima_alteracao__day__5.ae19fc651c", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_data_agenda_psicologo\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:46.458041Z", "completed_at": "2025-07-01T18:31:46.492000Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:46.519857Z", "completed_at": "2025-07-01T18:31:46.519857Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0930323600769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_decrypted_detalhes_motivo_adoecimento_laboral_data_ultima_alteracao__day__5.d486cb459d", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_decrypted_detalhes_motivo_adoecimento_laboral\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:46.636982Z", "completed_at": "2025-07-01T18:31:46.680089Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:46.701333Z", "completed_at": "2025-07-01T18:31:46.701333Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12975811958312988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_decrypted_detalhes_relacao_adoecimento_laboral_data_ultima_alteracao__day__5.f766c338af", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_decrypted_detalhes_relacao_adoecimento_laboral\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:46.792346Z", "completed_at": "2025-07-01T18:31:46.822152Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:46.841180Z", "completed_at": "2025-07-01T18:31:46.841180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08854126930236816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_decrypted_diagnostico_data_ultima_alteracao__day__5.c462e91965", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_decrypted_diagnostico\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:46.928528Z", "completed_at": "2025-07-01T18:31:46.960453Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:46.982599Z", "completed_at": "2025-07-01T18:31:46.982599Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09794402122497559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_evolucao", "compiled": true, "compiled_code": "\n\nSELECT\n    id_evolucao,\n    id_tratamento,\n    id_atendimento,\n    resumo_sessao,\n    procedimentos_tecnicos,\n    instrumentos_utilizados,\n    usuario_ult_alteracao,\n    data_inclusao,\n    data_ult_alteracao,\n    versao,\n    id_profissional,\n    desfecho,\n    data_liberacao_prontuario_para_paciente,\n    registro_documental,\n    emitted_at\nFROM \"delta\".\"bronze\".\"stg_pvv_decrypted_evolucao_tratamento\"", "relation_name": "\"delta\".\"silver\".\"pvv_fact_evolucao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:47.075295Z", "completed_at": "2025-07-01T18:31:47.106541Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:47.129486Z", "completed_at": "2025-07-01T18:31:47.129486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10162997245788574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_decrypted_evolucao_tratamento_data_ult_alteracao__day__5.1a49d3d7d0", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ult_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_decrypted_evolucao_tratamento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ult_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:47.217148Z", "completed_at": "2025-07-01T18:31:47.249137Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:47.268151Z", "completed_at": "2025-07-01T18:31:47.268151Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1007986068725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_decrypted_novo_prontuario_data_ultima_alteracao__day__5.1c8bf9dd69", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_decrypted_novo_prontuario\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:47.373048Z", "completed_at": "2025-07-01T18:31:47.412719Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:47.430650Z", "completed_at": "2025-07-01T18:31:47.430650Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11118221282958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_desconto_data_ultima_alteracao__day__5.32da03f7f3", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_desconto\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:47.517975Z", "completed_at": "2025-07-01T18:31:47.550965Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:47.573078Z", "completed_at": "2025-07-01T18:31:47.573078Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09845900535583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_detalhes_relacao_adoecimento_laboral_data_ultima_alteracao__day__5.b76186ef0f", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_detalhes_relacao_adoecimento_laboral\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:47.650282Z", "completed_at": "2025-07-01T18:31:47.686817Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:47.712616Z", "completed_at": "2025-07-01T18:31:47.712616Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09651446342468262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_empresa_subsidiaria_data_ultima_alteracao__day__5.04fc04626f", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_empresa_subsidiaria\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:47.790425Z", "completed_at": "2025-07-01T18:31:47.829680Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:47.854999Z", "completed_at": "2025-07-01T18:31:47.854999Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0980985164642334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_evolucao_tratamento_data_ultima_alteracao__day__5.0f6bc7dd7f", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_evolucao_tratamento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:47.943188Z", "completed_at": "2025-07-01T18:31:47.966342Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:47.981997Z", "completed_at": "2025-07-01T18:31:47.981997Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08017110824584961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_foto", "compiled": true, "compiled_code": "\n\nselect\n       *\nfrom \"delta\".\"bronze\".\"stg_pvv_foto\"", "relation_name": "\"delta\".\"silver\".\"pvv_fact_foto\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:48.076578Z", "completed_at": "2025-07-01T18:31:48.106646Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:48.134701Z", "completed_at": "2025-07-01T18:31:48.134701Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10944986343383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_informacoes_twilio_data_ultima_alteracao__day__5.88ddf30c8b", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_informacoes_twilio\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:48.219066Z", "completed_at": "2025-07-01T18:31:48.261359Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:48.289277Z", "completed_at": "2025-07-01T18:31:48.289277Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10724616050720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_informacoes_vonage_data_ultima_alteracao__day__5.e07acbf8d3", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_informacoes_vonage\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:48.371813Z", "completed_at": "2025-07-01T18:31:48.399958Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:48.419338Z", "completed_at": "2025-07-01T18:31:48.419338Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09354925155639648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_log_acesso", "compiled": true, "compiled_code": "\n\nselect \n       id_log_acesso,\n       data_ultima_alteracao,\n       data_brt_ultima_alteracao,\n       usuario_ultima_alteracao,\n       data_inclusao,\n       data_brt_inclusao,\n       versao,\n       cookie,\n       data_acesso,\n       data_brt_acesso,\n       id_seguranca_usuario,\n       ip,\n       user_agent,\n       accept_language,\n       emitted_at,\n       updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_log_acesso\" as la", "relation_name": "\"delta\".\"silver\".\"pvv_fact_log_acesso\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:48.512109Z", "completed_at": "2025-07-01T18:31:48.527788Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:48.557540Z", "completed_at": "2025-07-01T18:31:48.557540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08949995040893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_primeiro_acesso_paciente", "compiled": true, "compiled_code": "\nwith t1 as(\nSELECT id_seguranca_usuario,\n       min(data_acesso) as primeiro_acesso \nFROM \"delta\".\"bronze\".\"stg_pvv_log_acesso\" as log\nGROUP BY id_seguranca_usuario\n)\nselect\n\tid_seguranca_usuario,\n\tprimeiro_acesso,\n\tdate(primeiro_acesso) as data_brt_primeiro_acesso\nfrom t1", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_primeiro_acesso_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:48.682464Z", "completed_at": "2025-07-01T18:31:48.701359Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:48.724391Z", "completed_at": "2025-07-01T18:31:48.724391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11914181709289551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_log_acesso_data_ultima_alteracao__day__5.1e8e51d696", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_log_acesso\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:48.819158Z", "completed_at": "2025-07-01T18:31:48.843961Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:48.874993Z", "completed_at": "2025-07-01T18:31:48.874993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10986876487731934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_log_integracao_operadora", "compiled": true, "compiled_code": "\n\nselect \n       id_log_integracao_operadora,\n       data_ultima_alteracao,\n       data_brt_ultima_alteracao,\n       usuario_ultima_alteracao,\n       data_inclusao,\n       data_brt_inclusao,\n       versao,\n       endpoint_integracao,\n       nome_classe,\n       mensagem_da_excecao,\n       status_code,\n       id_paciente,\n       origem,\n\temitted_at,\n       is_delete,\n       updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_log_integracao_operadora\"", "relation_name": "\"delta\".\"silver\".\"pvv_fact_log_integracao_operadora\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:48.981064Z", "completed_at": "2025-07-01T18:31:49.025237Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:49.045659Z", "completed_at": "2025-07-01T18:31:49.045659Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11099934577941895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_log_integracao_operadora_data_ultima_alteracao__day__5.0b8da08dd9", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_log_integracao_operadora\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:49.126670Z", "completed_at": "2025-07-01T18:31:49.278968Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:49.302047Z", "completed_at": "2025-07-01T18:31:49.302047Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20963788032531738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_lote_guia_tiss", "compiled": true, "compiled_code": "\n\nselect  lote.id_lote_guia_tiss,\n\tlote.data_ultima_alteracao,\n        lote.data_brt_ultima_alteracao,\n        lote.usuario_ultima_alteracao,\n        lote.data_inclusao,\n        lote.data_brt_inclusao,\n        lote.id_atendimento,\n        lote.id_paciente,\n        lote.id_profissional,\n        lote.nome_convenio,\n        lote.data_autorizacao_atendimento,\n        lote.data_envio_lote,\n        lote.data_brt_envio_lote,\n        lote.numero_guia_operadora,\n        lote.numero_guia_prestador,\n        lote.numero_lote,\n        lote.numero_protocolo,\n        lote.paciente_carteirinha,\n        lote.nome_paciente,\n        lote.profissional_cbo,\n        lote.profissional_conselho,\n        lote.profissional_crp,\n        lote.nome_profissional, \n        lote.senha_autorizacao,\n        lote.valor_guia,\n        lote.enviado_anexo,\n        lote.codigo_glosa_anexo,\n        lote.mensagem_glosa_anexo,\n        lote.codigo_glosa_faturamento,\n        lote.mensagem_glosa_faturamento,\n        lote.status_lote,\n        lote.flag_old,\n        lote.emitted_at,\n        lote.is_delete,\n        lote.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_lote_guia_tiss\" as lote --", "relation_name": "\"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:49.392815Z", "completed_at": "2025-07-01T18:31:49.421833Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:49.443482Z", "completed_at": "2025-07-01T18:31:49.443482Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10087013244628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_lote_guia_tiss_data_ultima_alteracao__day__5.01ce244cc4", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_lote_guia_tiss\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:49.524654Z", "completed_at": "2025-07-01T18:31:49.550491Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:49.571422Z", "completed_at": "2025-07-01T18:31:49.571422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08962035179138184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_motivo_adoecimento_laboral_prontuario_data_ultima_alteracao__day__5.06990bc27c", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_motivo_adoecimento_laboral_prontuario\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:49.656943Z", "completed_at": "2025-07-01T18:31:49.686413Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:49.707668Z", "completed_at": "2025-07-01T18:31:49.707668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09580659866333008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_motivo_nao_realizacao_consulta_data_ultima_alteracao__day__5.932eef76f2", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_motivo_nao_realizacao_consulta\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:49.789685Z", "completed_at": "2025-07-01T18:31:49.822219Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:49.854084Z", "completed_at": "2025-07-01T18:31:49.854084Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11451292037963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_opcoes_atendimento_data_ultima_alteracao__day__5.57b2578c1d", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_opcoes_atendimento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:49.944253Z", "completed_at": "2025-07-01T18:31:49.971617Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:49.982941Z", "completed_at": "2025-07-01T18:31:49.982941Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08522915840148926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_atendimento", "compiled": true, "compiled_code": "\n\n    SELECT\n       pag.id AS id_atendimento,\n       from_iso8601_timestamp(pag.data_ult_alteracao) as data_ultima_alteracao,\n       date(substr(pag.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n       pag.usuario_ult_alteracao as usuario_ultima_alteracao,\n       from_iso8601_timestamp(pag.data_inclusao) as data_inclusao,\n       date(substr(pag.data_inclusao,1,10)) as data_brt_inclusao,\n       pag.id_paciente,\n       case \n           when pag.id_convenio is not null then pag.id_convenio\n           when pag.id_convenio is null and pac.pais_atuacao = 'BR' then 999999 \n           else 999998\n            end id_convenio,\n       pag.login_pagamento,\n       pag.id_profissional,\n       pag.login_profissional,\n       from_iso8601_timestamp(pag.data_consulta) as data_atendimento,\n       date(substr(pag.data_consulta,1,10)) as data_brt_atendimento,\n       from_iso8601_timestamp(pag.data_pagamento) as data_pagamento,\n       date(substr(pag.data_pagamento,1,10)) as data_brt_pagamento,\n       pag.entrou_consulta_pac as entrou_atendimento_paciente,\n       pag.entrou_consulta_psi as entrou_atendimento_profissional,\n       pag.tipo_consulta as tipo_atendimento,\n       pag.voucher_utilizado,\n       'Psicologia' as produto,\n       pag.status,\n       if((pag.status_sul_america = '' or pag.status_sul_america is null),'AGUARDANDO RETORNO OPERADORA',pag.status_sul_america) as status_sul_america,\n       pag.senha_autorizacao,\n       pag.voucher_sul_america,\n       if((pag.voucher_sul_america is not null),true,false) as flag_voucher_sul_america,\n       pag.repasse_convenio,\n       pag.moeda,\n       pag.moeda_repasse,\n       pag.moeda_pagamento,\n       pag.moeda_psicologo as moeda_profissional,\n       pag.valor_psicologo as valor_profissional,\n       pag.valor_pagamento,\n       if((pag.id_transaction is not null),true,false) as flag_pagamento_pagarme,\n       pag.id_transaction as id_pagarme,\n       pag.tempo_consulta as tempo_atendimento,  \n       pag.bandeira AS id_sulamerica,\n       pag.id_realizar_pagamento_pac as id_pagamento_paciente,\n       CASE\n           WHEN pag.consulta_confirmada_psi = 'S' or pag.consulta_confirmada_psi = 's' then true\n           WHEN pag.consulta_confirmada_psi = 'N' or pag.consulta_confirmada_psi = 'n' then false\n           else null \n        END flag_atendimento_confirmada_profissional,\n       CASE\n           WHEN pag.valor_pagamento is null then 'N\u00e3o'\n           WHEN pag.valor_pagamento = 0 then 'N\u00e3o'\n           WHEN pag.valor_pagamento > 0 then 'Sim'\n           ELSE 'Checar' \n        END atendimento_pago_na_plataforma,\n       CASE \n           WHEN pag.motivo_noshow_psi = '1' THEN 'N\u00e3o vi o agendamento'\n           WHEN pag.motivo_noshow_psi = '2' THEN 'N\u00e3o vi/recebi a notifica\u00e7\u00e3o'\n           WHEN pag.motivo_noshow_psi = '3' THEN 'Tive problemas t\u00e9cnicos e fiz contato com o paciente'\n           WHEN pag.motivo_noshow_psi = '4' THEN 'Tive imprevistos e fiz contato com o paciente'\n           ELSE NULL\n        END motivo_noshow_profissional,\n       pag.motivo_reagendamento,\n       pag.justificativa,\n       pag.id_data AS id_data_agenda_profissional,\n       if((pag.simultaneidade = 1),true,false) as simultaneidade,\n       if((pag.link_pagamento is not null),true,false) as flag_atendimento_reservada,\n       pag.emitted_at,\n       0 as is_delete,\n       current_timestamp(3) as updated_at\n    FROM \"delta\".\"bronze\".\"raw_pvv_pagamento_consulta\" AS pag --\n    INNER JOIN \"delta\".\"bronze\".\"stg_pvv_pacientes\" AS pac ON pac.id_paciente = pag.id_paciente\n    INNER JOIN \"delta\".\"bronze\".\"raw_pvv_ids\" AS ids ON pag.id = ids.table_id AND ids.table_name = 'pagamento_consulta'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:50.063969Z", "completed_at": "2025-07-01T18:31:50.094366Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:50.126330Z", "completed_at": "2025-07-01T18:31:50.126330Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09183645248413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_pacientes_data_ultima_alteracao__day__5.f157509c96", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_pacientes\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:50.206535Z", "completed_at": "2025-07-01T18:31:50.243524Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:50.259208Z", "completed_at": "2025-07-01T18:31:50.259208Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09106969833374023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_pagamento_convenio_split_data_ultima_alteracao__day__5.7c51993a91", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_pagamento_convenio_split\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:50.344105Z", "completed_at": "2025-07-01T18:31:50.372804Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:50.395863Z", "completed_at": "2025-07-01T18:31:50.395863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09398841857910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_perfil_usuario_data_ultima_alteracao__day__5.b3cf09fe72", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_perfil_usuario\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:50.492755Z", "completed_at": "2025-07-01T18:31:50.520021Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:50.549243Z", "completed_at": "2025-07-01T18:31:50.549243Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10489869117736816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_plano_psicologo_data_ultima_alteracao__day__5.47d883b630", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_plano_psicologo\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:50.665104Z", "completed_at": "2025-07-01T18:31:50.707028Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:50.723039Z", "completed_at": "2025-07-01T18:31:50.723039Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12718868255615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_profissionais_data_ultima_alteracao__day__5.b5a4af88cd", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_profissionais\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:50.835883Z", "completed_at": "2025-07-01T18:31:50.867972Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:50.886452Z", "completed_at": "2025-07-01T18:31:50.886452Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09646892547607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_prontuario_data_ultima_alteracao__day__5.ea5f9d4905", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_prontuario\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:50.976599Z", "completed_at": "2025-07-01T18:31:50.992269Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:51.024805Z", "completed_at": "2025-07-01T18:31:51.024805Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09549093246459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_reagendamento_atendimento", "compiled": true, "compiled_code": "\n\nselect\n    id_reagendamento_atendimento,\n    data_ultima_alteracao,\n    data_brt_ultima_alteracao,\n    usuario_ultima_alteracao,\n    data_inclusao,\n    data_brt_inclusao,\n    data_atendimento,\n    data_brt_atendimento,\n    id_atendimento,\n    id_data_agenda_psicologo_antiga,\n    id_data_agenda_psicologo_nova,\n    motivo,\n    nova_data_atendimento,\n    nova_data_brt_atendimento,\n    responsavel,\n    ranking,\n    versao,\n    emitted_at,\n    is_delete,\n    updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_reagendamento_atendimento\"", "relation_name": "\"delta\".\"silver\".\"pvv_fact_reagendamento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:51.096166Z", "completed_at": "2025-07-01T18:31:51.127813Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:51.146777Z", "completed_at": "2025-07-01T18:31:51.146777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08209800720214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_reagendamento_atendimento_data_ultima_alteracao__day__5.a26264f035", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_reagendamento_atendimento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:51.238602Z", "completed_at": "2025-07-01T18:31:51.266524Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:51.286272Z", "completed_at": "2025-07-01T18:31:51.286272Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09136962890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_pagamento_paciente", "compiled": true, "compiled_code": "\n\n  select \n      rpac.id_realizar_pagamento_paciente, \n      rpac.data_ultima_alteracao,\n      rpac.data_brt_ultima_alteracao,\n      rpac.usuario_ultima_alteracao,\n      rpac.data_inclusao,\n      rpac.data_brt_inclusao,\n      rpac.data_pagamento,\n      rpac.data_brt_pagamento,\n      rpac.data_validade,\n      rpac.data_brt_validade,\n      rpac.id_paciente,\n      rpac.id_solicitacao_tiss,\n      rpac.pacote,\n      rpac.quantidade_uso,\n      rpac.data_agenda,\n      rpac.bandeira,\n      rpac.codigo_cartao,\n      rpac.login_pagamento,\n      rpac.nome_cartao,\n      rpac.numero_cartao,\n      rpac.plano,\n      rpac.tipo_pagamento,\n      rpac.valor_pagamento,\n      rpac.vencimento_cartao,\n      rpac.nome_convenio,\n      rpac.id_assinatura,\n      rpac.status,\n      rpac.flag_atingiu_limite,\n      rpac.senha_care_plus,\n      rpac.moeda_pagamento,\n      rpac.plataforma_pagamento, \n      rpac.moeda,\n      rpac.usuario_inclusao,\n      rpac.emitted_at,\n      rpac.is_delete,\n      rpac.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_realizar_pagamento_paciente\" as rpac --", "relation_name": "\"delta\".\"silver\".\"pvv_fact_pagamento_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:51.355835Z", "completed_at": "2025-07-01T18:31:51.385072Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:51.401241Z", "completed_at": "2025-07-01T18:31:51.401241Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07938456535339355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_realizar_pagamento_paciente_data_ultima_alteracao__day__5.f34d3c414c", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_realizar_pagamento_paciente\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:51.474306Z", "completed_at": "2025-07-01T18:31:51.496291Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:51.515183Z", "completed_at": "2025-07-01T18:31:51.515183Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07913041114807129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_pagamento_profissional", "compiled": true, "compiled_code": "\n\n  select \n      rpag.id_pagamento_psicologo,\n\t    rpag.data_ultima_alteracao,\n      rpag.data_brt_ultima_alteracao,\n      rpag.usuario_ultima_alteracao,\n      rpag.data_inclusao,\n      rpag.data_brt_inclusao,\n      rpag.data_pagamento,\n      rpag.data_brt_pagamento,\n      rpag.vigencia_plano,\n      rpag.data_vigencia,\n      rpag.data_brt_vigencia,\n      rpag.id_plano_psicologo,\n      rpag.codigo_cartao,\n      rpag.login_pagamento,\n      rpag.id_profissional,\n      rpag.nome_cartao,\n      rpag.numero_cartao,\n      rpag.plano,\n      rpag.flag_tipo_pagamento,\n      rpag.valor_pagamento,\n      rpag.vencimento_cartao,\n      rpag.id_assinatura,\n      rpag.id_transaction,\n      rpag.status,\n      rpag.bandeira,\n      rpag.moeda_pagamento,\n      rpag.plataforma_pagamento,\n      rpag.moeda,\n      -- rpag.data_agenda,\n      rpag.emitted_at,\n      rpag.is_delete,\n      rpag.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_realizar_pagamento_psicologo\" as rpag --", "relation_name": "\"delta\".\"silver\".\"pvv_fact_pagamento_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:51.583619Z", "completed_at": "2025-07-01T18:31:51.601710Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:51.625547Z", "completed_at": "2025-07-01T18:31:51.625547Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07422351837158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_ultimo_pagamento_plano_profissional", "compiled": true, "compiled_code": "\n\n     with realizar_pagamento as (\n        select id_pagamento_psicologo,\n               id_profissional, \n               data_pagamento,\n               data_brt_pagamento,\n               plano,\n               valor_pagamento \n          from \"delta\".\"bronze\".\"stg_pvv_realizar_pagamento_psicologo\"\n          where status = 'APROVADO'\n     ),\n     principal as (\n          select realizar_pagamento.*, \n               rank() OVER (partition by id_profissional order by data_pagamento,id_pagamento_psicologo desc) as ranking \n          from realizar_pagamento\n     )\n\n     select principal.*\n     from principal\n     where principal.ranking = 1 --", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_ultimo_pagamento_plano_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:51.695188Z", "completed_at": "2025-07-01T18:31:51.720736Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:51.736382Z", "completed_at": "2025-07-01T18:31:51.736382Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07686805725097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_realizar_pagamento_psicologo_data_ultima_alteracao__day__5.7917cf6ba3", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_realizar_pagamento_psicologo\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:51.820446Z", "completed_at": "2025-07-01T18:31:51.854796Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:51.876805Z", "completed_at": "2025-07-01T18:31:51.876805Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09975481033325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_relacao_adoecimento_laboral_prontuario_data_ultima_alteracao__day__5.7c63626d4c", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_relacao_adoecimento_laboral_prontuario\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:51.966625Z", "completed_at": "2025-07-01T18:31:52.005874Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:52.030569Z", "completed_at": "2025-07-01T18:31:52.030569Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11437654495239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_relacao_convenios_data_ultima_alteracao__day__5.9e535f560e", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_relacao_convenios\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:52.115836Z", "completed_at": "2025-07-01T18:31:52.147693Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:52.166521Z", "completed_at": "2025-07-01T18:31:52.166521Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09021663665771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_dim_plano_psicologo", "compiled": true, "compiled_code": "\n\nselect \n\t pp.id_plano_psicologo,\n\t pp.data_ultima_alteracao,\n\t pp.data_brt_ultima_alteracao,\n\t pp.usuario_ultima_alteracao,\n\t pp.id_profissional,\n\t pp.agencia,\n\t pp.agencia_dv,\n\t pp.bank_code,\n\t pp.conta,\n\t pp.conta_dv,\n\t pp.document_number, \n\t pp.nome_cartao,\n\t pp.tipo_conta,\n  \t pp.pix_tipo,\n\t pp.pix_chave, \n\t pp.dados_bancarios,\n     pp.recipient,\n\t pp.libras,\n\t pp.data_vigencia,\n\t pp.data_brt_vigencia,\n\t case \n\t    when date_diff('day',pp.data_brt_vigencia,(date_add('day', -1, current_date))) > 60 then true\n\t\twhen date_diff('day',pp.data_brt_vigencia,(date_add('day', -1, current_date))) < 60 then false\n\t\telse null\n\t end regra_60_dias,\n     case \n       \twhen date_diff('day',pp.data_brt_vigencia,(date_add('day', -1, current_date))) > 1 then date_diff('day',pp.data_brt_vigencia,(date_add('day', -1, current_date)))\n       \twhen date_diff('day',pp.data_brt_vigencia,(date_add('day', -1, current_date))) <= 0 then 0\n       \telse null\n     end dias_vigencia_vencida,\n\t date_diff('day', (date_add('day', -1, current_date)),pp.data_brt_vigencia) as dias_para_vencer_vigencia,\n\t pp.plano,\n\t pp.tempo_consulta,\n\t pp.valor_consulta,\n\t pp.flag_psicologo_particular,\n\t pp.flag_desconto_30,\n\t pp.flag_desconto_40,\n\t pp.flag_desconto_50,\n\t pp.flag_convenio_20,\n     pp.flag_convenio_25,\n     pp.flag_convenio_30,\n     pp.flag_convenio_35,\n     pp.flag_convenio_40,\n     pp.flag_convenio_50,\n     pp.flag_convenio_60, \n\t pp.valor_consulta_presencial,\n     pp.flag_voucher_gratuito,\n\t pp.envio_email_cortesia,\n\t pp.quantidade_cortesia,\n\t pp.flag_desconto_50_reais,\n\t pp.quant_desconto as quantidade_desconto,\n\t pp.tempo_consulta_cortesia,\n\t pp.flag_pausar_conta,\n\t pp.flag_tempo_antecedencia,\n     pp.flag_confirmacao_paciente,\n     pp.flag_antecipacao_convenio,\n\t pp.observacao,\n\t pp.convenio_seduc,\n\t pp.exclusivo_seduc,\n\t pp.quantidade_max_escolas_seduc,\n     pp.flag_bloqueado_seduc,\n\t pp.convenio_acao_sa,\n     pp.flag_aceito_termo_seduc,\n\t pp.data_aceito_termo_seduc,\n\t pp.data_brt_aceito_termo_seduc,\n     pp.flag_fonasa,\n\t pp.moeda,\n     pp.flag_isapre,\n\t pp.currency,\n\t pp.moeda_local,\n\t pp.moeda_local_presencial,\n\t pp.paypal_id,\n     pp.exclusivo_convenio_triagem,\n\t pp.valor_local_consulta,\n\t pp.valor_local_consulta_presencial,\n     pp.emitted_at,\n     pp.is_delete,\n     pp.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_plano_psicologo\" as pp --\ninner join \"delta\".\"bronze\".\"stg_pvv_profissionais\" as psi on psi.id_profissional = pp.id_profissional\nleft join \"delta\".\"bronze\".\"stg_pvv_seguranca_usuario\" as seg_user on seg_user.id_seguranca_usuario = psi.id_seguranca_usuario\nwhere seg_user.flag_teste = false", "relation_name": "\"delta\".\"silver\".\"pvv_dim_plano_psicologo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:52.270104Z", "completed_at": "2025-07-01T18:31:52.307958Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:52.321180Z", "completed_at": "2025-07-01T18:31:52.321180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10002374649047852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_solicitacao_tiss_data_ultima_alteracao__day__5.6752a06e19", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_solicitacao_tiss\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:52.426401Z", "completed_at": "2025-07-01T18:31:52.462732Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:52.487506Z", "completed_at": "2025-07-01T18:31:52.487506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10548615455627441, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_status_usuario_data_ultima_alteracao__day__5.d79e7ed39e", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_status_usuario\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:52.595147Z", "completed_at": "2025-07-01T18:31:52.621254Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:52.640879Z", "completed_at": "2025-07-01T18:31:52.640879Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10462355613708496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_dim_tabela_classificacao_paciente", "compiled": true, "compiled_code": "\nSELECT \n    id_tabela_classificacao_paciente, \n    data_ultima_alteracao, \n    usuario_ultima_alteracao, \n    data_inclusao, \n    data_brt_inclusao,\n    versao, \n    id_profissional, \n    id_realizar_pagamento_paciente, \n    id_paciente, \n    classificacao, \n    case \n        when classificacao = 0 then 'Leve'\n        when classificacao = 1 then 'Moderado'\n        when classificacao = 2 then 'Grave'\n        when classificacao = 3 then 'Graviss\u00edma'\n        else null\n    end nivel_tmc,\n    quantidade_consultas_indicadas, \n    emitted_at, \n    is_delete, \n    updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_tabela_classificacao_paciente\"", "relation_name": "\"delta\".\"silver\".\"pvv_dim_tabela_classificacao_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:52.717664Z", "completed_at": "2025-07-01T18:31:52.753215Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:52.777217Z", "completed_at": "2025-07-01T18:31:52.777217Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09885406494140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_tabela_classificacao_paciente_data_ultima_alteracao__day__5.7131f0b936", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_tabela_classificacao_paciente\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:52.859377Z", "completed_at": "2025-07-01T18:31:52.888202Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:52.902690Z", "completed_at": "2025-07-01T18:31:52.902690Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09080648422241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_tabela_configuracao_paciente_data_ultima_alteracao__day__5.f7076b0ff4", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_tabela_configuracao_paciente\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:52.988880Z", "completed_at": "2025-07-01T18:31:53.013415Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:53.030042Z", "completed_at": "2025-07-01T18:31:53.030042Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0802910327911377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_tb_configuracoes_pagamento_consulta_data_ultima_alteracao__day__5.519ade8d28", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_tb_configuracoes_pagamento_consulta\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:53.127514Z", "completed_at": "2025-07-01T18:31:53.158062Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:53.177121Z", "completed_at": "2025-07-01T18:31:53.177121Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09875726699829102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_pendencia_profissional_prontuario", "compiled": true, "compiled_code": "\n\n    SELECT\n        id_pendencias_profissional_prontuario, \n        data_ultima_alteracao, \n        usuario_ult_alteracao, \n        data_inclusao, \n        versao, \n        situacao, \n        data_termino, \n        motivo, \n        id_profissional, \n        row_number() OVER (partition by id_profissional order by data_ultima_alteracao desc) as ranking,\n        emitted_at,\n        is_delete,\n        updated_at\nFROM \"delta\".\"bronze\".\"stg_pvv_tb_pendencias_profissional\"", "relation_name": "\"delta\".\"silver\".\"pvv_fact_pendencia_profissional_prontuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:53.268661Z", "completed_at": "2025-07-01T18:31:53.292739Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:53.309863Z", "completed_at": "2025-07-01T18:31:53.309863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08370804786682129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_tb_pendencias_profissional_data_ultima_alteracao__day__5.60b429a5fd", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_tb_pendencias_profissional\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:53.380807Z", "completed_at": "2025-07-01T18:31:53.404317Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:53.422811Z", "completed_at": "2025-07-01T18:31:53.422811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08260178565979004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_temas_data_ultima_alteracao__day__5.e0aca5adcc", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_temas\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:53.501376Z", "completed_at": "2025-07-01T18:31:53.536146Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:53.551153Z", "completed_at": "2025-07-01T18:31:53.551153Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09178352355957031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_tipo_profissional_data_ultima_alteracao__day__5.416629850c", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_tipo_profissional\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:53.659821Z", "completed_at": "2025-07-01T18:31:53.691874Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:53.715719Z", "completed_at": "2025-07-01T18:31:53.715719Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11556363105773926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_tratamento_prontuario_data_ultima_alteracao__day__5.1aba0c0630", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_tratamento_prontuario\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:53.842153Z", "completed_at": "2025-07-01T18:31:53.873961Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:53.889574Z", "completed_at": "2025-07-01T18:31:53.889574Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09983277320861816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_voucher", "compiled": true, "compiled_code": "\n\nwith CAST_TABLE as (\n    select \n        d.id_desconto as id_voucher, \n        d.data_ultima_alteracao,\n        d.data_brt_ultima_alteracao,\n        d.usuario_ultima_alteracao,\n        d.data_inclusao,\n        d.data_brt_inclusao,\n        d.data_expiracao as data_vencimento,\n        d.data_brt_expiracao as data_brt_vencimento,\n        d.flag_em_uso,\n        null as flag_enviado_pagamento,\n        d.login_pagamento,\n        d.id_paciente,\n        d.login_profissional,\n        d.id_profissional,\n        d.num_desconto as numero_voucher,\n        d.valor_desconto as valor_voucher, \n        null AS flag_cartao,\n        d.quantidade_consultas_pacote as quantidade_uso,\n        d.quantidade_utilizado_pacote as quantidade_utilizado,\n        null AS flag_aparece_roi,\n        d.moeda,\n        d.tipo_voucher,\n        'descontos' AS tabela,\n        d.emitted_at,\n        d.is_delete,\n        d.updated_at\n    from \"delta\".\"bronze\".\"stg_pvv_desconto\" as d --\n    \n    union all\n                    \n    select \n        id_voucher,\n        vch.data_ultima_alteracao,\n        vch.data_brt_ultima_alteracao,\n        vch.usuario_ultima_alteracao,\n        vch.data_inclusao,\n        vch.data_brt_inclusao,\n        vch.data_vencimento,\n        vch.data_brt_vencimento,\n        vch.flag_em_uso,\n        vch.flag_enviado_pagamento,\n        vch.login_paciente as login_pagamento,\n        vch.id_paciente,\n        vch.login_profissional,\n        vch.id_profissional,\n        vch.numero_voucher,\n        vch.valor_voucher,\n        vch.flag_cartao,\n        vch.quantidade_uso,\n        vch.quantidade_utilizado,\n        vch.flag_aparece_roi,\n        vch.moeda,\n        null as tipo_voucher,\n        'voucher' as tabela,\n        vch.emitted_at,\n        vch.is_delete,\n        vch.updated_at\n    from \"delta\".\"bronze\".\"stg_pvv_voucher\" as vch \n)\n\nSELECT *\nFROM CAST_TABLE as ct", "relation_name": "\"delta\".\"silver\".\"pvv_fact_voucher\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:53.989292Z", "completed_at": "2025-07-01T18:31:54.018111Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:54.031714Z", "completed_at": "2025-07-01T18:31:54.031714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08786654472351074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_voucher_data_ultima_alteracao__day__5.c3e15c6f80", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_voucher\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:54.125669Z", "completed_at": "2025-07-01T18:31:54.153043Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:54.170405Z", "completed_at": "2025-07-01T18:31:54.170405Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09212422370910645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sf_dim_conta", "compiled": true, "compiled_code": "\n\nwith conta as (\nselect\nid_account,\ncliente\nfrom \"delta\".\"bronze\".\"stg_sf_account\"\n)\nSELECT \n    a.id_account,\n\ta.cliente,\n\tCASE\n\t\twhen a.id_conta_pai is null\n\t\t\tthen a.id_account\n\t\telse a.id_conta_pai\n\tEND as id_conta_pai,\n\tCASE\n\t\twhen c.cliente is null\n\t\t\tthen a.cliente\n\t\telse c.cliente\n\tEND as conta_pai,\n\ta.razao_social,\n\ta.cnpj,\n\ta.tipo,\n\ta.status_conta,\n\ta.modalidade,\n\ta.setor,\n\tCASE\n\t\twhen a.bu = 'Operadoras'\n\t\t\tthen a.modalidade\n\t\telse a.setor\n\tEND as segmento,\n\ta.codigo_ans,\n\ta.total_funcionarios,\n\tCASE\n\t\twhen a.bu = 'SMB'\n\t\t\tthen 'PME'\n\t\telse a.bu\n\tEND AS bu,\n\ta.id_cs_responsavel,\n\ta.cs_responsavel,\n\tCASE \n\t\twhen a.classificacao is null\n\t\t\tthen 'N\u00e3o Informado'\n\t\telse a.classificacao\n\tEND as classificacao,\n\ta.mes_renovacao,\n\tCASE \n\t\twhen a.mes_renovacao = 'Janeiro'\n\t\t\tthen 1\n\t\twhen a.mes_renovacao = 'Fevereiro'\n\t\t\tthen 2\n\t\twhen a.mes_renovacao = 'Mar\u00e7o'\n\t\t\tthen 3\n\t\twhen a.mes_renovacao = 'Abril'\n\t\t\tthen 4\n\t\twhen a.mes_renovacao = 'Maio'\n\t\t\tthen 5\n\t\twhen a.mes_renovacao = 'Junho'\n\t\t\tthen 6\n\t\twhen a.mes_renovacao = 'Julho'\n\t\t\tthen 7\n\t\twhen a.mes_renovacao = 'Agosto'\n\t\t\tthen 8\n\t\twhen a.mes_renovacao = 'Setembro'\n\t\t\tthen 9\n\t\twhen a.mes_renovacao = 'Outubro'\n\t\t\tthen 10\n\t\twhen a.mes_renovacao = 'Novembro'\n\t\t\tthen 11\n\t\twhen a.mes_renovacao = 'Dezembro'\n\t\t\tthen 12\n\t\telse null\n\tEND AS numero_mes_renovacao,\n\ta.mes_renovacao_outros,\n\ta.indice_contrato,\n\ta.vigencia_contrato,\n\ta.data_atualizacao\nFROM \"delta\".\"bronze\".\"stg_sf_account\" as a\nleft join conta as c on a.id_conta_pai = c.id_account\nwhere isdeleted = false", "relation_name": "\"delta\".\"silver\".\"sf_dim_conta\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:54.250402Z", "completed_at": "2025-07-01T18:31:54.272312Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:54.297623Z", "completed_at": "2025-07-01T18:31:54.297623Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08986949920654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sf_fact_oportunidade", "compiled": true, "compiled_code": "\n\nSELECT \n    id_opportunity,\n\tid_account,\n\tdata_atualizacao,\n\tcanal,\n\tid_parceiro,\n\tmodelo_parceria,\n\tiswon,\n\tdata_lancamento,\n\tdata_fechamento,\n\tid_proposta_sync\nFROM \"delta\".\"bronze\".\"stg_sf_opportunity\"\nwhere isdeleted = false\nand ranking = 1", "relation_name": "\"delta\".\"silver\".\"sf_fact_oportunidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:54.381894Z", "completed_at": "2025-07-01T18:31:54.411981Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:54.430451Z", "completed_at": "2025-07-01T18:31:54.430451Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08863306045532227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sf_fact_proposta_produto", "compiled": true, "compiled_code": "\n\nSELECT \n    qu.id_proposta,\n\tqu.id_account,\n\tqu.id_opportunity,\n\tqu.data_criacao as data_criacao_proposta,\n\tqu.data_atualizacao as data_atualizacao_proposta,\n\tqu.data_expiracao as data_expiracao_proposta,\n\tprec.id_precificacao,\n\tprec.modelo_proposta,\n\tprec.taxa_utilizacao,\n\tprec.unidade_cobranca,\n\tprec.data_atualizacao as data_atualizacao_precificacao,\n\tpp.id_produto_precificacao,\n\tpp.codigo_produto_precificacao,\n\tpp.id_produto,\n\tprod.nome_produto\nFROM \"delta\".\"bronze\".\"stg_sf_proposta\" as qu\nLEFT JOIN \"delta\".\"bronze\".\"stg_sf_precificacao\" as prec on qu.id_proposta = prec.id_proposta\nLEFT JOIN \"delta\".\"bronze\".\"stg_sf_produto_precificacao\" as pp on prec.id_precificacao = pp.id_precificacao\nLEFT JOIN \"delta\".\"bronze\".\"stg_sf_produto\" as prod on pp.id_produto = prod.id_produto", "relation_name": "\"delta\".\"silver\".\"sf_fact_proposta_produto\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:54.511903Z", "completed_at": "2025-07-01T18:31:54.539547Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:54.569565Z", "completed_at": "2025-07-01T18:31:54.569565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09222412109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.spo_fact_nilo_messages", "compiled": true, "compiled_code": "\n\nSELECT \n    patient_id, \n    patient_name, \n    cpf, \n    cohort, \n    template, \n    sent_at, \n    delivered_at, \n    seen_at, \n    answered_at, \n    status\nFROM \"delta\".\"bronze\".\"stg_spo_nilo_messages\";", "relation_name": "\"delta\".\"silver\".\"spo_fact_nilo_messages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:54.671665Z", "completed_at": "2025-07-01T18:31:54.702013Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:54.722842Z", "completed_at": "2025-07-01T18:31:54.722842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10103082656860352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tickets_pai", "compiled": true, "compiled_code": "\n\nwith fonte as (\nselect \n\tid,\n\tsource,\n\tid_custom_field,\n\tvalue,\n\temitted_at,\n\trow_number() over (partition by id, id_custom_field, source order by emitted_at desc) as rn\nfrom \"delta\".\"bronze\".\"zendesk_tickets_custom_fields\" \nwhere id_custom_field in (360046066374,1500006602902)\nand value != ''\n),\npai as(\nselect \n\tid as id_ticket,\n\tsource as ticket_source,\n\t--max(case when value like '%parent_of%' then SPLIT(value,':')[2] end) as ticket_pai_de,\n\tcast(max(case \n\t\twhen id_custom_field = 360046066374 and value like '%child_of%' then SPLIT(value,':')[2] \n\t\twhen id_custom_field = 1500006602902 then value end) as bigint) as ticket_filho_de\nfrom fonte\nwhere rn = 1\ngroup by 1,2\n)\nselect \n\tp.id_ticket,\n\tp.ticket_source,\n\tp.ticket_filho_de,\n\tmtr.full_resolution_time_in_minutes_calendar as tempo_resolucao_pai,\n\tt.created_at as created_at_pai,\n\tmtr.solved_at as solved_at_pai,\n\tt.status as status_pai\nfrom pai as p\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_ticket_metrics\" as mtr on p.ticket_filho_de = mtr.id_ticket and p.ticket_source = mtr.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_tickets\" as t on p.ticket_filho_de = t.id_ticket and p.ticket_source = t.ticket_source", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tickets_pai\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:54.819692Z", "completed_at": "2025-07-01T18:31:54.849611Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:54.877960Z", "completed_at": "2025-07-01T18:31:54.877960Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10928606986999512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_zd_tipo_usuario", "compiled": true, "compiled_code": "\n\nwith temp_tipo_usuario as (\n\tselect\n\t\tid_ticket,\n\t\t\"source\",\n\t\tmax(case when id_custom_field = 1500004336442 then value end) as tipo_usuario,\n\t\tmax(case when id_custom_field = 22659983428119 then value end) as tipo_paciente,\n\t\tmax(case when id_custom_field = 22713938447639 then value end) as tipo_profissional\n\tfrom \"delta\".\"bronze\".\"stg_zd_tickets_custom_fields\"\n\twhere id_custom_field in (1500004336442,22659983428119,22713938447639)\n\tand \"source\" = 'cnx'\n\tgroup by 1,2\n)\nselect \n*,\ncase \n\twhen tipo_usuario is null or tipo_usuario in ('','X')\n\t\tthen 'Usu\u00e1rio n\u00e3o informado'\n\twhen tipo_usuario = 'tipo_usuario_paciente' and tipo_paciente = 'unificacao_usuario_paciente_medicina'\n\t\tthen 'Paciente Medicina'\n\twhen tipo_usuario = 'tipo_usuario_paciente' and tipo_paciente = 'unificacao_usuario_paciente_psicologia'\n\t\tthen 'Paciente Sa\u00fade Mental'\n\twhen tipo_usuario = 'tipo_usuario_paciente' and (tipo_paciente is null or tipo_paciente in ('','X'))\n\t\tthen 'Paciente Sa\u00fade Mental'\n\twhen tipo_usuario = 'tipo_usuario_profissional_de_saude' and (tipo_profissional is null or tipo_profissional != 'unificacao_usuario_psicologo')\n\t\tthen 'M\u00e9dico/Especialista'\n\twhen tipo_usuario = 'tipo_usuario_profissional_de_saude' and tipo_profissional = 'unificacao_usuario_psicologo'\n\t\tthen 'Psic\u00f3logo'\n\twhen tipo_usuario = 'tipo_usuario_gestor'\n\t\tthen 'Gestor'\n\twhen tipo_usuario = 'tipo_usuario_nao_identificado'\n\t\tthen 'N\u00e3o identificado'\nend as tipo_usuario_detalhado\nfrom temp_tipo_usuario", "relation_name": "\"delta\".\"bronze\".\"stg_zd_tipo_usuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:54.962008Z", "completed_at": "2025-07-01T18:31:54.993468Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:55.019537Z", "completed_at": "2025-07-01T18:31:55.019537Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09380674362182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.zd_dim_custom_fields", "compiled": true, "compiled_code": "\n\nSELECT\n    cf.id_ticket,\n    cf.updated_at,\n    cf.id_custom_field,\n    tf.title,\n    cf.value,\n    tf.required,\n    tf.type,\n    cf.source,\n    cf.emitted_at\nFROM \"delta\".\"bronze\".\"stg_zd_tickets_custom_fields\" cf\nINNER JOIN \"delta\".\"bronze\".\"stg_zd_ticket_fields\" as tf on cf.id_custom_field = tf.id_custom_field", "relation_name": "\"delta\".\"silver\".\"zd_dim_custom_fields\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:55.101206Z", "completed_at": "2025-07-01T18:31:55.139780Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:55.159823Z", "completed_at": "2025-07-01T18:31:55.159823Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09833717346191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.zd_dim_tickets_tags", "compiled": true, "compiled_code": "\n\nSELECT\n    *\nFROM \"delta\".\"bronze\".\"stg_zd_tickets_tags\"", "relation_name": "\"delta\".\"silver\".\"zd_dim_tickets_tags\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:55.251488Z", "completed_at": "2025-07-01T18:31:55.283763Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:55.304652Z", "completed_at": "2025-07-01T18:31:55.304652Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10279440879821777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.zd_fact_tickets_comments", "compiled": true, "compiled_code": "\n\nwith anexos as (\n    select\n        a.id_ticket_comment,\n        t1.content_url,\n\t    t1.content_type,\n        t1.deleted as flag_content_deleted,\n        t1.file_name as nome_arquivo,\n        t1.malware_scan_result,\n        t1.url as json_url\n    FROM \"delta\".\"bronze\".\"stg_zd_tickets_comments\" as a\n    cross join unnest (attachments)t1\n)\nSELECT\n    tc.id_ticket_comment,\n    tc.id_ticket,\n    tc.id_autor,\n    u.nome_user as nome_autor,\n    u.email_user as email_autor,\n    u.role_user as role_autor,\n    tc.created_at,\n    tc.body,\n    tc.plain_body,\n    tc.flag_public,\n    tc.ticket_source,\n    a.content_url,\n    a.content_type,\n    a.flag_content_deleted,\n    a.nome_arquivo,\n    a.malware_scan_result,\n    a.json_url\nFROM \"delta\".\"bronze\".\"stg_zd_tickets_comments\" tc\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_users\" as u on tc.id_autor = u.id_user and tc.ticket_source = u.source\nleft join anexos as a on tc.id_ticket_comment = a.id_ticket_comment", "relation_name": "\"delta\".\"silver\".\"zd_fact_tickets_comments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:55.395422Z", "completed_at": "2025-07-01T18:31:55.432362Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:55.462350Z", "completed_at": "2025-07-01T18:31:55.462350Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11262679100036621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_dadosatestadoscustomizados", "compiled": true, "compiled_code": "\n\nWITH t1 as (\n    SELECT\n        \"_id\" as id_atestado_customizado,\n\n        cast(idatendimento as bigint) as id_atendimento,\n        cast(d.idatestado as bigint) as id_atestado,\n        c.categoria as categoria_atestado,\n        cast(idclinica as bigint) as id_clinica,\n        cast(idusuario as bigint) as id_usuario,\n        case \n            when dataregistroatestado is not null then from_iso8601_timestamp(dataregistroatestado)\n            when data_consulta is not null then from_iso8601_timestamp(data_consulta)\n            when inicio_afastamento is not null then from_iso8601_timestamp(inicio_afastamento)\n            else null\n        end as data_registro_atestado,\n        case\n            when diasdeafastamento is not null then cast(diasdeafastamento as varchar)\n            when d.dias_afastamento is not null then cast(d.dias_afastamento as varchar)\n            when c.dias_afastamento is not null then cast(c.dias_afastamento as varchar)\n            when inicio_afastamento is not null then cast(date_diff('DAY', from_iso8601_timestamp(inicio_afastamento), from_iso8601_timestamp(fim_afastamento)) + 1 as varchar)\n            else null\n        end as dias_afastamento_temp,\n        case\n            when d.cid is not null then d.cid\n            when cid_doenca is not null then cid_doenca\n            when c.cid is not null then c.cid\n            else null\n        end as cid_temp,\n        emitted_at\n    FROM\n        \"delta\".\"bronze\".\"raw_mongo_dadosatestadoscustomizados\" d\n    LEFT JOIN \"delta\".\"delta\".\"cnx_atestado_category\"  c on d.idatestado = c.idatestado\n    WHERE _ab_cdc_deleted_at is null\n),\nsort_and_rank as (\n    SELECT \n        *,\n        row_number() over (partition by id_atendimento, id_atestado order by data_registro_atestado desc) as r_number\n    FROM t1\n)\n\nSELECT \n    id_atestado_customizado,\n    id_atendimento,\n    id_atestado,\n    data_registro_atestado,\n    categoria_atestado,\n    id_clinica,\n    id_usuario,\n    if (\n        try_cast(dias_afastamento_temp as int) between 0 and 90,\n        try_cast(dias_afastamento_temp as int),\n        null ) as dias_afastamento,\n    replace(\n        regexp_extract(\n\t\t    upper(translate(cid_temp, ',.', '')),\n\t\t    '[A-Z]\\s?[0-9]{2,3}'\n\t),' ', '') as cid\nFROM \n    sort_and_rank\nWHERE r_number = 1", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_dadosatestadoscustomizados\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:55.579620Z", "completed_at": "2025-07-01T18:31:55.609555Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:55.633526Z", "completed_at": "2025-07-01T18:31:55.633526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10410785675048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_anamnesis", "compiled": true, "compiled_code": "\n\nSELECT \n    idanamnesis as id_prontuario,\n    idprofissional as id_profissional,\n    idpaciente as id_paciente,\n    id_cid,\n    habits_and_routine as habitos_rotina,\n    if(habits_and_routine  is not null, true, false) as flag_preenchimento_habitos_rotina,\n    social_life as vida_social,\n    current_state_of_health as estado_atual_saude,\n    family_context as historia_familiar,\n    similar_cases_in_the_family as casos_similares_familia,\n    chief_complaint_description as queixa_principal,\n    start_of_chief_complaint as data_inicio_queixas,\n    chief_complaint_mode as modo_queixa_principal,\n    changes_occurred as mudancas_queixas,\n    if(changes_occurred is not null, true, false) as flag_preenchimento_mudancas_queixas,\n    main_symptoms as principais_sintomas,\n    detailing_cognitive_complaints as detalhes_queixas_cognitivas,\n    detailing_emotional_affective_complaints as detalhes_queixas_emocionais,\n    detailing_psychomotricity as detalhes_psicomotricidade,\n    work_related_illness as relacao_adoecimento_laboral,\n    start_date_treatment as data_inicio_tratamento,\n    updated_at as data_hora_atualizacao,\n    date(updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_anamnesis\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_anamnesis\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:55.728673Z", "completed_at": "2025-07-01T18:31:55.759631Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:55.779675Z", "completed_at": "2025-07-01T18:31:55.779675Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10019087791442871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_anamnesis_cognitive_complaints", "compiled": true, "compiled_code": "\n\nSELECT \n    idanamnesiscognitivecomplaints as id_prontuario_queixa_cognitiva,\n    idanamnesis as id_prontuario,\n    value,\n    updated_at as data_hora_atualizacao,\n    date(updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_anamnesis_cognitive_complaints\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_anamnesis_cognitive_complaints\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:55.880622Z", "completed_at": "2025-07-01T18:31:55.912054Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:55.929076Z", "completed_at": "2025-07-01T18:31:55.929076Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09558296203613281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_anamnesis_emotional_affective_complaints", "compiled": true, "compiled_code": "\n\nSELECT \n    idanamnesisemotionalaffectivecomplaints as id_prontuario_queixa_emocional,\n    idanamnesis as id_prontuario,\n    value,\n    updated_at as data_hora_atualizacao,\n    date(updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_anamnesis_emotional_affective_complaints\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_anamnesis_emotional_affective_complaints\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:56.007626Z", "completed_at": "2025-07-01T18:31:56.049785Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:56.071601Z", "completed_at": "2025-07-01T18:31:56.071601Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09238982200622559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_anamnesis_psychomotricity", "compiled": true, "compiled_code": "\n\nSELECT \n    idanamnesispsychomotricity as id_prontuario_psicomotricidade,\n    idanamnesis as id_prontuario,\n    value,\n    updated_at as data_hora_atualizacao,\n    date(updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_anamnesis_psychomotricity\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_anamnesis_psychomotricity\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:56.152993Z", "completed_at": "2025-07-01T18:31:56.181559Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:56.199055Z", "completed_at": "2025-07-01T18:31:56.199055Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0875556468963623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_anamnesis_reason_for_illness_at_work", "compiled": true, "compiled_code": "\n\nSELECT \n    il.idanamnesisreasonforillnessatwork as id_prontuario_motivo_adoecimento_laboral,\n    il.idanamnesis as id_prontuario,\n    il.idreasonforillnessatwork as id_motivo_adoecimento_laboral,\n    re.description as motivo_adoecimento_laboral,\n    updated_at as data_hora_atualizacao,\n    date(updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_anamnesis_reason_for_illness_at_work\" as il\nleft join mysql_cnx.\"connectdoctor-prod\".reason_for_illness_at_work as re on il.idreasonforillnessatwork = re.idreasonforillnessatwork", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_anamnesis_reason_for_illness_at_work\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:56.275087Z", "completed_at": "2025-07-01T18:31:56.298190Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:56.330092Z", "completed_at": "2025-07-01T18:31:56.330092Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09360504150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_aux_atendimento_chamada", "compiled": true, "compiled_code": "\n\nSELECT \n    idatendimento as id_atendimento,\n    data_atendimento \nFROM  \"delta\".\"bronze\".\"raw_cnx_atendimento\" a", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_aux_atendimento_chamada\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:56.446840Z", "completed_at": "2025-07-01T18:31:56.481303Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:56.514506Z", "completed_at": "2025-07-01T18:31:56.514506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11869287490844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_atendimento_data_hora_ultima_atualizacao__day__5.54fb7fc5b4", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_atendimento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:56.646343Z", "completed_at": "2025-07-01T18:31:56.685530Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:56.703897Z", "completed_at": "2025-07-01T18:31:56.703897Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12212324142456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_atendimento_idatendimento.9f116391d7", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idatendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento\"\nwhere idatendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:56.811692Z", "completed_at": "2025-07-01T18:31:56.862788Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:56.884742Z", "completed_at": "2025-07-01T18:31:56.884742Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1206655502319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_twodate_raw_cnx_atendimento_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___atendimento__data_hora_ultima_atualizacao__idatendimento__data_hora_criacao.e8886614a8", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        greatest(max(data_hora_ultima_atualizacao),max(data_hora_criacao)) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento\"\n)\nselect \n    a.idatendimento\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento\" z on z.idatendimento = a.idatendimento\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idatendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:56.961712Z", "completed_at": "2025-07-01T18:31:57.005985Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:57.027195Z", "completed_at": "2025-07-01T18:31:57.027195Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1131594181060791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_atendimento_idatendimento.4c8817cdd9", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idatendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento\"\nwhere idatendimento is not null\ngroup by idatendimento\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:57.104964Z", "completed_at": "2025-07-01T18:31:57.139385Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:57.168232Z", "completed_at": "2025-07-01T18:31:57.168232Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10086369514465332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_atendimento_anexo_data_hora_ultima_atualizacao__day__5.3ce869a947", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_atendimento_anexo\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:57.248090Z", "completed_at": "2025-07-01T18:31:57.284413Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:57.295282Z", "completed_at": "2025-07-01T18:31:57.295282Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0884251594543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_atendimento_anexo_idatendimento_anexo.560807218e", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idatendimento_anexo\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_anexo\"\nwhere idatendimento_anexo is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:57.393972Z", "completed_at": "2025-07-01T18:31:57.424969Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:57.448339Z", "completed_at": "2025-07-01T18:31:57.448339Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1049654483795166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_atendimento_anexo_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___atendimento_anexo__data_hora_ultima_atualizacao__idatendimento_anexo.228d185976", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_anexo\"\n)\nselect \n    a.idatendimento_anexo\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_anexo a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_anexo\" z on z.idatendimento_anexo = a.idatendimento_anexo\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idatendimento_anexo is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:57.536053Z", "completed_at": "2025-07-01T18:31:57.558531Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:57.590499Z", "completed_at": "2025-07-01T18:31:57.590499Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10530471801757812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_atendimento_anexo_idatendimento_anexo.2b69ec6bb9", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idatendimento_anexo\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_anexo\"\nwhere idatendimento_anexo is not null\ngroup by idatendimento_anexo\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:57.682043Z", "completed_at": "2025-07-01T18:31:57.717880Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:57.738704Z", "completed_at": "2025-07-01T18:31:57.738704Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10205483436584473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_atendimento_avaliacao_data_hora_ultima_atualizacao__day__5.a67241e546", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:57.828670Z", "completed_at": "2025-07-01T18:31:57.861233Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:57.903010Z", "completed_at": "2025-07-01T18:31:57.903010Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12087583541870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_atendimento_avaliacao_idatendimento_avaliacao.eab815fe92", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idatendimento_avaliacao\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\"\nwhere idatendimento_avaliacao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:58.013443Z", "completed_at": "2025-07-01T18:31:58.042681Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:58.065402Z", "completed_at": "2025-07-01T18:31:58.065402Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09728336334228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_atendimento_avaliacao_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___atendimento_avaliacao__data_hora_ultima_atualizacao__idatendimento_avaliacao.cd33dfadb9", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\"\n)\nselect \n    a.idatendimento_avaliacao\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_avaliacao a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\" z on z.idatendimento_avaliacao = a.idatendimento_avaliacao\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idatendimento_avaliacao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:58.147739Z", "completed_at": "2025-07-01T18:31:58.174994Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:58.195946Z", "completed_at": "2025-07-01T18:31:58.195946Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08653378486633301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_atendimento_avaliacao_idatendimento_avaliacao.1e34f92bf6", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idatendimento_avaliacao\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\"\nwhere idatendimento_avaliacao is not null\ngroup by idatendimento_avaliacao\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:58.282214Z", "completed_at": "2025-07-01T18:31:58.313217Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:58.327036Z", "completed_at": "2025-07-01T18:31:58.327036Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08733487129211426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_avaliacao_item", "compiled": true, "compiled_code": "\n\n\nSELECT\n\tcast(idatendimento_avaliacao_item as bigint) as id_atendimento_avaliacao_item,\n    cast(idatendimento_avaliacao as bigint) as id_atendimento_avaliacao,\n    data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n    item_avaliado,\n    current_timestamp(3) as emitted_at \nFROM \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao_item\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_item\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:58.453205Z", "completed_at": "2025-07-01T18:31:58.482984Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:58.498038Z", "completed_at": "2025-07-01T18:31:58.498038Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10642743110656738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_atendimento_avaliacao_item_data_hora_insert__day__5.7e2d1ef779", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_insert as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao_item\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_insert as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:58.592795Z", "completed_at": "2025-07-01T18:31:58.618805Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:58.641110Z", "completed_at": "2025-07-01T18:31:58.641110Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09572672843933105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_atendimento_avaliacao_item_idatendimento_avaliacao_item.0ed199d98f", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idatendimento_avaliacao_item\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao_item\"\nwhere idatendimento_avaliacao_item is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:58.732964Z", "completed_at": "2025-07-01T18:31:58.766172Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:58.786348Z", "completed_at": "2025-07-01T18:31:58.786348Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09612798690795898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_atendimento_avaliacao_item_data_hora_insert__mysql_cnx_connectdoctor_prod___atendimento_avaliacao_item__data_hora_insert__idatendimento_avaliacao_item.c229703ceb", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_insert) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao_item\"\n)\nselect \n    a.idatendimento_avaliacao_item\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_avaliacao_item a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao_item\" z on z.idatendimento_avaliacao_item = a.idatendimento_avaliacao_item\nwhere a.data_hora_insert <= (select maior_data from max_data)\n  and z.idatendimento_avaliacao_item is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:58.870864Z", "completed_at": "2025-07-01T18:31:58.900557Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:58.923400Z", "completed_at": "2025-07-01T18:31:58.923400Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09383916854858398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_atendimento_avaliacao_item_idatendimento_avaliacao_item.e7cfe3f6e3", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idatendimento_avaliacao_item\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao_item\"\nwhere idatendimento_avaliacao_item is not null\ngroup by idatendimento_avaliacao_item\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:59.006261Z", "completed_at": "2025-07-01T18:31:59.039270Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:59.063708Z", "completed_at": "2025-07-01T18:31:59.063708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09724950790405273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_comorbidade", "compiled": true, "compiled_code": "\n\nwith t1 as(\nSELECT \n    cast(idatendimento_comorbidade as bigint) as id_atendimento_comorbidade,\n    cast(idatendimento as bigint) as id_atendimento,\n    data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n    cast(atividade_fisica as int) as atividade_fisica,\n    cast(if((etilismo = '1'),1,0)as int) as etilismo,\n    cast(if((uso_drogas = '1'),true,false) as boolean) uso_drogas,\n    cast(if((dislipdemia = '1'),true,false) as boolean) as dislipdemia,\n    cast(if((doenca_pulmonar = '1'),true,false) as boolean) as doenca_pulmonar,\n    cast(if((doenca_coronariana = '1'),true,false) as boolean) as doenca_coronariana,\n    cast(if((doenca_arterial_perif = '1'),true,false) as boolean) as doenca_arterial_perif,\n    cast(if((doenca_cerebrovascular = '1'),true,false) as boolean) as doenca_cerebrovascular,\n    cast(if((hipertencao_arterial_sis = '1'),true,false) as boolean) as hipertencao_arterial_sis,\n    cast(if((insuficiencia_cardi_congest = '1'),true,false) as boolean) as insuficiencia_cardi_congest,\n    cast(if((alergia = '1'),true,false) as boolean) as alergia,\n    alergia_descricao,\n    cast(if((hist_familiar_morte_subita = '1'),true,false) as boolean) as hist_familiar_morte_subita,\n    cast(if((diabete_melitus = '1'),true,false) as boolean) as diabete_melitus,\n    cast(if((doenca_psiquiatrica = '1'),true,false) as boolean) as doenca_psiquiatrica,\n    cast(if((medicacoes_continuas = '1'),true,false) as boolean) as medicacoes_continuas,\n    cast(sv_pa_sistolica as int) as sv_pa_sistolica,\n    cast(sv_pa_diastolica as int) as sv_pa_diastolica,\n    cast(sv_peso as decimal(10,2)) as sv_peso,\n    cast(sv_frequencia_cardiaca as int) as sv_frequencia_cardiaca,\n    cast(sv_altura as decimal(10,2)) as sv_altura,\n    cast(HDLc as decimal(10,2)) as HDLc,\n    cast(LDLc as decimal(10,2)) as LDLc,\n    cast(triglicerideo as decimal(10,2)) as triglicerideo,\n    cast(colesterol_total as decimal(10,2)) as colesterol_total,\n    cast(if((tabagismo = '1'),true,false) as boolean) as tabagismo,\n    cast(if((sv_pa_sistolica_tratada = '1'),true,false) as boolean) as sv_pa_sistolica_tratada,\n    cast(if((toma_estatina = '1'),true,false) as boolean) as toma_estatina,\n    cast(sv_peso_usual as decimal(10,2)) as sv_peso_usual,\n    cast(sv_circunferencia_abdominal as decimal(10,2)) as sv_circunferencia_abdominal,\n    cast(if((sobrepeso = '1'),true,false) as boolean) as sobrepeso,\n    cast(if((anemico = '1'),true,false) as boolean) as anemico,\n    cast(if((hiperuricemicos = '1'),true,false) as boolean) as hiperuricemicos,\n    cast(if((gestante_amamentacao = '1'),true,false) as boolean) as gestante_amamentacao,\n    cast(if((hipercolesterolemia = '1'),true,false) as boolean) as hipercolesterolemia,\n    cast(if((transtornos_alimentares = '1'),true,false) as boolean) as transtornos_alimentares,\n    cast(if((desordem_digestiva = '1'),true,false) as boolean) as desordem_digestiva,\n    desordem_digestiva_descricao,\n    cast(sv_hemoglobina_glicada as decimal(4,1)) as sv_hemoglobina_glicada,\n    cast(temperatura_corporal as int) as temperatura_corporal,\n    cast(saturacao_oxigenio as int) as saturacao_oxigenio,\n    cast(frequencia_respiratoria as int) as frequencia_respiratoria,\n    cast(glicemia_capilar as int) as glicemia_capilar,\n    cast(dor as int) as dor,\n    observacao_texto_livre,\n    cast(circunferencia_cefalica as decimal(10,2)) as circunferencia_cefalica,\n    cast(superficie_corporea as decimal(10,2)) as superficie_corporea,\n    sv_pa_sistolica_und,\n    sv_pa_diastolica_und,\n    sv_frequencia_cardiaca_und,\n    sv_hemoglobina_glicada_und,\n    sv_frequencia_respiratoria_und,\n    glicemia_capilar_und,\n    circunferencia_cefalica_und,\n    sv_peso_und,\n    sv_altura_und,\n    temperatura_corporal_und,\n    saturacao_oxigenio_und,\n    dor_und,\n    superficie_corporea_und,\n    sv_circunferencia_abdominal_und,\n    HDLc_und,\n    LDLc_und,\n    triglicerideo_und,\n    colesterol_total_und,\n    cast(if((flag_afirmo_que_paciente_nao_tem_outras_comorbidades = '1'),true,false) as boolean) as flag_afirmo_que_paciente_nao_tem_outras_comorbidades,\n    cast(if((insuficiencia_cardiaca = '1'),true,false) as boolean) as flag_insuficiencia_cardiaca,\n    cast(if((dpoc = '1'),true,false) as boolean) as flag_dpoc,\n    cast(if((neoplasias = '1'),true,false) as boolean) as flag_neoplasias,\n    cast(if((flag_paciente_nega_comorbidades = '1'),true,false) as boolean) as flag_paciente_nega_comorbidades,\n    data_sv_pa_sistolica,\n    data_sv_pa_diastolica,\n    data_sv_circunferencia_abdominal,\n    data_sv_hemoglobina_glicada,\n    data_glicemia_capilar,\n    data_HDLc,\n    data_LDLc,\n    data_triglicerideo,\n    data_colesterol_total,\n    current_timestamp(3) as emitted_at,\n    row_number() over (partition by idatendimento order by data_hora_ultima_atualizacao desc) as rn\nFROM  \"delta\".\"bronze\".\"raw_cnx_atendimento_comorbidade\"\n)\n\nSELECT \n    id_atendimento_comorbidade,\n    id_atendimento,\n    data_hora_ultima_atualizacao,\n    data_brt_ultima_atualizacao,\n    data_hora_insert,\n    data_brt_insert,\n    atividade_fisica,\n    etilismo,\n    uso_drogas,\n    dislipdemia,\n    doenca_pulmonar,\n    doenca_coronariana,\n    doenca_arterial_perif,\n    doenca_cerebrovascular,\n    hipertencao_arterial_sis,\n    insuficiencia_cardi_congest,\n    alergia,\n    alergia_descricao,\n    hist_familiar_morte_subita,\n    diabete_melitus,\n    doenca_psiquiatrica,\n    medicacoes_continuas,\n    sv_pa_sistolica,\n    sv_pa_diastolica,\n    sv_peso,\n    sv_frequencia_cardiaca,\n    sv_altura,\n    HDLc,\n    LDLc,\n    triglicerideo,\n    colesterol_total,\n    tabagismo,\n    sv_pa_sistolica_tratada,\n    toma_estatina,\n    sv_peso_usual,\n    sv_circunferencia_abdominal,\n    sobrepeso,\n    anemico,\n    hiperuricemicos,\n    gestante_amamentacao,\n    hipercolesterolemia,\n    transtornos_alimentares,\n    desordem_digestiva,\n    desordem_digestiva_descricao,\n    sv_hemoglobina_glicada,\n    temperatura_corporal,\n    saturacao_oxigenio,\n    frequencia_respiratoria,\n    glicemia_capilar,\n    dor,\n    observacao_texto_livre,\n    circunferencia_cefalica,\n    superficie_corporea,\n    sv_pa_sistolica_und,\n    sv_pa_diastolica_und,\n    sv_frequencia_cardiaca_und,\n    sv_hemoglobina_glicada_und,\n    sv_frequencia_respiratoria_und,\n    glicemia_capilar_und,\n    circunferencia_cefalica_und,\n    sv_peso_und,\n    sv_altura_und,\n    temperatura_corporal_und,\n    saturacao_oxigenio_und,\n    dor_und,\n    superficie_corporea_und,\n    sv_circunferencia_abdominal_und,\n    HDLc_und,\n    LDLc_und,\n    triglicerideo_und,\n    colesterol_total_und,\n    flag_afirmo_que_paciente_nao_tem_outras_comorbidades,\n    flag_insuficiencia_cardiaca,\n    flag_dpoc,\n    flag_neoplasias,\n    flag_paciente_nega_comorbidades,\n    data_sv_pa_sistolica,\n    data_sv_pa_diastolica,\n    data_sv_circunferencia_abdominal,\n    data_sv_hemoglobina_glicada,\n    data_glicemia_capilar,\n    data_HDLc,\n    data_LDLc,\n    data_triglicerideo,\n    data_colesterol_total,\n    emitted_at\nFROM t1\nwhere rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_comorbidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:59.161657Z", "completed_at": "2025-07-01T18:31:59.194906Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:59.214021Z", "completed_at": "2025-07-01T18:31:59.214021Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10427999496459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_atendimento_comorbidade_data_hora_ultima_atualizacao__day__5.2eec4b96bc", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_atendimento_comorbidade\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:59.297844Z", "completed_at": "2025-07-01T18:31:59.328091Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:59.346354Z", "completed_at": "2025-07-01T18:31:59.346354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08640575408935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_atendimento_comorbidade_idatendimento_comorbidade.bbe4c5acac", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idatendimento_comorbidade\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_comorbidade\"\nwhere idatendimento_comorbidade is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:59.420191Z", "completed_at": "2025-07-01T18:31:59.452013Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:59.474024Z", "completed_at": "2025-07-01T18:31:59.474024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09135317802429199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_atendimento_comorbidade_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___atendimento_comorbidade__data_hora_ultima_atualizacao__idatendimento_comorbidade.be7d2d7fd0", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_comorbidade\"\n)\nselect \n    a.idatendimento_comorbidade\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_comorbidade a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_comorbidade\" z on z.idatendimento_comorbidade = a.idatendimento_comorbidade\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idatendimento_comorbidade is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:59.558552Z", "completed_at": "2025-07-01T18:31:59.584573Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:59.603196Z", "completed_at": "2025-07-01T18:31:59.603196Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08684587478637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_atendimento_comorbidade_idatendimento_comorbidade.e41d669b94", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idatendimento_comorbidade\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_comorbidade\"\nwhere idatendimento_comorbidade is not null\ngroup by idatendimento_comorbidade\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:59.687093Z", "completed_at": "2025-07-01T18:31:59.708216Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:59.738612Z", "completed_at": "2025-07-01T18:31:59.738612Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09534358978271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_diagnostico", "compiled": true, "compiled_code": "\n\n\nSELECT \n    cast(idatendimento as bigint) as id_atendimento, \n    cast(iddoenca as bigint) as id_doenca,\n    data_hora,\n    date(data_hora at time zone 'America/Sao_Paulo') as data_brt_hora,\n    data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n    flag_situacao as situacao_atendimento_diagnostico,\n    flag_relevancia as relevancia_atendimento_diagnostico,\n    flag_status as status_atendimento_diagnostico,\n    current_timestamp(3) as emitted_at \nFROM  \"delta\".\"bronze\".\"raw_cnx_atendimento_diagnostico\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_diagnostico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:59.840577Z", "completed_at": "2025-07-01T18:31:59.879389Z"}, {"name": "execute", "started_at": "2025-07-01T18:31:59.895224Z", "completed_at": "2025-07-01T18:31:59.895224Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09853005409240723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_raw_cnx_atendimento_diagnostico_idatendimento__iddoenca.a7aebfdaa7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        idatendimento, iddoenca\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_diagnostico\"\n    group by idatendimento, iddoenca\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:31:59.988116Z", "completed_at": "2025-07-01T18:32:00.005430Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:00.041085Z", "completed_at": "2025-07-01T18:32:00.041085Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0972132682800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_atendimento_diagnostico_data_hora_insert__mysql_cnx_connectdoctor_prod___atendimento_diagnostico__data_hora_insert__idatendimento.52af9bf685", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_insert) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_diagnostico\"\n)\nselect \n    a.idatendimento\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_diagnostico a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_diagnostico\" z on z.idatendimento = a.idatendimento\nwhere a.data_hora_insert <= (select maior_data from max_data)\n  and z.idatendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:00.146407Z", "completed_at": "2025-07-01T18:32:00.162486Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:00.195553Z", "completed_at": "2025-07-01T18:32:00.195553Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09980130195617676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_informacao_complementar", "compiled": true, "compiled_code": "\n\n\nSELECT \n    cast(idatendimento as bigint) as id_atendimento,\n    cast(if((flag_aps = '1'),true,false) as boolean) as flag_aps_atendimento,\n    data_invalidacao as data_hora_invalidacao,\n    date(data_invalidacao at time zone 'America/Sao_Paulo') as data_brt_invalidacao,\n    data_hora_criacao,\n    date(data_hora_criacao at time zone 'America/Sao_Paulo') as data_brt_hora_criacao,\n    data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    justificativa_invalidacao,\n    id_usuario_resp_invalidacao,\n    cast(if((flag_enviado_alerta_24 = '1'),true,false) as boolean) as flag_enviado_alerta_24,\n    cast(if((flag_enviado_alerta_12 = '1'),true,false) as boolean) as flag_enviado_alerta_12,\n    data_hora_reagendamento,\n    date(data_hora_reagendamento at time zone 'America/Sao_Paulo') as data_brt_reagendamento,\n    flag_atendimento_excecao,\n    id_plano_clinica_paciente,\n    ic.idrepasse as id_repasse,\n    r.valor as valor_repasse,\n    ic.origem_agendamento,\n    current_timestamp(3) as emitted_at \nFROM  \"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\" as ic\nleft join mysql_cnx.\"connectdoctor-prod\".repasses as r on ic.idrepasse = r.idrepasse", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_informacao_complementar\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:00.275890Z", "completed_at": "2025-07-01T18:32:00.312537Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:00.335866Z", "completed_at": "2025-07-01T18:32:00.335866Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09591412544250488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_atendimento_informacao_complementar_data_hora_ultima_atualizacao__day__5.827e45b3a8", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:00.431096Z", "completed_at": "2025-07-01T18:32:00.463912Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:00.495803Z", "completed_at": "2025-07-01T18:32:00.495803Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.110992431640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_atendimento_informacao_complementar_idatendimento.843826ad08", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idatendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\"\nwhere idatendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:00.585912Z", "completed_at": "2025-07-01T18:32:00.617057Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:00.642376Z", "completed_at": "2025-07-01T18:32:00.642376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09905481338500977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_twodate_raw_cnx_atendimento_informacao_complementar_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___atendimento_informacao_complementar__data_hora_ultima_atualizacao__idatendimento__data_hora_criacao.92a4bd7065", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        greatest(max(data_hora_ultima_atualizacao),max(data_hora_criacao)) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\"\n)\nselect \n    a.idatendimento\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_informacao_complementar a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\" z on z.idatendimento = a.idatendimento\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idatendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:00.726047Z", "completed_at": "2025-07-01T18:32:00.757611Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:00.785133Z", "completed_at": "2025-07-01T18:32:00.785133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10010933876037598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_atendimento_informacao_complementar_idatendimento.01380e7327", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idatendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_informacao_complementar\"\nwhere idatendimento is not null\ngroup by idatendimento\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:00.869846Z", "completed_at": "2025-07-01T18:32:00.900099Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:00.915916Z", "completed_at": "2025-07-01T18:32:00.915916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09472990036010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_profissional", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(idatendimento as bigint) as id_atendimento,\n    cast(idusuario_profissional as bigint) as id_usuario,\n    data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    data_hora_criacao,\n    date(data_hora_criacao at time zone 'America/Sao_Paulo') as data_brt_criacao,\n    cast(if((flag_responsavel = '1'),true,false) as boolean) as flag_responsavel,\n    current_timestamp(3) as emitted_at \nFROM  \"delta\".\"bronze\".\"raw_cnx_atendimento_profissional\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:01.011733Z", "completed_at": "2025-07-01T18:32:01.029939Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:01.060680Z", "completed_at": "2025-07-01T18:32:01.060680Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09306740760803223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_raw_cnx_atendimento_profissional_idatendimento__flag_responsavel.e806dce466", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        idatendimento, flag_responsavel\n    from (select * from \"delta\".\"bronze\".\"raw_cnx_atendimento_profissional\" where flag_responsavel = '1') dbt_subquery\n    group by idatendimento, flag_responsavel\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:01.148820Z", "completed_at": "2025-07-01T18:32:01.185744Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:01.197769Z", "completed_at": "2025-07-01T18:32:01.197769Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09065723419189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_raw_cnx_atendimento_profissional_idatendimento__idusuario_profissional.e77f565a17", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        idatendimento, idusuario_profissional\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_profissional\"\n    group by idatendimento, idusuario_profissional\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:01.292712Z", "completed_at": "2025-07-01T18:32:01.318047Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:01.339836Z", "completed_at": "2025-07-01T18:32:01.339836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08776712417602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_atendimento_profissional_idatendimento.3151c6f598", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idatendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_profissional\"\nwhere idatendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:01.458652Z", "completed_at": "2025-07-01T18:32:01.499499Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:01.543652Z", "completed_at": "2025-07-01T18:32:01.543652Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1512129306793213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_atendimento_profissional_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___atendimento_profissional__data_hora_ultima_atualizacao__idatendimento.d5879554b8", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_profissional\"\n)\nselect \n    a.idatendimento\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_profissional a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_profissional\" z on z.idatendimento = a.idatendimento\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idatendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:01.656331Z", "completed_at": "2025-07-01T18:32:01.686438Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:01.713561Z", "completed_at": "2025-07-01T18:32:01.713561Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11431694030761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(a.idatendimento as BIGINT) as id_atendimento,\n    cast(p.id_atendimento_pviva as BIGINT) as id_atendimento_pv,\n    cast(a.idclinica as BIGINT) as id_clinica,\n    cast(a.idpaciente as BIGINT) as id_paciente,\n    a.data_inicio_atendimento,\n    date(a.data_inicio_atendimento at time zone 'America/Sao_Paulo') as data_brt_inicio_atendimento,\n    a.data_atendimento,\n    date(a.data_atendimento at time zone 'America/Sao_Paulo') as data_brt_atendimento,\n    a.data_cancelamento,\n    date(a.data_cancelamento at time zone 'America/Sao_Paulo') as data_brt_cancelamento,\n    a.data_conclusao,\n    date(a.data_conclusao at time zone 'America/Sao_Paulo') as data_brt_conclusao,\n    a.data_solicitacao_parecer,\n    date(a.data_solicitacao_parecer at time zone 'America/Sao_Paulo') as data_brt_solicitacao_parecer,\n    cast(a.idconvenio as BIGINT) as id_convenio,\n    a.status,\n    CASE\n        WHEN a.desfecho NOT IN ('ATENDIMENTO_INTERROMPIDO', 'DEMONSTRACAO', 'ATENDIMENTO_INVALIDADO', 'PACIENTE_FALTOU') and a.status = 'CONCLUIDO'\n            then 'Realizado'\n        WHEN a.status = 'CANCELADO'\n            then 'Cancelado'\n        WHEN a.desfecho = 'PACIENTE_FALTOU'\n            then 'No show paciente'\n        WHEN a.status = 'PENDENTE' and (a.data_atendimento >= now()) \n            then 'Agendado'\n        WHEN a.status = 'PENDENTE' and (a.data_atendimento < now())\n            then 'Pendente'\n        WHEN a.status = 'AGUARDANDO_PARECER'\n            then 'Pendente'\n         WHEN a.desfecho IN ('ATENDIMENTO_INTERROMPIDO', 'DEMONSTRACAO', 'ATENDIMENTO_INVALIDADO') or a.desfecho is null\n            then 'Inv\u00e1lido'\n        else a.status\n    end as status_atendimento,\n    CASE WHEN a.desfecho = 'PACIENTE_FALTOU' THEN true ELSE false END AS flag_noshow,\n    a.desfecho,\n    a.categoria_cancelamento,\n    a.tipo_chamada_desejado,\n    cast(if((a.flag_atendimento_medico_paciente = '1'),true,false) as boolean) as flag_atendimento_medico_paciente,\n    a.formato_consulta,\n    IF(idfila IS NULL, 'SEM_FILA', 'COM_FILA') AS origem_fila,\n    a.sla_fila/60 AS fila_min,\n    a.sla_fila,\n    a.idfila as id_fila,\n    a.data_entrada_fila,\n    date(a.data_entrada_fila at time zone 'America/Sao_Paulo') as data_brt_entrada_fila,\n    a.orientacao_paciente,\n    cast(a.idusuario_cancelamento as BIGINT) as id_usuario_cancelamento,\n    a.motivo_atendimento_interrompido,\n    a.motivo_cancelamento,\n    a.objetivo_atendimento,\n    cast(a.idepidemia as BIGINT) as id_epidemia,\n    a.epidemia_relato_medico,\n    cast(if((a.flag_possui_afastamento = '1'),true,false) as boolean) as flag_possui_afastamento,\n    a.data_inicio_afastamento,\n    date(a.data_inicio_afastamento at time zone 'America/Sao_Paulo') as data_brt_inicio_afastamento,\n    a.data_fim_afastamento,\n    date(a.data_fim_afastamento at time zone 'America/Sao_Paulo') as data_brt_fim_afastamento,\n    cast(a.idconvenio_plano as bigint) as id_convenio_plano,\n    a.carteira_convenio,\n    a.origem_atendimento,\n    a.modo_atendimento,\n    a.usuario_responsavel_criacao,\n    cast(if((a.flag_consulta_confirmada = '1'),true,false) as boolean) as flag_consulta_confirmada,\n    a.data_hora_confirmacao,\n    date(a.data_hora_confirmacao at time zone 'America/Sao_Paulo') as data_brt_confirmacao,\n    a.idtriagem as id_triagem,\n    cast(if((a.flag_registro_invalidado = '1'),true,false) as boolean) as flag_registro_invalidado,\n    a.data_hora_ultima_atualizacao,\n    date(a.data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    a.data_hora_criacao as data_agendamento,\n    date(a.data_hora_criacao at time zone 'America/Sao_Paulo') as data_brt_agendamento,\n    hour(a.data_inicio_atendimento) as hora_atendimento,\n    a.historia_doenca_atual as historia_doenca_atual,\n    a.historia_familia as historia_familia,\n    a.medicamentos_em_uso,\n    a.relato_paciente,\n    a.parecer_clinico,\n    a.parecer_especialista,\n    a.medicacao_prescrita,\n    cast(if((a.flag_negar_alergia = '1'),true,false) as boolean) as flag_negar_alergia,\n    cast(if((a.flag_negar_epidemia = '1'),true,false) as boolean) as flag_negar_epidemia,\n    cast(if((idusuario_conclusao = 1),true,false) as boolean) as flag_conclusao_robo,\n    a.data_sintoma,\n    a.status_faturamento,\n    current_timestamp(3) as emitted_at \nFROM \"delta\".\"bronze\".\"raw_cnx_atendimento\" as a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\" as p on a.idatendimento = p.id_atendimento", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:01.804087Z", "completed_at": "2025-07-01T18:32:01.839511Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:01.860882Z", "completed_at": "2025-07-01T18:32:01.860882Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10455155372619629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_atendimento_pviva_created_at__day__5.c8f6fc9122", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(created_at as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\"\n    where\n        -- to exclude erroneous future dates\n        cast(created_at as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:01.972803Z", "completed_at": "2025-07-01T18:32:02.012528Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:02.030669Z", "completed_at": "2025-07-01T18:32:02.030669Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1111607551574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_atendimento_pviva_id_atendimento.4e11e29839", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_atendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\"\nwhere id_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:02.138466Z", "completed_at": "2025-07-01T18:32:02.175930Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:02.205579Z", "completed_at": "2025-07-01T18:32:02.205579Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12015128135681152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_twodate_raw_cnx_atendimento_pviva_updated_at__mysql_cnx_connectdoctor_prod___atendimento_pviva__updated_at__id_atendimento__created_at.ba60d8fd54", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        greatest(max(updated_at),max(created_at)) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\"\n)\nselect \n    a.id_atendimento\nfrom mysql_cnx.\"connectdoctor-prod\".atendimento_pviva a\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\" z on z.id_atendimento = a.id_atendimento\nwhere a.updated_at <= (select maior_data from max_data)\n  and z.id_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:02.307570Z", "completed_at": "2025-07-01T18:32:02.342834Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:02.367784Z", "completed_at": "2025-07-01T18:32:02.367784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1124565601348877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_atendimento_pviva_id_atendimento.391b4c4d48", "compiled": true, "compiled_code": "\n\n\n\nselect\n    id_atendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\"\nwhere id_atendimento is not null\ngroup by id_atendimento\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:02.465803Z", "completed_at": "2025-07-01T18:32:02.499781Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:02.521837Z", "completed_at": "2025-07-01T18:32:02.521837Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10632729530334473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_tiss", "compiled": true, "compiled_code": "\n\nSELECT\n     CAST(id AS BIGINT) AS id_atendimento_tiss\n   , CAST(data_inclusao AS TIMESTAMP(3) WITH TIME ZONE) AS data_inclusao\n   , DATE(data_inclusao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_inclusao\n   , CAST(data_ultima_alteracao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_alteracao\n   , DATE(data_ultima_alteracao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_ultima_alteracao\n   , usuario_ultima_alteracao\n   , versao\n   , CAST(clinica_id AS BIGINT) AS id_clinica_tiss\n   , CAST(beneficiario_id AS BIGINT) AS id_beneficiario_tiss\n   , CAST(profissional_id AS BIGINT) AS id_profissional_tiss\n   , CAST(encaminhamento_medico_id AS BIGINT) AS id_encaminhamento_medico_tiss\n   , CAST(solicitacao_tiss_id AS BIGINT) AS id_solicitacao_tiss\n   , CAST(id_atendimento_prestador AS BIGINT) AS id_atendimento_prestador_tiss\n   , CAST(primeiro_atendimento AS BOOLEAN) AS flag_primeiro_atendimento\n   , CAST(data_atendimento AS TIMESTAMP(3) WITH TIME ZONE) AS data_atendimento\n   , DATE(data_atendimento AT TIME ZONE 'America/Sao_Paulo') AS data_brt_atendimento\n   , tipo_identificacao_beneficiario\n   , status_atendimento\n   , motivo_cancelamento\n   , fluxo_atendimento\n   , CAST(profissional_chamou_antes_horario AS BOOLEAN) AS flag_profissional_chamou_antes_horario\n   , CAST(solicita_guia_sem_atendimento AS BOOLEAN) AS flag_solicita_guia_sem_atendimento\n   , desfecho\n   , fluxo\n   , sequencial_guia_prestador\n   , CAST(data_conclusao AS TIMESTAMP(3) WITH TIME ZONE) AS data_conclusao\n   , DATE(data_conclusao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_conclusao\n   , CAST(data_inicio AS TIMESTAMP(3) WITH TIME ZONE) AS data_inicio\n   , DATE(data_inicio AT TIME ZONE 'America/Sao_Paulo') AS data_brt_inicio\n   , CAST(data_fim AS TIMESTAMP(3) WITH TIME ZONE) AS data_fim\n   , DATE(data_fim AT TIME ZONE 'America/Sao_Paulo') AS data_brt_fim\n   , CURRENT_TIMESTAMP(3) AS emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_atendimento_tiss\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:02.622035Z", "completed_at": "2025-07-01T18:32:02.654214Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:02.677345Z", "completed_at": "2025-07-01T18:32:02.677345Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10395598411560059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_beneficiario_tiss", "compiled": true, "compiled_code": "\n\nSELECT\n      CAST(id AS BIGINT) AS id_beneficiario_tiss\n\t, CAST(data_inclusao AS TIMESTAMP(3) WITH TIME ZONE) AS data_inclusao\n\t, DATE(data_inclusao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_inclusao\n\t, CAST(data_ultima_alteracao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_alteracao\n\t, DATE(data_ultima_alteracao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_ultima_alteracao\n\t, usuario_ultima_alteracao\n\t, versao\n\t, CAST(id_paciente_prestador AS BIGINT) AS id_paciente_prestador_tiss\n\t, nome as nome_paciente\n\t, regexp_replace(\"cpf\", '[^0-9]', '') AS cpf_beneficiario_tiss\n\t, DATE(data_nascimento) AS data_nascimento\n\t, numero_carteira AS numero_carteira_beneficiario_tiss\n\t, registro_ans\n\t, cid\n    , CURRENT_TIMESTAMP(3) AS emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_beneficiario_tiss\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_beneficiario_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:02.783391Z", "completed_at": "2025-07-01T18:32:02.814423Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:02.843021Z", "completed_at": "2025-07-01T18:32:02.843021Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11723923683166504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_anexo", "compiled": true, "compiled_code": "\n\nwith principal as\n(\nSELECT \n    cast(aa.idatendimento as bigint) as id_atendimento,\n    aa.data_hora_inclusao,\n    c.data_inicio_realizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_atendimento_anexo\" aa\nleft join \"delta\".\"bronze\".\"raw_cnx_chamada\" c on cast(aa.idatendimento as bigint) = cast(c.idatendimento as bigint)\n)\nselect\n\tid_atendimento,\n\ttrue as flag_anexo_atendimento,\n\tCOUNT(IF(data_hora_inclusao < data_inicio_realizacao, 1, NULL)) AS qtd_anexo_pre_atendimento,\n\tCOUNT(IF(data_hora_inclusao > data_inicio_realizacao, 1, NULL)) AS qtd_anexo_pos_atendimento,\n\tCOUNT(*) AS qtd_anexos\nfrom principal\ngroup by id_atendimento", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_anexo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:02.948482Z", "completed_at": "2025-07-01T18:32:02.985034Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:03.013873Z", "completed_at": "2025-07-01T18:32:03.013873Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11657214164733887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_chamada", "compiled": true, "compiled_code": "\n\nSELECT \n    cast(idchamada as bigint) as id_chamada,\n    cast(idatendimento as bigint) as id_atendimento,\n    data_inicio_realizacao as data_inicio_chamada,\n    data_fim_realizacao as data_fim_chamada,\n    (date_diff('second', data_inicio_realizacao, data_fim_realizacao)) as tempo_chamada,\n    data_agendamento as data_chamada,\n    tipo_servico_meeting,\n    data_hora_ultima_atualizacao as data_hora_ultima_atualizacao_chamada,\n    data_hora_criacao as data_hora_criacao_chamada,\n    current_timestamp(3) as emitted_at \nFROM  \"delta\".\"bronze\".\"raw_cnx_chamada\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_chamada\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:03.105183Z", "completed_at": "2025-07-01T18:32:03.143068Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:03.168976Z", "completed_at": "2025-07-01T18:32:03.168976Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11037850379943848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_chamada_data_hora_ultima_atualizacao__day__5.c77bbd9c8b", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_chamada\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:03.265907Z", "completed_at": "2025-07-01T18:32:03.299574Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:03.325767Z", "completed_at": "2025-07-01T18:32:03.325767Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11524200439453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_chamada_idchamada.e425930687", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idchamada\nfrom \"delta\".\"bronze\".\"raw_cnx_chamada\"\nwhere idchamada is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:03.428837Z", "completed_at": "2025-07-01T18:32:03.462382Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:03.486209Z", "completed_at": "2025-07-01T18:32:03.486209Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1049039363861084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_chamada_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___chamada__data_hora_ultima_atualizacao__idchamada.aef2c15c16", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_chamada\"\n)\nselect \n    a.idchamada\nfrom mysql_cnx.\"connectdoctor-prod\".chamada a\nleft join \"delta\".\"bronze\".\"raw_cnx_chamada\" z on z.idchamada = a.idchamada\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idchamada is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:03.585452Z", "completed_at": "2025-07-01T18:32:03.619177Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:03.645108Z", "completed_at": "2025-07-01T18:32:03.645108Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11318492889404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_chamada_idchamada.b02fefd251", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idchamada\nfrom \"delta\".\"bronze\".\"raw_cnx_chamada\"\nwhere idchamada is not null\ngroup by idchamada\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:03.748306Z", "completed_at": "2025-07-01T18:32:03.784147Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:03.811781Z", "completed_at": "2025-07-01T18:32:03.811781Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1138920783996582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_chamada_eventos", "compiled": true, "compiled_code": "\n\n\nSELECT\n      ce._id\n    , ce.callid\n    , ce.clinicid\n    , ce.appointmentid\n    , ce.meetservice\n    , ce.datetime\n    , ce.generaluserinformation\n    , expd.*\n    , CURRENT_TIMESTAMP(3) as emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_chamada_eventos\" AS ce, UNNEST(generaluserinformation) AS expd", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_chamada_eventos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:03.931685Z", "completed_at": "2025-07-01T18:32:03.965568Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:03.995553Z", "completed_at": "2025-07-01T18:32:03.995553Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12201857566833496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_chamada_log_paciente", "compiled": true, "compiled_code": "\n\nwith chamada_paciente as(\nSELECT DISTINCT\n    idchamada as id_chamada,\n    cast(json_extract(json_parse(detalhes), '$.userType') AS VARCHAR) AS usertype\nFROM \"delta\".\"bronze\".\"raw_cnx_chamada_log\"\nWHERE starts_with(detalhes, '{')\nAND evento IN(\n    'connectionDestroyed.networkDisconnected',\n    'connectionDestroyed.forceDisconnected',\n    'connectionDestroyed.mediaIdle',\n    'connectionCreated',\n    'connectionDestroyed.clientDisconnected')\nand cast(json_extract(json_parse(detalhes), '$.userType') AS VARCHAR) = 'PATIENT'\n),\ndados_chamada as (\nSELECT\n    idchamada as id_chamada,\n    evento,\n    dataHoraEvento,\n    cast(json_extract(json_parse(detalhes), '$.userId') AS VARCHAR) AS userid,\n    cast(json_extract(json_parse(detalhes), '$.patientId') AS VARCHAR) AS patientid,\n    cast(json_extract(json_parse(detalhes), '$.professionalId') AS VARCHAR) AS professionalid,\n    cast(json_extract(json_parse(detalhes), '$.appointmentId') AS VARCHAR) AS appointmentid,\n    cast(json_extract(json_parse(detalhes), '$.userType') AS VARCHAR) AS usertype\nFROM \"delta\".\"bronze\".\"raw_cnx_chamada_log\"\nWHERE starts_with(detalhes, '{')\nAND evento IN(\n    'connectionDestroyed.networkDisconnected',\n    'connectionDestroyed.forceDisconnected',\n    'connectionDestroyed.mediaIdle',\n    'connectionCreated',\n    'connectionDestroyed.clientDisconnected')\nand cast(json_extract(json_parse(detalhes), '$.userType') AS VARCHAR) = 'PATIENT'\n)\nselect \ncp.id_chamada,\ncp.usertype,\nmin(case when evento = 'connectionCreated' then datahoraevento end) as data_hora_entrada_paciente,\nmax(case when starts_with(evento,'connectionDestroyed') then datahoraevento end) as data_hora_saida_paciente,\n'RESPONDIDA' as status\nfrom chamada_paciente as cp\nleft join dados_chamada as dc on cp.id_chamada = dc.id_chamada and cp.usertype = dc.usertype\ngroup by 1,2", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_chamada_log_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:04.107956Z", "completed_at": "2025-07-01T18:32:04.137817Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:04.163246Z", "completed_at": "2025-07-01T18:32:04.163246Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10135436058044434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_chamada_log_profissional", "compiled": true, "compiled_code": "\n\nwith chamada_paciente as(\nSELECT DISTINCT\n    idchamada as id_chamada,\n    cast(json_extract(json_parse(detalhes), '$.userType') AS VARCHAR) AS usertype\nFROM \"delta\".\"bronze\".\"raw_cnx_chamada_log\"\nWHERE starts_with(detalhes, '{')\nAND evento IN(\n    'connectionDestroyed.networkDisconnected',\n    'connectionDestroyed.forceDisconnected',\n    'connectionDestroyed.mediaIdle',\n    'connectionCreated',\n    'connectionDestroyed.clientDisconnected')\nand cast(json_extract(json_parse(detalhes), '$.userType') AS VARCHAR) = 'PROFESSIONAL'\n),\ndados_chamada as (\nSELECT\n    idchamada as id_chamada,\n    evento,\n    dataHoraEvento,\n    cast(json_extract(json_parse(detalhes), '$.userId') AS VARCHAR) AS userid,\n    cast(json_extract(json_parse(detalhes), '$.patientId') AS VARCHAR) AS patientid,\n    cast(json_extract(json_parse(detalhes), '$.professionalId') AS VARCHAR) AS professionalid,\n    cast(json_extract(json_parse(detalhes), '$.appointmentId') AS VARCHAR) AS appointmentid,\n    cast(json_extract(json_parse(detalhes), '$.userType') AS VARCHAR) AS usertype\nFROM \"delta\".\"bronze\".\"raw_cnx_chamada_log\"\nWHERE starts_with(detalhes, '{')\nAND evento IN(\n    'connectionDestroyed.networkDisconnected',\n    'connectionDestroyed.forceDisconnected',\n    'connectionDestroyed.mediaIdle',\n    'connectionCreated',\n    'connectionDestroyed.clientDisconnected')\nand cast(json_extract(json_parse(detalhes), '$.userType') AS VARCHAR) = 'PROFESSIONAL'\n)\nselect \ncp.id_chamada,\ncp.usertype,\nmin(case when evento = 'connectionCreated' then datahoraevento end) as data_hora_entrada_profissional,\nmax(case when starts_with(evento,'connectionDestroyed') then datahoraevento end) as data_hora_saida_profissional,\n'RESPONDIDA' as status\nfrom chamada_paciente as cp\nleft join dados_chamada as dc on cp.id_chamada = dc.id_chamada and cp.usertype = dc.usertype\ngroup by 1,2", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_chamada_log_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:04.273219Z", "completed_at": "2025-07-01T18:32:04.307131Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:04.332227Z", "completed_at": "2025-07-01T18:32:04.332227Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11918807029724121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_chamada_participante", "compiled": true, "compiled_code": "\n\nwith\n\tchamada_participante as (\n\t\tselect \n\t\t\tcast(idchamada_participante as bigint) as id_chamada_participante,\n\t\t\tcast(idchamada as bigint) as id_chamada,\n\t\t\tcast(idusuario_participante as bigint) as id_usuario_participante,\n\t\t\tdata_hora_ultima_atualizacao,\n\t\t\tdate(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n\t\t\tdata_hora_inclusao,\n\t\t\tdate(data_hora_inclusao at time zone 'America/Sao_Paulo') as data_brt_inclusao,\n\t\t\ttipo_participante,\n\t\t\tstatus,\n\t\t\turl_meeting,\n\t\t\tperfil_usuario_participante,\n\t\t\tdata_hora_entrada,\n\t\t\tdate(data_hora_entrada at time zone 'America/Sao_Paulo') as data_brt_entrada,\n\t\t\tdata_hora_saida,\n\t\t\tdate(data_hora_saida at time zone 'America/Sao_Paulo') as data_brt_saida,\n\t\t\tcurrent_timestamp(3) as emitted_at\n\t\tfrom \"delta\".\"bronze\".\"raw_cnx_chamada_participante\"\n\t),\n\tpaciente_chamada as (\n\t\tselect \n\t\t\tid_chamada,\n\t\t\tMIN(data_hora_entrada) as data_hora_entrada_paciente,\n\t\t\tMAX(data_hora_saida) as data_hora_saida_paciente,\n\t\t\tMIN_BY(id_usuario_participante, data_hora_entrada) as id_usuario_paciente,\n\t\t\t'PACIENTE' as perfil_participante,\n\t\t\tMIN_BY(status, data_hora_entrada) as status_paciente,\n\t\t\tMIN_BY(tipo_participante, data_hora_entrada) as tipo_participante_paciente\n\t\tfrom chamada_participante\n\t\twhere perfil_usuario_participante = 'PACIENTE'\n\t\tGROUP BY id_chamada\n\t),\n\tprofissional_chamada as (\n\t\tselect \n\t\t\tid_chamada,\n\t\t\tMIN(data_hora_entrada) as data_hora_entrada_profissional,\n\t\t\tMAX(data_hora_saida) as data_hora_saida_profissional,\n\t\t\tMIN_BY(id_usuario_participante, data_hora_entrada) as id_usuario_profissional,\n\t\t\t'PROFISSIONAL' as perfil_participante,\n\t\t\tMIN_BY(status, data_hora_entrada) as status_profissional,\n\t\t\tMIN_BY(tipo_participante, data_hora_entrada) as tipo_participante_profissional\n\t\tfrom chamada_participante\n\t\twhere perfil_usuario_participante != 'PACIENTE'\n\t\tGROUP BY id_chamada\n\t)\n\t\nselect distinct\n    ch.id_chamada,\n    pac.status_paciente,\n    pro.status_profissional,\n    pro.data_hora_entrada_profissional,\n    pro.data_hora_saida_profissional,\n    pac.data_hora_entrada_paciente,\n    pac.data_hora_saida_paciente,\n    pro.id_usuario_profissional,\n    pac.id_usuario_paciente,\n\tch.data_hora_ultima_atualizacao,\n\tyear(ch.data_hora_ultima_atualizacao) as ano_atualizacao,\n\tmonth(ch.data_hora_ultima_atualizacao) as mes_atualizacao,\n\tch.emitted_at\nfrom chamada_participante as ch\nleft join profissional_chamada as pro on pro.id_chamada = ch.id_chamada\nleft join paciente_chamada as pac on pac.id_chamada = ch.id_chamada", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_chamada_participante\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:04.445453Z", "completed_at": "2025-07-01T18:32:04.482064Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:04.519658Z", "completed_at": "2025-07-01T18:32:04.519658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12974977493286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_chamada_participante_data_hora_ultima_atualizacao__day__5.0d22b12b27", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_chamada_participante\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:04.623194Z", "completed_at": "2025-07-01T18:32:04.657647Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:04.681759Z", "completed_at": "2025-07-01T18:32:04.681759Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11073803901672363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_chamada_participante_idchamada_participante.9c66deedb9", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idchamada_participante\nfrom \"delta\".\"bronze\".\"raw_cnx_chamada_participante\"\nwhere idchamada_participante is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:04.789366Z", "completed_at": "2025-07-01T18:32:04.833468Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:04.862701Z", "completed_at": "2025-07-01T18:32:04.862701Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1263875961303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_chamada_participante_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___chamada_participante__data_hora_ultima_atualizacao__idchamada_participante.9c43634d0d", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_chamada_participante\"\n)\nselect \n    a.idchamada_participante\nfrom mysql_cnx.\"connectdoctor-prod\".chamada_participante a\nleft join \"delta\".\"bronze\".\"raw_cnx_chamada_participante\" z on z.idchamada_participante = a.idchamada_participante\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idchamada_participante is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:04.974250Z", "completed_at": "2025-07-01T18:32:05.008317Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:05.034523Z", "completed_at": "2025-07-01T18:32:05.034523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11891603469848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_chamada_participante_idchamada_participante.7dd0c8b35e", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idchamada_participante\nfrom \"delta\".\"bronze\".\"raw_cnx_chamada_participante\"\nwhere idchamada_participante is not null\ngroup by idchamada_participante\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:05.138816Z", "completed_at": "2025-07-01T18:32:05.169667Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:05.194740Z", "completed_at": "2025-07-01T18:32:05.194740Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10273337364196777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_evento_prescricao", "compiled": true, "compiled_code": "\n\nselect\n    cast(idatendimento as bigint) as id_atendimento,\n    max(data_hora_inicio) as data_inicio_prescricao,\n    max(data_hora_fim) as data_fim_prescricao\nFROM  \"delta\".\"bronze\".\"raw_cnx_evento_prescricao\"\ngroup by idatendimento", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_evento_prescricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:05.304010Z", "completed_at": "2025-07-01T18:32:05.336155Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:05.351472Z", "completed_at": "2025-07-01T18:32:05.351472Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09711122512817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_evento_prescricao_data_hora_inicio__day__5.2f50ba7c82", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_inicio as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_evento_prescricao\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_inicio as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:05.464889Z", "completed_at": "2025-07-01T18:32:05.501745Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:05.523113Z", "completed_at": "2025-07-01T18:32:05.523113Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10973358154296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_evento_prescricao_ideventoprescricao.2b5082db2d", "compiled": true, "compiled_code": "\n\n\n\nselect \n    ideventoprescricao\nfrom \"delta\".\"bronze\".\"raw_cnx_evento_prescricao\"\nwhere ideventoprescricao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:05.602109Z", "completed_at": "2025-07-01T18:32:05.636013Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:05.655900Z", "completed_at": "2025-07-01T18:32:05.655900Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08727049827575684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_evento_prescricao_data_hora_inicio__mysql_cnx_connectdoctor_prod___evento_prescricao__data_hora_inicio__ideventoprescricao.152904e1f0", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_inicio) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_evento_prescricao\"\n)\nselect \n    a.ideventoprescricao\nfrom mysql_cnx.\"connectdoctor-prod\".evento_prescricao a\nleft join \"delta\".\"bronze\".\"raw_cnx_evento_prescricao\" z on z.ideventoprescricao = a.ideventoprescricao\nwhere a.data_hora_inicio <= (select maior_data from max_data)\n  and z.ideventoprescricao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:05.748879Z", "completed_at": "2025-07-01T18:32:05.779427Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:05.803682Z", "completed_at": "2025-07-01T18:32:05.803682Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10131311416625977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_evento_prescricao_ideventoprescricao.03ce38ac25", "compiled": true, "compiled_code": "\n\n\n\nselect\n    ideventoprescricao\nfrom \"delta\".\"bronze\".\"raw_cnx_evento_prescricao\"\nwhere ideventoprescricao is not null\ngroup by ideventoprescricao\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:05.878011Z", "completed_at": "2025-07-01T18:32:05.900287Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:05.918220Z", "completed_at": "2025-07-01T18:32:05.918220Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07982540130615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_faturamento_arquivo_atendimento_processado", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- Filha\n      CAST(id_faturamento_arquivo_atendimento_processado AS BIGINT) AS id_faturamento_arquivo_atendimento_processado\n\t, CAST(fk_id_faturamento_arquivo AS BIGINT) AS fk_id_faturamento_arquivo\n\t, CAST(id_atendimento AS BIGINT) AS id_atendimento\n\t, CAST(id_procedimento AS BIGINT) AS id_procedimento\n\t, CAST(id_detalhe_procedimento AS BIGINT) AS id_detalhe_procedimento\n\t, status_importacao\n\t, status_faturamento\n\t, CAST(primeiro_atendimento AS BOOLEAN) AS flag_primeiro_atendimento\n\t, chave_processamento_automatico\n    -- M\u00e3e\n    , CAST(id_faturamento_arquivo AS BIGINT) AS id_faturamento_arquivo\n\t, CAST(id_cliente AS BIGINT) AS id_cliente\n\t, titulo_importacao\n\t, nome_arquivo\n\t, CAST(data_envio AS TIMESTAMP(3) WITH TIME ZONE) AS data_envio\n\t, DATE(data_envio AT TIME ZONE 'America/Sao_Paulo') AS data_brt_envio\n\t, CAST(data_ultima_atualizacao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_atualizacao\n\t, DATE(data_ultima_atualizacao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_ultima_atualizacao\n\t, CAST(quantidade_registros AS INT) AS quantidade_registros\n\t, CAST(quantidade_registros_com_erros AS INT) AS quantidade_registros_com_erros\n\t, status_processamento\n\t, status_upload\n\t, url_arquivo_importado_s3\n\t, url_arquivo_erros_s3\n\t, usuario_importacao\n\t, key_firebase\n\t, DATE(competencia) AS data_competencia\n\t, tipo_cliente\n\t, CURRENT_TIMESTAMP(3) AS emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_faturamento_arquivo_atendimento_processado\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_faturamento_arquivo_atendimento_processado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:05.998528Z", "completed_at": "2025-07-01T18:32:06.020928Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:06.040379Z", "completed_at": "2025-07-01T18:32:06.040379Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07953858375549316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_cancelamento", "compiled": true, "compiled_code": "\n\nWITH temp_canc AS (\n    SELECT \n    cast(id_motivo_cancelamento_atendimento as bigint) as id_cancelamento,\n    cast(idclinica as bigint) as id_clinica,\n    cast(idpaciente as bigint) as id_paciente,\n    cast(idatendimento as bigint) as id_atendimento,\n    cast(idprofissional as bigint) as id_profissional,\n    data_entrada,\n    date(data_entrada at time zone 'America/Sao_Paulo') as data_brt_entrada,\n    replace(motivo_cancelamento,'_',' ') as motivo_cancelamento,\n    id_fila,\n    data_saida_fila as data_cancelamento,\n    date(data_saida_fila at time zone 'America/Sao_Paulo') as data_brt_cancelamento,\n    data_hora_criacao,\n    date(data_hora_criacao at time zone 'America/Sao_Paulo') as data_brt_criacao,\n    data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    current_timestamp(3) as emitted_at,\n        case\n            when idatendimento is null then null \n            else rank() over (partition by idatendimento order by id_motivo_cancelamento_atendimento desc)\n        end as rn\n    FROM \"delta\".\"bronze\".\"raw_cnx_motivo_cancelamento_atendimento\" as c\n)\n\nSELECT\n    id_cancelamento,\n    id_clinica,\n    id_paciente,\n    id_atendimento,\n    id_profissional,\n    case\n        when strpos(cast(data_entrada as varchar), ' ') = 0 then data_entrada\n        when strpos(cast(data_entrada as varchar), ' ') > 0 then date_parse(substr(cast(data_entrada AS varchar), 1, 19),'%Y-%m-%d %H:%i:%s')\n    end as data_entrada,\n    data_brt_entrada,\n    motivo_cancelamento,\n    id_fila,\n    data_cancelamento,\n    data_brt_cancelamento,\n    data_hora_criacao,\n    data_brt_criacao,\n    data_hora_ultima_atualizacao,\n    data_brt_ultima_atualizacao,\n    emitted_at\nFROM temp_canc\nWHERE rn = 1 or rn is null", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_cancelamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:06.118795Z", "completed_at": "2025-07-01T18:32:06.151724Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:06.171314Z", "completed_at": "2025-07-01T18:32:06.171314Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0903010368347168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_motivo_cancelamento_atendimento_data_hora_ultima_atualizacao__day__5.6c3107784d", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_motivo_cancelamento_atendimento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:06.245005Z", "completed_at": "2025-07-01T18:32:06.277233Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:06.298580Z", "completed_at": "2025-07-01T18:32:06.298580Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08893823623657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_motivo_cancelamento_atendimento_id_motivo_cancelamento_atendimento.be8b50f14c", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_motivo_cancelamento_atendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_motivo_cancelamento_atendimento\"\nwhere id_motivo_cancelamento_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:06.385137Z", "completed_at": "2025-07-01T18:32:06.412522Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:06.435479Z", "completed_at": "2025-07-01T18:32:06.435479Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09107327461242676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_motivo_cancelamento_atendimento_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___motivo_cancelamento_atendimento__data_hora_ultima_atualizacao__id_motivo_cancelamento_atendimento.bb0839aac7", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_motivo_cancelamento_atendimento\"\n)\nselect \n    a.id_motivo_cancelamento_atendimento\nfrom mysql_cnx.\"connectdoctor-prod\".motivo_cancelamento_atendimento a\nleft join \"delta\".\"bronze\".\"raw_cnx_motivo_cancelamento_atendimento\" z on z.id_motivo_cancelamento_atendimento = a.id_motivo_cancelamento_atendimento\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.id_motivo_cancelamento_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:06.517809Z", "completed_at": "2025-07-01T18:32:06.555146Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:06.582502Z", "completed_at": "2025-07-01T18:32:06.582502Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10085034370422363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_motivo_cancelamento_atendimento_id_motivo_cancelamento_atendimento.d55582b442", "compiled": true, "compiled_code": "\n\n\n\nselect\n    id_motivo_cancelamento_atendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_motivo_cancelamento_atendimento\"\nwhere id_motivo_cancelamento_atendimento is not null\ngroup by id_motivo_cancelamento_atendimento\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:06.662673Z", "completed_at": "2025-07-01T18:32:06.690888Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:06.710430Z", "completed_at": "2025-07-01T18:32:06.710430Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0872962474822998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_paciente_data_hora_ultima_atualizacao__day__5.f26e2c9b51", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_paciente\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:06.803882Z", "completed_at": "2025-07-01T18:32:06.853378Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:06.876324Z", "completed_at": "2025-07-01T18:32:06.876324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1260240077972412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_paciente_idpaciente.4ce7dd37ac", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idpaciente\nfrom \"delta\".\"bronze\".\"raw_cnx_paciente\"\nwhere idpaciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:06.997119Z", "completed_at": "2025-07-01T18:32:07.124696Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:07.149899Z", "completed_at": "2025-07-01T18:32:07.149899Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22361350059509277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_twodate_raw_cnx_paciente_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___paciente__data_hora_ultima_atualizacao__idpaciente__data_hora_insert.4d64842f3c", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        greatest(max(data_hora_ultima_atualizacao),max(data_hora_insert)) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_paciente\"\n)\nselect \n    a.idpaciente\nfrom mysql_cnx.\"connectdoctor-prod\".paciente a\nleft join \"delta\".\"bronze\".\"raw_cnx_paciente\" z on z.idpaciente = a.idpaciente\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idpaciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:07.232325Z", "completed_at": "2025-07-01T18:32:07.262140Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:07.282198Z", "completed_at": "2025-07-01T18:32:07.282198Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09509992599487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_paciente_idpaciente.07e8c02ff0", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idpaciente\nfrom \"delta\".\"bronze\".\"raw_cnx_paciente\"\nwhere idpaciente is not null\ngroup by idpaciente\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:07.380564Z", "completed_at": "2025-07-01T18:32:07.408366Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:07.444054Z", "completed_at": "2025-07-01T18:32:07.444054Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11238861083984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_paciente_informacao_complementar", "compiled": true, "compiled_code": "\n\nWITH info_complementar AS (\n    SELECT\n        cast(idpaciente_informacao_complementar as bigint) as id_paciente_informacao_complementar,\n        cast(idpaciente as bigint) as id_paciente,\n        data_hora_ultima_atualizacao,\n        date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n        data_hora_criacao,\n        date(data_hora_criacao at time zone 'America/Sao_Paulo') as data_brt_criacao,\n        empresa as nome_empresa_backoffice,\n        departamento as nome_departamento_backoffice,\n        cargo as nome_cargo_backoffice,\n        plano as nome_plano_backoffice,\n        matricula as numero_matricula_backoffice,\n        current_timestamp(3) as emitted_at,\n        row_number() over (partition by idpaciente order by data_hora_ultima_atualizacao desc) as rn\n    FROM \"delta\".\"bronze\".\"raw_cnx_paciente_informacao_complementar\"\n)\n\nSELECT \n    id_paciente,\n    nome_empresa_backoffice,\n    nome_departamento_backoffice,\n    nome_cargo_backoffice,\n    nome_plano_backoffice,\n    numero_matricula_backoffice,\n    emitted_at\nFROM info_complementar\nwhere rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_paciente_informacao_complementar\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:07.530703Z", "completed_at": "2025-07-01T18:32:07.561627Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:07.583157Z", "completed_at": "2025-07-01T18:32:07.583157Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09766554832458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_paciente_informacao_complementar_data_hora_ultima_atualizacao__day__5.0ba40d08f5", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_paciente_informacao_complementar\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:07.673508Z", "completed_at": "2025-07-01T18:32:07.733703Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:07.768055Z", "completed_at": "2025-07-01T18:32:07.768055Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14287185668945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_paciente_informacao_complementar_idpaciente_informacao_complementar.dcaf5472d7", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idpaciente_informacao_complementar\nfrom \"delta\".\"bronze\".\"raw_cnx_paciente_informacao_complementar\"\nwhere idpaciente_informacao_complementar is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:07.927222Z", "completed_at": "2025-07-01T18:32:07.977555Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:08.001318Z", "completed_at": "2025-07-01T18:32:08.001318Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15205144882202148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_paciente_informacao_complementar_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___paciente_informacao_complementar__data_hora_ultima_atualizacao__idpaciente_informacao_complementar.a742059b0d", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_paciente_informacao_complementar\"\n)\nselect \n    a.idpaciente_informacao_complementar\nfrom mysql_cnx.\"connectdoctor-prod\".paciente_informacao_complementar a\nleft join \"delta\".\"bronze\".\"raw_cnx_paciente_informacao_complementar\" z on z.idpaciente_informacao_complementar = a.idpaciente_informacao_complementar\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idpaciente_informacao_complementar is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:08.110607Z", "completed_at": "2025-07-01T18:32:08.151283Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:08.174947Z", "completed_at": "2025-07-01T18:32:08.174947Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11879587173461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_paciente_informacao_complementar_idpaciente_informacao_complementar.2ae0eacbfd", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idpaciente_informacao_complementar\nfrom \"delta\".\"bronze\".\"raw_cnx_paciente_informacao_complementar\"\nwhere idpaciente_informacao_complementar is not null\ngroup by idpaciente_informacao_complementar\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:08.256653Z", "completed_at": "2025-07-01T18:32:08.291449Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:08.314435Z", "completed_at": "2025-07-01T18:32:08.314435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09487462043762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_paciente_pagamento", "compiled": true, "compiled_code": "\n\nWITH PP AS (\n    SELECT\n    idpaciente_pagamento as id_paciente_pagamento,\n    idprefila as id_prefila,\n    idfila as id_fila,\n    cast(idatendimento as bigint) as id_atendimento,\n    cast(idpaciente as bigint) as id_paciente,\n    idtransacao as id_transacao,\n    idnfe as id_nfe,\n    case \n        when idnfe is null\n            then false\n        when idnfe = ''\n            then false\n        when idnfe is not null\n            then true\n        else false\n    end as flag_nota_gerada,\n    if(flag_capturado = '1',true,false) as flag_capturado,\n    situacao as situacao_paciente_pagamento,\n    valor_cancelamento,\n    data_inclusao,\n    date(data_inclusao at time zone 'America/Sao_Paulo') as data_brt_inclusao,\n    modo_atendimento,\n    motivo_estorno,\n    detalhe_estorno,\n    cast(idusuario_estorno as bigint) as id_usuario_estorno,\n    idtransacaoexterna as id_transacao_externa,\n    data_hora_update as data_hora_ultima_atualizacao,\n    date(data_hora_update at time zone 'America/Sao_Paulo') as data_brt_hora_ultima_atualizacao,\n    numero_pedido,\n    data_estorno,\n    date(data_estorno at time zone 'America/Sao_Paulo') as data_brt_estorno,\n    data_falha_pagamento,\n    date(data_falha_pagamento at time zone 'America/Sao_Paulo') as data_brt_falha_pagamento,\n    metodo,\n    idtransacao_cancelamento as id_transacao_cancelamento,\n    valor_pago,\n    valor_consulta,\n\tvalor_custo_operacao,\n    emitted_at,\n    rank() OVER (PARTITION BY idatendimento ORDER BY idpaciente_pagamento DESC) AS ranking\n    FROM \"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\"\n)\nSELECT\nid_atendimento,\nid_paciente_pagamento,\nid_nfe,\nflag_nota_gerada,\nsituacao_paciente_pagamento,\nvalor_pago,\nvalor_consulta,\nvalor_custo_operacao,\nvalor_cancelamento,\nemitted_at\nFROM PP \nWHERE ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_paciente_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:08.401351Z", "completed_at": "2025-07-01T18:32:08.432306Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:08.454351Z", "completed_at": "2025-07-01T18:32:08.454351Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09844565391540527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_paciente_pagamento_data_inclusao__day__5.1f35e9c598", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_inclusao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_inclusao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:08.543025Z", "completed_at": "2025-07-01T18:32:08.568383Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:08.586225Z", "completed_at": "2025-07-01T18:32:08.586225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08670830726623535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_paciente_pagamento_idatendimento.f029e462cc", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idatendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\"\nwhere idatendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:08.676977Z", "completed_at": "2025-07-01T18:32:08.711467Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:08.733648Z", "completed_at": "2025-07-01T18:32:08.733648Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1047825813293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_twodate_raw_cnx_paciente_pagamento_data_inclusao__mysql_cnx_connectdoctor_prod___paciente_pagamento__data_inclusao__idpaciente_pagamento__data_hora_update.9d1422a3ec", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        greatest(max(data_inclusao),max(data_hora_update)) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\"\n)\nselect \n    a.idpaciente_pagamento\nfrom mysql_cnx.\"connectdoctor-prod\".paciente_pagamento a\nleft join \"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\" z on z.idpaciente_pagamento = a.idpaciente_pagamento\nwhere a.data_inclusao <= (select maior_data from max_data)\n  and z.idpaciente_pagamento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:08.816278Z", "completed_at": "2025-07-01T18:32:08.844204Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:08.857458Z", "completed_at": "2025-07-01T18:32:08.857458Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07678055763244629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_raw_cnx_paciente_pagamento_idatendimento__idatendimento__ref_raw_cnx_atendimento_.1d8dc7430c", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    idatendimento as id\nfrom \"delta\".\"bronze\".\"raw_cnx_atendimento\"\n),\nt2 as (\nselect\n    idatendimento as id\nfrom \"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:08.925780Z", "completed_at": "2025-07-01T18:32:08.951254Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:08.969986Z", "completed_at": "2025-07-01T18:32:08.969986Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08452415466308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_paciente_pagamento_idatendimento.1cc3bd2870", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idatendimento\nfrom \"delta\".\"bronze\".\"raw_cnx_paciente_pagamento\"\nwhere idatendimento is not null\ngroup by idatendimento\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:09.051165Z", "completed_at": "2025-07-01T18:32:09.076441Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:09.086941Z", "completed_at": "2025-07-01T18:32:09.086941Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07830214500427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_prescricao", "compiled": true, "compiled_code": "\n\nSELECT \n    cast(idprescricao as bigint) as id_prescricao,\n    cast(idatendimento as bigint) as id_atendimento,\n    cast(idprofissional as bigint) as id_profissional,\n    data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n    data_hora as data_hora_ultima_alteracao,\n    date(data_hora at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    case\n        when codigo_prescricao_memed is not null then codigo_prescricao_memed\n        when codigo_prescricao_nexodata is not null then codigo_prescricao_nexodata\n        when nome_arquivo is not null then nome_arquivo\n    end codigo_prescricao,\n    case\n        when codigo_prescricao_memed is not null then 'MEMED'\n        when codigo_prescricao_nexodata is not null then 'NEXODATA'\n    end plataforma_prescricao,\n    current_timestamp(3) as emitted_at \nFROM \"delta\".\"bronze\".\"raw_cnx_prescricao\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_prescricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:09.170253Z", "completed_at": "2025-07-01T18:32:09.198711Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:09.218253Z", "completed_at": "2025-07-01T18:32:09.218253Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08626246452331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_prescricao_data_hora_insert__day__5.859b0aa70f", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_insert as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_prescricao\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_insert as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:09.304928Z", "completed_at": "2025-07-01T18:32:09.326037Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:09.351162Z", "completed_at": "2025-07-01T18:32:09.351162Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0870974063873291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_prescricao_idprescricao.9f2590acd6", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idprescricao\nfrom \"delta\".\"bronze\".\"raw_cnx_prescricao\"\nwhere idprescricao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:09.450623Z", "completed_at": "2025-07-01T18:32:09.501058Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:09.525420Z", "completed_at": "2025-07-01T18:32:09.525420Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14174222946166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_prescricao_data_hora_insert__mysql_cnx_connectdoctor_prod___prescricao__data_hora_insert__idprescricao.2b9d807211", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_insert) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_prescricao\"\n)\nselect \n    a.idprescricao\nfrom mysql_cnx.\"connectdoctor-prod\".prescricao a\nleft join \"delta\".\"bronze\".\"raw_cnx_prescricao\" z on z.idprescricao = a.idprescricao\nwhere a.data_hora_insert <= (select maior_data from max_data)\n  and z.idprescricao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:09.611611Z", "completed_at": "2025-07-01T18:32:09.631423Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:09.662567Z", "completed_at": "2025-07-01T18:32:09.662567Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09160423278808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_prescricao_idprescricao.5d662725a3", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idprescricao\nfrom \"delta\".\"bronze\".\"raw_cnx_prescricao\"\nwhere idprescricao is not null\ngroup by idprescricao\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:09.751705Z", "completed_at": "2025-07-01T18:32:09.775321Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:09.799118Z", "completed_at": "2025-07-01T18:32:09.799118Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09017300605773926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_prescricao_item", "compiled": true, "compiled_code": "\n\nSELECT \n    cast(idprescricao_item as bigint) as id_prescricao_item,\n    cast(idprescricao as bigint) as id_prescricao,\n    nome,\n    translate(\n        nome,\n        '\u00c1\u00c0\u00c3\u00c2\u00c9\u00c8\u1ebc\u00ca\u00cd\u00cc\u0128\u00ce\u00d3\u00d2\u00d5\u00d4\u00da\u00d9\u0168\u00db\u00c7',\n        'AAAAEEEEIIIIOOOOUUUUC'\n    ) as nome_prescricao,\n    descricao as descricao_prescricao,\n    posologia as posologia_prescricao,\n    fabricante as fabricante_prescricao,\n    cast(if((controle_especial = '1'),true,false) as boolean) as flag_controle_especial,\n    cast(quantidade as bigint) as quantidade,\n    tipo,\n    case\n        when tipo = 'custom' and (\n                lower(nome) like '%atestado%'\n                or lower(nome) like '%afastamento%'\n                or lower(nome) like '%repouso%'\n                or lower(nome) like '%atesto%'\n            ) then 'atestado'\n        when tipo = 'exame' then tipo\n        when tipo = 'custom' then tipo\n        when tipo = 'atestado' then 'atestado'\n        else 'medicamento'\n    end as tipo_prescricao,\n    data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert, \n    exames_tuss_codigo,\n    t.termo as nome_exame_tuss,\n    current_timestamp(3) as emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_prescricao_item\" as i\nLEFT JOIN \"delta\".\"bronze\".\"tabela_tuss_auxiliary\" as t on i.exames_tuss_codigo = t.cod_termo", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_prescricao_item\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:09.896988Z", "completed_at": "2025-07-01T18:32:09.933512Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:09.963545Z", "completed_at": "2025-07-01T18:32:09.963545Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11859345436096191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_prescricao_item_data_hora_insert__day__5.46539fea94", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_insert as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_prescricao_item\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_insert as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:10.057564Z", "completed_at": "2025-07-01T18:32:10.089419Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:10.106166Z", "completed_at": "2025-07-01T18:32:10.106166Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09647369384765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_prescricao_item_idprescricao_item.78fd820d03", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idprescricao_item\nfrom \"delta\".\"bronze\".\"raw_cnx_prescricao_item\"\nwhere idprescricao_item is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:10.199482Z", "completed_at": "2025-07-01T18:32:10.228433Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:10.252407Z", "completed_at": "2025-07-01T18:32:10.252407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09342670440673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_prescricao_item_data_hora_insert__mysql_cnx_connectdoctor_prod___prescricao_item__data_hora_insert__idprescricao_item.5eb741a0ca", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_insert) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_prescricao_item\"\n)\nselect \n    a.idprescricao_item\nfrom mysql_cnx.\"connectdoctor-prod\".prescricao_item a\nleft join \"delta\".\"bronze\".\"raw_cnx_prescricao_item\" z on z.idprescricao_item = a.idprescricao_item\nwhere a.data_hora_insert <= (select maior_data from max_data)\n  and z.idprescricao_item is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:10.328884Z", "completed_at": "2025-07-01T18:32:10.370682Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:10.386685Z", "completed_at": "2025-07-01T18:32:10.386685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10610842704772949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_prescricao_item_idprescricao_item.d6a694527a", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idprescricao_item\nfrom \"delta\".\"bronze\".\"raw_cnx_prescricao_item\"\nwhere idprescricao_item is not null\ngroup by idprescricao_item\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:10.529488Z", "completed_at": "2025-07-01T18:32:10.584410Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:10.620820Z", "completed_at": "2025-07-01T18:32:10.620820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.155029296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_repasses", "compiled": true, "compiled_code": "\n\nSELECT CAST(PR.idprofissional AS BIGINT) AS id_profissional\n\t, MAX(CASE\n\t\t\tWHEN PR.idrepasse = 1\n\t\t\t\tTHEN CAST(PR.ativo AS BOOLEAN)\n\t\t\tELSE FALSE\n\t\t\tEND) AS flag_repasse_20\n\t, MAX(CASE\n\t\t\tWHEN PR.idrepasse = 2\n\t\t\t\tTHEN CAST(PR.ativo AS BOOLEAN)\n\t\t\tELSE FALSE\n\t\t\tEND) AS flag_repasse_25\n\t, MAX(CASE\n\t\t\tWHEN PR.idrepasse = 3\n\t\t\t\tTHEN CAST(PR.ativo AS BOOLEAN)\n\t\t\tELSE FALSE\n\t\t\tEND) AS flag_repasse_30\n\t, MAX(CASE\n\t\t\tWHEN PR.idrepasse = 4\n\t\t\t\tTHEN CAST(PR.ativo AS BOOLEAN)\n\t\t\tELSE FALSE\n\t\t\tEND) AS flag_repasse_35\n\t, MAX(CASE\n\t\t\tWHEN PR.idrepasse = 5\n\t\t\t\tTHEN CAST(PR.ativo AS BOOLEAN)\n\t\t\tELSE FALSE\n\t\t\tEND) AS flag_repasse_50\n\t, MAX(CASE\n\t\t\tWHEN PR.idrepasse = 6\n\t\t\t\tTHEN CAST(PR.ativo AS BOOLEAN)\n\t\t\tELSE FALSE\n\t\t\tEND) AS flag_repasse_60\n    , CURRENT_TIMESTAMP(3) as emitted_at\n\nFROM \"delta\".\"bronze\".\"raw_cnx_profissional_repasses\" AS PR\n\nGROUP BY PR.idprofissional", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_repasses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:10.744964Z", "completed_at": "2025-07-01T18:32:10.778568Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:10.814810Z", "completed_at": "2025-07-01T18:32:10.814810Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12969565391540527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_tipo_pagamento", "compiled": true, "compiled_code": "\n\nSELECT \n    id_profissional_tipo_pagamento,\n    idprofissional as id_profissional,\n    tipo_pagamento,\n    valor_por_consulta,\n    valor_por_hora,\n    quantidade_consulta_gatilho,\n    data_criacao,\n    data_ultima_atualizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_profissional_tipo_pagamento\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_tipo_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:10.905169Z", "completed_at": "2025-07-01T18:32:10.937464Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:10.951849Z", "completed_at": "2025-07-01T18:32:10.951849Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09012556076049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_profissional_tiss", "compiled": true, "compiled_code": "\n\nSELECT\n      CAST(id AS BIGINT) AS id_profissional_tiss\n\t, CAST(data_inclusao AS TIMESTAMP(3) WITH TIME ZONE) AS data_inclusao\n\t, DATE(data_inclusao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_inclusao\n\t, CAST(data_ultima_alteracao AS TIMESTAMP(3) WITH TIME ZONE) AS data_ultima_alteracao\n\t, DATE(data_ultima_alteracao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_ultima_alteracao\n\t, usuario_ultima_alteracao\n\t, versao\n\t, nome as nome_profissional\n\t, regexp_replace(\"cpf\", '[^0-9]', '') AS cpf_profissional\n\t, numero_conselho\n\t, uf\n\t, cast(especialidade_id as bigint) as id_especialidade\n    , CURRENT_TIMESTAMP(3) AS emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_profissional_tiss\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_profissional_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:11.048005Z", "completed_at": "2025-07-01T18:32:11.086016Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:11.101180Z", "completed_at": "2025-07-01T18:32:11.101180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10020709037780762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_reagendamento_atendimento", "compiled": true, "compiled_code": "\n\nselect \n    idatendimento as id_atendimento\n    ,array_agg(data_original order by data_original) as lista_datas_agendamentos_originais\n    ,array_agg(data_reagendada order by data_reagendada) as lista_datas_reagendadas\n    ,array_agg(data_hora_cadastro order by data_hora_cadastro) as lista_datas_ocorrencia_reagendamentos\nfrom \"delta\".\"bronze\".\"raw_cnx_reagendamento_atendimento\"\ngroup by 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_reagendamento_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:11.201351Z", "completed_at": "2025-07-01T18:32:11.230916Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:11.255817Z", "completed_at": "2025-07-01T18:32:11.255817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11178207397460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_registro_encaminhamento", "compiled": true, "compiled_code": "\n\nSELECT \n\tcast(id_registro_encaminhamento as bigint) as id_registro_encaminhamento,\n\tcast(id_atendimento_origem as bigint) as id_atendimento_origem,\n\tcast(id_atendimento_encaminhado as bigint) as id_atendimento_encaminhado,\n\tdata_hora as data_hora_ultima_atualizacao,\n    date(data_hora at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n\tcurrent_timestamp(3) as emitted_at\nFROM  \"delta\".\"bronze\".\"raw_cnx_registro_encaminhamento\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_registro_encaminhamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:11.338705Z", "completed_at": "2025-07-01T18:32:11.364077Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:11.387407Z", "completed_at": "2025-07-01T18:32:11.387407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09270787239074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_registro_encaminhamento_data_hora__day__5.bb7c2debb5", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_registro_encaminhamento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:11.475507Z", "completed_at": "2025-07-01T18:32:11.503978Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:11.525738Z", "completed_at": "2025-07-01T18:32:11.525738Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09238910675048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_registro_encaminhamento_id_registro_encaminhamento.cab22dcf2c", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_registro_encaminhamento\nfrom \"delta\".\"bronze\".\"raw_cnx_registro_encaminhamento\"\nwhere id_registro_encaminhamento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:11.607660Z", "completed_at": "2025-07-01T18:32:11.640782Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:11.663366Z", "completed_at": "2025-07-01T18:32:11.663366Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09213757514953613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_registro_encaminhamento_data_hora__mysql_cnx_connectdoctor_prod___registro_encaminhamento__data_hora__id_registro_encaminhamento.2eb2e94ed8", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_registro_encaminhamento\"\n)\nselect \n    a.id_registro_encaminhamento\nfrom mysql_cnx.\"connectdoctor-prod\".registro_encaminhamento a\nleft join \"delta\".\"bronze\".\"raw_cnx_registro_encaminhamento\" z on z.id_registro_encaminhamento = a.id_registro_encaminhamento\nwhere a.data_hora <= (select maior_data from max_data)\n  and z.id_registro_encaminhamento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:11.773000Z", "completed_at": "2025-07-01T18:32:11.802572Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:11.829620Z", "completed_at": "2025-07-01T18:32:11.829620Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11564779281616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_registro_encaminhamento_id_registro_encaminhamento.c4ce31ff3e", "compiled": true, "compiled_code": "\n\n\n\nselect\n    id_registro_encaminhamento\nfrom \"delta\".\"bronze\".\"raw_cnx_registro_encaminhamento\"\nwhere id_registro_encaminhamento is not null\ngroup by id_registro_encaminhamento\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:11.938555Z", "completed_at": "2025-07-01T18:32:11.972937Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:12.002622Z", "completed_at": "2025-07-01T18:32:12.002622Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11994314193725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_reserva_consulta", "compiled": true, "compiled_code": "\n\n\nSELECT \n    cast(id as bigint) as id_reserva_consulta, \n    data_hora_criacao,\n    date(data_hora_criacao at time zone 'America/Sao_Paulo') as data_brt_criacao,\n    data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao, \n    data_hora_confirmacao as data_hora_confirmacao_reserva,\n    date(data_hora_confirmacao at time zone 'America/Sao_Paulo') as data_brt_confirmacao_reserva,\n    status as status_confirmacao_reserva,\n    id_atendimento\nFROM  \"delta\".\"bronze\".\"raw_cnx_reserva_consulta\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_reserva_consulta\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:12.096991Z", "completed_at": "2025-07-01T18:32:12.124503Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:12.148645Z", "completed_at": "2025-07-01T18:32:12.148645Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10079169273376465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_conexa_tiss", "compiled": true, "compiled_code": "\n\n\nselect\n    id as id_conexa_tiss,\n    data_inclusao,\n    data_solicitacao,\n    usuario_ultima_alteracao,\n    data_ultima_alteracao,\n    data_autorizacao,\n    versao,\n    prestador,\n    case\n\t\twhen TRIM(prestador) = 'PVIVA'\n\t\t\tthen 'Psicologia Viva'\n\t\twhen TRIM(prestador) = 'CONEXA'\n\t\t\tthen 'Conexa'\n\t\telse prestador\n\tend as plataforma,\n    versao_tiss,\n    cast(id_consulta_prestador as bigint) as id_consulta_prestador,\n    cast(id_paciente_prestador as bigint) as id_paciente_prestador,\n    numero_carteirinha,\n    cast(id_convenio_prestador as bigint) as id_convenio_prestador,\n    convenio,\n    case\n        when status = '0' then '0 - NAO_INFORMADO'\n        when status = '1' then '1 - AUTORIZADO'\n        when status = '2' then '2 - EM_ANALISE'\n        when status = '3' then '3 - NEGADO'\n        when status = '4' then '4 - AGUARDANDO_JUSTIFICATIVA_TECNICA_SOLICITANTE'\n        when status = '5' then '5 - AGUARDANDO_DOCUMENTACAO_PRESTADOR'\n        when status = '6' then '6 - SOLICITACAO_CANCELADA'\n        when status = '7' then '7 - AUTORIZADO_PARCIALMENTE'\n        when status = '8' then '8 - PENDENTE'\n        else status\n    end status,\n    motivo_pendencia,\n    numero_guia_operadora,\n    numero_guia_prestador,\n    cast(quantidade_solicitada as bigint) as quantidade_solicitada,\n    cast(quantidade_autorizada as bigint) as quantidade_autorizada,\n    cast(quantidade_utilizada as bigint) as quantidade_utilizada,\n    codigo_glosa,\n    mensagem_glosa,\n    senha_autorizacao,\n    data_validade_senha,\n    token_solicitacao,\n    token_confirmado,\n    current_timestamp(3) as emitted_at \nfrom \"delta\".\"bronze\".\"raw_cnx_solicitacao_tiss\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_conexa_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:12.241992Z", "completed_at": "2025-07-01T18:32:12.275591Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:12.302731Z", "completed_at": "2025-07-01T18:32:12.302731Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1087636947631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_tb_global_clinical_impression_cycle", "compiled": true, "compiled_code": "\n\nselect\n\tid_global_clinical_impression_cycle as id_cgi_ciclo,\n\tcreated_at as data_criacao,\n\tdate(created_at at time zone 'America/Sao_Paulo') as data_brt_criacao,\n\tupdated_at as data_atualizacao,\n\tdate(updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao,\n\tprofessional_id as id_profissional,\n\tcast(patient_id as bigint) as id_paciente,\n\tstatus as status_cgi_ciclo,\n\tconclusion_date as data_conclusao,\n\tdate(conclusion_date at time zone 'America/Sao_Paulo') as data_brt_conclusao,\n\tconcluded_by_user_id as id_usuario_conclusao\nFROM \"delta\".\"bronze\".\"raw_cnx_tb_global_clinical_impression_cycle\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_tb_global_clinical_impression_cycle\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:12.392077Z", "completed_at": "2025-07-01T18:32:12.424624Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:12.443325Z", "completed_at": "2025-07-01T18:32:12.443325Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08244109153747559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_tb_global_clinical_impression_cycle_evaluation", "compiled": true, "compiled_code": "\n\nselect\n\tid_global_clinical_impression_cycle_evaluation as id_cgi_ciclo_avaliacao,\n\tcreated_at as data_criacao,\n\tdate(created_at at time zone 'America/Sao_Paulo') as data_brt_criacao,\n\tupdated_at as data_atualizacao,\n\tdate(updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao,\n\tglobal_clinical_impression_cycle_id as id_cgi_ciclo,\n\tcast(appointment_id as bigint) as id_atendimento,\n\tevaluation as avaliacao_cgi,\n\tbase_evaluation as base_avaliacao_cgi\nFROM \"delta\".\"bronze\".\"raw_cnx_tb_global_clinical_impression_cycle_evaluation\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_tb_global_clinical_impression_cycle_evaluation\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:12.539148Z", "completed_at": "2025-07-01T18:32:12.567542Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:12.589286Z", "completed_at": "2025-07-01T18:32:12.589286Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09227943420410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_tb_treatment_reason_session", "compiled": true, "compiled_code": "\n\nselect \n\ttt.id_reason_session as id_razao_sessao,\n\ttt.created_at as data_criacao,\n\tdate(tt.created_at at time zone 'America/Sao_Paulo') as data_brt_criacao,\n\ttt.updated_at as data_atualizacao,\n\tdate(tt.updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao,\n\ttt.treatment_id as id_evolucao,\n\ttt.reason_session_id as id_razao_sessao_dim,\n\ttr.value as razao_sessao,\n\ttr.key_name as enum_razao_sessao\nFROM \"delta\".\"bronze\".\"raw_cnx_tb_treatment_reason_session\" as tt\nleft join mysql_cnx.\"connectdoctor-prod\".tb_reason_session as tr on tt.reason_session_id = tr.id_reason_session", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_tb_treatment_reason_session\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:12.680092Z", "completed_at": "2025-07-01T18:32:12.710718Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:12.733252Z", "completed_at": "2025-07-01T18:32:12.733252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09785103797912598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_treatment", "compiled": true, "compiled_code": "\n\nselect \n \tidtreatment as id_evolucao,\n \tcast(idatendimento as bigint) as id_atendimento,\n \ttreatment_situation as situacao_tratamento,\n \tsession_summary as resumo_sessao,\n\tif(session_summary is not null, true, false) as flag_preenchimento_resumo_sessao,\n \tpsychologist_documentary_record as registro_documental,\n \ttechnical_procedures as procedimentos_tecnicos,\n \tinstrument_used as instrumentos_utilizados,\n    updated_at as data_hora_atualizacao,\n    date(updated_at at time zone 'America/Sao_Paulo') as data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"raw_cnx_treatment\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_treatment\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:12.838207Z", "completed_at": "2025-07-01T18:32:12.865784Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:12.900886Z", "completed_at": "2025-07-01T18:32:12.900886Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1174783706665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_usuario", "compiled": true, "compiled_code": "\n\nSELECT \n    cast(idusuario as bigint) as id_usuario,\n    nome as nome_usuario,\n    login as login_usuario,\n    perfil as tipo_perfil_usuario,\n    cast(idprofissional as bigint) as id_profissional,\n    cast(idclinica as bigint) as id_clinica,\n    cast(idpaciente as bigint) as id_paciente,\n    case when flag_ativo is null or flag_ativo = '' then false else cast(if((flag_ativo = '1'),true,false) as boolean) end as flag_ativo,\n    case when flag_bloqueado is null or flag_bloqueado = '' then false else cast(if((flag_bloqueado = '1'),true,false) as boolean) end as flag_bloqueado,\n    case when flag_termo_aceito is null or flag_termo_aceito = '' then false else cast(if((flag_termo_aceito = '1'),true,false) as boolean) end as flag_termo_aceito,\n    data_hora_termo_aceito,\n    date(data_hora_termo_aceito at time zone 'America/Sao_Paulo') as data_brt_termo_aceito,\n    ip_termo_aceito,\n    case when flag_customizado is null or flag_customizado = '' then false else cast(if((flag_customizado = '1'),true,false) as boolean) end as flag_customizado,\n    case when flag_admin is null or flag_admin = '' then false else cast(if((flag_admin = '1'),true,false) as boolean) end as flag_admin,\n    tipo_dispositivo,\n    data_hora_bloqueio,\n    date(data_hora_bloqueio at time zone 'America/Sao_Paulo') as data_brt_bloqueio,\n    motivo_bloqueio,\n    data_hora_ativacao,\n    date(data_hora_ativacao at time zone 'America/Sao_Paulo') as data_brt_ativacao,\n    data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    data_hora_criacao,\n    date(data_hora_criacao at time zone 'America/Sao_Paulo') as data_brt_criacao,\n    case when flag_acessou is null or flag_acessou = '' then false else cast(if((flag_acessou = '1'),true,false) as boolean) end as flag_acessou,\n    case when flag_termo_aceito_jaleko is null or flag_termo_aceito_jaleko = '' then false else cast(if((flag_termo_aceito_jaleko = '1'),true,false) as boolean) end as flag_termo_aceito_jaleko,\n    case when flag_desabilitar_push_notification is null or flag_desabilitar_push_notification = '' then false else cast(if((flag_desabilitar_push_notification = '1'),true,false) as boolean) end as flag_desabilitar_push_notification,\n    data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n    data_alteracao_senha,\n    date(data_alteracao_senha at time zone 'America/Sao_Paulo') as data_brt_alteracao_senha,\n    senha,\n    current_timestamp(3) as emitted_at\nFROM  \"delta\".\"bronze\".\"raw_cnx_usuario\"", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_usuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:13.006048Z", "completed_at": "2025-07-01T18:32:13.034901Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:13.053521Z", "completed_at": "2025-07-01T18:32:13.053521Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09916973114013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_usuario_paciente", "compiled": true, "compiled_code": "\n\nWITH usuario_paciente AS (\n    SELECT\n        idpaciente as id_paciente,\n        idusuario as id_usuario,\n        login as login_usuario,\n        perfil as tipo_perfil_usuario,\n        case when flag_ativo is null or flag_ativo = '' then false else cast(if((flag_ativo = '1'),true,false) as boolean) end as flag_ativo,\n        case when flag_bloqueado is null or flag_bloqueado = '' then false else cast(if((flag_bloqueado = '1'),true,false) as boolean) end as flag_bloqueado,\n        case when flag_termo_aceito is null or flag_termo_aceito = '' then false else cast(if((flag_termo_aceito = '1'),true,false) as boolean) end as flag_termo_aceito,\n        data_hora_termo_aceito,\n        date(data_hora_termo_aceito at time zone 'America/Sao_Paulo') as data_brt_termo_aceito,\n        data_hora_ultima_atualizacao,\n        date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n        ip_termo_aceito,\n        motivo_bloqueio,\n        case\n            when data_hora_bloqueio is null\n                then data_hora_ultima_atualizacao\n            else data_hora_bloqueio\n        end as data_hora_bloqueio,\n        case\n            when data_hora_bloqueio is null\n                then date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo')\n            else date(data_hora_bloqueio at time zone 'America/Sao_Paulo')\n        end as data_brt_bloqueio,\n        case\n            when data_hora_ativacao is not null\n                then data_hora_ativacao\n            when data_hora_ativacao is null and data_hora_termo_aceito is null\n                then data_hora_insert\n            when data_hora_ativacao is null and data_hora_termo_aceito is not null\n                then data_hora_termo_aceito            \n        end as data_hora_ativacao,\n        case\n            when data_hora_ativacao is not null\n                then date(data_hora_ativacao at time zone 'America/Sao_Paulo')\n            when data_hora_ativacao is null and data_hora_termo_aceito is null\n                then date(data_hora_insert at time zone 'America/Sao_Paulo')\n             when data_hora_ativacao is null and data_hora_termo_aceito is not null\n                then date(data_hora_termo_aceito at time zone 'America/Sao_Paulo')\n        end as data_brt_ativacao,\n        senha,\n        current_timestamp(3) as emitted_at,\n        row_number() over (partition by idpaciente order by data_hora_insert desc) as rn\n    FROM \"delta\".\"bronze\".\"raw_cnx_usuario\"\n    WHERE idpaciente is not null\n)\n\nSELECT \n        id_paciente,\n        id_usuario,\n        login_usuario,\n        tipo_perfil_usuario,\n        flag_ativo,\n        flag_bloqueado,\n        flag_termo_aceito,\n        data_hora_termo_aceito,\n        data_brt_termo_aceito,\n        data_hora_ultima_atualizacao,\n        data_brt_ultima_atualizacao,\n        ip_termo_aceito,\n        data_hora_bloqueio,\n        data_brt_bloqueio,\n        motivo_bloqueio,\n        data_hora_ativacao,\n        data_brt_ativacao,\n        senha,\n        emitted_at\nFROM usuario_paciente\nWHERE rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_usuario_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:13.164556Z", "completed_at": "2025-07-01T18:32:13.201641Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:13.228430Z", "completed_at": "2025-07-01T18:32:13.228430Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12004303932189941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_usuario_profissional", "compiled": true, "compiled_code": "\n\nWITH usuario_profissional AS (\nSELECT\n    idusuario as id_usuario,\n    idprofissional as id_profissional,\n    login as login_usuario,\n    data_hora_ultima_atualizacao,\n    perfil as tipo_perfil_usuario,\n    case when flag_ativo is null or flag_ativo = '' then false else cast(flag_ativo as boolean) end as flag_ativo,\n    case when flag_bloqueado is null or flag_bloqueado = '' then false else cast(flag_bloqueado as boolean) end as flag_bloqueado,\n    case when flag_termo_aceito is null or flag_termo_aceito = '' then false else cast(flag_termo_aceito as boolean) end as flag_termo_aceito,\n    data_hora_termo_aceito,\n    date(data_hora_termo_aceito at time zone 'America/Sao_Paulo') as data_brt_termo_aceito,\n    ip_termo_aceito,\n    case\n        when data_hora_bloqueio is null\n            then data_hora_ultima_atualizacao\n        else data_hora_bloqueio\n    end as data_hora_bloqueio,\n    case\n        when data_hora_bloqueio is null\n            then date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo')\n        else date(data_hora_bloqueio at time zone 'America/Sao_Paulo')\n    end as data_brt_bloqueio,\n    motivo_bloqueio,\n    data_hora_ativacao,\n    date(data_hora_ativacao at time zone 'America/Sao_Paulo') as data_brt_ativacao,\n    current_timestamp(3) as emitted_at,\n    row_number() over (partition by idprofissional order by data_hora_insert desc) as rn\nFROM \"delta\".\"bronze\".\"raw_cnx_usuario\"\nWHERE idprofissional is not null\n)\n\nSELECT \n    id_usuario,\n    id_profissional,\n    login_usuario,\n    tipo_perfil_usuario,\n    flag_ativo,\n    flag_bloqueado,\n    flag_termo_aceito,\n    data_hora_termo_aceito,\n    data_brt_termo_aceito,\n    ip_termo_aceito,\n    data_hora_bloqueio,\n    data_brt_bloqueio,\n    motivo_bloqueio,\n    data_hora_ativacao,\n    data_brt_ativacao,\n    emitted_at\nFROM usuario_profissional\nwhere rn = 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_usuario_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:13.316208Z", "completed_at": "2025-07-01T18:32:13.347246Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:13.386987Z", "completed_at": "2025-07-01T18:32:13.386987Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11079788208007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_raw_cnx_usuario_data_hora_ultima_atualizacao__day__5.4dbce8599c", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_hora_ultima_atualizacao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"raw_cnx_usuario\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_hora_ultima_atualizacao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:13.540425Z", "completed_at": "2025-07-01T18:32:13.584436Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:13.604503Z", "completed_at": "2025-07-01T18:32:13.604503Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14664077758789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_raw_cnx_usuario_idusuario.114848d2da", "compiled": true, "compiled_code": "\n\n\n\nselect \n    idusuario\nfrom \"delta\".\"bronze\".\"raw_cnx_usuario\"\nwhere idusuario is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:13.741405Z", "completed_at": "2025-07-01T18:32:13.790335Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:13.822075Z", "completed_at": "2025-07-01T18:32:13.822075Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15057635307312012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_onedate_raw_cnx_usuario_data_hora_ultima_atualizacao__mysql_cnx_connectdoctor_prod___usuario__data_hora_ultima_atualizacao__idusuario.b34b3c825e", "compiled": true, "compiled_code": "\n\n\n\nwith max_data as (\n    select\n        max(data_hora_ultima_atualizacao) as maior_data\n    from \"delta\".\"bronze\".\"raw_cnx_usuario\"\n)\nselect \n    a.idusuario\nfrom mysql_cnx.\"connectdoctor-prod\".usuario a\nleft join \"delta\".\"bronze\".\"raw_cnx_usuario\" z on z.idusuario = a.idusuario\nwhere a.data_hora_ultima_atualizacao <= (select maior_data from max_data)\n  and z.idusuario is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:13.945232Z", "completed_at": "2025-07-01T18:32:14.005109Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:14.026312Z", "completed_at": "2025-07-01T18:32:14.026312Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13934731483459473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_raw_cnx_usuario_idusuario.db50b8af40", "compiled": true, "compiled_code": "\n\n\n\nselect\n    idusuario\nfrom \"delta\".\"bronze\".\"raw_cnx_usuario\"\nwhere idusuario is not null\ngroup by idusuario\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:14.136026Z", "completed_at": "2025-07-01T18:32:14.179468Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:14.201733Z", "completed_at": "2025-07-01T18:32:14.201733Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11317944526672363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_ga_events", "compiled": true, "compiled_code": "\n\n\nselect\n\taction_id as id_acao,\n\tevent_date as data_evento,\n\tdate_trunc('second', from_unixtime(event_timestamp / 1000000)) as data_base,\n\tdate_format(from_unixtime(event_timestamp / 1000000), '%Y%m') as mes_base,\n\tevent_name as nome_evento,\n\telement_at(filter(event_params, x -> x.key = 'firebase_event_origin'), 1).value.string_value as origem_evento_firebase,\n\telement_at(filter(event_params, x -> x.key = 'userVariant'), 1).value.string_value as variacao_usuario,\n\telement_at(filter(event_params, x -> x.key = 'audience'), 1).value.string_value as audiencia,\n\telement_at(filter(event_params, x -> x.key = 'firebase_previous_class'), 1).value.string_value as classe_anterior_firebase,\n\telement_at(filter(event_params, x -> x.key = 'firebase_screen'), 1).value.string_value as tela_firebase,\n\telement_at(filter(event_params, x -> x.key = 'firebase_previous_screen'), 1).value.string_value as tela_anterior_firebase,\n\telement_at(filter(event_params, x -> x.key = 'clinic_name'), 1).value.string_value as nome_clinica,\n\telement_at(filter(event_params, x -> x.key = 'cnx_user_id'), 1).value.string_value as id_usuario_cnx,\n\telement_at(filter(event_params, x -> x.key = 'engagement_time_msec'), 1).value.int_value as tempo_engajamento_milisegundos,\n\telement_at(filter(event_params, x -> x.key = 'firebase_previous_id'), 1).value.int_value as id_anterior_firebase,\n\telement_at(filter(event_params, x -> x.key = 'patientId'), 1).value.int_value as id_paciente,\n\telement_at(filter(event_params, x -> x.key = 'clinic_id'), 1).value.int_value as id_clinica,\n\telement_at(filter(event_params, x -> x.key = 'interaction'), 1).value.string_value as interacao,\n\telement_at(filter(event_params, x -> x.key = 'specialty'), 1).value.string_value as especialidade,\n\tevent_previous_timestamp as timestamp_evento_anterior,\n\tevent_value_in_usd as valor_evento_em_usd,\n\tevent_bundle_sequence_id as id_sequencia_pacote_evento,\n\tevent_server_timestamp_offset as deslocamento_servidor_evento,\n\tuser_id as id_usuario,\n\tuser_pseudo_id as id_pseudo_usuario,\n\tdate_trunc('second', from_unixtime(user_first_touch_timestamp / 1000000)) as data_primeiro_contato_usuario,\n\tdevice.category as categoria_dispositivo,\n\tdevice.mobile_model_name as modelo_dispositivo_movel,\n\tdevice.mobile_os_hardware_model as modelo_hardware_dispositivo_movel,\n\tdevice.operating_system as sistema_operacional,\n\tdevice.operating_system_version as versao_sistema_operacional,\n\tdevice.language as idioma_dispositivo,\n\tgeo.country as pais,\n\tgeo.region as regiao,\n\tgeo.city as cidade,\n\tapp_info.id as nome_app,\n\tapp_info.version as versao_app,\n\tapp_info.firebase_app_id as id_app_firebase,\n\tapp_info.install_source as fonte_instalacao_app,\n\ttraffic_source.name as nome_fonte_trafego,\n\ttraffic_source.medium as meio_fonte_trafego,\n\ttraffic_source.source as origem_fonte_trafego,\n\tcollected_traffic_source.manual_campaign_id as id_campanha_manual,\n\tcollected_traffic_source.manual_campaign_name as nome_campanha_manual,\n\tcollected_traffic_source.manual_source as origem_manual,\n\tcollected_traffic_source.manual_medium as meio_manual,\n\tcollected_traffic_source.manual_term as termo_manual,\n\tcollected_traffic_source.manual_content as conteudo_manual,\n\tstream_id as id_stream,\n\tplatform as plataforma,\n\tis_active_user as flag_usuario_ativo,\n\texecution_time\nfrom \"delta\".\"bronze\".\"raw_ga_events\"", "relation_name": "\"delta\".\"bronze\".\"stg_ga_events\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:14.295004Z", "completed_at": "2025-07-01T18:32:14.325905Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:14.368125Z", "completed_at": "2025-07-01T18:32:14.368125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11962389945983887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_lina_condicao_tuss", "compiled": true, "compiled_code": "\n\n\nSELECT\n\t  FROM_UTF8(id) AS id_condicao_tuss\n\t, FROM_UTF8(conditional_id) AS id_condicao\n\t, FROM_UTF8(tuss_group_id) AS id_grupo_tuss\n\t, FROM_UTF8(parent_id) AS id_pai_grupo_tuss\n\t-- poss\u00edveis configura\u00e7\u00f5es que temos na linhas de cuidado que os algoritmos interpretam para colocar pessoas em dia ou em atraso\n\t-- (value_frequency, time_frequency, minimum_frequency)\n\t, CAST(value_frequency AS INT) valor_frequencia\n\t, CASE\n        WHEN FROM_UTF8(time_frequency) = 'year'  THEN 'ano'\n        WHEN FROM_UTF8(time_frequency) = 'month' THEN 'm\u00eas'\n        WHEN FROM_UTF8(time_frequency) = 'day'   THEN 'dia'\n        WHEN FROM_UTF8(time_frequency) = 'week'  THEN 'semana'\n        ELSE FROM_UTF8(time_frequency) -- mant\u00e9m o valor original caso n\u00e3o corresponda a nenhum\n      END AS periodicidade_frequencia\n\t, CAST(minimum_frequency AS INT) frequencia_minima\n\t, created_at AS data_criacao\n    , DATE(created_at AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_criacao\n\t, updated_at AS data_ultima_atualizacao\n    , DATE(updated_at AT TIME ZONE 'America/Sao_Paulo')  AS data_brt_ultima_atualizacao\n    , emitted_at\nFROM \"delta\".\"bronze\".\"raw_lina_condicao_tuss\"", "relation_name": "\"delta\".\"bronze\".\"stg_lina_condicao_tuss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:14.470130Z", "completed_at": "2025-07-01T18:32:14.495097Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:14.510931Z", "completed_at": "2025-07-01T18:32:14.510931Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08829855918884277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_csat_responses", "compiled": true, "compiled_code": "\nSELECT\n    \"_id\" as id_csat_responses,\n    ticketid as id_ticket,\n    date_add('hour',-3,createdat) as data_hora_criacao,\n    userphone as telefone_usuario,\n    username as nome_usuario,\n    satisfaction as satisfacao,\n    satisfactiondescribe as descricao_satisfacao,\n    selectedanswer as resposta_selecionada,\n    emitted_at\nFROM \"delta\".\"bronze\".\"raw_mongo_csat_responses\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_csat_responses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:14.605656Z", "completed_at": "2025-07-01T18:32:14.628994Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:14.652867Z", "completed_at": "2025-07-01T18:32:14.652867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09396243095397949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_filaatendimentolog", "compiled": true, "compiled_code": "\n\nSELECT\n    \"_id\" as id_fileatendimentolog,\n    dataagendamento,\n    databackoffice,\n    datacancelamento,\n    datacriacaoatendimento,\n    dataentrada,\n    dataultimavezonline,\n    flagaguardandoativacao,\n    flagretornonoshow,\n    cast(idatendimento as bigint) as id_atendimento,\n    cast(idclinica as bigint) as id_clinica,\n    cast(idespecialidade as bigint) as id_especialidade,\n    idfila as id_fila,\n    cast(idpaciente as bigint) as id_paciente,\n    cast(idpacienteconvenio as bigint) as id_pacienteconvenio,\n    cast(idprofissional as bigint) as id_profissional,\n    cast(idusuariobackoffice as bigint) as id_usuariobackoffice,\n    cast(idusuariocancelamento as bigint) as id_usuariocancelamento,\n    cast(idusuarioinclusao as bigint) as id_usuarioinclusao,\n    idade,\n    medicamentos,\n    nomeclinica,\n    nomeespecialidade,\n    nomepaciente,\n    nomeusuariobackoffice,\n    nomeusuarioinclusao,\n    sintomas,\n    sintomasevidentes,\n    telefone,\n    tempoestimadoinicial,\n    tipoprofissional,\n    current_timestamp(3) as emitted_at\nFROM\n    \"delta\".\"bronze\".\"raw_mongo_filaatendimentolog\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_filaatendimentolog\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:14.746666Z", "completed_at": "2025-07-01T18:32:14.779989Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:14.806358Z", "completed_at": "2025-07-01T18:32:14.806358Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10641860961914062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_log_acao_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT\n       _id AS id_acao_tiss\n     , _class AS classe\n     , CAST(idclinica AS BIGINT) AS id_clinica\n     , data_criacao AS data_criacao\n     , DATE(data_criacao AT TIME ZONE 'America/Sao_Paulo') AS data_brt_criacao\n     , CAST(idpaciente AS BIGINT) AS id_paciente\n     , CAST(idatendimento AS BIGINT) AS id_atendimento\n     , acao\n     , request\n     , response\n     , CAST(statuscode AS BIGINT) AS status_code\n     , emitted_at\nFROM \"delta\".\"bronze\".\"raw_mongo_log_acao_tiss\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_log_acao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:14.895783Z", "completed_at": "2025-07-01T18:32:14.916209Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:14.947666Z", "completed_at": "2025-07-01T18:32:14.947666Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10088396072387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_log_api_enterprise", "compiled": true, "compiled_code": "\n\n\nselect \n    _id as id_log_api_enterprise,\n    clinic_id as id_clinica,\n    clinic_name as nome_clinica,\n    endpoint,\n    ip,\n    full_request_url,\n    called_at\nfrom \"delta\".\"bronze\".\"raw_mongo_log_enterprise_caller\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_log_api_enterprise\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:15.044223Z", "completed_at": "2025-07-01T18:32:15.069509Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:15.093256Z", "completed_at": "2025-07-01T18:32:15.093256Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09790349006652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_log_medico_uso_ia", "compiled": true, "compiled_code": "\n\n\nselect\n\t_id\n\t,appointmentid as id_atendimento\n\t,professionalid as id_profissional\n\t,createdat as data_hora_criacao\n\t,DATE(createdat AT TIME ZONE 'America/Sao_Paulo') AS data_brt_criacao\n\t,action as acao\nfrom \"delta\".\"bronze\".\"raw_mongo_log_medical_record_ia_usage\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_log_medico_uso_ia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:15.205925Z", "completed_at": "2025-07-01T18:32:15.242198Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:15.269900Z", "completed_at": "2025-07-01T18:32:15.269900Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1211996078491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_ms_auditoria", "compiled": true, "compiled_code": "\n\n\nselect\n    _id\n\t,\"data\"\n\t,clinica as id_clinica\n    ,convenio._id as  id_convenio\n\t,convenio.nome as nome_convenio\n\t,autorizador_id\n\t,usuario\n\t,evento\n\t,sistema\n\t,versao\n\t,paciente._id as  id_paciente\n\t,paciente.carteirinha as carteirinha_paciente\n\t,transform(requisicoes, x -> x.url) AS url_requisicoes\n    ,transform(requisicoes, x -> x.tipo) AS tipo_requisicoes\n    ,transform(requisicoes, x -> x.path) AS path_requisicoes\n    ,transform(respostas, x -> x.tipo) AS tipo_respostas\n    ,transform(respostas, x -> x.data) AS data_respostas\n    ,transform(respostas, x -> x.path) AS path_respostas\n\t,erro.data as  data_erro\n\t,erro.descricao as  descricao_erro\n\t,erro.path as  path_erro\n    ,emitted_at\nfrom  \"delta\".\"bronze\".\"raw_mongo_ms_auditoria\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_ms_auditoria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:15.359366Z", "completed_at": "2025-07-01T18:32:15.390894Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:15.408335Z", "completed_at": "2025-07-01T18:32:15.408335Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09557437896728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_transcription_feedback", "compiled": true, "compiled_code": "\n\n\nselect \n\tidatendimento as id_atendimento\n\t,threadid as thread_id\n\t,createdat as data_hora_criacao_feedback\n\t,feedbacksofyaprocessorsentbody.key as key_id\n\t,feedbacksofyaprocessorsentbody.score as nota\n\t,feedbacksofyaprocessorsentbody.value as nota_descricao\n\t,feedbacksofyaprocessorsentbody.comment as comentario\nfrom \"delta\".\"bronze\".\"raw_mongo_transcription_feedback\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_transcription_feedback\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:15.529942Z", "completed_at": "2025-07-01T18:32:15.575670Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:15.606788Z", "completed_at": "2025-07-01T18:32:15.606788Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14372920989990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mongo_transcription_processado", "compiled": true, "compiled_code": "\n\n\nselect\n\tidatendimento as id_atendimento\n\t,threadid as thread_id\n\t,createdat as data_hora_criacao_transcricao\n\t,textprocessorresult.status as status_transcricao\n\t,textprocessorresult.output.resourceType as tipo_recurso\n\t,textprocessorresult.output.status as status_recurso\n\t,textprocessorresult.output.contained[1][2][2][2][2] subjetivo_v1\n\t,textprocessorresult.output.contained[1][2][3][2][2] objetivo_v1\n\t,textprocessorresult.output.contained[1][2][4][2][2] avaliacao_v1\n\t,textprocessorresult.output.contained[1][2][5][2][2] plano_v1\n\t,textprocessorresult.output.entry[1][1][2][2][2][2] subjetivo_v2\n\t,textprocessorresult.output.entry[1][1][2][3][2][2] objetivo_v2\n\t,textprocessorresult.output.entry[1][1][2][4][2][2] avaliacao_v2\n\t,textprocessorresult.output.entry[1][1][2][5][2][2] plano_v2\nfrom \"delta\".\"bronze\".\"raw_mongo_transcription_processado\"", "relation_name": "\"delta\".\"bronze\".\"stg_mongo_transcription_processado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:15.734304Z", "completed_at": "2025-07-01T18:32:15.781859Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:15.812680Z", "completed_at": "2025-07-01T18:32:15.812680Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13423657417297363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_indices_profissionais", "compiled": true, "compiled_code": "\n\nwith denominador as (\nselect \n\t*,\n    (CASE WHEN ava_negativa_pos_sessao is null then 0.00 ELSE 4.00 end +\n    CASE WHEN media_rate is null then 0.00 else 2.00 end +\n    CASE WHEN qtd_no_show is null then 4.00 else 4.00 end +\n    CASE WHEN retencao_pacientes is null then 3.00 else 3.00 end+\n    CASE WHEN retencao_novos_pacientes is null then 0.00 else 3.00 end) as denominador_qualidade,\n    (CASE WHEN flag_convenio_20 is null then 0.00 else 1.50 end +\n    CASE WHEN flag_convenio_30 is null then 0.00 else 0.50 end +\n    CASE WHEN horas_disponbilizadas is null then 4.00 else 4.00 end) as denominador_conduta\nfrom \"delta\".\"silver\".\"pvv_snp_iqe\"\n),\npvv as(\nselect\n\tid_profissional,\n\tnome_profissional,\n\texecuted_at as data_indice,\n\tiqe as resultado_iqe,\n    (ava_negativa_pontuacao + media_rate_pontuacao + qtd_no_show_pontuacao + retencao_pacientes_pontuacao + retencao_novos_pacientes_pontuacao)/\n    denominador_qualidade as resultado_iqe_qualidade,\n    (flag_20_pontuacao + flag_convenio_30_pontuacao + horas_disponbilizadas_pontuacao)/\n    denominador_conduta as resultado_iqe_conduta\nfrom denominador\n)\nselect\n\tcast(id_profissional as varchar) as id_profissional,\n\tto_hex(md5(to_utf8(cast(id_profissional as varchar) || 'pvv'))) as sk_profissional,\n\tnome_profissional,\n\tdata_indice,\n\tcast(null as boolean) as ativo_ultimos_30d,\n\tcast(null as boolean) as ativo_data_atual,\n\tresultado_iqe_qualidade,\n\tresultado_iqe_conduta,\n\tresultado_iqe/100 as resultado_iqe,\n\t'Psicologia Viva' as plataforma\nfrom (\n\tselect id_profissional,nome_profissional,data_indice,resultado_iqe_qualidade,resultado_iqe_conduta,resultado_iqe,\n\t\tLAG(resultado_iqe) OVER (PARTITION BY id_profissional ORDER BY data_indice) AS iqe_total_anterior,\n\t\tLAG(resultado_iqe_qualidade) OVER (PARTITION BY id_profissional ORDER BY data_indice) as iqe_qualidade_anterior,\n\t\tLAG(resultado_iqe_conduta) OVER (PARTITION BY id_profissional ORDER BY data_indice) as iqe_conduta_anterior\n\tfrom pvv\n) subquery\nwhere resultado_iqe <> iqe_total_anterior OR resultado_iqe_qualidade <> iqe_qualidade_anterior OR resultado_iqe_conduta <> iqe_conduta_anterior \n      OR iqe_total_anterior IS NULL OR iqe_qualidade_anterior IS NULL OR iqe_conduta_anterior IS NULL\n\nunion all\n\nselect\n\tprofessional_id as id_profissional,\n\tto_hex(md5(to_utf8(professional_id || 'zk'))) as sk_profissional,\n\tname as nome_profissional,\n\tbase_date as data_indice,\n\tactive_last30d as ativo_ultimos_30d,\n\tactive_current_date as ativo_data_atual,\n\tscore_iqe_qualidade_perc_new as resultado_iqe_qualidade,\n\tscore_iqe_conduta_perc_new as resultado_iqe_conduta,\n\tscore_iqe_perc_new as resultado_iqe,\n\t'Zenklub' as plataforma\nfrom (\n\tselect professional_id,name,base_date,active_last30d,active_current_date,score_iqe_qualidade_perc_new,score_iqe_conduta_perc_new,score_iqe_perc_new,\n\t\tLAG(active_last30d) OVER (PARTITION BY professional_id ORDER BY base_date) AS active_last30d_anterior,\n\t\tLAG(active_current_date) OVER (PARTITION BY professional_id ORDER BY base_date) AS active_current_date_anterior,\n\t\tLAG(score_iqe_perc_new) OVER (PARTITION BY professional_id ORDER BY base_date) AS iqe_total_anterior,\n\t\tLAG(score_iqe_qualidade_perc_new) OVER (PARTITION BY professional_id ORDER BY base_date) as iqe_qualidade_anterior,\n\t\tLAG(score_iqe_conduta_perc_new) OVER (PARTITION BY professional_id ORDER BY base_date) as iqe_conduta_anterior\n\tfrom zenklub.core.professional_quality_index \n) subquery\nwhere active_current_date <> active_current_date_anterior OR active_last30d <> active_last30d_anterior OR score_iqe_perc_new <> iqe_total_anterior OR score_iqe_qualidade_perc_new <> iqe_qualidade_anterior OR score_iqe_conduta_perc_new <> iqe_conduta_anterior \n      OR iqe_total_anterior IS NULL OR iqe_qualidade_anterior IS NULL OR iqe_conduta_anterior IS NULL OR active_last30d_anterior IS NULL OR active_current_date_anterior IS NULL", "relation_name": "\"delta\".\"gold\".\"stg_indices_profissionais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:15.909238Z", "completed_at": "2025-07-01T18:32:15.938517Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:15.950024Z", "completed_at": "2025-07-01T18:32:15.950024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08576679229736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_info_ic_lote_guia", "compiled": true, "compiled_code": "\n\n\nSELECT\n      id_info_ic_lote_guia\n\t, id_lote_faturavel\n\t, status_processo\n\t, status_envio\n\t, prestador\n\t, operadora\n\t, resumo\n\t, protocolo_envio\n\t, status_recebimento\n\t, data_criacao\n\t, data_brt_criacao\n\t, emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_info_ic_lote_guia\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_info_ic_lote_guia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:16.073534Z", "completed_at": "2025-07-01T18:32:16.081826Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:16.105462Z", "completed_at": "2025-07-01T18:32:16.105462Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08769631385803223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.cnx_snp_assinatura_profissional", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    id_assinatura\n    ,id_profissional_plataforma\n    ,id_profissional_prestador\n    ,id_plano\n    ,recorrencia_plano\n    ,valor_plano\n    ,status\n    ,data_hora_assinatura\n    ,data_brt_hora_assinatura\n    ,data_vigencia\n    ,id_transacao\n    ,data_hora_cancelamento\n    ,data_brt_hora_cancelamento\n    ,forma_pagamento\n    ,id_assinatura_plataforma\n    ,data_hora_reativacao\n    ,data_brt_hora_reativacao\nfrom \"delta\".\"silver\".\"cnx_dim_assinatura_profissional\"\n", "relation_name": "\"delta\".\"silver\".\"cnx_snp_assinatura_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:16.193434Z", "completed_at": "2025-07-01T18:32:16.221132Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:16.243734Z", "completed_at": "2025-07-01T18:32:16.243734Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09485673904418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.listagem_cid10", "compiled": true, "compiled_code": "\n\nSELECT \n\t*\nFROM \"delta\".\"gold\".\"stg_listagem_cid10\"", "relation_name": "\"delta\".\"gold\".\"listagem_cid10\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:16.341901Z", "completed_at": "2025-07-01T18:32:16.373650Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:16.392849Z", "completed_at": "2025-07-01T18:32:16.392849Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10036706924438477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_corpo_clinico", "compiled": true, "compiled_code": "\n\nSELECT\n      id_profissional\n    , id_clinica_profissional\n    , id_clinica_paciente -- cl\u00ednica atendida (paciente) (corpo_clinico)\n    , MAX(flag_bloquear_agenda) AS flag_bloquear_agenda\n    , MAX(flag_bloquear_fila) AS flag_bloquear_fila\n    , MAX(flag_profissional_transbordo) AS flag_profissional_transbordo\n    , ARRAY_AGG(fonte) AS fontes\nFROM (\n    SELECT *\n    FROM \"delta\".\"bronze\".\"stg_corpo_clinico_clinica\"\n\n    UNION ALL\n\n    SELECT *\n    FROM \"delta\".\"bronze\".\"stg_corpo_clinico_profissional\"\n) AS uniao\nGROUP BY id_profissional, id_clinica_profissional, id_clinica_paciente", "relation_name": "\"delta\".\"silver\".\"cnx_fact_corpo_clinico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:16.493031Z", "completed_at": "2025-07-01T18:32:16.522032Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:16.558173Z", "completed_at": "2025-07-01T18:32:16.558173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12294173240661621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.did_view_shifts", "compiled": true, "compiled_code": "\n\nwith t as (\n\tselect \n\t\tid_plantao,\n\t\tinstituicao_nome,\n\t\tid_instituicao,\n\t\tprofissional_nome,\n\t\tprofissional_cpf,\n        profissional_conselho,\n        profissional_telefone,\n        nome_especialidade,\n\t\tdata_inicio,\n\t\tdata_termino,\n\t\ttipovalidacaoplantaosemanalformatado\n\tfrom \"delta\".\"silver\".\"did_fact_shifts\"\n\twhere \n\t\t1=1\n--\t\tand data_inicio between date'2024-05-10' and date'2024-05-15'\n--\t\tand profissional_nome = 'Andrea Martins da Silva'\n\t\tand tipovalidacaoplantaosemanalformatado in ('Apurado', 'Aguardando apura\u00e7\u00e3o', 'Apurado com diverg\u00eancia')\n),\ntransbordo as (\n\t-- Esta CTA trata os dados de transbordo nos checks para inclui-los como shifts\n\t-- Tabela de checks \u00e9 Flat. N\u00e3o h\u00e1 distinc\u00e3o de inicio e fim. \u00c9 utilizado uma subquery para identificar dentro de todos\n\t-- registros, qual \u00e9 o checkin ou checkout dela. Avaliamos se h\u00e1 outro check do mesmo profissional 6 horas antes \n\t-- se houver, \u00e9 um checkout e o checkin \u00e9 esse registro passado.\n\t-- H\u00e1 casos em que n\u00e3o identificamos outro registro - como algu\u00e9m que esqueceu de bater entrada ou sa\u00edda. Para esses casos\n\t-- n\u00f3s vamos utilizar 6 horas antes e 6 horas depois para criar um checkin/checkout aproximado\n\tselect *,\n\t\t(\n\t\t\tselect min(data_termino)\n\t\t\tfrom silver.did_fact_checks tmp\n\t\t\twhere tmp.profissional_cpf = c.profissional_cpf\n\t\t\t\tand (tmp.instituicao_nome like '%Transbordo%' or tmp.instituicao_nome like '%Speed%')\n\t\t\t\tand tmp.data_termino < c.data_termino\n\t\t\t\tand date_diff('HOUR', tmp.data_termino, c.data_termino) < 8\n\t\t) checkin, -- Self join para capturar o checkin\n\t\t(\n\t\t\tselect max(data_termino)\n\t\t\tfrom silver.did_fact_checks tmp\n\t\t\twhere tmp.profissional_cpf = c.profissional_cpf\n\t\t\t\tand (tmp.instituicao_nome like '%Transbordo%' or tmp.instituicao_nome like '%Speed%')\n\t\t\t\tand tmp.data_termino > c.data_termino\n\t\t\t\tand date_diff('HOUR', c.data_termino, tmp.data_termino) < 8\n\t\t) checkout -- Self join para capturar o checkout\n\tfrom silver.did_fact_checks c\n\twhere instituicao_nome like '%Transbordo%' or instituicao_nome like '%Speed%'\n)\n\nselect \n\tmin(t1.id_plantao) as id_plantao,\n\tmin_by(t1.instituicao_nome, t1.id_plantao) as instituicao_nome,\n\tmin_by(t1.id_instituicao, t1.id_plantao) as id_instituicao,\n\tt1.profissional_nome,\n\tt1.profissional_cpf,\n    t1.profissional_conselho,\n    t1.profissional_telefone,\n    t1.nome_especialidade,\n\tleast(t1.data_inicio, coalesce(t2.data_inicio, date'2050-01-01')) as data_inicio,\n\tgreatest(t1.data_termino, coalesce(t2.data_termino, date'1900-01-01')) as data_termino\nfrom t as t1\nleft join t as t2 on t1.profissional_cpf = t2.profissional_cpf and (t1.data_termino = t2.data_inicio or t1.data_inicio = t2.data_termino) and t1.instituicao_nome = t2.instituicao_nome\ngroup by t1.profissional_nome, t1.profissional_cpf, t1.profissional_conselho, t1.profissional_telefone, t1.nome_especialidade,  9, 10\n\nunion all\n\nselect\n\t-- Criar uma chave composta da data termino do shift de transbordo mais os 3 primeiros numeros do cpf.\n\tconcat(translate(cast(data_termino as varchar), '- :.', ''), substring(profissional_cpf, 1, 3)) as id_plantao,\n\tinstituicao_nome,\n\t'1' as id_instituicao,\n\tprofissional_nome,\n\tprofissional_cpf,\n\tprofissional_conselho,\n\t'(99) 99999-9999' as profissional_telefone,\n\t'Cl\u00ednica M\u00e9dica' as nome_especialidade,\n\tif(checkin is null, data_termino - interval '6' hour, checkin) as data_inicio,\n\tif(checkin is null, data_termino + interval '6' hour, data_termino) as data_termino\nfrom transbordo\nwhere 1=1\t\n\tand (checkin is not null and checkout is null)\n\tor (checkin is null and checkout is null)", "relation_name": "\"delta\".\"silver\".\"did_view_shifts\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:16.675278Z", "completed_at": "2025-07-01T18:32:16.722629Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:16.756107Z", "completed_at": "2025-07-01T18:32:16.756107Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1451864242553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_engajamento_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.90545bda4b", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"engajamento\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:16.865041Z", "completed_at": "2025-07-01T18:32:16.897139Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:16.913095Z", "completed_at": "2025-07-01T18:32:16.913095Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10562300682067871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_engajamento_tipo__search__mood_tracker__content__clari__session.85c4c87202", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"engajamento\"\n    group by tipo\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'search','mood_tracker','content','clari','session'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:17.010660Z", "completed_at": "2025-07-01T18:32:17.040379Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:17.068632Z", "completed_at": "2025-07-01T18:32:17.068632Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10449647903442383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_engajamento_detalhe.84e5b87c47", "compiled": true, "compiled_code": "\n\n\n\nselect \n    detalhe\nfrom \"delta\".\"gold\".\"engajamento\"\nwhere detalhe is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:17.164374Z", "completed_at": "2025-07-01T18:32:17.185232Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:17.207708Z", "completed_at": "2025-07-01T18:32:17.207708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09538936614990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_engajamento_sk_engajamento.113a9c5f2b", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_engajamento\nfrom \"delta\".\"gold\".\"engajamento\"\nwhere sk_engajamento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:17.302322Z", "completed_at": "2025-07-01T18:32:17.322613Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:17.350129Z", "completed_at": "2025-07-01T18:32:17.350129Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09506487846374512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_engajamento_tipo.9ad79da2b0", "compiled": true, "compiled_code": "\n\n\n\nselect \n    tipo\nfrom \"delta\".\"gold\".\"engajamento\"\nwhere tipo is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:17.438647Z", "completed_at": "2025-07-01T18:32:17.467924Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:17.493098Z", "completed_at": "2025-07-01T18:32:17.493098Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0975496768951416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_engajamento_sk_engajamento.931de57ace", "compiled": true, "compiled_code": "\n\n\n\nselect\n    sk_engajamento\nfrom \"delta\".\"gold\".\"engajamento\"\nwhere sk_engajamento is not null\ngroup by sk_engajamento\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:17.584423Z", "completed_at": "2025-07-01T18:32:17.613428Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:17.629283Z", "completed_at": "2025-07-01T18:32:17.629283Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0907139778137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.hs_dim_clinicas", "compiled": true, "compiled_code": "\nwith canal as (\n\tselect\n\t\tid_company_hubspot,\n\t\tcase\n\t\t\twhen tipo_canal = 'SVA'\n\t\t\t\tthen 'PAT'\n\t\t\telse tipo_canal\n\t\tend as tipo_canal,\n\t\trow_number() OVER (PARTITION BY id_company_hubspot ORDER BY data_fechamento DESC) AS ranking\n\tfrom \"delta\".\"silver\".\"hs_fact_deals\"\n)\nSELECT \n    id_clinica_hubspot,\n\tnome_clinica,\n\tid_clinica,\n\tplataforma,\n\tcase\n\t\twhen flag_permite_comunicacao_braze = 'Sim'\n\t\t\tthen true\n\t\twhen flag_permite_comunicacao_braze = 'N\u00e3o'\n\t\t\tthen false\n\t\telse null\n\tend as flag_permite_comunicacao_braze,\n\tcase\n\t\twhen flag_permite_comunicacao_insider = 'Sim'\n\t\t\tthen true\n\t\twhen flag_permite_comunicacao_insider = 'N\u00e3o'\n\t\t\tthen false\n\t\telse null\n\tend as flag_permite_comunicacao_insider,\n\tdata_ultima_atualizacao_hubspot,\n\tdata_brt_ultima_atualizacao_hubspot,\n\tdata_criacao_hubspot,\n\tdata_brt_criacao_hubspot,\n\tassociated_companies,\n\tassociated_ids_companies,\n\tac.id_to as id_company_hubspot,\n\tc.nome_company_hubspot,\n\tc.bu,\n\tc.nome_canal,\n\tcan.tipo_canal,\n\tc.quantidade_vidas_ans,\n\tc.nome_conta_pai_operadoras,\n\tc.categoria_cliente,\n\tc.categoria_operadora,\n\tcl.previsao_inicio_go_live,\n\tcl.data_insert_engenharia,\n\tcl.data_brt_insert_engenharia\nFROM \"delta\".\"bronze\".\"stg_hs_clinicas\" as cl\nLEFT JOIN \"delta\".\"bronze\".\"stg_hs_associations_clinicas\" as ac on cl.id_clinica_hubspot = ac.id_from\nLEFT JOIN \"delta\".\"bronze\".\"stg_hs_companies\" as c on ac.id_to = c.id_company_hubspot\nLEFT JOIN canal as can on can.id_company_hubspot = c.id_company_hubspot and can.ranking = 1\n\n\nunion all\n\n\nSELECT\n\tid_clinica_hubspot,\n\tnome_clinica,\n\tid_clinica,\n\tplataforma,\n\tflag_permite_comunicacao_braze,\n\tflag_permite_comunicacao_insider,\n\tdata_atualizacao as data_brt_ultima_atualizacao_hubspot,\n\tdata_brt_atualizacao as data_brt_ultima_atualizacao_hubspot,\n\tdata_atualizacao as data_criacao_hubspot,\n\tdata_brt_atualizacao as data_brt_criacao_hubspot,\n\tnull as associated_companies,\n\tnull as associated_ids_companies,\n\tnull as id_company_hubspot,\n\t'Sem cliente vinculado' as nome_company_hubspot,\n\tbu,\n\tnull as nome_canal,\n\tnull as tipo_canal,\n\tnull as quantidade_vidas_ans,\n\tnull as nome_conta_pai_operadoras,\n\tnull as categoria_cliente,\n\tnull as categoria_operadora,\n\tnull as previsao_inicio_go_live,\n\tdata_atualizacao as data_insert_engenharia,\n\tdata_brt_atualizacao as data_brt_insert_engenharia\nFROM \"delta\".\"bronze\".\"stg_aux_clinica_autoritativa\"", "relation_name": "\"delta\".\"silver\".\"hs_dim_clinicas\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:17.725426Z", "completed_at": "2025-07-01T18:32:17.756805Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:17.787078Z", "completed_at": "2025-07-01T18:32:17.787078Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10090088844299316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_indices_pacientes_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.97eaca6b30", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"indices_pacientes\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:17.900832Z", "completed_at": "2025-07-01T18:32:17.931242Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:17.954008Z", "completed_at": "2025-07-01T18:32:17.954008Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11944413185119629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_indices_pacientes_resultado_icm__Adequado__Inadequado.044a0b105f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        resultado_icm as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"indices_pacientes\"\n    group by resultado_icm\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Adequado','Inadequado'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:18.042487Z", "completed_at": "2025-07-01T18:32:18.082076Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:18.099438Z", "completed_at": "2025-07-01T18:32:18.099438Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09721517562866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_indices_pacientes_resultado_iscm__Risco_1__Risco_2__Risco_3__Risco_4__Risco_5.092f6e02f7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        resultado_iscm as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"indices_pacientes\"\n    group by resultado_iscm\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Risco 1','Risco 2','Risco 3','Risco 4','Risco 5'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:18.193574Z", "completed_at": "2025-07-01T18:32:18.225097Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:18.241147Z", "completed_at": "2025-07-01T18:32:18.241147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09385156631469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_indices_pacientes_resultado_ism__Alto__Baixo__M_dio.38de6e8ef0", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        resultado_ism as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"indices_pacientes\"\n    group by resultado_ism\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Alto','Baixo','M\u00e9dio'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:18.344443Z", "completed_at": "2025-07-01T18:32:18.377950Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:18.400139Z", "completed_at": "2025-07-01T18:32:18.400139Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1027827262878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_indices_pacientes_sk_paciente__data_indice__id_empresa.a0a06a057e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sk_paciente, data_indice, id_empresa\n    from \"delta\".\"gold\".\"indices_pacientes\"\n    group by sk_paciente, data_indice, id_empresa\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:18.551817Z", "completed_at": "2025-07-01T18:32:18.597929Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:18.617047Z", "completed_at": "2025-07-01T18:32:18.617047Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14100265502929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_indices_pacientes_sk_paciente.75845bbfd2", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_paciente\nfrom \"delta\".\"gold\".\"indices_pacientes\"\nwhere sk_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:18.713978Z", "completed_at": "2025-07-01T18:32:18.743294Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:18.763284Z", "completed_at": "2025-07-01T18:32:18.763284Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09914517402648926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_fact_lina_compromisso", "compiled": true, "compiled_code": "\n\nSELECT \n    id_paciente,\n    nome_paciente,\n    grupo_economico,\n    equipe_aps,\n    data_inclusao,\n    data_ultima_atualizacao,\n    tipo,\n    condicoes_de_saude_do_beneficiario,\n    id_grupo_tuss,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    data_compromisso_realizado,\n    id_resp_tecnico,\n    resp_tecnico,\n    cod_resp_tecnico,\n    plataforma\nFROM \"delta\".\"bronze\".\"lina_inter_compromisso_acompanhamento_detalhe\" \n\nUNION ALL\n\nSELECT \n    id_paciente,\n    nome_paciente,\n    grupo_economico,\n    equipe_aps,\n    data_inclusao,\n    data_ultima_atualizacao,\n    null as tipo,\n    condicoes_de_saude_do_beneficiario,\n    null as id_grupo_tuss,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    data_compromisso_realizado,\n    id_resp_tecnico,\n    resp_tecnico,\n    cod_resp_tecnico,\n    plataforma\nFROM \"delta\".\"bronze\".\"lina_inter_compromisso_aderencia_atividade_fisica\" \n\nUNION ALL\n\nSELECT \n    id_paciente,\n    nome_paciente,\n    grupo_economico,\n    equipe_aps,\n    data_inclusao,\n    data_ultima_atualizacao,\n    null as tipo,\n    condicoes_de_saude_do_beneficiario,\n    null as id_grupo_tuss,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    data_compromisso_realizado,\n    id_resp_tecnico,\n    resp_tecnico,\n    cod_resp_tecnico,\n    plataforma\nFROM \"delta\".\"bronze\".\"lina_inter_compromisso_adesao_nutricao\" \n\nUNION ALL\n\nSELECT \n    id_paciente,\n    nome_paciente,\n    grupo_economico,\n    equipe_aps,\n    data_inclusao,\n    data_ultima_atualizacao,\n    null as tipo,\n    condicoes_de_saude_do_beneficiario,\n    null as id_grupo_tuss,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    data_compromisso_realizado,\n    id_resp_tecnico,\n    resp_tecnico,\n    cod_resp_tecnico,\n    plataforma\nFROM \"delta\".\"bronze\".\"lina_inter_compromisso_frequencia_atividade_fisica\" \n\nUNION ALL\n\nSELECT \n    id_paciente,\n    nome_paciente,\n    grupo_economico,\n    equipe_aps,\n    data_inclusao,\n    data_ultima_atualizacao,\n    null as tipo,\n    condicoes_de_saude_do_beneficiario,\n    null as id_grupo_tuss,\n    compromisso,\n    resultado,\n    unidade_do_resultado,\n    data_compromisso_realizado,\n    id_resp_tecnico,\n    resp_tecnico,\n    cod_resp_tecnico,\n    plataforma\nFROM \"delta\".\"bronze\".\"lina_inter_compromisso_liberacao_atividade_fisica\"", "relation_name": "\"delta\".\"silver\".\"lina_fact_lina_compromisso\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:18.861610Z", "completed_at": "2025-07-01T18:32:18.891478Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:18.916487Z", "completed_at": "2025-07-01T18:32:18.916487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10635209083557129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_lina_fact_carelines_data_execucao__day__5.ef1e0c68f7", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_execucao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"silver\".\"lina_fact_carelines\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_execucao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:19.012271Z", "completed_at": "2025-07-01T18:32:19.042856Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:19.077325Z", "completed_at": "2025-07-01T18:32:19.077325Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1122889518737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_lina_fact_status_compromisso_execution_time__day__5.d1e730deed", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(execution_time as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"silver\".\"lina_fact_status_compromisso\"\n    where\n        -- to exclude erroneous future dates\n        cast(execution_time as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:19.193278Z", "completed_at": "2025-07-01T18:32:19.216482Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:19.238107Z", "completed_at": "2025-07-01T18:32:19.238107Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10500550270080566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_typeform_linha_renal_amil", "compiled": true, "compiled_code": "\n\n\nwith ultimo_preenchimento as (\n    select\n        response_id,\n        form_id,\n        form_title,\n        form_type,\n        language,\n        form_created_at,\n        form_last_updated_at,\n        form_published_at,\n        user_id,\n        person_id,\n        id_paciente,\n        name,\n        token,\n        score,\n        landed_at,\n        submitted_at,\n        field_id,\n        field_ref,\n        field_type,\n        field_title,\n        field_description,\n        field_required,\n        answer_type,\n        answer,\n        row_number() over(partition by form_id, person_id order by submitted_at desc) as rn\n    from \"delta\".\"silver\".\"lina_fact_typeform\"\n    where 1=1\n    and form_id in ('tgEM8YLm')\n)\nselect\n    user_id as id_usuario_lina\n    ,person_id as id_paciente_lina\n    ,id_paciente as id_paciente_conexa\n    ,max(submitted_at) as data_hora_preenchimento\n    ,max(answer) filter(where field_id = 'vFQsvlp0UjPX') as medico_nefrologista_referencia\n    ,max(answer) filter(where field_id = 'TpHP2wIpDQtJ') as possui_equipe_multidisciplinar\n    ,max(answer) filter(where field_id = 'nZA15Tsh6uJC') as estagio_doenca_renal\n    ,max(answer) filter(where field_id = 'IVH4OlXa8NIh') as tipo_tratamento\n    ,max(answer) filter(where field_id = 'zxx3DvGn9YEU') as possui_transplante_renal\n    ,cast(cast(max(answer) filter(where field_id = 'EPKovDQ582Ka') as timestamp) as date) as data_ultima_consulta_nefrologista\n    ,cast(cast(max(answer) filter(where field_id = 'j5dt5mXObb3U') as timestamp) as date) as data_ultimos_exames_laboratoriais\n    ,max(answer) filter(where field_id = 'psRCo4GPaxJL') as houveram_alteracoes_laboratoriais\n    ,max(answer) filter(where field_id = 'QiCxWxS7ztHb') as quais_alteracoes\nfrom ultimo_preenchimento\nwhere 1=1\nand rn = 1\ngroup by 1, 2, 3", "relation_name": "\"delta\".\"gold\".\"az_typeform_linha_renal_amil\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:19.322868Z", "completed_at": "2025-07-01T18:32:19.351840Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:19.378486Z", "completed_at": "2025-07-01T18:32:19.378486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0997164249420166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_primeiro_pagamento", "compiled": true, "compiled_code": "\n\nwith prim_pgto as(\nSELECT \n\tt1.id_paciente,\n\tt2.id_convenio,   \n    min(t1.data_pagamento) as primeiro_pagamento,\n    date(min(t1.data_pagamento)) as primeiro_pagamento_brt,\n\trank() OVER (partition by t1.id_paciente order by min(t1.data_pagamento) desc) as ranking \nFROM \"delta\".\"bronze\".\"stg_pvv_atendimento\" as t1\nINNER JOIN \"delta\".\"bronze\".\"stg_pvv_pacientes\" as t2 on t2.id_paciente = t1.id_paciente\nGROUP BY t1.id_paciente,t2.id_convenio,t1.data_pagamento\n)\n\nselect \n\tid_paciente,    \n    primeiro_pagamento,\n    primeiro_pagamento_brt \nfrom prim_pgto\t\nwhere ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_primeiro_pagamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:19.488657Z", "completed_at": "2025-07-01T18:32:19.514667Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:19.538324Z", "completed_at": "2025-07-01T18:32:19.538324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09852910041809082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_stg_pvv_atendimento_data_ultima_alteracao__day__5.56c802e118", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_ultima_alteracao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"bronze\".\"stg_pvv_atendimento\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_ultima_alteracao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:19.615198Z", "completed_at": "2025-07-01T18:32:19.619436Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:19.635327Z", "completed_at": "2025-07-01T18:32:19.635327Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.058362722396850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.pvv_snp_plano_psicologo", "compiled": true, "compiled_code": "\n\n\n\nselect \n\tid_plano_psicologo, \n      data_ultima_alteracao,\n      usuario_ultima_alteracao, \n      id_profissional, \n      agencia, \n      agencia_dv, \n      bank_code, \n      conta, \n      conta_dv, \n      document_number, \n      nome_cartao, \n      tipo_conta, \n      pix_tipo, \n      pix_chave, \n      dados_bancarios, \n      recipient, \n      libras, \n      data_vigencia, \n      plano, \n      tempo_consulta, \n      valor_consulta, \n      flag_psicologo_particular, \n      flag_desconto_30, \n      flag_desconto_40, \n      flag_desconto_50, \n      flag_convenio_20, \n      flag_convenio_25, \n      flag_convenio_30, \n      flag_convenio_35, \n      flag_convenio_40, \n      flag_convenio_50, \n      flag_convenio_60, \n      valor_consulta_presencial, \n      flag_voucher_gratuito, \n      envio_email_cortesia, \n      quantidade_cortesia, \n      flag_desconto_50_reais, \n      quantidade_desconto, \n      tempo_consulta_cortesia, \n      flag_pausar_conta, \n      flag_tempo_antecedencia, \n      flag_confirmacao_paciente, \n      flag_antecipacao_convenio, \n      observacao, convenio_seduc, \n      exclusivo_seduc, \n      quantidade_max_escolas_seduc, \n      flag_bloqueado_seduc, \n      convenio_acao_sa, \n      flag_aceito_termo_seduc, \n      data_aceito_termo_seduc, \n      flag_fonasa, \n      moeda, \n      flag_isapre, \n      currency, \n      moeda_local,\n      moeda_local_presencial, \n      paypal_id, \n      exclusivo_convenio_triagem, \n      valor_local_consulta, \n      valor_local_consulta_presencial, \n      emitted_at, \n      is_delete, \n      updated_at\nfrom \"delta\".\"silver\".\"pvv_dim_plano_psicologo\" as pp\n", "relation_name": "\"delta\".\"silver\".\"pvv_snp_plano_psicologo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:19.720381Z", "completed_at": "2025-07-01T18:32:19.751128Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:19.782523Z", "completed_at": "2025-07-01T18:32:19.782523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1038057804107666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_dim_profissional", "compiled": true, "compiled_code": "\n\nwith bloqueio as(\n   SELECT id_profissional,\n          situacao\nfrom \"delta\".\"silver\".\"pvv_fact_pendencia_profissional_prontuario\" \nwhere ranking = 1\n)\nselect \n     pro.id_profissional,\n     pro.data_ultima_alteracao,\n     pro.data_brt_ultima_alteracao,\n     pro.data_inclusao,\n     pro.data_brt_inclusao,\n     pro.data_inativo,\n     pro.data_brt_inativo,\n     pro.usuario_ultima_alteracao,\n     pro.id_seguranca_usuario,\n     pro.nome_profissional,\n     pro.email_profissional,\n     pro.celular as celular_profissional,\n     pro.telefone as telefone_profissional,\n     pro.perfil,\n     pro.crp,\n     pro.cpf as cpf_profissional,\n     pro.email_cs_responsavel,\n     pro.nada_consta,\n     pro.flag_foto_perfil,\n     pro.quantidade_visualizacoes_perfil_mes,\n     pro.sexo as sexo_profissional,\n     pro.data_nascimento as data_nascimento_profissional,\n     case\n        when pro.idade < 0   then null\n        when pro.idade < 11  then '0 - 10'\n        when pro.idade < 21  then '11 - 20'\n        when pro.idade < 31  then '21 - 30'\n        when pro.idade < 41  then '31 - 40'\n        when pro.idade < 51  then '41 - 50'\n        when pro.idade < 61  then '51 - 60'\n        when pro.idade < 71  then '61 - 70'\n        when pro.idade < 81  then '71 - 80'\n        when pro.idade < 91  then '81 - 90'\n        when pro.idade < 101 then '91 - 100'\n        when pro.idade < 120 then '> 100 anos'\n        else null\n     end faixa_etaria_profissional,\n     pro.tipo_abordagem,\n     pro.pais_atuacao,\n     pro.estado_crp,\n     pro.conselho_regional,\n     pro.registro_conselho_profissional,\n     pro.email_vendedor_responsavel,\n     pro.email_supervisor_seduc,\n     pro.estado_civil,\n     pro.flag_desativado, \n     pro.status_cancelamento,\n     pro.bairro,\n     pro.cep,\n     pro.cidade,\n     pro.complemento,\n     pro.descricao,\n     pro.endereco,\n     pro.estado,\n     pro.endereco_perfil,\n     pro.especializacoes,\n     pro.formacao,\n     pro.numero,\n     pro.numero_registro,\n     pro.titulo,\n     pro.url_lattes,\n     pro.url_youtube,\n     pro.flag_termo_aceite,\n     pro.flag_termo_aceite_convenio,\n     pro.identidade,\n     pro.nacionalidade,\n     pro.profissao,\n     pro.termoe_psi,\n     pro.pais,\n     pro.idioma,\n     pro.codigo_pais_celular,\n     pro.id_conta_salesforce,\n     pro.valor_base_atendimento,\n     pro.valor_definido,\n     pro.flag_ativo,\n     pro.flag_aparece_roi,\n     pro.flag_fonasa,\n     pro.tipo_profissional,\n     CASE \n            WHEN pro.tipo_profissional IN('Psic\u00f3logo','Triagem') THEN 'CRP'\n            WHEN pro.tipo_profissional IN('Nutricionista') THEN 'CRN'\n            ELSE NULL\n     END tipo_conselho,\n     pro.origem,\n     perfil.data_inclusao as data_do_cadastro,\n     perfil.data_brt_inclusao as data_brt_do_cadastro,\n     opt.flag_atende_adolescencia,\n     opt.flag_atende_adulto,\n     opt.flag_atende_infancia,\n     opt.flag_atende_pre_adolescente,\n     blq.situacao as flag_perfil_bloqueado_prontuario,\n     if((meu.data_vigencia >= (date_add('day', -1, current_date))),true,false) as flag_psi_vigente,\n     meu.regra_60_dias,\n     meu.dias_vigencia_vencida,\n     meu.dias_para_vencer_vigencia,\n     meu.data_vigencia,\n     meu.data_brt_vigencia,\n     meu.plano,\n     rp.data_pagamento,\n     rp.data_brt_pagamento,\n     rp.valor_pagamento,\n     meu.flag_psicologo_particular,\n     pro.emitted_at,\n     pro.is_delete,\n     pro.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_profissionais\" as pro\nleft join \"delta\".\"bronze\".\"stg_pvv_seguranca_usuario\" as seg_user on seg_user.id_seguranca_usuario = pro.id_seguranca_usuario\nleft join \"delta\".\"bronze\".\"stg_pvv_perfil_usuario\" as perfil on perfil.id_seguranca_usuario = pro.id_seguranca_usuario\nleft join \"delta\".\"silver\".\"pvv_dim_plano_psicologo\" as meu on meu.id_profissional = pro.id_profissional\nleft join \"delta\".\"bronze\".\"stg_pvv_opcoes_atendimento\" as opt on opt.id_profissional = pro.id_profissional\nleft join \"delta\".\"bronze\".\"stg_pvv_ultimo_pagamento_plano_profissional\" as rp on rp.id_profissional = pro.id_profissional\nleft join bloqueio as blq on blq.id_profissional = pro.id_profissional\nwhere seg_user.flag_teste = false --", "relation_name": "\"delta\".\"silver\".\"pvv_dim_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:19.878754Z", "completed_at": "2025-07-01T18:32:19.910990Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:19.935525Z", "completed_at": "2025-07-01T18:32:19.935525Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10297989845275879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.sf_dim_clinica", "compiled": true, "compiled_code": "\n\nSELECT \n    c.id_account,\n\ta.cliente,\n\ta.bu,\n\tc.plataforma,\n\tc.id_clinica,\n\tc.nome_clinica,\n\tc.flag_permite_comunicacao,\n\tc.data_atualizacao,\n\tc.data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"stg_sf_clinica\" as c\nLEFT JOIN \"delta\".\"silver\".\"sf_dim_conta\" as a on c.id_account = a.id_account\nwhere c.isdeleted = false\n\nUNION ALL\n\nSELECT\n    cast(id_clinica_hubspot as varchar) as id_account,\n\t'Sem cliente vinculado' as cliente,\n\tbu,\n\tplataforma,\n\tid_clinica,\n\tnome_clinica,\n\tflag_permite_comunicacao_braze,\n\tdata_atualizacao,\n\tdata_brt_atualizacao\nFROM \"delta\".\"bronze\".\"stg_aux_clinica_autoritativa\"", "relation_name": "\"delta\".\"silver\".\"sf_dim_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:20.037386Z", "completed_at": "2025-07-01T18:32:20.066060Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:20.095411Z", "completed_at": "2025-07-01T18:32:20.095411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10837364196777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.zd_fact_tickets", "compiled": true, "compiled_code": "\n\nwith temp_ticket as (\nSELECT\n    tck.id_ticket,\n    tck.canal,\n    case\n        when \n\t\t\tgrp.nome_group in ('N2 - Paciente', 'N2 - Profissional de Sa\u00fade', 'N2 - Gestor')\n\t\t\tand brd.nome_brand in ('Portal do Gestor')\n\t\t\tand usr.role_user = 'end-user'\n        then ce.cliente\n        else tck.id_clinica\n    end as id_clinica,\n    tck.priority,\n    tck.id_ticket_form,\n    fm.nome_ticket_form,\n    tck.created_at,\n    tck.updated_at,\n    mtr.solved_at,\n    mtr.reopens,\n    mtr.replies,\n    mtr.assigned_at,\n    mtr.agent_wait_time_in_minutes_business,\n    mtr.agent_wait_time_in_minutes_calendar,\n    mtr.first_resolution_time_in_minutes_business,\n    mtr.first_resolution_time_in_minutes_calendar,\n    mtr.full_resolution_time_in_minutes_business,\n    mtr.full_resolution_time_in_minutes_calendar,\n    mtr.on_hold_time_in_minutes_business,\n    mtr.on_hold_time_in_minutes_calendar,\n    mtr.reply_time_in_minutes_business,\n    mtr.reply_time_in_minutes_calendar,\n    mtr.requester_wait_time_in_minutes_business,\n    mtr.requester_wait_time_in_minutes_calendar,\n    tck.status,\n    tck.subject,\n    tck.description,\n    tck.type,\n    tck.id_group,\n    grp.nome_group,\n    tck.id_brand,\n    brd.nome_brand,\n    tck.id_organization,\n    org.nome_organization,\n    tck.rating_score,\n    tck.rating_comment,\n    tck.ticket_source,\n    tck.id_requester,\n    usr.nome_user as nome_requester,\n    usr.email_user as email_requester,\n    usr.role_user as role_requester,\n\ttck.id_assignee,\n\tusr2.nome_user as nome_assignee,\n    usr2.email_user as email_assignee,\n    usr2.role_user as role_assignee,\n    evt.agent_work_time as agent_work_time_breach,\n    evt.reply_time as reply_time_breach,\n    evt.requester_wait_time as requester_wait_time_breach,\n    case \n\t\twhen \n\t\t\ttck.canal in ('chat', 'whatsapp', 'answer_bot') \n\t\t\tand brd.nome_brand in ('Conexa Sa\u00fade', 'Docpass') \n\t\t\tand usr.role_user = 'end-user'\n\t\t\tand grp.nome_group = 'N1 Psic\u00f3logo'\n\t\tthen 'N1 - Psicologia Viva'\n\t\twhen tck.canal = 'chat' and brd.nome_brand = 'iMedicina' and usr.role_user = 'end-user' then 'N1 - iMedicina'\n\t\twhen tck.canal not in ('chat', 'whatsapp', 'answer_bot') and brd.nome_brand = 'iMedicina' and usr.role_user = 'end-user' then 'N1 - iMedicina'\n\t\twhen tck.canal in ('chat', 'whatsapp') and brd.nome_brand = 'Psicologia Viva' and grp.nome_group not in ('BR - Ouvidoria', 'Reclame AQUI') and usr.role_user = 'end-user' then 'N1 - Psicologia Viva'\n\t\twhen \n\t\t\ttck.canal not in ('chat', 'whatsapp', 'answer_bot') \n\t\t\tand brd.nome_brand = 'Psicologia Viva' \n\t\t\tand fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\t\tand grp.nome_group in ('BR - E-mail',\n            'BR - Financeiro',\n            'BR - Demandas Gerais',\n            'BR - Suporte',\n            'BR - Sala de Atendimento',\n            'BU Paciente',\n            'BU Psic\u00f3logo',\n            'Super H\u00edbridos',\n\t\t\t'BR - Gest\u00e3o [N1]')\n\t\t\tand usr.role_user = 'end-user' \n\t\tthen 'N1 - Psicologia Viva'\n        when \n\t\t\ttck.canal not in ('chat', 'whatsapp', 'answer_bot') \n\t\t\tand brd.nome_brand in ('Conexa Sa\u00fade', 'Docpass')\n\t\t\tand fm.nome_ticket_form = 'Formul\u00e1rio Conexa Sa\u00fade'\n\t\t\tand grp.nome_group in ('Paciente',\n            'Paciente particular',\n            'Profissional de Sa\u00fade',\n            'Docpass + Profissional',\n            'Whatsapp - Docpass',\n            'Whatsapp - Paciente',\n            'Whatsapp - Profissional',\n            'Super H\u00edbridos',\n            'Cuidados Especiais',\n            'Inova\u00e7\u00e3o',\n            'Backlog',\n\t\t\t'Gest\u00e3o - N1')\n\t\t\tand usr.role_user = 'end-user' \n\t\tthen 'N1 - Conexa Sa\u00fade'\n\t\twhen \n\t\t\ttck.canal = 'whatsapp'\n\t\t\tand brd.nome_brand = 'Psyalive'\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'N1 - Psicologia Viva LATAM'\n\t\twhen\n\t\t\ttck.canal not in ('chat', 'whatsapp', 'answer_bot')\n\t\t\tand brd.nome_brand = 'Psyalive'\n\t\t\tand usr.role_user = 'end-user'\n\t\t\tand grp.nome_group not like '%N2%'\n\t\tthen 'N1 - Psicologia Viva LATAM'\n\t\twhen \n\t\t\tgrp.nome_group in ('N2 - Paciente', 'N2 - Profissional de Sa\u00fade', 'N2 - Gestor', 'N2 Paciente Medicina', 'N2 Profissional de sa\u00fade', 'N2 Gestor')\n\t\t\tand brd.nome_brand in ('Conexa Sa\u00fade', 'Docpass')\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'N2 - Conexa Sa\u00fade'\n\t\twhen \n\t\t\tgrp.nome_group in ('N2 Paciente Sa\u00fade Mental', 'N2 Psic\u00f3logo')\n\t\t\tand brd.nome_brand in ('Conexa Sa\u00fade', 'Docpass')\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'N2 - Psicologia Viva'\n\t\twhen \n\t\t\tgrp.nome_group in ('N2 - Paciente', 'N2 - Profissional de Sa\u00fade', 'N2 - Gestor')\n\t\t\tand brd.nome_brand in ('Portal do Gestor')\n\t\t\tand usr.role_user = 'end-user'\n\t\t\tand cliente like '%psicologia_viva'\n\t\tthen 'N2 - Portal do Gestor - Psicologia Viva'\n\t\twhen \n\t\t\tgrp.nome_group in ('N2 Paciente Sa\u00fade Mental', 'N2 Psic\u00f3logo')\n\t\t\tand brd.nome_brand in ('Portal do Gestor')\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'N2 - Portal do Gestor - Psicologia Viva'\n\t\twhen \n\t\t\tgrp.nome_group in ('N2 - Paciente', 'N2 - Profissional de Sa\u00fade', 'N2 - Gestor', 'N2 Paciente Medicina', 'N2 Profissional de sa\u00fade', 'N2 Gestor')\n\t\t\tand brd.nome_brand in ('Portal do Gestor')\n\t\t\tand usr.role_user = 'end-user'\n\t\t\tand cliente like '%conexa_saude'\n\t\tthen 'N2 - Portal do Gestor - Conexa Sa\u00fade'\n\t\twhen \n\t\t\tgrp.nome_group = 'N2 iMedicina'\n\t\t\tand brd.nome_brand in ('Conexa Sa\u00fade', 'Docpass')\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'N2 - iMedicina'\n\t\twhen \n\t\t\tgrp.nome_group = 'N2 - iMedicina'\n\t\t\tand brd.nome_brand = 'iMedicina'\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'N2 - iMedicina'\n\t\twhen\n\t\t\tgrp.nome_group like '%N2%'\n\t\t\tand brd.nome_brand in ('Psicologia Viva', 'Libera\u00e7\u00e3o de consulta', 'Suporte TI - Psicologia Viva', 'Colaboradores - Psicologia Viva')\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'N2 - Psicologia Viva'\n\t\twhen\n\t\t\tgrp.nome_group like '%N2%'\n\t\t\tand brd.nome_brand = 'Psyalive'\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'N2 - Psicologia Viva LATAM'\n\t\twhen\n\t\t\torg.nome_organization = 'Reclame AQUI'\n\t\t\tand empresa = 'ra_conexa_saude'\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'Reclame AQUI - Conexa Sa\u00fade'\n\t\twhen\n\t\t\torg.nome_organization = 'Reclame AQUI'\n\t\t\tand empresa = 'ra_psicologia_viva'\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'Reclame AQUI - Psicologia Viva'\n\t\twhen\n\t\t\torg.nome_organization = 'Reclame AQUI'\n\t\t\tand empresa = 'ra_imedicina'\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'Reclame AQUI - iMedicina'\n\t\twhen \n\t\t\tgrp.nome_group = 'BR - Ouvidoria'\n\t\t\tand usr.role_user = 'end-user'\n\t\tthen 'Ouvidoria - Psicologia Viva'\n\t\twhen grp.nome_group like '%SQUAD%' then 'N3 - Engenharia & Produto (Conexa)'\n\t\twhen grp.nome_group = 'Suporte TI' then 'N3 - TI & Produto (Psicologia Viva)'\n\t\twhen grp.nome_group = 'Prote\u00e7\u00e3o de Dados' then 'N3 - Prote\u00e7\u00e3o de Dados (Conexa)'\n\t\twhen tck.canal in ('chat', 'whatsapp') and brd.nome_brand in ('Conexa Sa\u00fade', 'Docpass') and usr.role_user = 'end-user' then 'N1 - Conexa Sa\u00fade'\n\t\telse 'Not Applicable'\t\n\tend\tclass_resolver,\n    case\n        when tck.canal not in ('chat', 'whatsapp', 'answer_bot') and usr.role_user = 'end-user' then 'E-mail'\n        when tck.canal = 'chat' and usr.role_user = 'end-user' then 'Chat'\n        when tck.canal = 'whatsapp' and usr.role_user = 'end-user' then 'WhatsApp'\n        else 'N\u00e3o Classificado'\n    end as canal_contato,\n\tcase\n\t\t-- Regras de motivos para formul\u00e1rio pv br\n\t\t-- Regra padr\u00e3o para tipo contato sem identifica\u00e7\u00e3o\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato = 'tipo_contato_nao_identificada'\n\t\t\tthen 'nao identificado'\n\t\t-- Regra para pegar qualquer motivo vinculado a chatbot\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato like '%chatbot%' \n\t\t\tthen 'chatbot'\n\t\t-- Regra padr\u00e3o para qualquer contato que n\u00e3o tenha tipo sem identifica\u00e7\u00e3o ou que n\u00e3o seja chatbot\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\t\tthen ctt.br_motivo_contato\n\t\t-- Regra UNICA de motivo para formul\u00e1rio SulAm\u00e9rica\n\t\twhen fm.nome_ticket_form = 'SulAm\u00e9rica'\n\t\tand tck.ticket_source = 'pv'\n\t\t\tthen ctt.sulamerica_motivo_contato\n\t\t-- Regras de motivos para formul\u00e1rio pv latam\n\t\t-- Regra padr\u00e3o para tipo contato sem identifica\u00e7\u00e3o\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv' \n\t\tand ctt.latam_tipo_contato = 'no informado'\n\t\t\tthen 'no informado'\n\t\t-- Regra padr\u00e3o para qualquer contato que n\u00e3o tenha tipo sem identifica\u00e7\u00e3o\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\t\tthen ctt.latam_motivo_contato\n\t\t-- Regras de motivos para formul\u00e1rio suporte ti (suporte ti precisa necessarimente da tag do ticket para sabermos de onde vem)\n\t\t-- Regra padr\u00e3o para tipo contato sem identifica\u00e7\u00e3o e que tenha tag pv latam\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv' \n\t\tand ctt.latam_tipo_contato = 'no informado'\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen 'no informado'\n\t\t-- Regra padr\u00e3o para qualquer contato com tag latam que n\u00e3o tenha tipo sem identifica\u00e7\u00e3o\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen ctt.latam_motivo_contato\n\t\t-- Regra padr\u00e3o para tipo contato com tag pv br e sem identifica\u00e7\u00e3o\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato = 'tipo_contato_nao_identificada'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen 'nao identificado'\n\t\t-- Regra para pegar qualquer motivo vinculado a chatbot e que tenha tag pv br\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato like '%chatbot%'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen 'chatbot'\n\t\t-- Regra padr\u00e3o para qualquer contato com tag pv br que n\u00e3o tenha tipo sem identifica\u00e7\u00e3o ou que n\u00e3o seja chatbot\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato is not null\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen ctt.br_motivo_contato\n\t\t-- Regra padr\u00e3o para qualquer contato com tag pv br que o motivo sulamerica n\u00e3o \u00e9 nulo\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.sulamerica_motivo_contato is not null\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen ctt.sulamerica_motivo_contato\n\t\t-- Regra padr\u00e3o para qualquer contato com tag pv br que o motivo ouvidoria n\u00e3o \u00e9 nulo\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.ouvidoria_motivo_contato is not null\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen ctt.ouvidoria_motivo_contato\n\t\t-- Regra padr\u00e3o para qualquer contato com tags pv br e pv latam nulas\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = false\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = false\n\t\t\tthen 'Ticket externo'\n\t\t-- Regra UNICA de motivo para formul\u00e1rio Ouvidoria\n\t\twhen fm.nome_ticket_form = 'Ouvidoria'\n\t\tand tck.ticket_source = 'pv'\n\t\t\tthen ctt.ouvidoria_motivo_contato\n\t\t-- Regras de motivos para formul\u00e1rio N2\n\t\t-- Regra padr\u00e3o para tipo contato sem identifica\u00e7\u00e3o\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato = 'tipo_contato_nao_identificada'\n\t\t\tthen 'nao identificado'\n\t\t-- Regra para pegar qualquer motivo vinculado a chatbot\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato like '%chatbot%' \n\t\t\tthen 'chatbot'\n\t\t-- Regra padr\u00e3o para qualquer contato que n\u00e3o tenha tipo sem identifica\u00e7\u00e3o ou que n\u00e3o seja chatbot\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\t\tthen ctt.br_motivo_contato\n\t\t-- Regras de motivos provindos da Conexa\n\t\t-- Regra padr\u00e3o para as marcas de ticket Conexa e Docpass\n\t\twhen brd.nome_brand in ('Conexa Sa\u00fade', 'Docpass')\n\t\tand tck.ticket_source = 'cnx'\n\t\t\tthen ctt.cnx_motivo_contato\n\t\t-- Regra padr\u00e3o para a marca de ticket Portal do Gestor\n\t\twhen brd.nome_brand = 'Portal do Gestor'\n\t\tand tck.ticket_source = 'cnx'\n\t\t\tthen ctt.g_motivo_contato\n\t\t-- Regra padr\u00e3o para a marca de ticket iMedicina\n\t\twhen brd.nome_brand = 'iMedicina'\n\t\tand tck.ticket_source = 'cnx'\n\t\t\tthen ctt.imed_motivo_contato\n\t\t-- Regra padr\u00e3o para a marca de ticket Central de Servi\u00e7os Compartilhados\n\t\twhen brd.nome_brand = 'Central de Servi\u00e7os Compartilhados'\n\t\tand tck.ticket_source = 'cnx'\n\t\t\tthen ctt.car_motivo_contato\n\t\telse 'N\u00c3O CLASSIFICADO'\n\tend as motivo_contato,\n\tcase\n\t\t-- Inicio das regras para submotivos com formul\u00e1rio pv br\n\t\t-- Aqui \u00e9 diretamente relacionado ao motivo\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato = 'tipo_contato_nao_identificada'\n\t\t\tthen 'nao identificado'\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('cadastro','motivo cadastro')\n\t\t\tthen sub.br_submotivo_cadastro\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'vendas'\n\t\t\tthen sub.br_submotivo_vendas\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('pos consulta','motivo pos consulta')\n\t\t\tthen sub.br_submotivo_pos_consulta\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('etica contratos','motivo etica e contratos')\n\t\t\tthen sub.br_submotivo_etica_contratos\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'seduc'\n\t\t\tthen sub.br_submotivo_seduc\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('consulta','motivo consulta')\n\t\t\tthen sub.br_submotivo_consulta\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('agendamento','motivo agendamento')\n\t\t\tthen sub.br_submotivo_agendamento\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'triagem'\n\t\t\tthen sub.br_submotivo_triagem\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('liberacao de consulta','motivo liberacao de consulta')\n\t\t\tthen sub.br_submotivo_liberacao_consulta\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('acesso login','motivo acesso login')\n\t\t\tthen sub.br_submotivo_acesso_login\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'psicoguia'\n\t\t\tthen sub.br_submotivo_psicoguia\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('sem atendimento','motivo sem atendimento')\n\t\t\tthen sub.br_submotivo_sem_atendimento\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'sala de atendimento'\n\t\t\tthen sub.br_submotivo_sala_atendimento\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('financeiro','motivo financeiro')\n\t\t\tthen sub.br_submotivo_financeiro\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato like '%chatbot%'\n\t\t\tthen 'chatbot'\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('atendimento cvv','ticket de acompanhamento','nao identificado','disparo de sms','elegibilidade unimed ferj',\n\t\t'instabilidade','mudan\u00e7a de contrato','motivo instabilidade')\n\t\t\tthen ctt.br_motivo_contato\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psicologia Viva'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato is null\n\t\t\tthen null\n\t\t-- Inicio das regras para submotivos com formul\u00e1rio sulam\u00e9rica\n\t\t-- REGRA \u00daNICA\n\t\twhen fm.nome_ticket_form = 'SulAm\u00e9rica'\n\t\tand tck.ticket_source = 'pv'\n\t\t\tthen sub.sulamerica_submotivo\n\t\t-- Inicio das regras para submotivos com formul\u00e1rio pv latam\n\t\t-- Aqui \u00e9 diretamente relacionado ao motivo\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv' \n\t\tand ctt.latam_tipo_contato = 'no informado'\n\t\t\tthen 'no informado'\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('financiero','latam motivo financiero')\n\t\t\tthen sub.latam_submotivo_financeiro\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('cs','latam motivo cs')\n\t\t\tthen sub.latam_submotivo_cs\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('ventas','latam motivo ventas')\n\t\t\tthen sub.latam_submotivo_vendas\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('consulta cita','latam motivo consulta')\n\t\t\tthen sub.latam_submotivo_consulta\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('agendamiento','latam motivo agendamiento')\n\t\t\tthen sub.latam_submotivo_agendamento\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('acceso login','latam motivo acceso login')\n\t\t\tthen sub.latam_submotivo_acesso_login\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('experiencia del cliente','latam motivo experiencia del cliente')\n\t\t\tthen sub.latam_submotivo_experiencia_cliente\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('registro','latam motivo registro')\n\t\t\tthen sub.latam_submotivo_registro\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('sala de atendimiento','latam motivo sala de atendimiento')\n\t\t\tthen sub.latam_submotivo_sala_atendimento\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato is null\n\t\t\tthen null\n\t\twhen fm.nome_ticket_form = 'Formul\u00e1rio Psyalive'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('llamado del brasil','ninguno','prueba','latam motivo prueba','latam motivo ninguno','latam motivo llamado de brasil')\n\t\t\tthen ctt.latam_motivo_contato\n\t\t-- Inicio das regras para submotivos com formul\u00e1rio suporte ti\n\t\t-- Aqui \u00e9 diretamente relacionado ao motivo e a tag vinculada ao ticket\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato = 'no informado'\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen 'no informado'\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('financiero','latam motivo financiero')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_financeiro\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('cs','latam motivo cs')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_cs\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('ventas','latam motivo ventas')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_vendas\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('consulta cita','latam motivo consulta')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_consulta\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('agendamiento','latam motivo agendamiento')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_agendamento\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('acceso login','latam motivo acceso login')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_acesso_login\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('experiencia del cliente','latam motivo experiencia del cliente')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_experiencia_cliente\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('registro','latam motivo registro')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_registro\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('sala de atendimiento','latam motivo sala de atendimiento')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.latam_submotivo_sala_atendimento\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato in ('llamado del brasil','ninguno','prueba','latam motivo prueba','latam motivo ninguno','latam motivo llamado de brasil')\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen ctt.latam_motivo_contato\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.latam_tipo_contato != 'no informado'\n\t\tand ctt.latam_motivo_contato is null\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen null\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato = 'tipo_contato_nao_identificada'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen 'nao identificado'\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('cadastro','motivo cadastro')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_cadastro\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'vendas'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_vendas\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('pos consulta','motivo pos consulta')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_pos_consulta\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('etica contratos','motivo etica e contratos')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_etica_contratos\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'seduc'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_seduc\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('consulta','motivo consulta')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_consulta\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('agendamento','motivo agendamento')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_agendamento\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'triagem'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_triagem\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('liberacao de consulta','motivo liberacao de consulta')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_liberacao_consulta\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('acesso login','motivo acesso login')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_acesso_login\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'psicoguia'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_psicoguia\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('sem atendimento','motivo sem atendimento')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_sem_atendimento\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'sala de atendimento'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_sala_atendimento\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('financeiro','motivo financeiro')\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.br_submotivo_financeiro\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato like '%chatbot%'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen 'chatbot'\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('atendimento cvv','ticket de acompanhamento','nao identificado','disparo de sms','elegibilidade unimed ferj',\n\t\t'instabilidade','mudan\u00e7a de contrato','motivo instabilidade') --- paramos a validacao aqui\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen ctt.br_motivo_contato\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.sulamerica_motivo_contato is not null\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen sub.sulamerica_submotivo\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.ouvidoria_motivo_contato is not null\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen ctt.ouvidoria_motivo_contato\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.sulamerica_motivo_contato is null\n\t\tand ctt.br_motivo_contato is null\n\t\tand ctt.ouvidoria_motivo_contato is null\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = true\n\t\t\tthen null\n\t\twhen fm.nome_ticket_form = 'Suporte TI'\n\t\tand tag.br_gatilho_criacao_tkt_filho_n3 = false\n\t\tand tag.latam_gatilho_criacao_tkt_filho_n3 = false\n\t\t\tthen 'Ticket externo'\n\t\t-- Inicio das regras para submotivos com formul\u00e1rio ouvidoria\n\t\t-- REGRA UNICA\n\t\twhen fm.nome_ticket_form = 'Ouvidoria'\n\t\t\tthen ctt.ouvidoria_motivo_contato\n\t\t-- Inicio das regras para submotivos com formul\u00e1rio N2\n\t\t-- Aqui \u00e9 diretamente relacionado ao motivo\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato = 'tipo_contato_nao_identificada'\n\t\t\tthen 'nao identificado'\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('cadastro','motivo cadastro')\n\t\t\tthen sub.br_submotivo_cadastro\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'vendas'\n\t\t\tthen sub.br_submotivo_vendas\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('pos consulta','motivo pos consulta')\n\t\t\tthen sub.br_submotivo_pos_consulta\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('etica contratos','motivo etica e contratos')\n\t\t\tthen sub.br_submotivo_etica_contratos\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'seduc'\n\t\t\tthen sub.br_submotivo_seduc\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('consulta','motivo consulta')\n\t\t\tthen sub.br_submotivo_consulta\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('agendamento','motivo agendamento')\n\t\t\tthen sub.br_submotivo_agendamento\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'triagem'\n\t\t\tthen sub.br_submotivo_triagem\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('liberacao de consulta','motivo liberacao de consulta')\n\t\t\tthen sub.br_submotivo_liberacao_consulta\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('acesso login','motivo acesso login')\n\t\t\tthen sub.br_submotivo_acesso_login\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'psicoguia'\n\t\t\tthen sub.br_submotivo_psicoguia\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('sem atendimento','motivo sem atendimento')\n\t\t\tthen sub.br_submotivo_sem_atendimento\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato = 'sala de atendimento'\n\t\t\tthen sub.br_submotivo_sala_atendimento\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('financeiro','motivo financeiro')\n\t\t\tthen sub.br_submotivo_financeiro\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato like '%chatbot%'\n\t\t\tthen 'chatbot'\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato in ('atendimento cvv','ticket de acompanhamento','nao identificado','disparo de sms','elegibilidade unimed ferj',\n\t\t'instabilidade','mudan\u00e7a de contrato','motivo instabilidade')\n\t\t\tthen ctt.br_motivo_contato\n\t\twhen fm.nome_ticket_form = '[N2] Atendimento especializado'\n\t\tand tck.ticket_source = 'pv'\n\t\tand ctt.br_tipo_contato != 'tipo_contato_nao_identificada'\n\t\tand ctt.br_motivo_contato is null\n\t\t\tthen null\n\t\t-- Inicio dos submotivos cnx\n\t\twhen tck.ticket_source = 'cnx'\n\t\tand ctt.cnx_motivo_contato = 'motivo pos consulta'\n\t\t\tthen sub.cnx_submotivo_pos_consulta\n\t\twhen tck.ticket_source = 'cnx'\n\t\tand ctt.cnx_motivo_contato = 'motivo consulta'\n\t\t\tthen sub.cnx_submotivo_consulta\n\t\twhen tck.ticket_source = 'cnx'\n\t\tand ctt.cnx_motivo_contato = 'motivo cadastro'\n\t\t\tthen sub.cnx_submotivo_cadastro\n\t\twhen brd.nome_brand = 'Portal do Gestor'\n\t\tand tck.ticket_source = 'cnx'\n\t\tand ctt.g_motivo_contato = 'pos consulta'\n\t\t\tthen sub.g_submotivo_pos_consulta\n\t\twhen brd.nome_brand = 'Portal do Gestor'\n\t\tand tck.ticket_source = 'cnx'\n\t\tand ctt.g_motivo_contato = 'consulta'\n\t\t\tthen sub.g_submotivo_consulta\n\t\telse null\n\tend as submotivo_contato,\n\t-- complemento do submotivo cnx\n\tcase\n\t\twhen tck.ticket_source = 'cnx'\n\t\tand ctt.cnx_motivo_contato = 'motivo pos consulta'\n\t\tand sub.cnx_submotivo_pos_consulta = 'submotivo_prontuario_'\n\t\t\tthen comp.cnx_complemento_sub_pos_prontuario\n\t\twhen tck.ticket_source = 'cnx'\n\t\tand ctt.cnx_motivo_contato = 'motivo pos consulta'\n\t\tand sub.cnx_submotivo_pos_consulta = 'submotivo_documentacao'\n\t\t\tthen comp.cnx_complemento_sub_pos_documentacao\n\t\twhen tck.ticket_source = 'cnx'\n\t\tand ctt.cnx_motivo_contato = 'motivo consulta'\n\t\tand sub.cnx_submotivo_consulta = 'submotivo_prontuario'\n\t\t\tthen comp.cnx_complemento_sub_consulta_prontuario\n\t\twhen tck.ticket_source = 'cnx'\n\t\tand ctt.cnx_motivo_contato = 'motivo cadastro'\n\t\tand sub.cnx_submotivo_cadastro = 'submotivo_manutencao_do_cadastro'\n\t\t\tthen comp.cnx_complemento_sub_cadastro_manutencao\n\t\twhen brd.nome_brand = 'Portal do Gestor'\n\t\tand tck.ticket_source = 'cnx'\n\t\tand ctt.g_motivo_contato = 'pos consulta'\n\t\t\tthen sub.g_submotivo_pos_consulta\n\t\twhen brd.nome_brand = 'Portal do Gestor'\n\t\tand tck.ticket_source = 'cnx'\n\t\tand ctt.g_motivo_contato = 'consulta'\n\t\t\tthen sub.g_submotivo_consulta\n\t\telse null\n\tend as complemento_submotivo_contato,\n\tpai.ticket_filho_de as id_ticket_pai,\n\tpai.tempo_resolucao_pai,\n\tpai.created_at_pai,\n\tpai.solved_at_pai,\n\tpai.status_pai,\n\tpai2.ticket_filho_de as id_ticket_pai2,\n\tpai2.tempo_resolucao_pai as tempo_resolucao_pai2,\n\tpai2.created_at_pai as created_at_pai2,\n\tpai2.solved_at_pai as solved_at_pai2,\n\tpai2.status_pai as status_pai2,\n\tcase\n\t\twhen pai.ticket_filho_de is null and pai2.ticket_filho_de is null \n\t\t\tthen mtr.full_resolution_time_in_minutes_calendar\n\t\twhen pai.ticket_filho_de is not null and pai2.ticket_filho_de is null\n\t\t\tthen date_diff('MINUTE', pai.created_at_pai, mtr.solved_at)\n\t\twhen pai.ticket_filho_de is not null and pai2.ticket_filho_de is not null\n\t\t\tthen date_diff('MINUTE', pai2.created_at_pai, mtr.solved_at)\n\tend as tempo_resolucao_real,\n\tcase\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form in ('Formul\u00e1rio Conexa Sa\u00fade','Suporte N2','Libera\u00e7\u00e3o de consulta','Formul\u00e1rio Gestor','Canais Especiais','Formul\u00e1rio Docpass','[ANTIGO] Formul\u00e1rio Gestor')\n\t\t\tthen tpu.tipo_usuario_detalhado\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form = 'Formul\u00e1rio iMedicina'\n\t\t\tthen 'Cliente iMedicina'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form in ('Reclame Aqui ', 'Reclame Aqui')\n\t\t\tthen 'E-mail do Reclame AQUI'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form = 'CS Corporate'\n\t\t\tthen 'Ticket de CS Corporate'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form = 'Suporte TI'\n\t\t\tthen 'Ticket de Suporte TI'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form in ('Forms | Profissional de sa\u00fade', 'Forms | Time M\u00e9dico','Contas a Pagar')\n\t\t\tthen 'Ticket de Contas a Pagar'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form = 'Contas a Receber'\n\t\t\tthen 'Ticket de Contas a Receber'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form = 'Facilities & Compras'\n\t\t\tthen 'Ticket de Facilities & Compras'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form = 'Solicita\u00e7\u00f5es Zendesk'\n\t\t\tthen 'Ticket de Planejamento'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\tfm.nome_ticket_form = 'Implanta\u00e7\u00e3o'\n\t\t\tthen 'Ticket de Implanta\u00e7\u00e3o'\n\t\twhen tck.ticket_source = 'cnx' and\n\t\t(fm.nome_ticket_form in ('Formul\u00e1rio de Qualidade', '[ANTIGO] Formul\u00e1rio de ticket padr\u00e3o','Teste2') or fm.nome_ticket_form is null)\n\t\t\tthen 'Ticket antigo'\n\tend as tipo_detalhado\nFROM \"delta\".\"bronze\".\"stg_zd_tickets\" tck\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_users\" as usr on tck.id_requester = usr.id_user and tck.ticket_source = usr.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_users\" as usr2 on tck.id_assignee = usr2.id_user and tck.ticket_source = usr2.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_brands\" as brd on tck.id_brand = brd.id_brand and tck.ticket_source = brd.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_organizations\" as org on tck.id_organization = org.id_organization and tck.ticket_source = org.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_groups\" as grp on tck.id_group = grp.id_group and tck.ticket_source = grp.source \nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_ticket_metrics\" as mtr on tck.id_ticket = mtr.id_ticket and tck.ticket_source = mtr.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_ticket_metric_events\" as evt on tck.id_ticket = evt.id_ticket and tck.ticket_source = evt.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_ticket_forms\" as fm on tck.id_ticket_form = fm.id_ticket_form and tck.ticket_source = fm.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_custom_empresa_cliente\" as ce on tck.id_ticket = ce.id_ticket and tck.ticket_source = ce.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_tickets_motivo_contato\" as ctt on tck.id_ticket = ctt.id_ticket and tck.ticket_source = ctt.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_tickets_submotivo_contato\" as sub on tck.id_ticket = sub.id_ticket and tck.ticket_source = sub.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_tickets_submotivo_complemento\" as comp on tck.id_ticket = comp.id_ticket and tck.ticket_source = comp.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_tickets_tags_gatilho\" as tag on tck.id_ticket = tag.id_ticket and tck.ticket_source = tag.source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_tickets_pai\" as pai on tck.id_ticket = pai.id_ticket and tck.ticket_source = pai.ticket_source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_tickets_pai\" as pai2 on pai.ticket_filho_de = pai2.id_ticket and pai.ticket_source = pai2.ticket_source\nLEFT JOIN \"delta\".\"bronze\".\"stg_zd_tipo_usuario\" as tpu on tck.id_ticket = tpu.id_ticket and tck.ticket_source = tpu.source\n)\nselect\n*,\ncase\n\twhen ticket_source = 'pv' and nome_brand = 'iMedicina'\n\t\tthen 'iMedicina'\n\twhen ticket_source = 'pv' and nome_brand != 'iMedicina'\n\t\tthen 'Psicologia Viva'\n\twhen tipo_detalhado = 'Ticket antigo'\n\t\tthen 'Conexa'\n\twhen tipo_detalhado = 'Cliente iMedicina'\n\t\tthen 'iMedicina'\n\twhen tipo_detalhado in ('Gestor','M\u00e9dico/Especialista','N\u00e3o identificado','Paciente Medicina')\n\t\tthen 'Conexa'\n\twhen tipo_detalhado in ('Psic\u00f3logo','Paciente Sa\u00fade Mental')\n\t\tthen 'Psicologia Viva'\n\twhen tipo_detalhado in ('E-mail do Reclame AQUI','Ticket de CS Corporate','Ticket de Suporte TI','Ticket de Contas a Pagar',\n\t'Ticket de Contas a Receber','Ticket de Facilities & Compras','Ticket de Planejamento','Ticket de Implanta\u00e7\u00e3o')\n\t\tthen 'Sem vinculo de Plataforma'\n\twhen nome_ticket_form in ('Suporte N2','Canais Especiais','Libera\u00e7\u00e3o de consulta','Formul\u00e1rio Gestor','Formul\u00e1rio Conexa Sa\u00fade','[N2] Atendimento especializado')\n\t\tthen 'Conexa'\n\telse 'Sem vinculo de Plataforma'\nend as nome_empresa\nfrom temp_ticket", "relation_name": "\"delta\".\"silver\".\"zd_fact_tickets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:20.194796Z", "completed_at": "2025-07-01T18:32:20.215913Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:20.249831Z", "completed_at": "2025-07-01T18:32:20.250357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10020828247070312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_inter_plataforma_atestado", "compiled": true, "compiled_code": "\n\n\nSELECT\n\taat.id_atendimento_atestado,\n\taat.id_atendimento,\n\taat.codigo_verificador_assinatura,\n\tdac.data_registro_atestado,\n\tdac.categoria_atestado,\n\tdac.dias_afastamento,\n\tdac.cid,\n\tdac.id_atestado_customizado,\n\tdac.id_clinica\nFROM \"delta\".\"bronze\".\"stg_cnx_atendimento_atestado\" AS aat\nLEFT JOIN \"delta\".\"bronze\".\"stg_mongo_dadosatestadoscustomizados\" AS dac ON aat.id_atendimento = dac.id_atendimento and aat.id_atestado = dac.id_atestado\nwhere dac.categoria_atestado = 'Atestado'", "relation_name": "\"delta\".\"silver\".\"cnx_inter_plataforma_atestado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:20.326934Z", "completed_at": "2025-07-01T18:32:20.357741Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:20.373424Z", "completed_at": "2025-07-01T18:32:20.373424Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08240938186645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_prontuario_sm", "compiled": true, "compiled_code": "\n\nwith queixas_cognitivas as (\n    select\n        id_prontuario,\n        array_agg(value order by id_prontuario_queixa_cognitiva desc) as lista_queixas_cognitivas\n    from \"delta\".\"bronze\".\"stg_cnx_anamnesis_cognitive_complaints\"\n    group by 1\n),\nqueixas_emocionais as (\n    select\n        id_prontuario,\n        array_agg(value order by id_prontuario_queixa_emocional desc) as lista_queixas_emocionais\n    from \"delta\".\"bronze\".\"stg_cnx_anamnesis_emotional_affective_complaints\"\n    group by 1\n),\nmotivo_adoecimento_laboral as (\n    select\n        id_prontuario,\n        array_agg(motivo_adoecimento_laboral order by id_prontuario_motivo_adoecimento_laboral desc) as lista_motivos_adoecimento_laboral\n    from \"delta\".\"bronze\".\"stg_cnx_anamnesis_reason_for_illness_at_work\"\n    group by 1\n)\nSELECT\n    p.id_prontuario,\n    p.id_profissional,\n    p.id_paciente,\n    p.id_cid,\n    t1.codigo_cid10,\n    t1.descricao_cid10,\n    t2.capitulo_cid,\n    t2.titulo_cid,\n    p.habitos_rotina,\n    p.flag_preenchimento_habitos_rotina,\n    p.vida_social,\n    p.estado_atual_saude,\n    p.historia_familiar,\n    p.casos_similares_familia,\n    p.queixa_principal,\n    p.data_inicio_queixas,\n    p.modo_queixa_principal,\n    p.mudancas_queixas,\n    p.flag_preenchimento_mudancas_queixas,\n    p.principais_sintomas,\n    qc.lista_queixas_cognitivas,\n    p.detalhes_queixas_cognitivas,\n    qe.lista_queixas_emocionais,\n    p.detalhes_queixas_emocionais,\n    pi.value as psicomotricidade,\n    p.detalhes_psicomotricidade,\n    lista_motivos_adoecimento_laboral,\n    p.relacao_adoecimento_laboral,\n    p.data_inicio_tratamento,\n    p.data_hora_atualizacao,\n    p.data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"stg_cnx_anamnesis\" p\nLEFT JOIN queixas_cognitivas as qc on p.id_prontuario = qc.id_prontuario\nLEFT JOIN queixas_emocionais as qe on p.id_prontuario = qe.id_prontuario\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_anamnesis_psychomotricity\" pi on p.id_prontuario = pi.id_prontuario\nLEFT JOIN motivo_adoecimento_laboral as mal on p.id_prontuario = mal.id_prontuario\nleft join \"delta\".\"bronze\".\"stg_cnx_doenca_cid10\"  t1 on p.id_cid = t1.id_doenca \nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_grupo_cid10\" t2 USING(id_grupo)", "relation_name": "\"delta\".\"silver\".\"cnx_fact_prontuario_sm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:20.469196Z", "completed_at": "2025-07-01T18:32:20.501548Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:20.532554Z", "completed_at": "2025-07-01T18:32:20.532554Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11151528358459473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_avaliacao_medico", "compiled": true, "compiled_code": "\n\nWITH t1 AS (\nSELECT\n\tcast(idatendimento as bigint) as id_atendimento,\n    idatendimento_avaliacao as id_atendimento_avaliacao_medico,\n    data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n    data_hora_avaliacao,\n    date(data_hora_avaliacao at time zone 'America/Sao_Paulo') as data_brt_avaliacao,\n    cast(nota as int) as csat_medico,\n    cast(escala_nps as int) as nps_medico,\n    comentario as comentarios_avaliacao_medico,\n    tipo_avaliacao,\n    current_timestamp(3) as emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\"\nwhere tipo_avaliacao = 'MEDICO'\n)\nSELECT \t\n\t*,\n\t( \n      SELECT array_agg(item_avaliado)\n      FROM \"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_item\" as aai\n      WHERE aai.id_atendimento_avaliacao = t1.id_atendimento_avaliacao_medico \n    ) AS itens_avaliados_medico\nFROM t1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_medico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:20.668352Z", "completed_at": "2025-07-01T18:32:20.692246Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:20.726411Z", "completed_at": "2025-07-01T18:32:20.726411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13039636611938477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_atendimento_avaliacao_plataforma", "compiled": true, "compiled_code": "\n\nWITH t1 AS (\nSELECT\n\tcast(idatendimento as bigint) as id_atendimento,\n  idatendimento_avaliacao as id_atendimento_avaliacao_plataforma,\n  data_hora_ultima_atualizacao,\n  date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n  data_hora_insert,\n  date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n  data_hora_avaliacao,\n  date(data_hora_avaliacao at time zone 'America/Sao_Paulo') as data_brt_avaliacao,\n  cast(nota as int) as csat_plataforma,\n  cast(escala_nps as int) as nps_plataforma,\n  comentario as comentarios_avaliacao_plataforma,\n  current_timestamp(3) as emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_atendimento_avaliacao\"\nwhere tipo_avaliacao = 'PLATAFORMA'\n)\n\nSELECT \n  *,\n( \n    SELECT array_agg(item_avaliado)\n    FROM \n      \"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_item\" as aai\n    WHERE \n      aai.id_atendimento_avaliacao = t1.id_atendimento_avaliacao_plataforma\n  ) AS itens_avaliados_plataforma\nFROM t1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_plataforma\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:20.813213Z", "completed_at": "2025-07-01T18:32:20.845121Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:20.859761Z", "completed_at": "2025-07-01T18:32:20.859761Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09093999862670898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_cid", "compiled": true, "compiled_code": "\n\n\nSELECT \n\tad.id_atendimento,\n\t-- array_agg(\n\t-- \tjson_object(\n-- \t\t\t'cid10' : d.codigo_cid10,\n-- \t\t\t'descricao' : d.descricao_cid10,\n-- \t\t\t'capitulo' : g.capitulo_cid,\n-- \t\t\t'titulo_capitulo' : g.titulo_cid \n-- \t\t)\n--\t) AS lista_cid10\n\td.codigo_cid10,\n\td.descricao_cid10,\n\tg.capitulo_cid,\n\tg.titulo_cid,\n\tad.relevancia_atendimento_diagnostico,\n\tad.situacao_atendimento_diagnostico\nFROM  \"delta\".\"bronze\".\"stg_cnx_atendimento_diagnostico\"  ad\nINNER JOIN \"delta\".\"bronze\".\"stg_cnx_doenca_cid10\" d ON ad.id_doenca = d.id_doenca \nINNER JOIN \"delta\".\"bronze\".\"stg_cnx_grupo_cid10\" g ON d.id_grupo = g.id_grupo", "relation_name": "\"delta\".\"silver\".\"cnx_dim_cid\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:20.955253Z", "completed_at": "2025-07-01T18:32:20.971336Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:21.006418Z", "completed_at": "2025-07-01T18:32:21.006418Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09290885925292969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_doenca", "compiled": true, "compiled_code": "\n\n\nSELECT \n\tad.id_atendimento,\n\t-- array_agg(\n\t-- \tjson_object(\n-- \t\t\t'cid10' : d.codigo_cid10,\n-- \t\t\t'descricao' : d.descricao_cid10,\n-- \t\t\t'capitulo' : g.capitulo_cid,\n-- \t\t\t'titulo_capitulo' : g.titulo_cid \n-- \t\t)\n--\t) AS lista_cid10\n\tarray_agg(d.codigo_cid10 order by d.id_doenca) as lista_codigo_cid10,\n\tarray_agg(d.descricao_cid10 order by d.id_doenca) as lista_descricao_cid10,\n\t-- array_agg(g.capitulo_cid order by g.id_grupo) as lista_grupo_capitulo_cid10,\n\tarray_agg(g.titulo_cid order by g.id_grupo) as lista_grupo_titulo_cid10\nFROM  \"delta\".\"bronze\".\"stg_cnx_atendimento_diagnostico\"  ad\nINNER JOIN \"delta\".\"bronze\".\"stg_cnx_doenca_cid10\" d ON ad.id_doenca = d.id_doenca \nINNER JOIN \"delta\".\"bronze\".\"stg_cnx_grupo_cid10\" g ON d.id_grupo = g.id_grupo \nGROUP BY 1", "relation_name": "\"delta\".\"silver\".\"cnx_dim_doenca\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:21.092481Z", "completed_at": "2025-07-01T18:32:21.117959Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:21.130545Z", "completed_at": "2025-07-01T18:32:21.130545Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0797739028930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_atendimento_diagnostico", "compiled": true, "compiled_code": "\n\nSELECT \n    ad.id_atendimento, \n    ad.id_doenca,\n    ad.data_hora_insert,\n    dc.codigo_cid10,\n    dc.descricao_cid10,\n    gc.capitulo_cid as capitulo_cid10,\n    gc.titulo_cid as titulo_grupo_cid10,\n    ad.situacao_atendimento_diagnostico,\n    ad.relevancia_atendimento_diagnostico,\n    ad.status_atendimento_diagnostico,\n    ad.emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_atendimento_diagnostico\" ad\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_doenca_cid10\" dc on ad.id_doenca = dc.id_doenca\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_grupo_cid10\" gc on dc.id_grupo = gc.id_grupo", "relation_name": "\"delta\".\"silver\".\"cnx_fact_atendimento_diagnostico\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:21.233630Z", "completed_at": "2025-07-01T18:32:21.269685Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:21.286451Z", "completed_at": "2025-07-01T18:32:21.286451Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1089780330657959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_atendimento_profissional", "compiled": true, "compiled_code": "\n\nSELECT\n    id_atendimento,\n    id_usuario,\n    data_hora_ultima_atualizacao,\n    data_brt_ultima_atualizacao,\n    data_hora_criacao,\n    data_brt_criacao,\n    flag_responsavel,\n    emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_atendimento_profissional\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_atendimento_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:21.376352Z", "completed_at": "2025-07-01T18:32:21.408189Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:21.425366Z", "completed_at": "2025-07-01T18:32:21.425366Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09595465660095215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_atendimento_comorbidade", "compiled": true, "compiled_code": "\n\nSELECT \n    a.id_atendimento,\n    ac.id_atendimento_comorbidade,\n    a.modo_atendimento,\n    a.id_paciente,\n    a.historia_doenca_atual,\n    a.historia_familia,\n    a.medicamentos_em_uso,\n    a.relato_paciente,\n    a.orientacao_paciente,\n    a.parecer_clinico,\n    a.parecer_especialista,\n    a.medicacao_prescrita,\n    a.flag_negar_alergia,\n    a.flag_negar_epidemia,\n    a.data_sintoma,\n    a.data_atendimento,\n    a.data_brt_atendimento,\n    a.desfecho,\n    cast(ac.atividade_fisica as int) as atividade_fisica,\n    CASE\n        WHEN ac.atividade_fisica = 0\n            then 'N\u00e3o pratica'\n        WHEN ac.atividade_fisica = 1\n            then '1 a 2 vezes na semana'\n        WHEN ac.atividade_fisica = 2\n            then '3 a 5 vezes na semana'\n        WHEN ac.atividade_fisica = 9\n            then 'Todos os dias'\n        ELSE 'N\u00e3o informado'\n    END as frequencia_atividade_fisica,\n    cast(ac.etilismo as int) as etilismo,\n    cast(ac.uso_drogas as boolean) as flag_uso_drogas,\n    cast(ac.dislipdemia as boolean) as flag_dislipidemia,\n    cast(ac.doenca_pulmonar as boolean) as flag_doenca_pulmonar,\n    cast(ac.doenca_coronariana as boolean) as flag_doenca_coronariana,\n    cast(ac.doenca_arterial_perif as boolean) as flag_doenca_arterial_periferica,\n    cast(ac.doenca_cerebrovascular as boolean) as flag_doenca_cerebrovascular,\n    cast(ac.hipertencao_arterial_sis as boolean) as flag_hipertensao_arterial_sistemica,\n    cast(ac.insuficiencia_cardi_congest as boolean) as flag_insuficiencia_cardiaca_congestiva,\n    cast(ac.alergia as boolean) as flag_alergia,\n    ac.alergia_descricao,\n    cast(ac.hist_familiar_morte_subita as boolean) as flag_historico_familiar_morte_subita,\n    cast(ac.diabete_melitus as boolean) as flag_diabete_melitus,\n    cast(ac.doenca_psiquiatrica as boolean) as flag_doenca_psiquiatrica,\n    cast(ac.medicacoes_continuas as boolean) as flag_medicacoes_continuas,\n    cast(ac.sv_pa_sistolica as int) as sv_pa_sistolica,\n    cast(ac.sv_pa_diastolica as int) as sv_pa_diastolica,\n    cast(ac.sv_peso as decimal(10,2)) as sv_peso,\n    cast(ac.sv_frequencia_cardiaca as int) as sv_frequencia_cardiaca,\n    cast(ac.sv_altura as decimal(10,2)) as sv_altura,\n    cast(ac.HDLc as decimal(10,2)) as HDLc,\n    cast(ac.LDLc as decimal(10,2)) as LDLc,\n    cast(ac.triglicerideo as decimal(10,2)) as triglicerideo,\n    cast(ac.colesterol_total as decimal(10,2)) as colesterol_total,\n    cast(ac.tabagismo as boolean) as flag_tabagismo,\n    cast(ac.sv_pa_sistolica_tratada as boolean) as flag_sv_pa_sistolica_tratada,\n    cast(ac.toma_estatina as boolean) as flag_toma_estatina,\n    cast(ac.sv_peso_usual as decimal(10,2)) as sv_peso_usual,\n    cast(ac.sv_circunferencia_abdominal as decimal(10,2)) as sv_circunferencia_abdominal,\n    cast(ac.sobrepeso as boolean) as flag_sobrepeso,\n    cast(ac.anemico as boolean) as flag_anemico,\n    cast(ac.hiperuricemicos as boolean) as flag_hiperuricemicos,\n    cast(ac.gestante_amamentacao as boolean) as flag_gestante_amamentacao,\n    cast(ac.hipercolesterolemia as boolean) as flag_hipercolesterolemia,\n    cast(ac.transtornos_alimentares as boolean) as flag_transtornos_alimentares,\n    cast(ac.desordem_digestiva as boolean) as flag_desordem_digestiva,\n    ac.desordem_digestiva_descricao,\n    ac.data_hora_ultima_atualizacao,\n    ac.data_brt_ultima_atualizacao,\n    ac.data_hora_insert,\n    ac.data_brt_insert,\n    cast(ac.sv_hemoglobina_glicada as decimal(4,1)) as sv_hemoglobina_glicada,\n    cast(ac.temperatura_corporal as int) as temperatura_corporal,\n    cast(ac.saturacao_oxigenio as int) as saturacao_oxigenio,\n    cast(ac.frequencia_respiratoria as int) as frequencia_respiratoria,\n    cast(ac.glicemia_capilar as int) as glicemia_capilar,\n    cast(ac.dor as int) as dor,\n    ac.observacao_texto_livre,\n    cast(ac.circunferencia_cefalica as decimal(10,2)) as circunferencia_cefalica,\n    cast(ac.superficie_corporea as decimal(10,2)) as superficie_corporea,\n    ac.sv_pa_sistolica_und,\n    ac.sv_pa_diastolica_und,\n    ac.sv_frequencia_cardiaca_und,\n    ac.sv_hemoglobina_glicada_und,\n    ac.sv_frequencia_respiratoria_und,\n    ac.glicemia_capilar_und,\n    ac.circunferencia_cefalica_und,\n    ac.sv_peso_und,\n    ac.sv_altura_und,\n    ac.temperatura_corporal_und,\n    ac.saturacao_oxigenio_und,\n    ac.dor_und,\n    ac.superficie_corporea_und,\n    ac.sv_circunferencia_abdominal_und,\n    ac.HDLc_und,\n    ac.LDLc_und,\n    ac.triglicerideo_und,\n    ac.colesterol_total_und,\n    cast(ac.flag_afirmo_que_paciente_nao_tem_outras_comorbidades as boolean) as flag_afirmo_que_paciente_nao_tem_outras_comorbidades,\n    cast(ac.flag_insuficiencia_cardiaca as boolean) as flag_insuficiencia_cardiaca,\n    cast(ac.flag_dpoc as boolean) as flag_dpoc,\n    cast(ac.flag_neoplasias as boolean) as flag_neoplasias,\n    cast(ac.flag_paciente_nega_comorbidades as boolean) as flag_paciente_nega_comorbidades,\n    date(ac.data_sv_pa_sistolica) as data_sv_pa_sistolica,\n    date(ac.data_sv_pa_diastolica) as data_sv_pa_diastolica,\n    date(ac.data_sv_circunferencia_abdominal) as data_sv_circunferencia_abdominal,\n    date(ac.data_sv_hemoglobina_glicada) as data_sv_hemoglobina_glicada,\n    date(ac.data_glicemia_capilar) as data_glicemia_capilar,\n    date(ac.data_HDLc) as data_HDLc,\n    date(ac.data_LDLc) as data_LDLc,\n    date(ac.data_triglicerideo) as data_triglicerideo,\n    date(ac.data_colesterol_total) as data_colesterol_total,\n    ac.emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_atendimento\"  a\nINNER JOIN \"delta\".\"bronze\".\"stg_cnx_atendimento_comorbidade\" ac on ac.id_atendimento = a.id_atendimento\n-- where ac.rn = 1", "relation_name": "\"delta\".\"silver\".\"cnx_fact_atendimento_comorbidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:21.531301Z", "completed_at": "2025-07-01T18:32:21.552844Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:21.573784Z", "completed_at": "2025-07-01T18:32:21.573784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09264755249023438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_atendimento_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT\n     id_atendimento_tiss\n   , data_inclusao\n   , data_brt_inclusao\n   , data_ultima_alteracao\n   , data_brt_ultima_alteracao\n   , usuario_ultima_alteracao\n   , versao\n   , id_clinica_tiss\n   , id_beneficiario_tiss\n   , id_profissional_tiss\n   , id_encaminhamento_medico_tiss\n   , id_solicitacao_tiss\n   , id_atendimento_prestador_tiss\n   , flag_primeiro_atendimento\n   , data_atendimento\n   , data_brt_atendimento\n   , tipo_identificacao_beneficiario\n   , status_atendimento\n   , motivo_cancelamento\n   , fluxo_atendimento\n   , flag_profissional_chamou_antes_horario\n   , flag_solicita_guia_sem_atendimento\n   , desfecho\n   , fluxo\n   , sequencial_guia_prestador\n   , data_conclusao\n   , data_brt_conclusao\n   , data_inicio\n   , data_brt_inicio\n   , data_fim\n   , data_brt_fim\n   , emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_atendimento_tiss\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_atendimento_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:21.663653Z", "completed_at": "2025-07-01T18:32:21.694111Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:21.719135Z", "completed_at": "2025-07-01T18:32:21.719135Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10431456565856934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_beneficiario_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT\n      id_beneficiario_tiss\n\t, data_inclusao\n\t, data_brt_inclusao\n\t, data_ultima_alteracao\n\t, data_brt_ultima_alteracao\n\t, usuario_ultima_alteracao\n\t, versao\n\t, id_paciente_prestador_tiss\n\t, nome_paciente\n\t, cpf_beneficiario_tiss\n\t, data_nascimento\n\t, numero_carteira_beneficiario_tiss\n\t, registro_ans\n\t, cid\n    , emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_beneficiario_tiss\"", "relation_name": "\"delta\".\"silver\".\"cnx_dim_beneficiario_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:21.815650Z", "completed_at": "2025-07-01T18:32:21.854351Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:21.881903Z", "completed_at": "2025-07-01T18:32:21.881903Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11613202095031738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_chamada_eventos_paciente", "compiled": true, "compiled_code": "\n\n\nSELECT\n\tDISTINCT e.callid AS id_chamada\n\t,ARRAY_AGG(CONCAT_WS(\n        ', ',\n        'tipo_servico_meeting: ' || e.meetservice,\n        'tipo_usuario: ' || e.userprofile,\n        'tipo_navegador: ' || e.browser,\n        'sistema_operacional: ' || e.os,\n        'agente_de_usuario: ' || e.useragent,\n        'origem: ' || e.origin,\n        'ip: ' || e.ip,\n        'eventos: ' || ARRAY_JOIN(\n        TRANSFORM(\n            e.eventLog,\n            x -> CONCAT(\n                '{',\n                'event: ', CAST(x.event AS VARCHAR), ', ',\n                'datetime: ', CAST(x.datetime AS VARCHAR),\n                '}'\n            )\n        ),\n        ', ')\n    )) AS detalhes_videochamada\nFROM\n\t\"delta\".\"bronze\".\"stg_cnx_chamada_eventos\"  AS e\n\t, UNNEST(e.eventLog) AS evl\n\n\tWHERE e.userprofile = 'PACIENTE'\n\tGROUP BY 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_chamada_eventos_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:21.989189Z", "completed_at": "2025-07-01T18:32:22.021079Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:22.038187Z", "completed_at": "2025-07-01T18:32:22.038187Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10467767715454102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_chamada_eventos_profissional", "compiled": true, "compiled_code": "\n\n\nSELECT\n\tDISTINCT e.callid AS id_chamada\n\t,ARRAY_AGG(CONCAT_WS(\n        ', ',\n        'tipo_servico_meeting: ' || e.meetservice,\n        'tipo_usuario: ' || e.userprofile,\n        'tipo_navegador: ' || e.browser,\n        'sistema_operacional: ' || e.os,\n        'agente_de_usuario: ' || e.useragent,\n        'origem: ' || e.origin,\n        'ip: ' || e.ip,\n        'eventos: ' || ARRAY_JOIN(\n        TRANSFORM(\n            e.eventLog,\n            x -> CONCAT(\n                '{',\n                'event: ', CAST(x.event AS VARCHAR), ', ',\n                'datetime: ', CAST(x.datetime AS VARCHAR),\n                '}'\n            )\n        ),\n        ', ')\n    )) AS detalhes_videochamada\nFROM\n\t\"delta\".\"bronze\".\"stg_cnx_chamada_eventos\" AS e\n\t, UNNEST(e.eventLog) AS evl\n\n\tWHERE e.userprofile != 'PACIENTE'\n\tGROUP BY 1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_chamada_eventos_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:22.132717Z", "completed_at": "2025-07-01T18:32:22.163522Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:22.179441Z", "completed_at": "2025-07-01T18:32:22.179441Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09295415878295898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_faturamento_arquivo_atendimento_processado", "compiled": true, "compiled_code": "\n\n\nSELECT\n    -- Filha\n      id_faturamento_arquivo_atendimento_processado\n\t, id_atendimento\n\t, id_procedimento\n\t, id_detalhe_procedimento\n\t, status_importacao\n\t, status_faturamento\n\t, flag_primeiro_atendimento\n\t, chave_processamento_automatico\n    -- M\u00e3e\n    , id_faturamento_arquivo\n\t, id_cliente\n\t, titulo_importacao\n\t, nome_arquivo\n\t, data_envio\n\t, data_brt_envio\n\t, data_ultima_atualizacao\n\t, data_brt_ultima_atualizacao\n\t, quantidade_registros\n\t, quantidade_registros_com_erros\n\t, status_processamento\n\t, status_upload\n\t, url_arquivo_importado_s3\n\t, url_arquivo_erros_s3\n\t, usuario_importacao\n\t, key_firebase\n\t, data_competencia\n\t, tipo_cliente\n\t, emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_faturamento_arquivo_atendimento_processado\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_faturamento_arquivo_atendimento_processado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:22.300501Z", "completed_at": "2025-07-01T18:32:22.333049Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:22.363830Z", "completed_at": "2025-07-01T18:32:22.363830Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14769434928894043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_cancelamento", "compiled": true, "compiled_code": "\n\nSELECT \n    c.id_cancelamento,\n    c.id_clinica,\n    c.id_paciente,\n    c.id_atendimento,\n    a.id_atendimento_pv,\n    c.id_profissional,\n    c.data_entrada,\n    c.data_brt_entrada,\n    c.motivo_cancelamento,\n    c.id_fila,\n    case\n        when c.data_cancelamento is null \n            then a.data_cancelamento\n        else c.data_cancelamento\n    end as data_cancelamento,\n    case\n        when c.data_cancelamento is null \n            then a.data_brt_cancelamento\n        else c.data_brt_cancelamento\n    end as data_brt_cancelamento,\n    c.data_hora_criacao,\n    c.data_brt_criacao,\n    c.data_hora_ultima_atualizacao,\n    c.data_brt_ultima_atualizacao,\n    c.emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_cancelamento\" as c\nleft join \"delta\".\"bronze\".\"stg_cnx_atendimento\" as a on a.id_atendimento = c.id_atendimento", "relation_name": "\"delta\".\"silver\".\"cnx_fact_cancelamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:22.483387Z", "completed_at": "2025-07-01T18:32:22.518956Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:22.541163Z", "completed_at": "2025-07-01T18:32:22.541163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1139671802520752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_cnx_paciente", "compiled": true, "compiled_code": "\n\nwith t1 as (\nSELECT\n    cast(idpaciente as bigint) as id_paciente,\n    data_cadastro,\n    date(data_cadastro at time zone 'America/Sao_Paulo') as data_brt_cadastro,\n    data_hora_ultima_atualizacao,\n    date(data_hora_ultima_atualizacao at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n    data_hora_insert,\n    date(data_hora_insert at time zone 'America/Sao_Paulo') as data_brt_insert,\n    p.nome as nome_paciente,\n    date(data_nascimento) as data_nascimento_paciente,\n    DATE_DIFF('year', data_nascimento, current_date) as idade,\n    cpf as cpf_paciente,\n    CASE\n        WHEN sexo = 'M' THEN 'Masculino'\n        WHEN sexo = 'F' THEN 'Feminino'\n        WHEN sexo = 'OUTRO' THEN 'Outro'\n        WHEN sexo = 'NAO_INFORMADO' THEN 'N\u00e3o informado'\n        ELSE 'N\u00e3o informado'\n    END AS sexo_paciente,\n    identidade,\n    email as email_paciente,\n    concat('55',regexp_replace(telefone_cel, '[-()\\s]', '')) as telefone_cel,\n    cep as cep_paciente,\n    endereco as endereco_paciente,\n    complemento,\n    cast(uf as varchar) as uf_paciente,\n    cidade as cidade_paciente,\n    bairro,\n    cast(p.idconvenio as bigint) as id_convenio,\n    carteira_convenio,\n    cast(idclinica as bigint) as id_clinica,\n    cast(p.idconvenio_plano as bigint) as id_convenio_plano,\n    cpf_responsavel,\n    nome_responsavel,\n    estado_civil as estado_civil_paciente,\n    etnia as etnia_paciente,\n    profissao as profissao_paciente,\n    cast(idpaciente_titular as bigint) as id_paciente_titular,\n    IF(idpaciente_titular is null, 'TITULAR', 'DEPENDENTE') as tipo_paciente,\n    info_adicionais,\n    case when p.flag_ativo is null or p.flag_ativo = '' then false else cast(if((p.flag_ativo = '1'),true,false) as boolean) end as flag_ativo,\n    tipo_criacao,\n    cast(idorigem_paciente as bigint) as id_origem_paciente,\n    idExterno,\n    grau_parentesco,\n    pais,\n    id_externo,\n    nome_mae,\n    nome_social,\n    id_raca_cor, \n    case\n        when id_raca_cor = 1 then 'Branca'\n        when id_raca_cor = 2 then 'Preta'\n        when id_raca_cor = 3 then 'Parda'\n        when id_raca_cor = 4 then 'Amarela'\n        when id_raca_cor = 5 then 'Ind\u00edgena'\n        when id_raca_cor = 99 then 'Sem Informa\u00e7\u00e3o'\n        when id_raca_cor is null then null\n        else 'N\u00e3o Classificado'\n    end as descricao_raca_cor,\n    grau_parentesco_representante_legal,\n    cpf_representante_legal,\n    nome_representante_legal,\n    obs_livres,\n    id_escolaridade,\n    case \n        when id_escolaridade = 1 then 'Analfabeto'\n        when id_escolaridade = 2 then 'Fundamental incompleto'\n        when id_escolaridade = 3 then 'Fundamental completo'\n        when id_escolaridade = 4 then 'M\u00e9dio incompleto'\n        when id_escolaridade = 5 then 'M\u00e9dio completo'\n        when id_escolaridade = 6 then 'Superior incompleto'\n        when id_escolaridade = 7 then 'Mestrado'\n        when id_escolaridade = 8 then 'Doutorado'\n        when id_escolaridade = 9 then 'Superior completo'\n        when id_escolaridade = 10 then 'Especializa\u00e7\u00e3o/resid\u00eancia'\n        when id_escolaridade = 11 then 'Alfabetizado'\n        when id_escolaridade = 12 then 'B\u00e1sico completo'\n        when id_escolaridade = 13 then 'B\u00e1sico incompleto'\n        when id_escolaridade  is null then null\n        else 'N\u00e3o classificado'\n    end escolaridade,\n    id_genero,\n    case \n        when id_genero = 1 then 'Homem cisg\u00eanero'\n        when id_genero = 2 then 'Mulher cisg\u00eanero'\n        when id_genero = 3 then 'Mulher transg\u00eanero/transexual'\n        when id_genero = 4 then 'Homem transg\u00eanero/transexual'\n        when id_genero = 5 then 'N\u00e3o-bin\u00e1rio'\n        when id_genero = 6 then 'Outro'\n        when id_genero = 99 then 'Prefiro n\u00e3o responder'\n        when id_genero is null then null\n        else 'N\u00e3o classificado'\n    end genero,        \n    cast(id_uf_nascimento as bigint) as id_uf_nascimento,\n    cast(if((flag_aps = '1'),true,false) as boolean) as flag_aps,\n    tp.id_team_phc as id_equipe_aps,\n    name as nome_equipe_aps,\n    i.nome_empresa_backoffice,\n    i.nome_departamento_backoffice,\n    i.nome_cargo_backoffice,\n    i.nome_plano_backoffice,\n    i.numero_matricula_backoffice,\n    c.nome as nome_convenio,\n    cp.nome as nome_plano_convenio,\n    p.data_hora_bloqueio,\n    date(p.data_hora_bloqueio at time zone 'America/Sao_Paulo') as data_brt_bloqueio,\n    current_timestamp(3) as emitted_at\nFROM \"delta\".\"bronze\".\"raw_cnx_paciente\" as p\nLEFT JOIN mysql_cnx.\"connectdoctor-prod\".team_patients_phc as tp on p.idpaciente = tp.id_patient\nLEFT JOIN mysql_cnx.\"connectdoctor-prod\".team_phc as t on tp.id_team_phc = t.id_team_phc\nLEFT JOIN mysql_cnx.\"connectdoctor-prod\".convenio as c on p.idconvenio = c.idconvenio\nLEFT JOIN mysql_cnx.\"connectdoctor-prod\".convenio_plano as cp on cp.idconvenio_plano = p.idconvenio_plano\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_paciente_informacao_complementar\" as i on p.idpaciente = i.id_paciente\n)\nselect \n    id_paciente,\n    nome_paciente,\n    data_nascimento_paciente,\n    cpf_paciente,\n    idade,\n    tipo_paciente,\n    sexo_paciente,\n    identidade,\n    email_paciente,\n    telefone_cel,\n    cep_paciente,\n    endereco_paciente,\n    complemento,\n    uf_paciente,\n    cidade_paciente,\n    bairro,\n    id_convenio,\n    carteira_convenio,\n    id_clinica,\n    id_convenio_plano,\n    cpf_responsavel,\n    nome_responsavel,\n    data_cadastro,\n    data_brt_cadastro,\n    estado_civil_paciente,\n    etnia_paciente,\n    profissao_paciente,\n    id_paciente_titular,\n    info_adicionais,\n    flag_ativo,\n    tipo_criacao,\n    id_origem_paciente,\n    data_hora_ultima_atualizacao,\n    data_brt_ultima_atualizacao,\n    data_hora_insert,\n    data_brt_insert,\n    idExterno,\n    grau_parentesco,\n    pais,\n    id_externo,\n    nome_mae,\n    nome_social,\n    id_raca_cor,\n    descricao_raca_cor,\n    grau_parentesco_representante_legal,\n    cpf_representante_legal,\n    nome_representante_legal,\n    obs_livres,\n    id_escolaridade,\n    escolaridade,\n    id_genero,\n    genero,        \n    id_uf_nascimento,\n    flag_aps,\n    id_equipe_aps,\n    nome_equipe_aps,\n    nome_empresa_backoffice,\n    nome_departamento_backoffice,\n    nome_cargo_backoffice,\n    nome_plano_backoffice,\n    numero_matricula_backoffice,\n    nome_convenio,\n    nome_plano_convenio,\n    data_hora_bloqueio,\n    data_brt_bloqueio,\n    case\n        when idade < 0   then null\n        when idade < 11  then '0 - 10'\n        when idade < 21  then '11 - 20'\n        when idade < 31  then '21 - 30'\n        when idade < 41  then '31 - 40'\n        when idade < 51  then '41 - 50'\n        when idade < 61  then '51 - 60'\n        when idade < 71  then '61 - 70'\n        when idade < 81  then '71 - 80'\n        when idade < 91  then '81 - 90'\n        when idade < 101 then '91 - 100'\n        when idade < 120 then '> 100 anos'\n        else null\n    end faixa_etaria,\n    case\n        when idade < 0    then null\n        when idade <  10  then 'Inf\u00e2ncia (at\u00e9 9 anos)' \n        when idade <= 14  then 'Pr\u00e9-adolesc\u00eancia (dos 10 aos 14 anos)'\n        when idade <= 19  then 'Adolesc\u00eancia (dos 15 aos 19 anos)'\n        when idade >= 20  then 'Adultos (a partir de 20 anos)'\n        when idade >  100 then 'Maior que 100 anos'\n        else null\n    end faixa_etaria2,\n    emitted_at\nfrom t1", "relation_name": "\"delta\".\"bronze\".\"stg_cnx_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:22.616265Z", "completed_at": "2025-07-01T18:32:22.659184Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:22.680408Z", "completed_at": "2025-07-01T18:32:22.680408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09771513938903809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_prescricao", "compiled": true, "compiled_code": "\n\n\nSELECT\n    p.id_prescricao,\n    p.id_atendimento,\n    p.id_profissional,\n    p.data_hora_insert,\n    p.data_brt_insert,\n    p.data_hora_ultima_alteracao,\n    p.data_brt_ultima_atualizacao,\n    p.codigo_prescricao,\n    p.plataforma_prescricao,\n    pi.id_prescricao_item,\n    pi.nome_prescricao,\n    pi.posologia_prescricao,\n    pi.descricao_prescricao,\n    pi.fabricante_prescricao,\n    pi.quantidade,\n    pi.flag_controle_especial,\n    pi.tipo_prescricao,\n    case\n        when pi.exames_tuss_codigo = ''\n            then null\n        else exames_tuss_codigo\n    end as exames_tuss_codigo,\n    pi.nome_exame_tuss\nFROM \"delta\".\"bronze\".\"stg_cnx_prescricao\" p\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_prescricao_item\" pi on p.id_prescricao = pi.id_prescricao", "relation_name": "\"delta\".\"silver\".\"cnx_fact_prescricao\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:22.761938Z", "completed_at": "2025-07-01T18:32:22.791266Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:22.810516Z", "completed_at": "2025-07-01T18:32:22.810516Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08388996124267578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_pagamento_profissional", "compiled": true, "compiled_code": "\n\n\nwith t1 as(\nselect \n    id_profissional_tipo_pagamento,\n    id_profissional,\n    tipo_pagamento,\n    valor_por_consulta,\n    valor_por_hora,\n    quantidade_consulta_gatilho,\n    data_criacao as valid_from,\n    date_add('second', -1, lead(data_criacao at time zone 'America/Sao_Paulo') over (partition by id_profissional order by data_criacao)) as valid_to,\n    current_timestamp(3) as emitted_at\nfrom \"delta\".\"bronze\".\"stg_cnx_profissional_tipo_pagamento\"\n)\nselect \n    id_profissional_tipo_pagamento,\n    id_profissional,\n    tipo_pagamento,\n    valor_por_consulta,\n    valor_por_hora,\n    quantidade_consulta_gatilho,\n    valid_from,\n    valid_to,\n    if((valid_to is null),false,true) as is_delete,\n    emitted_at\nfrom t1", "relation_name": "\"delta\".\"silver\".\"cnx_fact_pagamento_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:22.886465Z", "completed_at": "2025-07-01T18:32:22.911391Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:22.931131Z", "completed_at": "2025-07-01T18:32:22.931131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07938814163208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_profissional_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT\n      id_profissional_tiss\n\t, data_inclusao\n\t, data_brt_inclusao\n\t, data_ultima_alteracao\n\t, data_brt_ultima_alteracao\n\t, usuario_ultima_alteracao\n\t, versao\n\t, nome_profissional\n\t, cpf_profissional\n\t, numero_conselho\n\t, uf\n\t, id_especialidade\n    , emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_profissional_tiss\"", "relation_name": "\"delta\".\"silver\".\"cnx_dim_profissional_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:22.996559Z", "completed_at": "2025-07-01T18:32:23.023846Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:23.038372Z", "completed_at": "2025-07-01T18:32:23.038372Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07585382461547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_conexa_tiss", "compiled": true, "compiled_code": "\n\n\nselect\n\tid_conexa_tiss\n\t,data_inclusao\n\t,data_solicitacao\n\t,usuario_ultima_alteracao\n\t,data_ultima_alteracao\n\t,data_autorizacao\n\t,versao\n\t,prestador\n    ,plataforma\n\t,versao_tiss\n\t,id_consulta_prestador\n\t,id_paciente_prestador\n\t,numero_carteirinha\n\t,id_convenio_prestador\n\t,convenio\n\t,status\n\t,motivo_pendencia\n\t,numero_guia_operadora\n\t,numero_guia_prestador\n\t,quantidade_solicitada\n\t,quantidade_autorizada\n\t,quantidade_utilizada\n\t,codigo_glosa\n\t,mensagem_glosa\n\t,senha_autorizacao\n\t,data_validade_senha\n\t,token_solicitacao\n\t,token_confirmado\n\t,emitted_at\nfrom \"delta\".\"bronze\".\"stg_cnx_conexa_tiss\"", "relation_name": "\"delta\".\"silver\".\"cnx_fact_conexa_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:23.118265Z", "completed_at": "2025-07-01T18:32:23.145859Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:23.155797Z", "completed_at": "2025-07-01T18:32:23.155797Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07481241226196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_cgi", "compiled": true, "compiled_code": "\n\n\nSELECT\n    a.id_cgi_ciclo_avaliacao,\n    a.data_criacao,\n    a.data_brt_criacao,\n    a.data_atualizacao,\n    a.data_brt_atualizacao,\n    a.id_atendimento,\n    a.avaliacao_cgi,\n    a.base_avaliacao_cgi,\n    a.id_cgi_ciclo,\n    c.id_profissional,\n    c.id_paciente,\n    c.status_cgi_ciclo,\n    c.data_conclusao as data_conclusao_cgi_ciclo,\n    c.data_brt_conclusao as data_brt_conclusao_cgi_ciclo,\n    c.id_usuario_conclusao as id_usuario_conclusao_cgi_ciclo\nFROM \"delta\".\"bronze\".\"stg_cnx_tb_global_clinical_impression_cycle_evaluation\" a\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_tb_global_clinical_impression_cycle\" c on a.id_cgi_ciclo = c.id_cgi_ciclo", "relation_name": "\"delta\".\"silver\".\"cnx_fact_cgi\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:23.240809Z", "completed_at": "2025-07-01T18:32:23.264856Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:23.279584Z", "completed_at": "2025-07-01T18:32:23.279584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0802767276763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_evolucao_sm", "compiled": true, "compiled_code": "\n\nwith razao_sessao as (\n    select\n        id_evolucao,\n        array_agg(razao_sessao order by id_razao_sessao_dim desc) as lista_razao_sessao,\n\t\tarray_agg(distinct razao_sessao order by razao_sessao) as lista_razao_sessao_distinto_ordenado\n    from \"delta\".\"bronze\".\"stg_cnx_tb_treatment_reason_session\"\n    group by 1\n)\nSELECT\n    t.id_evolucao,\n \tt.id_atendimento,\n \tt.situacao_tratamento,\n \tt.resumo_sessao,\n\tt.flag_preenchimento_resumo_sessao,\n \tt.registro_documental,\n \tt.procedimentos_tecnicos,\n \tt.instrumentos_utilizados,\n    r.lista_razao_sessao,\n\tr.lista_razao_sessao_distinto_ordenado,\n\tt.data_hora_atualizacao,\n\tt.data_brt_atualizacao\nFROM \"delta\".\"bronze\".\"stg_cnx_treatment\" t\nLEFT JOIN razao_sessao as r on t.id_evolucao = r.id_evolucao", "relation_name": "\"delta\".\"silver\".\"cnx_fact_evolucao_sm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:23.358597Z", "completed_at": "2025-07-01T18:32:23.383775Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:23.401006Z", "completed_at": "2025-07-01T18:32:23.401006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08510279655456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.ga_fact_events", "compiled": true, "compiled_code": "\n\n\nselect\n    *\nfrom \"delta\".\"bronze\".\"stg_ga_events\"", "relation_name": "\"delta\".\"silver\".\"ga_fact_events\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:23.524246Z", "completed_at": "2025-07-01T18:32:23.557858Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:23.578777Z", "completed_at": "2025-07-01T18:32:23.578777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13200068473815918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_dim_condicao_tuss", "compiled": true, "compiled_code": "\n\n\nSELECT\n\t  id_condicao_tuss\n\t, id_condicao\n\t, id_grupo_tuss\n\t, id_pai_grupo_tuss\n\t-- poss\u00edveis configura\u00e7\u00f5es que temos na linhas de cuidado que os algoritmos interpretam para colocar pessoas em dia ou em atraso\n\t-- (value_frequency, time_frequency, minimum_frequency)\n\t, valor_frequencia\n\t, periodicidade_frequencia\n\t, frequencia_minima\n\t, data_criacao\n    , data_brt_criacao\n\t, data_ultima_atualizacao\n    , data_brt_ultima_atualizacao\n    , emitted_at\nFROM \"delta\".\"bronze\".\"stg_lina_condicao_tuss\"", "relation_name": "\"delta\".\"silver\".\"lina_dim_condicao_tuss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:23.685870Z", "completed_at": "2025-07-01T18:32:23.716718Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:23.733088Z", "completed_at": "2025-07-01T18:32:23.733088Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11144280433654785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.zd_dim_csat_responses", "compiled": true, "compiled_code": "\nSELECT\n    id_csat_responses,\n    id_ticket,\n    data_hora_criacao,\n    date(data_hora_criacao at time zone 'America/Sao_Paulo') as data_brt_criacao,\n    telefone_usuario,\n    nome_usuario,\n    satisfacao,\n    descricao_satisfacao,\n    resposta_selecionada,\n    emitted_at\nFROM \"delta\".\"bronze\".\"stg_mongo_csat_responses\"", "relation_name": "\"delta\".\"silver\".\"zd_dim_csat_responses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:23.826361Z", "completed_at": "2025-07-01T18:32:23.866262Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:23.888764Z", "completed_at": "2025-07-01T18:32:23.888764Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10922122001647949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_log_fila_atendimento", "compiled": true, "compiled_code": "\n\n\nselect\n    id_fileatendimentolog,\n    dataagendamento,\n    databackoffice,\n    datacancelamento,\n    datacriacaoatendimento,\n    dataentrada,\n    dataultimavezonline,\n    flagaguardandoativacao,\n    flagretornonoshow,\n    id_atendimento,\n    id_clinica,\n    id_especialidade,\n    id_fila,\n    id_paciente,\n    id_pacienteconvenio,\n    id_profissional,\n    id_usuariobackoffice,\n    id_usuariocancelamento,\n    id_usuarioinclusao,\n    idade,\n    medicamentos,\n    nomeclinica,\n    nomeespecialidade,\n    nomepaciente,\n    nomeusuariobackoffice,\n    nomeusuarioinclusao,\n    sintomas,\n    sintomasevidentes,\n    telefone,\n    tempoestimadoinicial,\n    tipoprofissional,\n    emitted_at\nfrom\n    \"delta\".\"bronze\".\"stg_mongo_filaatendimentolog\"", "relation_name": "\"delta\".\"silver\".\"cnx_log_fila_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:23.985208Z", "completed_at": "2025-07-01T18:32:24.012856Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:24.033046Z", "completed_at": "2025-07-01T18:32:24.033046Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10063052177429199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_log_acao_tiss", "compiled": true, "compiled_code": "\n\n\nSELECT\n       id_acao_tiss\n     , classe\n     , id_clinica\n     , data_criacao\n     , data_brt_criacao\n     , id_paciente\n     , id_atendimento\n     , acao\n     , request\n     , response\n     , status_code\n     , emitted_at\nFROM \"delta\".\"bronze\".\"stg_mongo_log_acao_tiss\"", "relation_name": "\"delta\".\"silver\".\"cnx_log_acao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:24.121017Z", "completed_at": "2025-07-01T18:32:24.149090Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:24.167847Z", "completed_at": "2025-07-01T18:32:24.167847Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09070658683776855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_log_medico_uso_ia", "compiled": true, "compiled_code": "\n\n\nselect \n\t_id\n\t,id_atendimento\n\t,id_profissional\n\t,data_hora_criacao\n\t,data_brt_criacao\n\t,acao\nfrom \"delta\".\"bronze\".\"stg_mongo_log_medico_uso_ia\"", "relation_name": "\"delta\".\"silver\".\"cnx_log_medico_uso_ia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:24.247979Z", "completed_at": "2025-07-01T18:32:24.265365Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:24.295653Z", "completed_at": "2025-07-01T18:32:24.295653Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08933115005493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_log_ms_auditoria", "compiled": true, "compiled_code": "\n\n\nselect\n    _id\n    ,\"data\"\n    ,id_clinica\n    ,id_convenio\n    ,nome_convenio\n    ,autorizador_id\n    ,usuario\n    ,evento\n    ,sistema\n    ,versao\n    ,id_paciente\n    ,carteirinha_paciente\n    ,url_requisicoes\n    ,tipo_requisicoes\n    ,path_requisicoes\n    ,tipo_respostas\n    ,data_respostas\n    ,path_respostas\n    ,data_erro\n    ,descricao_erro\n    ,path_erro\n    ,emitted_at\nfrom \"delta\".\"bronze\".\"stg_mongo_ms_auditoria\"", "relation_name": "\"delta\".\"silver\".\"cnx_log_ms_auditoria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:24.381816Z", "completed_at": "2025-07-01T18:32:24.417048Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:24.435000Z", "completed_at": "2025-07-01T18:32:24.435000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09540486335754395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.indices_profissionais", "compiled": true, "compiled_code": "\n\nselect \n\tid_profissional,\n\tsk_profissional,\n\tnome_profissional,\n\tdata_indice,\n\tativo_ultimos_30d,\n\tativo_data_atual,\n\tresultado_iqe_qualidade,\n\tresultado_iqe_conduta,\n\tresultado_iqe,\n\tplataforma\nfrom \"delta\".\"gold\".\"stg_indices_profissionais\"", "relation_name": "\"delta\".\"gold\".\"indices_profissionais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:24.529617Z", "completed_at": "2025-07-01T18:32:24.563367Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:24.586728Z", "completed_at": "2025-07-01T18:32:24.586728Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09958720207214355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.did_view_shift_checks", "compiled": true, "compiled_code": "\n\nwith t as (\n    select \n        id_plantao,\n        profissional_nome,\n        profissional_cpf,\n        profissional_conselho,\n        profissional_telefone,\n        nome_especialidade,\n        instituicao_nome,\n        data_inicio,\n        (\n            select min(data_termino)\n            from \"delta\".\"silver\".\"did_fact_checks\"  c\n            where c.profissional_cpf = s.profissional_cpf \n                and c.instituicao_nome = s.instituicao_nome\n                and (tipo = 'In' or (c.instituicao_nome like '%Transbordo%' or c.instituicao_nome like '%Speed%'))\n                and s.data_inicio - interval '1' hour <= c.data_termino \n                and s.data_termino - interval '1' hour >= c.data_termino\n        ) as checkin,\n        data_termino,\n        (\n            select max(data_termino)\n            from \"delta\".\"silver\".\"did_fact_checks\"  c\n            where c.profissional_cpf = s.profissional_cpf \n                and c.instituicao_nome = s.instituicao_nome\n                and (tipo = 'Out' or (c.instituicao_nome like '%Transbordo%' or c.instituicao_nome like '%Speed%'))\n                and s.data_inicio - interval '1' hour <= c.data_termino \n                and s.data_termino + interval '1' HOUR >= c.data_termino\n        ) as checkout\n    from \"delta\".\"silver\".\"did_view_shifts\" s\n    where\n        1=1\n)\nselect \n\tid_plantao,\n\tprofissional_nome,\n\tprofissional_cpf,\n    profissional_conselho,\n    profissional_telefone,\n    nome_especialidade,\n\tinstituicao_nome,\n\tdata_inicio,\n\tif(checkin is null and checkout is not null, data_inicio, checkin) as checkin,\n\tdata_termino,\n\tif(checkout is null and checkin is not null, data_termino, checkout) as checkout,\n\tif(checkin is not null or checkout is not null, true, false) as flag_valid,\n\tif(checkin is null and checkout is null, false, true) as flag_present\nfrom t", "relation_name": "\"delta\".\"silver\".\"did_view_shift_checks\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:24.668652Z", "completed_at": "2025-07-01T18:32:24.698630Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:24.717122Z", "completed_at": "2025-07-01T18:32:24.717122Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09582853317260742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_clinica", "compiled": true, "compiled_code": "\n\nSELECT\n    c.id_clinica,\n    c.nome_clinica,\n    cc.codigo_convenio_integracao_pv,\n    ac.unidade_negocio,\n    c.email,\n    c.cnpj,\n    c.flag_pertence_medico,\n    c.tipo_selecao_medico,\n    c.produto as produto_clinica,\n    c.id_clinica_master,\n    c.id_conta,\n    c.data_hora_insert,\n    c.data_brt_insert,\n    c.data_hora_bloqueio,\n    c.data_brt_bloqueio,\n    c.data_hora_ultima_atualizacao,\n    c.data_brt_ultima_atualizacao,\n    c.id_tipo,\n    c.status,\n    c.numero_cnes,\n    cc.flag_corporate,\n    cc.flag_servico_aps,\n    cc.flag_servico_assistente_social,\n    cc.flag_servico_assistente_social_agendado,\n    cc.flag_servico_assistente_social_imediato,\n    cc.flag_servico_dentista,\n    cc.flag_servico_dentista_agendado,\n    cc.flag_servico_dentista_imediato,\n    cc.flag_servico_educador_fisico,\n    cc.flag_servico_educador_fisico_agendado,\n    cc.flag_servico_educador_fisico_imediato,\n    cc.flag_servico_enfermagem,\n    cc.flag_servico_enfermagem_agendado,\n    cc.flag_servico_enfermagem_imediato,\n    cc.flag_servico_fisioterapeuta,\n    cc.flag_servico_fisioterapeuta_agendado,\n    cc.flag_servico_fisioterapeuta_imediato,\n    cc.flag_servico_fonoaudiologo,\n    cc.flag_servico_fonoaudiologo_agendado,\n    cc.flag_servico_fonoaudiologo_imediato,\n    cc.flag_servico_health_coach,\n    cc.flag_servico_health_coach_agendado,\n    cc.flag_servico_health_coach_imediato,\n    cc.flag_servico_medico,\n    cc.flag_servico_especialidades,\n    cc.flag_servico_pronto_atendimento,\n    cc.flag_atendimento_imediato_gestao,\n    cc.flag_escolha_automatica_especialista,\n    cc.flag_escolha_manual_especialista,\n    cc.flag_servico_nutricao,\n    cc.flag_servico_nutricao_agendado,\n    cc.flag_servico_nutricao_imediato,\n    cc.flag_servico_psicologia,\n    cc.flag_servico_psicologia_manual,\n    cc.flag_servico_psicologia_agendado,\n    cc.flag_servico_psicologia_imediato,\n    cc.flag_comunicacao_braze,\n    cc.flag_comunicacao_email,\n    cc.flag_comunicacao_email_nps,\n    cc.flag_comunicacao_ligacao,\n    cc.flag_comunicacao_sms,\n    cc.flag_permite_whatsapp_matinal_paciente,\n    cc.flag_comunicacao_whatsapp_lembrete_consulta_paciente,\n    cc.flag_comunicacao_whatsapp_paciente,\n    cc.flag_cnx_plus,\n    cc.flag_permite_consulta_dependente,\n    cc.flag_permite_login_paciente,\n    cc.flag_clinica_utiliza_ionic,\n    cc.flag_clinica_unificada_pv,\n    fluxo_liberacao,\n    cc.flag_habilitar_novo_limite,\n    cc.flag_habilitar_modulo_importacao_dados,\n    cc.flag_permite_auto_cadastro_paciente,\n    cc.flag_anexo_documento_oficial_foto,\n    cc.flag_anexo_carteirinha_plano_saude,\n    cc.flag_possui_encaminhamento,\n    cc.periodicidade_limite_atendimento_paciente,\n    cast(cc.quantidade_limite_atendimento_paciente as bigint) as quantidade_limite_atendimento_paciente,\n    cast(cc.quantidade_limite_atendimento_por_profissional as bigint) as quantidade_limite_atendimento_por_profissional,\n    cc.tipo_servico_meeting,\n    cc.flag_permite_push,\n    cc.flag_comunicacao_whatsapp_profissional,\n    cc.flag_obrigatoriedade_comorbidades,\n    cc.flag_especialidades_customizadas,\n    hs.bu as unidade_negocio_autoritativa,\n    hs.nome_canal as nome_canal_autoritativa,\n    hs.tipo_canal as tipo_canal_autoritativa,\n    case\n        when hs.bu = 'Operadoras'\n            then hs.categoria_operadora\n        else hs.categoria_cliente\n    end as categoria_cliente_autoritativa,\n    CASE\n        WHEN hs.id_clinica is null\n            then false\n        else true\n    END AS flag_base_autoritativa,\n    hs.id_company_hubspot as id_cliente_autoritativa,\n    case\n        when hs.nome_company_hubspot is null\n            then 'Sem cliente vinculado'\n        else hs.nome_company_hubspot\n    end as nome_cliente_autoritativa,\n    hs.quantidade_vidas_ans as quantidade_vidas_ans_autoritativa,\n    hs.nome_conta_pai_operadoras as nome_conta_pai_operadoras_autoritativa,\n    hs.previsao_inicio_go_live,\n    cc.flag_habilitar_envio_confirmacao_consulta_via_email_jor_pac,\n    cc.flag_habilitar_envio_confirmacao_consulta_via_whatsapp_jor_pac,\n    cc.flag_habilitar_confirmacao_consulta_jorn_backoffice_admin,\n    cc.flag_email_boas_vindas_admin,\n    cc.flag_email_boas_vindas_paciente,\n    cc.flag_email_boas_vindas_profissional,\n    cc.flag_habilitar_biometria,\n    cc.flag_possui_termo_uso_proprio_paciente,\n    cc.flag_possui_termo_uso_proprio_profissional,\n    cc.flag_bloqueia_criacao_atendimento_profissional_saude,\n    cc.flag_bloqueia_criacao_atendimento_retorno_medico,\n    cc.flag_bloqueia_reagendamento_atendimento,\n    cc.flag_habilitar_fluxo_triagem,\n    cc.flag_mostrar_logo_proprio,\n    cc.flag_possui_integracao_externa,\n    cc.flag_habilitar_estratificacao_saude_mental,\n    if(ci.flag_habilitar_envio_faturamento_por_vida, true, false) as flag_habilitar_envio_faturamento_por_vida,\n    if(ci.flag_nao_criptografar_senha_faturamento, true, false) as flag_nao_criptografar_senha_faturamento,\n    if(ci.flag_habilitar_conexa_tiss_autorizacao_v2, true, false) as flag_habilitar_conexa_tiss_autorizacao_v2,\n    if(ci.flag_verificar_elegibilidade, true, false) as flag_verificar_elegibilidade,\n    if(ci.flag_verificar_autorizador_agendado, true, false) as flag_verificar_autorizador_agendado,\n    if(ci.flag_verificar_autorizador_imediato, true, false) as flag_verificar_autorizador_imediato,\n    if(ci.flag_habilitar_envio_faturamento_conexa_tiss, true, false) as flag_habilitar_envio_faturamento_conexa_tiss,\n    if(ci.flag_enviar_lote_guias, true, false) as flag_enviar_lote_guias,\n    CASE\n        WHEN scc.id_clinica_paciente IS NOT NULL THEN TRUE\n        ELSE FALSE\n    END AS flag_corpo_clinico,\n    tg.informacoes_limites_atendimentos_geral_novo,\n    tp.informacoes_limites_atendimentos_produto_agendados_novo,\n    tp.informacoes_limites_atendimentos_produto_imediatos_novo,\n    te.informacoes_limites_atendimentos_excecao_novo,\n    cc.flag_habilitar_recebimento_para_profissionais,\n    cc.id_repasse,\n    cast(c.emitted_at as varchar) as emitted_at \nFROM \"delta\".\"bronze\".\"stg_cnx_clinica\" c\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_clinica_config\" cc on c.id_clinica = cc.id_clinica\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_clinica_integracao_externa_config\" ci on c.id_clinica = ci.id_clinica\nLEFT JOIN \"delta\".\"silver\".\"cnx_dim_aux_clinica\" ac on c.id_clinica = ac.id_clinica\nLEFT JOIN \"delta\".\"silver\".\"hs_dim_clinicas\" hs on c.id_clinica = hs.id_clinica and hs.plataforma = 'Conexa'\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_appointment_threshold\" tg on c.id_clinica = tg.id_clinica\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_appointment_threshold_product\" tp on c.id_clinica = tp.id_clinica\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_appointment_threshold_exception\" te on c.id_clinica = te.id_clinica\nLEFT JOIN (SELECT DISTINCT id_clinica_paciente FROM \"delta\".\"silver\".\"cnx_fact_corpo_clinico\") scc ON c.id_clinica = scc.id_clinica_paciente", "relation_name": "\"delta\".\"silver\".\"cnx_dim_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:24.814835Z", "completed_at": "2025-07-01T18:32:24.849758Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:24.869267Z", "completed_at": "2025-07-01T18:32:24.869267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10661935806274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_dim_convenio", "compiled": true, "compiled_code": "\n\nwith rc as (\n\tselect \n\t\tid_convenio,\n\t\tcobertura,\n\t\tcondicoes,\n\t\tregras,\n\t\trank() OVER (PARTITION BY id_convenio ORDER BY data_ultima_alteracao DESC) AS ranking\n    from \"delta\".\"bronze\".\"stg_pvv_relacao_convenios\"\n),\nrepasse as(\nselect \n    cr.id_convenio,\n    listagg(car.categoria,' || ') WITHIN GROUP (ORDER BY car.categoria) as categoria\nfrom \"delta\".\"bronze\".\"stg_pvv_convenio_repasses\" as cr\ninner join \"delta\".\"bronze\".\"stg_pvv_categoria_repasse\" as car on car.id_categoria_repasse = cr.id_categoria_repasse \ngroup by cr.id_convenio \n)\nselect \n       conv.id_convenio,\n       conv.data_ultima_alteracao,\n       conv.data_brt_ultima_alteracao,\n       conv.usuario_ultima_alteracao,\n       conv.data_inclusao,\n       conv.data_brt_inclusao,\n       conv.data_fim,\n       conv.data_brt_fim,\n       conv.data_inicio,\n       conv.data_brt_inicio,\n       conv.data_ativacao_auto_avaliacao,\n       conv.data_brt_ativacao_auto_avaliacao,\n       conv.nome_convenio,\n       conv.percentual_empresa,\n       conv.tipo_convenio,\n       conv.flag_triagem,\n       conv.representante,\n       conv.nome_convenio_sistema,\n       conv.chave_login,\n       conv.flag_pacote_atendimento, \n       conv.flag_whitelabel,\n       conv.landing_page,\n       conv.flag_ativo,\n       conv.flag_publico_site,\n       conv.publico_site_doc as flag_publico_site_documento,\n       conv.limite_atendimento,\n       conv.tipo_limite,\n       conv.tempo_atendimento,\n       conv.flag_elegibilidade,\n       conv.flag_atendimento_apos_limite,\n       conv.valor_atendimento_apos_limite,\n       conv.quantidade_demais_atendimento,\n       conv.quantidade_primeira_atendimento,\n       conv.flag_autorizacao_tiss,\n       conv.flag_biometria_facial,\n       conv.flag_encaminhamento_medico,\n       conv.flag_paciente_pagante,\n       conv.flag_utiliza_corpo_clinico,\n       conv.tipo_limite_convenio,\n       conv.limite_atendimento_convenio,\n       conv.regiao, \n       conv.flag_cadastro_simples,\n       conv.tipo_contrato,\n       conv.flag_convenio_smb,\n       conv.flag_convenio_conexa,\n       conv.valor_por_atendimento,\n       conv.valor_por_vida,\n       conv.flag_diario_emocoes,\n       conv.flag_acesso_exclusivo_beti,\n       conv.flag_cancelar_tiss,\n       conv.flag_auto_avaliacao,\n       conv.flag_conexa_plus,\n       conv.flag_convenio_unificado_conexa,\n       conv.paciente_solicita_pacote,\n       conv.restringe_psicologo_valor_repasse,\n       rp.categoria as categoria_repasse,\n\trc.cobertura,\n\trc.condicoes,\n\trc.regras,\n       conv.emitted_at,\n       conv.is_delete,\n       hs.bu as unidade_negocio_autoritativa,\n       hs.nome_canal as nome_canal_autoritativa,\n       hs.tipo_canal as tipo_canal_autoritativa,\n       case\n              when hs.bu = 'Operadoras'\n                     then hs.categoria_operadora\n              else hs.categoria_cliente\n       end as categoria_cliente_autoritativa,\n       CASE\n              WHEN hs.id_clinica is null\n                     then false\n              else true\n       END AS flag_base_autoritativa,\n       hs.id_company_hubspot as id_cliente_autoritativa,\n       case\n              when hs.nome_company_hubspot is null\n                  then 'Sem cliente vinculado'\n              else hs.nome_company_hubspot\n       end as nome_cliente_autoritativa,\n       hs.quantidade_vidas_ans as quantidade_vidas_ans_autoritativa,\n       hs.nome_conta_pai_operadoras as nome_conta_pai_operadoras_autoritativa,\n       current_timestamp(3) as updated_at\nFROM \"delta\".\"bronze\".\"stg_pvv_convenio\" AS conv --\nLEFT JOIN rc on conv.id_convenio = rc.id_convenio and rc.ranking = 1\nLEFT JOIN repasse as rp on rp.id_convenio = conv.id_convenio\nLEFT JOIN \"delta\".\"silver\".\"hs_dim_clinicas\" hs on conv.id_convenio = hs.id_clinica and hs.plataforma = 'Psicologia Viva'", "relation_name": "\"delta\".\"silver\".\"pvv_dim_convenio\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:24.968220Z", "completed_at": "2025-07-01T18:32:24.998762Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:25.019681Z", "completed_at": "2025-07-01T18:32:25.019681Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10240340232849121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_lina_fact_lina_compromisso_data_inclusao__day__5.f275a2e7f3", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(data_inclusao as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"silver\".\"lina_fact_lina_compromisso\"\n    where\n        -- to exclude erroneous future dates\n        cast(data_inclusao as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:25.111397Z", "completed_at": "2025-07-01T18:32:25.143497Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:25.161709Z", "completed_at": "2025-07-01T18:32:25.161709Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09484720230102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_dim_tema_profissional_atende", "compiled": true, "compiled_code": "\n\nselect \n\ttema.id_temas as id_tema_profissional_atende,\n     tema.id_profissional, \n     tema.data_ultima_alteracao,\n     tema.data_brt_ultima_alteracao,\n     tema.usuario_ultima_alteracao,\n     tema.data_inclusao,\n     tema.data_brt_inclusao,\n     tema.flag_acompanhamento_idoso,\n     tema.flag_acompanhamento_pessoal,\n     tema.flag_adocao_filho,\n     tema.flag_adolescencia,\n     tema.flag_ansiedade,\n     tema.flag_aprendizagem,\n     tema.flag_bipolar,\n     tema.flag_casal,\n     tema.flag_casamento,\n     tema.flag_cirugia_bariatrica,\n     tema.flag_cognitiva,\n     tema.flag_compulsoes,\n     tema.flag_conflitos_amorosos,\n     tema.flag_conflitos_familiares,\n     tema.flag_conflitos_lei, \n     tema.flag_dependencia_jogos,\n     tema.flag_dependencia_quimica,\n     tema.flag_depressao,\n     tema.flag_desenvolvimento_pessoal,\n     tema.flag_disfuncoes_sexuais,\n     tema.flag_dor, \n     tema.flag_emagrecimento,\n     tema.flag_enfermos,\n     tema.flag_entrevistas_psicologicas, \n     tema.flag_estresse,\n     tema.flag_estresse_traumatico,\n     tema.flag_exames_psicologicos,\n     tema.flag_familia,\n     tema.flag_fobia_social,\n     tema.flag_fobias, \n     tema.flag_idoso_terceira_idade, \n     tema.flag_ludoterapia,\n     tema.flag_medos,\n     tema.flag_morte_luto,\n     tema.flag_neuropsicologia, \n     tema.flag_obesidade,\n     tema.flag_orientacao_aprendizagem,\n     tema.flag_orientacao_pais,\n     tema.flag_orientacao_profissional,\n     tema.flag_orientacao_psicologica,\n     tema.flag_orientacao_psicopedagogica, \n     tema.flag_pessoas_deficiencia,\n     tema.flag_pla_psicopedagogico,\n     tema.flag_preparacao_aposentadoria, \n     tema.flag_publicidade,\n     tema.flag_recrutamento_pessoal,\n     tema.flag_relacionamento_afetivos,\n     tema.flag_saude_mental,\n     tema.flag_sindrome_panico,\n     tema.flag_suicidio,\n     tema.flag_tdah,\n     tema.flag_toc,\n     tema.flag_tanatologia,\n     tema.flag_tecnologia,\n     tema.flag_teste_psicologicos,\n     tema.flag_transtorno_alimentar,\n     tema.flag_transtorno_humor,\n     tema.flag_transtorno_sono,\n     tema.flag_tratamento_memoria,\n     tema.flag_treinamento_empresarial,\n     tema.flag_violencia_domestica,\n     tema.flag_violencia_sexual,\n     tema.flag_acompanhamento_gravidez, \n     tema.flag_adaptacao_home,\n     tema.flag_desenvolvimento_profissional,\n     tema.flag_incertezas,\n     tema.flag_quarentena_isolamento,\n     tema.emitted_at,\n     tema.is_delete,\n     tema.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_temas\" as tema --\ninner join \"delta\".\"silver\".\"pvv_dim_profissional\" as pro on pro.id_profissional = tema.id_profissional", "relation_name": "\"delta\".\"silver\".\"pvv_dim_tema_profissional_atende\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:25.256788Z", "completed_at": "2025-07-01T18:32:25.288410Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:25.303397Z", "completed_at": "2025-07-01T18:32:25.303397Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09335160255432129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_data_agenda_profissional", "compiled": true, "compiled_code": "\n\n select \n        dt.id_data_agenda_psicologo,\n        dt.id_agenda_profissional,\n        pro.id_profissional,\n        pro.nome_profissional,\n        pro.email_profissional,\n        pro.pais_atuacao,\n        dt.data_ultima_alteracao,\n        dt.data_brt_ultima_alteracao,\n        dt.usuario_ultima_alteracao,\n        dt.data_inclusao,\n        dt.data_brt_inclusao,\n        dt.start,\n        \"end\",\n        dt.turno_atendimento,\n        dt.status,\n        dt.title,\n        dt.observacao,\n        dt.nome_paciente,\n        dt.flag_agenda_preenchida,\n        dt.emitted_at,\n        dt.is_delete,\n        dt.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_data_agenda_psicologo\" as dt --\ninner join \"delta\".\"bronze\".\"stg_pvv_agenda_profissional\" as ag on ag.id_agenda_profissional = dt.id_agenda_profissional\ninner join \"delta\".\"silver\".\"pvv_dim_profissional\" as pro on pro.id_profissional = ag.id_profissional", "relation_name": "\"delta\".\"silver\".\"pvv_fact_data_agenda_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:25.400083Z", "completed_at": "2025-07-01T18:32:25.400083Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:25.430305Z", "completed_at": "2025-07-01T18:32:25.430305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07857990264892578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.pvv_snp_profissional", "compiled": true, "compiled_code": "\n\n\n\nselect \n\t \nid_profissional,\ndata_ultima_alteracao,\ndata_inativo,\nusuario_ultima_alteracao,\nnome_profissional,\nemail_profissional,\ncelular_profissional as celular,\ncrp,\ncpf_profissional as cpf,\nemail_cs_responsavel,\nnada_consta,\nflag_foto_perfil,\ndata_nascimento_profissional as data_nascimento,\npais_atuacao,\nestado_crp,\nflag_desativado,\nstatus_cancelamento,\ndescricao,\nidentidade,\ntermoe_psi,\npais,\ncodigo_pais_celular,\nvalor_definido,\nflag_ativo,\nemitted_at,\nis_delete,\nupdated_at,\nflag_psi_vigente,\ndata_vigencia,\ndata_pagamento,\nplano,\nvalor_pagamento\nfrom \"delta\".\"silver\".\"pvv_dim_profissional\" as p\n", "relation_name": "\"delta\".\"silver\".\"pvv_snp_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:25.519732Z", "completed_at": "2025-07-01T18:32:25.551910Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:25.570285Z", "completed_at": "2025-07-01T18:32:25.570285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09920811653137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_chamada", "compiled": true, "compiled_code": "\n\nwith chamada as (\n\tselect\n\tid_atendimento,\n\tMAX_BY(id_chamada, data_hora_ultima_atualizacao_chamada) as id_chamada,\n\tMAX_BY(tipo_servico_meeting, data_hora_ultima_atualizacao_chamada) as tipo_servico_meeting,\n\tMIN(data_inicio_chamada) as data_inicio_chamada,\n\tMAX(data_fim_chamada) as data_fim_chamada,\n\tMIN(data_chamada) as data_chamada,\n\tMAX(data_hora_ultima_atualizacao_chamada) as data_hora_ultima_atualizacao_chamada,\n\tMAX(data_hora_criacao_chamada) as data_hora_criacao_chamada,\n\tMIN_BY(status_paciente, data_hora_entrada_paciente) as status_paciente,\n\tMIN_BY(status_profissional, data_hora_entrada_profissional) as status_profissional,\n\tMIN(data_hora_entrada_profissional) as data_hora_entrada_profissional,\n\tMAX(data_hora_saida_profissional) as data_hora_saida_profissional,\n\tMIN(data_hora_entrada_paciente) as data_hora_entrada_paciente,\n\tMAX(data_hora_saida_paciente) as data_hora_saida_paciente,\n\tMIN_BY(id_usuario_profissional, data_hora_entrada_profissional) as id_usuario_profissional,\n\tMIN_BY(id_usuario_paciente, data_hora_entrada_paciente) as id_usuario_paciente\n\tfrom \"delta\".\"bronze\".\"stg_cnx_chamada\"\n\tleft join \"delta\".\"bronze\".\"stg_cnx_chamada_participante\" using(id_chamada)\n\tgroup by 1\n)\n\nselect\n\tid_atendimento,\n\tid_chamada,\n\ttipo_servico_meeting,\n\tdata_inicio_chamada,\n\tdata_fim_chamada,\n\tdate_diff('second', data_inicio_chamada, data_fim_chamada) as tempo_total_chamada,\n\tdata_chamada,\n\tdata_hora_ultima_atualizacao_chamada\n\tdata_hora_criacao_chamada,\n\tstatus_paciente,\n\tstatus_profissional,\n\tCOALESCE(ch.data_hora_entrada_profissional, log_prof.data_hora_entrada_profissional) as data_hora_entrada_profissional,\n\tCOALESCE(ch.data_hora_saida_profissional, log_prof.data_hora_saida_profissional) as data_hora_saida_profissional,\n\tCOALESCE(ch.data_hora_entrada_paciente, log_pac.data_hora_entrada_paciente) as data_hora_entrada_paciente,\n\tCOALESCE(ch.data_hora_saida_paciente, log_pac.data_hora_saida_paciente) as data_hora_saida_paciente,\n\tid_usuario_profissional,\n\tid_usuario_paciente,\n\tdata_atendimento,\n\tdate_diff('MINUTE', data_atendimento, COALESCE(ch.data_hora_entrada_profissional, log_prof.data_hora_entrada_profissional)) as tempo_entrada_profissional_minutos,\n\tdate(data_inicio_chamada at time zone 'America/Sao_Paulo') as data_brt_inicio_chamada,\n\tdate(data_fim_chamada at time zone 'America/Sao_Paulo') as data_brt_fim_chamada,\n\tcase\n\t\twhen ch.data_hora_entrada_profissional is null and log_prof.data_hora_entrada_profissional is not null then true\n\t\twhen ch.data_hora_saida_profissional is null and log_prof.data_hora_saida_profissional is not null then true\n\t\twhen ch.data_hora_entrada_paciente is null and log_pac.data_hora_entrada_paciente is not null then true\n\t\twhen ch.data_hora_saida_paciente is null and log_pac.data_hora_saida_paciente is not null then true\n\t\telse false\n\tend as flag_preenchido_log,\n\teventos_pac.detalhes_videochamada as detalhes_videochamada_paciente,\n\teventos_prof.detalhes_videochamada as detalhes_videochamada_profissional\nfrom chamada ch\nleft join \"delta\".\"bronze\".\"stg_cnx_aux_atendimento_chamada\" using(id_atendimento)\nleft join \"delta\".\"bronze\".\"stg_cnx_chamada_log_paciente\" as log_pac using(id_chamada)\nleft join \"delta\".\"bronze\".\"stg_cnx_chamada_log_profissional\" as log_prof using(id_chamada)\nleft join \"delta\".\"bronze\".\"stg_cnx_chamada_eventos_paciente\" as eventos_pac using(id_chamada)\nleft join \"delta\".\"bronze\".\"stg_cnx_chamada_eventos_profissional\" as eventos_prof using(id_chamada)", "relation_name": "\"delta\".\"silver\".\"cnx_fact_chamada\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:25.671671Z", "completed_at": "2025-07-01T18:32:25.707986Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:25.728259Z", "completed_at": "2025-07-01T18:32:25.728259Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10943031311035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_inter_memed_atestado", "compiled": true, "compiled_code": "\n\n\nSELECT\n    id_prescricao,\n    id_atendimento,\n    id_profissional,\n    data_hora_insert,\n    data_brt_insert,\n    data_hora_ultima_alteracao,\n    data_brt_ultima_atualizacao,\n    plataforma_prescricao,\n    id_prescricao_item,\n    nome_prescricao,\n    replace(\n        regexp_extract(\n\t\t    upper(translate(replace(posologia_prescricao, 'CID'), ',.;', '')),\n\t\t    '[A-Z][0-9]{2,3}'\n\t),' ', '') as cid,\n    posologia_prescricao as detalhe_atestado\nFROM \"delta\".\"silver\".\"cnx_fact_prescricao\"\nWHERE tipo_prescricao = 'atestado'", "relation_name": "\"delta\".\"silver\".\"cnx_inter_memed_atestado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:25.819049Z", "completed_at": "2025-07-01T18:32:25.857530Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:25.882671Z", "completed_at": "2025-07-01T18:32:25.882671Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10640597343444824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_indices_profissionais_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.8eb5179f5b", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"indices_profissionais\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:25.972846Z", "completed_at": "2025-07-01T18:32:26.002903Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:26.030295Z", "completed_at": "2025-07-01T18:32:26.030295Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09920740127563477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_indices_profissionais_sk_profissional__data_indice.8b7560a0fc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sk_profissional, data_indice\n    from \"delta\".\"gold\".\"indices_profissionais\"\n    group by sk_profissional, data_indice\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:26.125175Z", "completed_at": "2025-07-01T18:32:26.152508Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:26.184493Z", "completed_at": "2025-07-01T18:32:26.184493Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10484480857849121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_indices_profissionais_resultado_iqe.935a0869c1", "compiled": true, "compiled_code": "\n\n\n\nselect \n    resultado_iqe\nfrom \"delta\".\"gold\".\"indices_profissionais\"\nwhere resultado_iqe is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:26.271548Z", "completed_at": "2025-07-01T18:32:26.299037Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:26.319606Z", "completed_at": "2025-07-01T18:32:26.319606Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0937962532043457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_indices_profissionais_resultado_iqe_conduta.7afa288533", "compiled": true, "compiled_code": "\n\n\n\nselect \n    resultado_iqe_conduta\nfrom \"delta\".\"gold\".\"indices_profissionais\"\nwhere resultado_iqe_conduta is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:26.411340Z", "completed_at": "2025-07-01T18:32:26.444235Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:26.466135Z", "completed_at": "2025-07-01T18:32:26.466135Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09805870056152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_indices_profissionais_resultado_iqe_qualidade.59856ee20d", "compiled": true, "compiled_code": "\n\n\n\nselect \n    resultado_iqe_qualidade\nfrom \"delta\".\"gold\".\"indices_profissionais\"\nwhere resultado_iqe_qualidade is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:26.549006Z", "completed_at": "2025-07-01T18:32:26.577089Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:26.598646Z", "completed_at": "2025-07-01T18:32:26.598646Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09528326988220215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_indices_profissionais_sk_profissional.90d3ae4e3b", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_profissional\nfrom \"delta\".\"gold\".\"indices_profissionais\"\nwhere sk_profissional is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:26.679850Z", "completed_at": "2025-07-01T18:32:26.709789Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:26.739901Z", "completed_at": "2025-07-01T18:32:26.739901Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09951210021972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_paciente", "compiled": true, "compiled_code": "\n\nSELECT\n    p.id_paciente,\n    cast(u.id_usuario as bigint) as id_usuario,\n    p.nome_paciente,\n    p.data_nascimento_paciente,\n    p.cpf_paciente,\n    p.idade,\n    p.faixa_etaria,\n    p.faixa_etaria2,\n    p.tipo_paciente,\n    u.login_usuario,\n    c.nome_clinica,\n    c.produto_clinica,\n    u.tipo_perfil_usuario,\n    CASE\n        when u.flag_bloqueado = true\n            then u.data_hora_bloqueio\n        when p.flag_ativo = false and p.data_hora_bloqueio is not null\n            then p.data_hora_bloqueio\n        else null\n    end as data_hora_bloqueio,\n    CASE\n        when u.flag_bloqueado = true\n            then u.data_brt_bloqueio\n        when p.flag_ativo = false and p.data_brt_bloqueio is not null\n            then p.data_brt_bloqueio\n        else null\n    end as data_brt_bloqueio,\n    CASE\n        when u.flag_bloqueado = true\n            then u.motivo_bloqueio\n        else null\n    end as motivo_bloqueio,\n    u.flag_ativo as flag_ativacao,\n    case\n        when u.flag_ativo = true\n            then u.data_hora_ativacao\n        else null\n    end as data_hora_ativacao,\n    case\n        when u.flag_ativo = true\n            then u.data_brt_ativacao\n        else null\n    end as data_brt_ativacao,\n    p.sexo_paciente,\n    p.identidade,\n    p.email_paciente,\n    p.telefone_cel,\n    p.cep_paciente,\n    p.endereco_paciente,\n    p.complemento,\n    p.uf_paciente,\n    p.cidade_paciente,\n    p.bairro,\n    p.id_convenio,\n    p.carteira_convenio,\n    p.id_clinica,\n    p.id_convenio_plano,\n    p.cpf_responsavel,\n    p.nome_responsavel,\n    case\n        when p.data_cadastro is null\n            then p.data_hora_insert\n        else p.data_cadastro\n    end as data_cadastro,\n    case\n        when p.data_cadastro is null\n            then p.data_brt_insert\n        else p.data_brt_cadastro\n    end as data_brt_cadastro,\n    p.estado_civil_paciente,\n    p.etnia_paciente,\n    p.profissao_paciente,\n    p.id_paciente_titular,\n    p.info_adicionais,\n    p.flag_ativo,\n    CASE\n        when u.flag_bloqueado = true\n            then 'BLOQUEADO'\n        when p.flag_ativo = false\n            then 'INATIVO'\n        WHEN (p.flag_ativo = true and u.id_usuario is null) or (p.flag_ativo = true and u.flag_ativo = false and u.flag_bloqueado = false)\n            then 'PENDENTE_ATIVACAO'\n        when u.flag_ativo = true and u.flag_bloqueado = false and p.flag_ativo = true\n            then 'ATIVO'\n    end as status_paciente,\n    u.flag_termo_aceito,\n    u.data_hora_termo_aceito,\n    u.data_brt_termo_aceito,\n    u.ip_termo_aceito,\n    u.flag_bloqueado,\n    u.senha,\n    p.tipo_criacao,\n    p.id_origem_paciente,\n    p.data_hora_ultima_atualizacao,\n    p.data_brt_ultima_atualizacao,\n    p.data_hora_insert,\n    p.data_brt_insert,\n    p.idExterno,\n    p.grau_parentesco,\n    p.pais,\n    p.id_externo,\n    p.nome_mae,\n    p.nome_social,\n    cast(p.id_raca_cor as bigint) as id_raca_cor,\n    p.descricao_raca_cor,\n    p.grau_parentesco_representante_legal,\n    p.cpf_representante_legal,\n    p.nome_representante_legal,\n    p.obs_livres,\n    cast(p.id_escolaridade as bigint) as id_escolaridade,\n    p.escolaridade as descricao_escolaridade,\n    cast(p.id_genero as bigint) as id_genero,\n    p.genero  as descricao_genero,\n    p.id_uf_nascimento,\n    p.flag_aps,\n    p.id_equipe_aps,\n    p.nome_equipe_aps,\n    p.nome_empresa_backoffice,\n    p.nome_departamento_backoffice,\n    p.nome_cargo_backoffice,\n    p.nome_plano_backoffice,\n    p.numero_matricula_backoffice,\n    p.nome_convenio,\n    p.nome_plano_convenio,\n    cast(p.emitted_at as varchar) as emitted_at,\n    greatest(p.data_hora_ultima_atualizacao, coalesce(u.data_hora_ultima_atualizacao, date'1900-01-01')) as data_controle\nFROM \"delta\".\"bronze\".\"stg_cnx_paciente\" p\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_usuario_paciente\" as u on u.id_paciente = p.id_paciente\nLEFT JOIN \"delta\".\"silver\".\"cnx_dim_clinica\" c on p.id_clinica = c.id_clinica", "relation_name": "\"delta\".\"silver\".\"cnx_dim_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:26.833112Z", "completed_at": "2025-07-01T18:32:26.980201Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:27.007947Z", "completed_at": "2025-07-01T18:32:27.007947Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22076797485351562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_dim_profissional", "compiled": true, "compiled_code": "\n\nSELECT\n    p.id_profissional,\n    u.id_usuario as id_usuario_profissional,\n    p.nome_profissional,\n    --p.nome,\n    --p.sobrenome,\n    p.email_profissional,\n    -- u.login,\n    -- u.perfil,\n    u.flag_ativo as flag_ativacao,\n    case\n        when flag_termo_aceito = true\n            then u.data_hora_termo_aceito\n        else null\n    end as data_hora_termo_aceito,\n    case\n        when flag_termo_aceito = true\n            then u.data_brt_termo_aceito\n        else null\n    end as data_brt_termo_aceito,\n    u.flag_termo_aceito,\n    -- u.ip_termo_aceito,\n    CASE\n        when u.flag_bloqueado = true\n            then u.data_hora_bloqueio\n        else null\n    end as data_hora_bloqueio,\n    CASE\n        when u.flag_bloqueado = true\n            then u.data_brt_bloqueio\n        else null\n    end as data_brt_bloqueio,\n    -- u.motivo_bloqueio,\n    case\n        when u.flag_ativo = true\n            then u.data_hora_ativacao\n        else null\n    end as data_hora_ativacao_usuario,\n    case\n        when u.flag_ativo = true\n            then u.data_brt_ativacao\n        else null\n    end as data_brt_ativacao_usuario,\n    p.tipo_conselho,\n    p.numero_conselho,\n    p.uf_conselho,\n    p.id_especialidade,\n    CASE \n        WHEN p.tipo_conselho = 'CRM' AND e.nome_especialidade is null THEN 'Cl\u00ednica Geral'\n        WHEN p.tipo_conselho = 'CRP' THEN 'Psicologia Cl\u00ednica'\n        WHEN p.tipo_conselho = 'COREN' THEN 'Enfermagem'\n        WHEN p.tipo_conselho = 'CRN' AND e.nome_especialidade is null THEN 'Nutri\u00e7\u00e3o Cl\u00ednica'\n        WHEN p.tipo_conselho = 'CREF' THEN 'Educa\u00e7\u00e3o F\u00edsica'\n        WHEN p.tipo_conselho = 'CREFONO' THEN 'Fonoaudiologia'\n        WHEN p.tipo_conselho = 'CRO' AND e.nome_especialidade is null THEN 'Odontologia'\n        WHEN p.tipo_conselho = 'CFESS' THEN 'Servi\u00e7o Social'\n        WHEN p.tipo_conselho = 'CREFITO' THEN 'Fisioterapia e Terapia Ocupacional'\n        WHEN p.tipo_conselho = 'CONTER' THEN 'Radiologia'\n        WHEN p.tipo_conselho = 'HC' THEN 'Health Coach'\n        WHEN p.tipo_conselho = 'CFBM' THEN 'Biomedicina'\n        ELSE e.nome_especialidade \n    END as nome_especialidade,\n    e.descricao_especialidade,\n    e.flag_pediatria,\n    case\n\t\twhen e.cbo is null and p.tipo_conselho = 'CRP' then 251510\n\t\twhen e.cbo is null and p.tipo_conselho = 'CRN' then 223710\n\t\twhen e.cbo is null and p.tipo_conselho = 'CREFITO' then 223605\n\t\twhen e.cbo is null and p.tipo_conselho = 'COREN' then 223505\n\t\twhen e.cbo is null and e.nome_especialidade is null then 225125 -- Clinico Geral\n\t\telse e.cbo\n\tend as cbo,\n    p.cpf_profissional,\n    p.data_nascimento_profissional,\n    p.sexo_profissional,\n    p.cep_profissional,\n    p.endereco_profissional,\n    p.uf_profissional,\n    p.cidade_profissional,\n    p.telefone_profissional,\n    p.flag_ativo,\n    CASE \n        WHEN u.flag_bloqueado IS NULL AND p.flag_ativo = False\n            THEN True\n        WHEN u.flag_bloqueado IS NULL AND p.flag_ativo = True\n            THEN False\n        ELSE u.flag_bloqueado\n    end as flag_bloqueado,\n    p.flag_especialista,\n    p.flag_curador,\n    case\n        when p.data_cadastro is null\n            then p.data_hora_insert\n        else p.data_cadastro\n    end as data_cadastro,\n    case\n        when p.data_cadastro is null\n            then p.data_brt_insert\n        else p.data_brt_cadastro\n    end as data_brt_cadastro,\n    p.data_ativacao,\n    p.data_brt_ativacao,\n    p.intervalo_atendimento,\n    u.login_usuario,\n    p.id_clinica,\n    c.nome_clinica,\n    c.produto_clinica,\n    p.flag_crm_validado,\n    p.flag_funcionalidade_plantao,\n    p.flag_plantao,\n    p.data_hora_plantao,\n    p.data_brt_plantao,\n    p.tipo_criacao,\n    p.data_hora_ultima_atualizacao,\n    p.data_brt_ultima_atualizacao,\n    p.data_hora_insert,\n    p.data_brt_insert,\n    p.id_instituicao_ensino,\n    p.id_periodo_academico,\n    p.sobre_mim,\n    p.flag_profissional_conexa,\n    case\n        when p.id_clinica = 9275\n            then true\n        else false\n    end as flag_profissional_pv,\n    c.flag_habilitar_recebimento_para_profissionais,\n    p.nacionalidade,\n    p.id_pviva as id_profissional_pv,\n    p.info_adicionais,\n    pp.preferencia_atendimento_genero,\n    pp.idade_inicio,\n    pp.idade_fim,\n    pr.flag_repasse_20,\n    pr.flag_repasse_25,\n    pr.flag_repasse_30,\n    pr.flag_repasse_35,\n    pr.flag_repasse_50,\n    pr.flag_repasse_60,\n    pa.descricao_abordagem,\n    pa.valor_abordagem,\n    fe.flag_atende_infancia,\n    fe.flag_atende_pre_adolescente,\n    fe.flag_atende_adolescencia,\n    fe.flag_atende_adulto,\n    p.emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_profissional\" p\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_usuario_profissional\" as u on u.id_profissional = p.id_profissional\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_especialidade\" as e on e.id_especialidade = p.id_especialidade\nLEFT JOIN \"delta\".\"silver\".\"cnx_dim_clinica\" c on p.id_clinica = c.id_clinica\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_profissional_preferencia\" pp on pp.id_profissional = p.id_profissional\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_profissional_repasses\" pr on pr.id_profissional = p.id_profissional\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_profissional_abordagem\" pa on pa.id_profissional = p.id_profissional\nLEFT JOIN \"delta\".\"bronze\".\"stg_cnx_profissional_faixa_etaria_atende\" fe on fe.id_profissional = p.id_profissional", "relation_name": "\"delta\".\"silver\".\"cnx_dim_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:27.102746Z", "completed_at": "2025-07-01T18:32:27.107671Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:27.130949Z", "completed_at": "2025-07-01T18:32:27.130949Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07400822639465332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.cnx_snp_clinica", "compiled": true, "compiled_code": "\n\n\n\nselect \n\t*\nfrom \"delta\".\"silver\".\"cnx_dim_clinica\"\n", "relation_name": "\"delta\".\"silver\".\"cnx_snp_clinica\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:27.208825Z", "completed_at": "2025-07-01T18:32:27.242568Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:27.267427Z", "completed_at": "2025-07-01T18:32:27.267427Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09269857406616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.clinicas", "compiled": true, "compiled_code": "\n\nSELECT\n    to_hex(md5(to_utf8(cast(id_clinica as varchar) || 'cnx'))) as sk_clinica,\n    c.id_clinica,\n    upper(c.nome_clinica) as nome_clinica,\n    c.data_hora_insert,\n    c.data_brt_insert,\n    c.data_hora_bloqueio,\n    c.data_brt_bloqueio,\n    c.data_hora_ultima_atualizacao,\n    c.data_brt_ultima_atualizacao,\n    c.codigo_convenio_integracao_pv as nome_clinica_sistema,\n    c.email,\n    c.cnpj,\n    c.unidade_negocio_autoritativa as unidade_negocio,\n    c.nome_canal_autoritativa,\n    c.tipo_canal_autoritativa,\n    c.categoria_cliente_autoritativa,\n    null as chave_login,\n    null as flag_triagem,\n    c.status,\n    null as regiao,\n    null as tipo_contrato,\n    c.flag_permite_consulta_dependente,\n    c.flag_servico_medico,\n    c.flag_servico_especialidades,\n    c.flag_servico_pronto_atendimento,\n    null as landing_page,\n    id_cliente_autoritativa,\n    nome_cliente_autoritativa,\n    quantidade_vidas_ans_autoritativa,\n    nome_conta_pai_operadoras_autoritativa,\n    flag_clinica_unificada_pv as flag_clinica_unificada,\n    'Conexa' AS source\nFROM \"delta\".\"silver\".\"cnx_dim_clinica\" as c\n\nUNION ALL       \n\nSELECT \n    to_hex(md5(to_utf8(cast(id_convenio as varchar) || 'pvv'))) as sk_clinica,\n    conv.id_convenio as id_clinica,\n    upper(conv.nome_convenio) as nome_clinica,\n    conv.data_inclusao as data_hora_insert,\n    conv.data_brt_inclusao as data_brt_insert,\n    case \n        when flag_ativo = true\n            then null\n        else conv.data_fim\n    end as data_hora_bloqueio,\n    case \n        when flag_ativo = true\n            then null\n        else conv.data_brt_fim\n    end as data_brt_bloqueio,\n    conv.data_ultima_alteracao as data_hora_ultima_atualizacao,\n    conv.data_brt_ultima_alteracao as data_brt_ultima_atualizacao,\n    upper(conv.nome_convenio_sistema) as nome_clinica_sistema,\n    null as email,\n    null as cnpj, \n    conv.unidade_negocio_autoritativa as unidade_negocio,\n    conv.nome_canal_autoritativa,\n    conv.tipo_canal_autoritativa,\n    conv.categoria_cliente_autoritativa,\n    conv.chave_login,\n    conv.flag_triagem,\n    case \n        when conv.flag_ativo = true then 'ATIVA'\n        when conv.flag_ativo = false then 'BLOQUEADA'\n        else null\n     end status,\n    conv.regiao,\n    conv.tipo_contrato,\n    null as flag_permite_consulta_dependente,\n    null as flag_servico_medico,\n    null as flag_servico_especialidades,\n    null as flag_servico_pronto_atendimento,\n    conv.landing_page,\n    id_cliente_autoritativa,\n    nome_cliente_autoritativa,\n    quantidade_vidas_ans_autoritativa,\n    nome_conta_pai_operadoras_autoritativa,\n    flag_convenio_unificado_conexa as flag_clinica_unificada,\n    'Psicologia Viva' AS source\nFROM \"delta\".\"silver\".\"pvv_dim_convenio\" as conv", "relation_name": "\"delta\".\"gold\".\"clinicas\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:27.354329Z", "completed_at": "2025-07-01T18:32:27.392875Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:27.414699Z", "completed_at": "2025-07-01T18:32:27.414699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1077125072479248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_dim_paciente", "compiled": true, "compiled_code": "\nselect \n    pac.id_paciente,\n    pac.data_ultima_alteracao,\n    pac.data_brt_ultima_alteracao,\n    pac.usuario_ultima_alteracao,\n    seg_user.usuario_ultima_alteracao as seguser_usuario_ultima_alteracao,\n    pac.data_inclusao,\n    pac.data_brt_inclusao,\n    pac.nome_paciente,\n    tcp.nome_social,\n    pac.idade,            \n    pac.data_nascimento,\n    pac.sexo,\n    pac.estado_civil,\n    pac.nacionalidade,\n    pac.idioma,\n    pac.profissao,\n    pac.celular,\n    pac.departamento,\n    pac.cargo,\n    pac.origem,\n    pac.cpf,\n    pac.documento,\n    pac.documento_verso,\n    pac.email_paciente,\n    pac.email_notificacao,\n    pac.endereco,\n    pac.complemento,\n    pac.cep,\n    pac.bairro,\n    pac.cidade,\n    pac.estado,\n    pac.pais,\n    pac.pais_atuacao,\n    pac.codigo_pais_celular,\n    pac.codigo_pais_pessoa_contato,\n    pac.codigo_pais_telefone,\n    pac.codigo_pais_telefone_responsavel,\n    pac.login_perfil,\n    pac.login_titular,\n    pac.relacao_pessoa_contato,\n    pac.status_convenio,\n    pac.telefone,\n    pac.telefone_pessoa_contato,\n    pac.telefone_responsavel,\n    pac.termo_aceite2,\n    pac.carteira_abertta_saude,\n    pac.carteira_care_plus,\n    pac.carteira_porto_seguro,\n    pac.carteirinha_convenio,\n    pac.nome_empresa,\n    pac.nome_empresa_interna,\n    pac.nome_responsavel,\n    pac.data_liberacao_encaminhamento_medico,\n    pac.data_brt_liberacao_encaminhamento_medico,\n    pac.departamento_cliente_empresa,\n    case \n        when (pac.id_convenio IS NULL and pac.pais_atuacao = 'BR') then 999999\n        when (pac.id_convenio IS NULL and (pac.pais_atuacao not in('BR') or pac.pais_atuacao is null)) then 999998\n        else pac.id_convenio\n    end id_convenio,\n    pac.carteira_unimed,\n    pac.plano_saude,\n    pac.id_empresa_subsidiaria,\n    pac.id_encaminhamento_medico,\n    pac.id_externo_conexa,\n    pac.id_paciente_titular,\n    pac.id_profissional_vinculado,\n    pac.id_seguranca_usuario,\n    pac.termo_aceite,\n    pac.valida_cadastro,             \n    pac.termo_autorizacao_enviado,\n    pac.termo_autorizacao_menor_idade,\n    conv.unidade_negocio_autoritativa,\n    pac.time_zone,\n    pac.tipo_usuario_convenio,\n    case \n        when pac.valida_cadastro = 'Sim' and (pac.idade < 18 and (pac.termo_autorizacao_menor_idade is not null)) and \n            (conv.tipo_convenio = 'Operadora' and (pac.documento is not null or pac.documento_verso is not null)) then true\n        else false\n    end flag_completou_cadastro,\n    case \n        when (pac.id_convenio is null and pac.pais_atuacao = 'BR') then 'BI - CONVENIO PARTICULAR - BR - NAO UTILIZAR'\n        when (pac.id_convenio is null and (pac.pais_atuacao not in('BR') or pac.pais_atuacao is null)) then 'BI - CONVENIO PARTICULAR - LATAM - NAO UTILIZAR'\n        else conv.nome_convenio_sistema\n    end nome_convenio_sistema,\n    conv.nome_convenio,\n    case \n        when pac.id_convenio = empr.id_convenio and empr.nome_empresa is null then 'SEM INFORMA\u00c7\u00c3O'\n        when pac.id_convenio = empr.id_convenio then empr.nome_empresa\n        when (seg_user.carteira_porto is null or seg_user.carteira_porto = '' or seg_user.carteira_porto = 'null') then 'SEM INFORMA\u00c7\u00c3O'\n        else seg_user.carteira_porto\n    end empresa,\n    case\n        when pac.idade < 0   then null\n        when pac.idade < 11  then '0 - 10'\n        when pac.idade < 21  then '11 - 20'\n        when pac.idade < 31  then '21 - 30'\n        when pac.idade < 41  then '31 - 40'\n        when pac.idade < 51  then '41 - 50'\n        when pac.idade < 61  then '51 - 60'\n        when pac.idade < 71  then '61 - 70'\n        when pac.idade < 81  then '71 - 80'\n        when pac.idade < 91  then '81 - 90'\n        when pac.idade < 101 then '91 - 100'\n        when pac.idade < 120 then '> 100 anos'\n        else null\n    end faixa_etaria,\n    case\n        when pac.idade < 0    then null\n        when pac.idade <  10  then 'Inf\u00e2ncia (at\u00e9 9 anos)' \n        when pac.idade <= 14  then 'Pr\u00e9-adolesc\u00eancia (dos 10 aos 14 anos)'\n        when pac.idade <= 19  then 'Adolesc\u00eancia (dos 15 aos 19 anos)'\n        when pac.idade >= 20  then 'Adultos (a partir de 20 anos)'\n        when pac.idade >  100 then 'Maior que 100 anos'\n        else null\n    end faixa_etaria2,\n    case \n        when (pac.idade >= 18 and (pac.termo_autorizacao_menor_idade is null)) then false\n        when pac.idade is null then false\n        else true\n    end is_menor_de_idade,\n    if((pac.id_convenio is not null),conv.tipo_convenio,'Particular') as tipo_convenio,\n    perfil.data_inclusao as data_do_cadastro,\n    perfil.data_brt_inclusao as data_brt_do_cadastro,\n    cast(if((st.flag_ativo is null),true,st.flag_ativo) as boolean) as flag_ativo,\n    log.primeiro_acesso,\n    log.data_brt_primeiro_acesso,\n    pp.primeiro_pagamento,\n    case\n        when pac.data_termo_aceite2 is not null then pac.data_termo_aceite2\n        when (pac.termo_aceite = true or pac.termo_aceite2 = true) and (pp.primeiro_pagamento is not null and log.primeiro_acesso is not null) and (log.primeiro_acesso < pp.primeiro_pagamento) then log.primeiro_acesso\n        when (pac.termo_aceite = true or pac.termo_aceite2 = true) and (pp.primeiro_pagamento is not null and log.primeiro_acesso is not null) and (log.primeiro_acesso > pp.primeiro_pagamento) then pp.primeiro_pagamento\n        when (pac.termo_aceite = true or pac.termo_aceite2 = true) and (log.primeiro_acesso is null and pp.primeiro_pagamento is not null) then pp.primeiro_pagamento\n        when (pac.termo_aceite = true or pac.termo_aceite2 = true) and (log.primeiro_acesso is not null and pp.primeiro_pagamento is null) then log.primeiro_acesso\n        when (pac.termo_aceite = true or pac.termo_aceite2 = true) then least(coalesce(log.primeiro_acesso,date('9999-12-31')), coalesce(pp.primeiro_pagamento,date('9999-12-31')))\n        else null\n    end data_termo_aceite2,\n    date(case\n             when pac.data_brt_termo_aceite2 is not null then pac.data_brt_termo_aceite2\n             when (pac.termo_aceite = true or pac.termo_aceite2 = true) and (pp.primeiro_pagamento is not null and log.primeiro_acesso is not null) and (log.primeiro_acesso < pp.primeiro_pagamento) then log.data_brt_primeiro_acesso\n             when (pac.termo_aceite = true or pac.termo_aceite2 = true) and (pp.primeiro_pagamento is not null and log.primeiro_acesso is not null) and (log.primeiro_acesso > pp.primeiro_pagamento) then primeiro_pagamento_brt\n             when (pac.termo_aceite = true or pac.termo_aceite2 = true) and (log.primeiro_acesso is null and pp.primeiro_pagamento is not null) then primeiro_pagamento_brt\n             when (pac.termo_aceite = true or pac.termo_aceite2 = true) and (log.primeiro_acesso is not null and pp.primeiro_pagamento is null) then log.data_brt_primeiro_acesso\n             when (pac.termo_aceite = true or pac.termo_aceite2 = true) then least(coalesce(log.primeiro_acesso,date('9999-12-31')), coalesce(pp.primeiro_pagamento,date('9999-12-31')))\n             else null\n    end) data_brt_termo_aceite2,\n    st.data_status,\n    st.data_brt_status,\n    st.data_status_anterior,\n    st.data_brt_status_anterior,\n    pac.registro_ans,\n    pac.emitted_at,\n    pac.is_delete,\n    pac.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_pacientes\" as pac --\nleft join \"delta\".\"bronze\".\"stg_pvv_seguranca_usuario\" as seg_user on seg_user.id_seguranca_usuario = pac.id_seguranca_usuario \nleft join \"delta\".\"bronze\".\"stg_pvv_perfil_usuario\" as perfil on perfil.id_seguranca_usuario = pac.id_seguranca_usuario\nleft join \"delta\".\"bronze\".\"stg_pvv_status_usuario\" as st on st.id_seguranca_usuario = pac.id_seguranca_usuario\nleft join \"delta\".\"silver\".\"pvv_dim_convenio\" as conv on conv.id_convenio = pac.id_convenio\nleft join \"delta\".\"bronze\".\"stg_pvv_empresa_subsidiaria\" as empr on empr.id_empresa_subsidiaria = pac.id_empresa_subsidiaria\nleft join \"delta\".\"bronze\".\"stg_pvv_primeiro_acesso_paciente\" as log on log.id_seguranca_usuario = pac.id_seguranca_usuario\nleft join \"delta\".\"bronze\".\"stg_pvv_primeiro_pagamento\" as pp on pp.id_paciente = pac.id_paciente\nleft join \"delta\".\"bronze\".\"stg_pvv_tabela_configuracao_paciente\" as tcp on tcp.id_paciente = pac.id_paciente\nwhere seg_user.flag_teste = false", "relation_name": "\"delta\".\"silver\".\"pvv_dim_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:27.509161Z", "completed_at": "2025-07-01T18:32:27.509161Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:27.540818Z", "completed_at": "2025-07-01T18:32:27.540818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07951855659484863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.pvv_snp_convenio", "compiled": true, "compiled_code": "\n\n\n\nselect \n\t*\nfrom \"delta\".\"silver\".\"pvv_dim_convenio\" as p\n", "relation_name": "\"delta\".\"silver\".\"pvv_snp_convenio\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:27.634513Z", "completed_at": "2025-07-01T18:32:27.667304Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:27.684990Z", "completed_at": "2025-07-01T18:32:27.684990Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0943610668182373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_atestado", "compiled": true, "compiled_code": " \n\nWITH t1 AS (\n    SELECT\n        to_hex(md5(to_utf8(cast(id_atendimento as varchar) || 'memed'))) as sk_atestado,\n        id_atendimento,\n        id_prescricao,\n        id_prescricao_item,\n        data_hora_insert as data_registro_atestado,\n        null as dias_afastamento,\n        cid as cid_temp,\n        detalhe_atestado,\n        'memed' as plataforma\n    FROM \"delta\".\"silver\".\"cnx_inter_memed_atestado\" AS memed\n\n    UNION ALL\n\n    SELECT\n        to_hex(md5(to_utf8(cast(id_atendimento as varchar) || 'plataforma'))) as sk_atestado,\n        id_atendimento,\n        null as id_prescricao,\n        null as id_prescricao_item,\n        data_registro_atestado,\n        dias_afastamento,\n        cid as cid_temp,\n        null as detalhe_atestado,\n        'conexa' as plataforma\n    FROM \"delta\".\"silver\".\"cnx_inter_plataforma_atestado\" as plataforma\n\n    UNION ALL\n\n    SELECT\n        to_hex(md5(to_utf8(cast(id_atendimento as varchar) || 'nexodata'))) as sk_atestado,\n        id_atendimento,\n        id_prescricao,\n        null as id_prescricao_item,\n        data_registro_atestado,\n        dias_afastamento,\n        cid10 as cid_temp,\n        texto_completo_atestado as detalhe_atestado,\n        'mevo' as plataforma\n    FROM \"delta\".\"silver\".\"cnx_inter_nexodata_atestado\" as nexodata\n),\ndiagnosticos AS (\n    SELECT *\n    FROM (\n            SELECT\n                *,\n                row_number() over (partition by id_atendimento) as r_number\n            FROM \"delta\".\"silver\".\"cnx_fact_atendimento_diagnostico\"\n    ) T\n    WHERE r_number = 1\n),\nt2 as(\n    SELECT\n        t1.sk_atestado,\n        id_atendimento,\n        id_prescricao,\n        id_prescricao_item,\n        data_registro_atestado,\n        dias_afastamento,\n        CASE\n            WHEN cid_temp IS NULL THEN atd.codigo_cid10\n            ELSE REPLACE(cid_temp, '.')\n        END AS cid,\n        IF(cid_temp IS NULL, false, true) as flag_cid_atestado,\n        detalhe_atestado,\n        plataforma,\n        lower(to_hex(md5(to_utf8(cast(coalesce(cast(id_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_prescricao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_prescricao_item as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_registro_atestado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(dias_afastamento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(cid_temp as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(atd.codigo_cid10 as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(detalhe_atestado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\n    FROM t1\n    LEFT JOIN diagnosticos atd USING (id_atendimento)\n),\nprincipal as (\n    SELECT \n        t2.*,\n        row_number() over(partition by sk_teste order by data_registro_atestado desc) as ranking\n    FROM t2 \n)\nSELECT \n    sk_atestado,\n    id_atendimento,\n    id_prescricao,\n    id_prescricao_item,\n    data_registro_atestado,\n    dias_afastamento,\n    cid,\n    flag_cid_atestado,\n    detalhe_atestado,\n    plataforma \nFROM principal\nwhere ranking = 1", "relation_name": "\"delta\".\"silver\".\"cnx_fact_atestado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:27.782411Z", "completed_at": "2025-07-01T18:32:27.812085Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:27.834633Z", "completed_at": "2025-07-01T18:32:27.834633Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09537124633789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_clari_interactions_tickets", "compiled": true, "compiled_code": "\n\n\nWITH\nmessage_source AS (\n\tSELECT\n\t\tc.id,\n\t\tc.session_id,\n\t\tc.user_id,\n\t\tc.\"from\",\n\t\tc.created_at,\n\t\tc.text,\n\t\ti.code,\n\t\ti.user_type,\n\t\tc.flag_created_zendesk_ticket,\n\t\tIF(i.user_type LIKE '%conexa%', 'Conexa Sa\u00fade', 'Zenklub') AS plataforma,\n\t\tIF(i.user_type LIKE '%conexa%', cast(p.id_clinica AS varchar), e.id_empresa) AS id_clinica_empresa,\n\t\tIF(i.user_type LIKE '%conexa%', c.nome_clinica, e.nome_empresa) AS nome_clinica_empresa\n\tFROM zenklub.modelo_2023.stg_dim_clari_message c\n\tJOIN zenklub.dump.dialog_intent i\n\t\tON c.intent_id = i.id\n\tLEFT JOIN \"delta\".\"silver\".\"cnx_dim_paciente\" p\n\t\tON c.user_id = cast(p.id_usuario as varchar)\n\t\tAND i.user_type LIKE '%conexa%'\n\tLEFT JOIN \"delta\".\"silver\".\"cnx_dim_clinica\" c\n\t\tON p.id_clinica = c.id_clinica\n\t\tAND i.user_type LIKE '%conexa%'\n\tLEFT JOIN gold.elegibilidade e\n\t\tON c.user_id = e.id_paciente\n\t\tAND e.flag_elegibilidade\n\t\tAND e.plataforma = 'Zenklub'\n\t\tAND i.user_type NOT LIKE '%conexa%'\n),\ncx_interaction AS (\n\tSELECT\n\t\tms.session_id, \n\t\tms.id,\n\t\tms.user_id,\n\t\tms.user_type,\n\t\tms.plataforma,\n\t\tms.id_clinica_empresa,\n\t\tms.nome_clinica_empresa,\n\t\tMIN(ms.created_at) AS created_at,\n\t\tMIN(\n\t\t\tIF(\n\t\t\tms2.code NOT IN (\n\t\t\t\t'default',\n\t\t\t\t'create_zd_ticket',\n\t\t\t\t'cnx_create_zd_ticket'\n\t\t\t\t), \n\t\t\tms2.created_at, \n\t\t\tcurrent_timestamp\n\t\t\t)\n\t\t) AS next_intent\n\tFROM message_source ms\n\tLEFT JOIN message_source ms2\n\t\tON ms.user_id = ms2.user_id \n\t\tAND ms2.created_at > ms.created_at\n\tWHERE ms.code IN ('cnx_support_greeting', 'buscar_info_cnx_atendimento', 'support', 'ajuda')\n\tOR (ms.code = 'initialMessage' AND ms.plataforma = 'Conexa Sa\u00fade')\n\tGROUP BY 1, 2, 3, 4, 5, 6, 7\n),\nclari_tickets AS (\n\tSELECT\n\t\tid,\n\t\tsession_id,\n\t\tuser_id,\n\t\tregexp_extract(\"text\", '#(\\d+)', 1) AS id_ticket,\n\t\tuser_type\n\tFROM message_source\n\tWHERE code LIKE '%create_zd_ticket%'\n),\nstages AS (\n\tSELECT DISTINCT\n\t\tcast(cx.created_at AS TIMESTAMP(3) WITH TIME ZONE) AS base_date,\n\t\t'Abriu Clari Suporte' AS stage,\n\t\tcx.id AS id,\n\t\tcx.user_id,\n\t\tcx.user_type,\n\t\tcx.plataforma,\n\t\tcx.id_clinica_empresa,\n\t\tcx.nome_clinica_empresa,\n\t\tNULL AS motivo_contato,\n\t\tNULL AS submotivo_contato,\n\t\tNULL AS complemento_submotivo_contato,\n\t\tcx.session_id\n\tFROM cx_interaction cx\n\t\n\tUNION ALL\n\t\n\tSELECT DISTINCT\n\t\tcast(cx.created_at AS TIMESTAMP(3) WITH TIME ZONE) AS base_date,\n\t\t'Interagiu com Clari Suporte' AS stage,\n\t\tcx.id AS id,\n\t\tcx.user_id,\n\t\tcx.user_type,\n\t\tcx.plataforma,\n\t\tcx.id_clinica_empresa,\n\t\tcx.nome_clinica_empresa,\n\t\tNULL AS motivo_contato,\n\t\tNULL AS submotivo_contato,\n\t\tNULL AS complemento_submotivo_contato,\n\t\tcx.session_id\n\tFROM cx_interaction cx\n\tJOIN message_source ms\n\t\tON ms.session_id = cx.session_id\n\t\tAND ms.created_at >= cx.created_at \n\t\tAND ms.created_at < cx.next_intent\n\t\tAND ms.\"from\" = 'user'\n\t\n\tUNION ALL\n\t\n\tSELECT DISTINCT\n\t\tcast(ms.created_at AS TIMESTAMP(3) WITH TIME ZONE) AS base_date,\n\t\t'Pediu contato com Suporte/Atendimento' AS stage,\n\t\tms.id AS id,\n\t\tms.user_id,\n\t\tms.user_type,\n\t\tms.plataforma,\n\t\tms.id_clinica_empresa,\n\t\tms.nome_clinica_empresa,\n\t\tNULL AS motivo_contato,\n\t\tNULL AS submotivo_contato,\n\t\tNULL AS complemento_submotivo_contato,\n\t\tms.session_id\n\tFROM message_source ms\n\tWHERE ms.flag_created_zendesk_ticket\n\t\n\tUNION ALL\n\t\n\tSELECT DISTINCT\n\t\tcast(f.created_at AS TIMESTAMP(3) WITH TIME ZONE) AS base_date,\n\t\t'Abriu Ticket' AS stage,\n\t\tCAST(f.id_ticket AS VARCHAR) AS id,\n\t\tregexp_extract(cf.value, 'ID Usu\u00e1rio: (.+)', 1) AS user_id,\n\t\tCOALESCE(ct.user_type, 'conexa-guest') AS user_type,\n\t\tCASE \n\t\t\tWHEN COALESCE(ct.user_type, 'conexa-guest') LIKE '%conexa%' THEN 'Conexa Sa\u00fade'\n\t\t\tELSE 'Zenklub'\n\t\tEND AS plataforma,\n\t\tUPPER(COALESCE(f.id_clinica, REPLACE(cf_empresa.value, 'id_clientezk_', ''))) AS id_clinica_empresa,\n\t\tCASE \n\t\t\tWHEN COALESCE(ct.user_type, 'conexa-guest') LIKE '%conexa%' THEN c.nome_clinica\n\t\t\tELSE cp.nome_empresa\n\t\tEND AS nome_clinica_empresa,\n\t\tf.motivo_contato,\n\t\tf.submotivo_contato,\n\t\tf.complemento_submotivo_contato,\n\t\tregexp_extract(cf.value, 'ID da sess\u00e3o da Clari: (\\S+)', 1) AS session_id\n\tFROM \"delta\".\"silver\".\"zd_fact_tickets\"  f\n\tJOIN \"delta\".\"silver\".\"zd_dim_tickets_tags\" t\n\t\tON f.id_ticket = t.id \n\t\tAND t.col IN ('canal_clari', 'clari_backlog')\n\tLEFT JOIN \"delta\".\"silver\".\"zd_dim_custom_fields\" cf\n  \t\tON f.id_ticket = cf.id_ticket \n  \t\tAND cf.title LIKE '%Informa\u00e7\u00f5es:'\n\tLEFT JOIN \"delta\".\"silver\".\"zd_dim_custom_fields\" cf_empresa\n  \t\tON f.id_ticket = cf_empresa.id_ticket \n  \t\tAND cf_empresa.id_custom_field = 28139093164567\n\tLEFT JOIN clari_tickets ct\n\t\tON CAST(f.id_ticket AS VARCHAR) = ct.id_ticket\n\tLEFT JOIN \"delta\".\"silver\".\"cnx_dim_clinica\" c\n\t\tON f.id_clinica = CAST(c.id_clinica AS varchar)\n\t\tAND COALESCE(ct.user_type, 'conexa-guest') LIKE '%conexa%'\n\tLEFT JOIN gold.clinicas_planos cp\n\t\tON REPLACE(cf_empresa.value, 'id_clientezk_', '') = cp.id_empresa\n\t\tAND COALESCE(ct.user_type, 'conexa-guest') NOT LIKE '%conexa%'\n\tWHERE f.status != 'deleted'\n)\nSELECT\n\ts.base_date,\n\ts.stage,\n\ts.id,\n\ts.user_id,\n\ts.user_type,\n\ts.plataforma,\n\ts.id_clinica_empresa,\n\ts.nome_clinica_empresa,\n\ts.motivo_contato,\n\ts.submotivo_contato,\n\ts.complemento_submotivo_contato,\n\ts.session_id\nFROM stages s", "relation_name": "\"delta\".\"gold\".\"az_clari_interactions_tickets\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:27.932457Z", "completed_at": "2025-07-01T18:32:27.949172Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:27.980241Z", "completed_at": "2025-07-01T18:32:27.980241Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10221314430236816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_nr1_respostas", "compiled": true, "compiled_code": "\n\n\nwith answers as \n(\n  select  \n    cast(fna.id_clinica as bigint) as id_clinica\n    ,cast(fna.user_id as bigint) as user_id\n    ,fna.id_pergunta \n    ,fna.pergunta \n    ,fna.resposta \n    ,case\n      when lower(fna.resposta ) = 'nunca' then 1\n      when lower(fna.resposta ) = 'raramente' then 2\n      when lower(fna.resposta ) = '\u00e0s vezes' then 3\n      when lower(fna.resposta ) = 'frequentemente' then 4\n      when lower(fna.resposta ) = 'sempre' then 5\n      end score_resposta\n    ,nrf.description as descricao_fator\n    ,nrf.name as nome_fator\n    ,nrf.type as tipo_fator\n    ,cast(fna.data_criacao_resposta at time zone 'America/Sao_Paulo' as timestamp with time zone) as data_criacao_resposta\n    ,row_number() over(partition by fna.user_id, fna.id_pergunta order by fna.data_criacao_resposta desc) rk -- mudan\u00e7a pra row number e inclus\u00e3o do id pergunta no partition by\n  from zenklub.modelo_2023.fact_nr1_answers fna\n  left join zenklub.dump.nr1_questions nq on fna.id_pergunta = nq.id\n  left join zenklub.dump.nr1_risk_factors nrf on nq.risk_factor_id = nrf.id\n  where true\n  and form_id = 'CPwVKJIX'\n)\n,permission_nr1 as \n(\n  select distinct\n    clinic_id\n  from zenklub.dump.nr1_access_requests\n  where true\n  and company_source = 'CONEXA'\n  and company_id = 3131\n  and status = 'DONE'\n)\n, active_users as\n(\n  select\n    id_clinica as id_clinica_plano\n    ,nome_clinica as nome_clinica_plano\n    ,id_paciente \n    ,data_brt_termo_aceito as data_brt_termo_aceite\n    ,nullif(nome_departamento_backoffice,'')  as departamento\n    ,nullif(nome_cargo_backoffice,'') as cargo\n    ,nullif(nome_plano_backoffice,'') as plano\n  from \"delta\".\"silver\".\"cnx_dim_paciente\" -- mudan\u00e7a para a silver e utilizando as mesmas regras aplicadas na gold elegibilidade\n  where true\n  and id_clinica in (select clinic_id from permission_nr1)\n  and status_paciente <> 'BLOQUEADO'\n) \n-- retirada da cte que agrupava as respostas em array, trazendo a expans\u00e3o das mesmas e possibilitando num futuro a possibilidade de hist\u00f3rico \n  select\n    cast(ac.id_clinica_plano as varchar) as id_clinica_plano\n    ,ac.nome_clinica_plano \n    ,ac.id_paciente\n    ,ac.departamento\n    ,ac.cargo\n    ,ac.plano\n    ,to_hex(md5(to_utf8(cast(ac.id_paciente as varchar) || 'cnx'))) as sk_paciente -- inclus\u00e3o da sk paciente para que seja possivel o bloqueio do id para o rh e assim dificultar o vinculo de respostas as pessoas conforme lgpd\n    ,ac.data_brt_termo_aceite\n    ,a.data_criacao_resposta\n    ,a.pergunta\n    ,a.resposta\n    ,a.score_resposta\n    ,a.nome_fator\n    ,a.descricao_fator\n    ,a.tipo_fator\n  from active_users ac\n  left join answers a on a.user_id = ac.id_paciente and a.id_clinica = ac.id_clinica_plano and rk = 1", "relation_name": "\"delta\".\"gold\".\"az_nr1_respostas\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:28.055302Z", "completed_at": "2025-07-01T18:32:28.083730Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:28.105048Z", "completed_at": "2025-07-01T18:32:28.105048Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08488774299621582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_resultados_dass21", "compiled": true, "compiled_code": "\nSELECT \n\td.id_dass21, \n    d.data_criacao,\n\td.id_paciente,\n    pa.id_clinica,\n    pa.nome_clinica,\n    pa.faixa_etaria2,\n    pa.sexo_paciente,\n    pa.uf_paciente as estado_paciente,\n    d.nivel_ansiedade,\n    d.valor_ansiedade,\n    d.nivel_depressao,\n    d.valor_depressao,\n    d.nivel_estresse,\n    d.valor_estresse,\n    d._ab_cdc_updated_at,\n    d.emitted_at\nFROM  \"delta\".\"bronze\".\"stg_mongo_resultados_dass21\" as d\nLEFT JOIN \"delta\".\"silver\".\"cnx_dim_paciente\" as pa on d.id_paciente = pa.id_paciente", "relation_name": "\"delta\".\"silver\".\"cnx_fact_resultados_dass21\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:28.196414Z", "completed_at": "2025-07-01T18:32:28.224669Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:28.248817Z", "completed_at": "2025-07-01T18:32:28.248817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09840822219848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_tratamento", "compiled": true, "compiled_code": "\n\n\nWITH treatment_appointments as (\n\tselect\n\t\tid_tratamento,\n\t\tarray_agg(id_atendimento order by data_hora_insert) as lista_atendimento,\n        min(a.data_atendimento) as primeiro_atendimento,\n\t\tmax(a.data_atendimento) as ultimo_atendimento\n\tfrom \"delta\".\"bronze\".\"stg_cnx_treatment_plan_patient_appointment\" tppa\n    left join \"delta\".\"bronze\".\"raw_cnx_atendimento\" a on tppa.id_atendimento = a.idatendimento -- Devido a ocultarmos na stg os atendimentos integradoos PV\n\tgroup by 1\n),\npathology as (\n\tselect\n\t\thtp.id_tratamento,\n\t\tarray_agg(d.codigo_cid10) as lista_cid10,\n\t\tarray_agg(d.descricao_cid10) as lista_descricao_cid10\n\tfrom \"delta\".\"bronze\".\"stg_cnx_pathology_history_in_treatment_plan\"  htp\n\tleft join \"delta\".\"bronze\".\"stg_cnx_doenca_cid10\" d on htp.id_doenca = d.id_doenca\n\tgroup by 1\n),\n\n\tt1 as (\n\tselect\n\t\ttpp.id_tratamento,\n\t\ttpp.id_paciente,\n\t\tpac.id_clinica,\n\t\tpac.nome_clinica,\n\t\ttpp.id_profissional,\n\t\ttpp.rank_paciente_tratamento,\n\t\ttpp.inverse_ranking,\n\t\ttpp.status_tratamento,\n\t\tlag(tpp.plano_sugerido) over (partition by tpp.id_paciente order by tpp.data_hora_insert) as plano_sugerido_anterior,\n\t\tcase\n\t\t\twhen lag(tpp.plano_sugerido) over (partition by tpp.id_paciente order by tpp.data_hora_insert) = 'LEVE' then 0\n\t\t\twhen lag(tpp.plano_sugerido) over (partition by tpp.id_paciente order by tpp.data_hora_insert) = 'MODERADO' then 1\n\t\t\twhen lag(tpp.plano_sugerido) over (partition by tpp.id_paciente order by tpp.data_hora_insert) = 'GRAVE' then 2\n\t\t\twhen lag(tpp.plano_sugerido) over (partition by tpp.id_paciente order by tpp.data_hora_insert) = 'GRAVISSIMO' then 3\n\t\t\telse 999\n\t\tend as enum_plano_anterior_sugerido,\n\t\ttpp.plano_sugerido,\n\t\tcase\n\t\t\twhen tpp.plano_sugerido = 'LEVE' then 0\n\t\t\twhen tpp.plano_sugerido = 'MODERADO' then 1\n\t\t\twhen tpp.plano_sugerido = 'GRAVE' then 2\n\t\t\twhen tpp.plano_sugerido = 'GRAVISSIMO' then 3\n\t\t\telse 999\n\t\tend as enum_plano_sugerido,\n\t\tlead(tpp.plano_sugerido) over (partition by tpp.id_paciente order by tpp.data_hora_insert) as plano_sugerido_proximo,\n\t\ttpp.n_sessoes_sugerido,\n\t\t(\n\t\t\tselect min(data_atendimento)\n\t\t\tfrom silver.cnx_fact_atendimento tmp_a\n\t\t\twhere tmp_a.id_paciente = tpp.id_paciente\n\t\t\t\tand status_tratamento = 'Agendado'\n\t\t) as proximo_agendamento,\n\t\t(\n\t\t\tselect count(*)\n\t\t\tfrom silver.cnx_fact_atendimento tmp_a\n\t\t\twhere tmp_a.id_paciente = tpp.id_paciente\n\t\t\t\tand tmp_a.nome_especialidade = 'Psiquiatria'\n\t\t\t\tand tmp_a.data_atendimento between ta.primeiro_atendimento and ta.ultimo_atendimento\n\t\t) as n_sessoes_psiquiatria,\n\t\tta.lista_atendimento,\n\t\tcardinality(lista_atendimento) as n_sessoes_realizadas,\n\t\tcase\n\t\t\twhen cardinality(lista_atendimento) = 0 then 'N\u00e3o iniciado'\n\t\t\twhen lista_atendimento is null then 'N\u00e3o iniciado'\n\t\t\twhen cardinality(lista_atendimento) = tpp.n_sessoes_sugerido then 'Tratamento conclu\u00eddo'\n\t\t\twhen cardinality(lista_atendimento) > (tpp.n_sessoes_sugerido * 0.9) then 'Em conclus\u00e3o' \n\t\t\twhen cardinality(lista_atendimento) <= (tpp.n_sessoes_sugerido * 0.25) then 'Inicio do tratamento'\n\t\t\twhen cardinality(lista_atendimento) between (tpp.n_sessoes_sugerido * 0.25) and (tpp.n_sessoes_sugerido * 0.75) then 'Meio do tratamento'\n\t\t\twhen cardinality(lista_atendimento) >= (tpp.n_sessoes_sugerido * 0.75) then 'Final do tratamento'\n\t\tend as etapa_tratamento,\n\t\tta.primeiro_atendimento,\n\t\tta.ultimo_atendimento,\n\t\tp.lista_cid10,\n\t\tp.lista_descricao_cid10,\n\t\ttpp.id_profissional_concluido,\n\t\ttpp.data_conclusao,\n\t\ttpp.data_hora_insert,\n\t\ttpp.data_hora_ultima_atualizacao\n\tfrom \"delta\".\"bronze\".\"stg_cnx_treatment_plan_patient\" tpp\n\tleft join treatment_appointments ta on tpp.id_tratamento = ta.id_tratamento\n\tleft join pathology p on tpp.id_tratamento = p.id_tratamento\n\tleft join \"delta\".\"silver\".\"cnx_dim_paciente\" pac on tpp.id_paciente = pac.id_paciente\n)\n\nSELECT \n\tid_tratamento,\n\tid_paciente,\n\tid_clinica,\n\tnome_clinica,\n\tid_profissional,\n\trank_paciente_tratamento,\n\tinverse_ranking,\n\tstatus_tratamento,\n\tenum_plano_anterior_sugerido,\n\tplano_sugerido_anterior,\n\tenum_plano_sugerido,\n\tplano_sugerido,\n\tcase\n\t\twhen enum_plano_anterior_sugerido = 999 then null\n\t\twhen enum_plano_sugerido = enum_plano_anterior_sugerido then 'Manuten\u00e7\u00e3o'\n\t\twhen enum_plano_sugerido > enum_plano_anterior_sugerido then 'Piora'\n\t\twhen enum_plano_sugerido < enum_plano_anterior_sugerido then 'Melhora'\n\tend as evolucao_plano_sugerido,\n\tplano_sugerido_proximo,\n\tn_sessoes_sugerido,\n\tproximo_agendamento,\n\tn_sessoes_psiquiatria,\n\tlista_atendimento,\n\tn_sessoes_realizadas,\n\tetapa_tratamento,\n\tprimeiro_atendimento,\n\tultimo_atendimento,\n\tlista_cid10,\n\tlista_descricao_cid10,\n\tid_profissional_concluido,\n\tdata_conclusao,\n\tdata_hora_insert,\n\tdata_hora_ultima_atualizacao\nFROM t1", "relation_name": "\"delta\".\"silver\".\"cnx_fact_tratamento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:28.338524Z", "completed_at": "2025-07-01T18:32:28.368451Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:28.387316Z", "completed_at": "2025-07-01T18:32:28.387316Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0934140682220459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.kns_fact_discadora", "compiled": true, "compiled_code": "\n\nwith p as (\n\tselect \n\t\tid_clinica,\n\t\tnome_clinica,\n\t\tnome_paciente,\n\t\tcpf_paciente,\n\t\ttelefone_cel\n\tfrom (\n\t\tselect\n\t\t\tid_clinica,\n\t\t\tnome_clinica,\n\t\t\tnome_paciente,\n\t\t\tcpf_paciente,\n\t\t\ttelefone_cel,\n\t\t\trow_number() over (partition by cpf_paciente order by data_hora_ultima_atualizacao desc) rn \n\t\tfrom \"delta\".\"silver\".\"cnx_dim_paciente\" \n\t\t) where rn = 1\n)\nselect \n\tdistinct \n    callid,\n\tdispositionid,\n    campaignid,\n\tcampanha,\n\tagentid,\n    operador,\n\tcase\n\t\twhen startdate is null then date(max(startdate) over (partition by customerid order by startdate))\n\t\telse date(startdate)\n\tend as data_e_hora_tentativa,\n\td.nivel_call,\n    d.nivel1 as clco_tabulacao_1,\n    d.nivel2 as clco_tabulacao_2,\n    d.tipo_contato,\n    originalphonenumber,\n    substring(originalphonenumber,1,2) as ddd_discado, \n    substring(originalphonenumber,2) as telefone_discado,\n\tstartdate, \n\tendwrap,\n\tendcall,\n\tcustomerid,\n    p.cpf_paciente as cpf,\n    p.id_clinica,\n    p.nome_clinica,\n    p.nome_paciente\nfrom \"delta\".\"bronze\".\"stg_kns_discadora\" discadora\nINNER JOIN \"delta\".\"delta\".\"sftp_discadora_desfechos\" as d on discadora.tabulacao = d.tabulacao  \nleft join p on discadora.customerid = p.cpf_paciente", "relation_name": "\"delta\".\"silver\".\"kns_fact_discadora\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:28.479721Z", "completed_at": "2025-07-01T18:32:28.518614Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:28.543930Z", "completed_at": "2025-07-01T18:32:28.543930Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10169315338134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.kns_fact_whatsapp", "compiled": true, "compiled_code": "\n\n\nwith p as (\n\tselect \n\t\tid_clinica,\n\t\tnome_clinica,\n\t\tnome_paciente,\n\t\tcpf_paciente,\n\t\ttelefone_cel\n\tfrom (\n\t\tselect\n\t\t\tid_clinica,\n\t\t\tnome_clinica,\n\t\t\tnome_paciente,\n\t\t\tcpf_paciente,\n\t\t\ttelefone_cel,\n\t\t\trow_number() over (partition by telefone_cel order by data_hora_ultima_atualizacao desc) rn \n\t\tfrom \"delta\".\"silver\".\"cnx_dim_paciente\" \n\t\twhere telefone_cel is not null\n\t\t) where rn = 1\n), \n\nt1 as (\n\tselect \n\t\t9999 as what_id,\n\t\tmax(data_agendada) as what_dt_inclusao,\n\t\tdestino as what_telefone,\n\t\tnull as nome_usuario,\n\t\tmax(data_agendada) as what_dt_inicio,\n\t\tmin(data_agendada) as data_primeira_mensagem,\n\t\tnull as clie_nome,\n\t\tdestino as clie_cpf_cnpj,\n\t\t'N\u00c3O EFETIVO' as tipo_contato,\n\t\t'TELEFONIA' as tabulacao_n1,\n\t\t'SEM RESPOSTA' as tabulacao_n2,\n\t\tnull as data_ult_tabulacao,\n\t\tcount(*) as n_messages,\n\t\tcount(*) filter (where situacao = 'Lido') as n_lido,\n\t\tcount(*) filter (where situacao = 'Entregue') as n_entregue,\n\t\tcount(*) filter (where situacao = 'Nao Enviado') as n_nao_enviado,\n\t\tcount(*) filter (where situacao = 'Enviado') as n_enviado\n\tfrom \"delta\".\"bronze\".\"stg_kns_whatsapp_otima\"\n\twhere \n\t\tdestino not in (\n\t\t\tselect what_telefone from \"delta\".\"bronze\".\"stg_kns_whatsapp_weopen\" union all select what_original_telefone from \"delta\".\"bronze\".\"stg_kns_whatsapp_weopen\" )\n\t\tand\n\t\tconcat(substring(destino, 1,4) , substring(destino, 6)) not in (\n\t\t\tselect what_original_telefone\n\t\t\tfrom \"delta\".\"bronze\".\"stg_kns_whatsapp_weopen\" )\n\tgroup by 1, 3, 7\n\tunion all\n\tselect \n\t\twhat_id,\n\t\twhat_dt_inclusao,\n\t\twhat_telefone,\n\t\tnome_usuario,\n\t\twhat_dt_inicio,\n\t\tdata_primeira_mensagem,\n\t\tclie_nome,\n\t\tclie_cpf_cnpj,\n\t\tcase\n\t\t\twhen tabulacao_n1 = 'TELEFONIA' then 'N\u00c3O EFETIVO'\n\t\t\telse 'EFETIVO'\n\t\tend as tipo_contato,\n\t\tcase\n\t\t\twhen tabulacao_n2 = 'SOLICITOU ENVIO DE MATERIAL POR WHATSAPP' then 'RETORNAR'\n\t\t\telse tabulacao_n1\n\t\tend as tabulacao_n1,\n\t\ttabulacao_n2,\n\t\tdata_ult_tabulacao,\n\t\t(select count(*) from \"delta\".\"bronze\".\"stg_kns_whatsapp_otima\" ot where (weo.what_telefone = ot.destino) or (weo.what_original_telefone = ot.destino) ) as n_messages,\n\t\t(select count(*) filter (where situacao = 'Lido') from \"delta\".\"bronze\".\"stg_kns_whatsapp_otima\" ot where (weo.what_telefone = ot.destino) or (weo.what_original_telefone = ot.destino) ) as n_lido,\n\t\t(select count(*) filter (where situacao = 'Entregue') from \"delta\".\"bronze\".\"stg_kns_whatsapp_otima\" ot where (weo.what_telefone = ot.destino) or (weo.what_original_telefone = ot.destino) ) as n_entregue,\n\t\t(select count(*) filter (where situacao = 'Nao Enviado') from \"delta\".\"bronze\".\"stg_kns_whatsapp_otima\" ot where (weo.what_telefone = ot.destino) or (weo.what_original_telefone = ot.destino) ) as n_nao_enviado,\n\t\t(select count(*) filter (where situacao = 'Enviado') from \"delta\".\"bronze\".\"stg_kns_whatsapp_otima\" ot where (weo.what_telefone = ot.destino) or (weo.what_original_telefone = ot.destino) ) as n_enviado\n\tfrom \"delta\".\"bronze\".\"stg_kns_whatsapp_weopen\" weo\n)\n\nSELECT *\nFROM t1 w\nLEFT JOIN p ON p.telefone_cel = w.what_telefone", "relation_name": "\"delta\".\"silver\".\"kns_fact_whatsapp\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:28.631299Z", "completed_at": "2025-07-01T18:32:28.667377Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:28.694467Z", "completed_at": "2025-07-01T18:32:28.694467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10550737380981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.lina_dim_paciente", "compiled": true, "compiled_code": "\n\n\nwith t1 as(\n    SELECT\n        cast(id_paciente as varchar) as id_paciente,\n        cast(id_lina as varchar) as id_lina,\n        nome_paciente, \n        flag_ativo,\n        idade_paciente,\n        sexo_paciente,\n        paciente_nome_cidade,\n        lista_equipe_aps,\n        condicoes_de_saude_do_beneficiario,\n        plataforma,\n        created_at,\n        execution_time,\n        hospital_de_referencia,\n        row_number() over (partition by id_paciente order by created_at) as rn,\n        use_date as use_date\n    FROM \"delta\".\"bronze\".\"stg_lina_getcreatedbeneficiaries\" \n)\n\nSELECT\n    b.id_paciente,\n    b.id_lina,\n    b.nome_paciente,\n    cast(p.id_clinica as varchar) as id_clinica,\n    b.plataforma,\n    p.nome_clinica,\n    b.flag_ativo,\n    b.idade_paciente,\n    b.sexo_paciente,\n\tp.cpf_paciente,\n\tp.carteira_convenio,\n    b.paciente_nome_cidade,\n    b.lista_equipe_aps,\n    b.condicoes_de_saude_do_beneficiario,\n    b.hospital_de_referencia,\n    b.created_at,\n    b.execution_time,\n    b.use_date\nFROM t1 as b\nLEFT JOIN \"delta\".\"silver\".\"cnx_dim_paciente\" p on cast(p.id_paciente as varchar) = b.id_paciente\nwhere rn = 1", "relation_name": "\"delta\".\"silver\".\"lina_dim_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:28.773450Z", "completed_at": "2025-07-01T18:32:28.799094Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:28.822739Z", "completed_at": "2025-07-01T18:32:28.822739Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08722996711730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pbx_fact_chamada", "compiled": true, "compiled_code": "\n\nselect\n    ch.id_chamada_pbx,\n    ch.email_agente,\n    ch.ramal_agente,\n    ch.nome_agente,\n    ch.tempo_espera,\n    ch.tempo_total_chamada,\n    ch.url_audio,\n    ch.numero_telefone,\n    ch.data_ligacao,\n    ch.hora_ligacao,\n    ch.data_hora_ligacao,\n    ch.dia_semana,\n    ch.nome_fila,\n    ch.tipo_finalizacao,\n    ch.nome_0800,\n    ch.motivo_desligamento,\n    ch.data_hora_inicio_atendimento,\n    ch.data_inicio_atendimento,\n    ch.hora_inicio_atendimento,\n    ch.id_paciente,\n    p.id_clinica,\n    p.nome_clinica,\n    cl.nome_cliente_autoritativa,\n    cl.nome_canal_autoritativa\nfrom \"delta\".\"bronze\".\"stg_pbx_chamada\" as ch\nleft join \"delta\".\"silver\".\"cnx_dim_paciente\" as p on p.id_paciente = ch.id_paciente\nleft join \"delta\".\"silver\".\"cnx_dim_clinica\" as cl on cl.id_clinica = p.id_clinica", "relation_name": "\"delta\".\"silver\".\"pbx_fact_chamada\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:28.920669Z", "completed_at": "2025-07-01T18:32:28.923961Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:28.949035Z", "completed_at": "2025-07-01T18:32:28.949035Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07932567596435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.cnx_snp_paciente", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    id_paciente,\n    id_usuario,\n    nome_paciente,\n    data_nascimento_paciente,\n    cpf_paciente,\n    idade,\n    faixa_etaria,\n    faixa_etaria2,\n    tipo_paciente,\n    login_usuario,\n    nome_clinica,\n    produto_clinica,\n    tipo_perfil_usuario,\n    data_hora_bloqueio,\n    data_brt_bloqueio,\n    motivo_bloqueio,\n    flag_ativacao,\n    data_hora_ativacao,\n    data_brt_ativacao,\n    sexo_paciente,\n    identidade,\n    email_paciente,\n    telefone_cel,\n    cep_paciente,\n    endereco_paciente,\n    complemento,\n    uf_paciente,\n    cidade_paciente,\n    bairro,\n    id_convenio,\n    carteira_convenio,\n    id_clinica,\n    id_convenio_plano,\n    cpf_responsavel,\n    nome_responsavel,\n    data_cadastro,\n    data_brt_cadastro,\n    estado_civil_paciente,\n    etnia_paciente,\n    profissao_paciente,\n    id_paciente_titular,\n    info_adicionais,\n    flag_ativo,\n    status_paciente,\n    flag_termo_aceito,\n    data_hora_termo_aceito,\n    data_brt_termo_aceito,\n    ip_termo_aceito,\n    flag_bloqueado,\n    senha,\n    tipo_criacao,\n    id_origem_paciente,\n    data_hora_ultima_atualizacao,\n    data_brt_ultima_atualizacao,\n    data_hora_insert,\n    data_brt_insert,\n    idexterno,\n    grau_parentesco,\n    pais,\n    id_externo,\n    nome_mae,\n    nome_social,\n    id_raca_cor,\n    descricao_raca_cor,\n    grau_parentesco_representante_legal,\n    cpf_representante_legal,\n    nome_representante_legal,\n    obs_livres,\n    id_escolaridade,\n    descricao_escolaridade,\n    id_genero,\n    descricao_genero,\n    id_uf_nascimento,\n    flag_aps,\n    id_equipe_aps,\n    nome_equipe_aps,\n    nome_empresa_backoffice,\n    nome_departamento_backoffice,\n    nome_cargo_backoffice,\n    emitted_at\nFROM \"delta\".\"silver\".\"cnx_dim_paciente\" as p\n", "relation_name": "\"delta\".\"silver\".\"cnx_snp_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:29.054656Z", "completed_at": "2025-07-01T18:32:29.087956Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:29.106758Z", "completed_at": "2025-07-01T18:32:29.106758Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10491156578063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_agenda", "compiled": true, "compiled_code": "\n\nSELECT\n    distinct\n    calendario.id_profissional_calendario,\n    calendario.id_profissional,\n    profissional.id_clinica,\n    profissional.nome_profissional,\n    profissional.nome_especialidade,\n    profissional.tipo_conselho,\n    profissional.intervalo_atendimento,\n    profissional.flag_profissional_conexa,\n    calendario.data_hora_insert,\n    calendario.dia_semana,\n    calendario.dia_semana_descricao,\n    calendario.horario_inicial,\n    calendario.horario_final,\n    calendario.emitted_at\nFROM \"delta\".\"bronze\".\"stg_cnx_profissional_calendario\" calendario\nINNER JOIN \"delta\".\"silver\".\"cnx_dim_profissional\" profissional on calendario.id_profissional = profissional.id_profissional", "relation_name": "\"delta\".\"silver\".\"cnx_fact_agenda\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:29.245533Z", "completed_at": "2025-07-01T18:32:29.292261Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:29.353073Z", "completed_at": "2025-07-01T18:32:29.353073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18772172927856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_conversas_whatsapp", "compiled": true, "compiled_code": "\nSELECT \n\tconv.id_conversas,\n\tconv.data_hora_envio_mensagem,\n\tconv.data_brt_envio_mensagem,\n\tconv.flag_mensagem_externa,\n\tconv.numero_mensagem_enviada,\n\tconv.caminho_arquivo,\n\tconv.source,\n\tconv.texto,\n\tconv.numero_mensagem_recebida,\n\tconv.tipo_mensagem,\n\tconv.id_usuario_profissional,\n\tprof.nome_profissional,\n    prof.tipo_conselho,\n    prof.nome_especialidade,\n\tprof.id_clinica as id_clinica_profissional,\n\tprof.nome_clinica as nome_clinica_profissional,\n\tconv.tipo_perfil_profissional,\n\tconv.perfil_envio_mensagem,\n\tconv._ab_cdc_deleted_at,\n\tconv._ab_cdc_updated_at,\n\tconv.emitted_at\nFROM \"delta\".\"bronze\".\"stg_mongo_cnx_conversas\" as conv\nLEFT JOIN \"delta\".\"silver\".\"cnx_dim_profissional\" as prof on conv.id_usuario_profissional = prof.id_usuario_profissional\nwhere conv.data_brt_envio_mensagem >= date'2024-02-15'", "relation_name": "\"delta\".\"silver\".\"cnx_fact_conversas_whatsapp\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:29.487254Z", "completed_at": "2025-07-01T18:32:29.519257Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:29.544132Z", "completed_at": "2025-07-01T18:32:29.544132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11587119102478027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_paciente_encaminhamento_profissional", "compiled": true, "compiled_code": "\n\nselect \n    f.id_atendimento, \n    f.data_hora_insert,\n    f.data_brt_hora_insert,\n    f.data_hora,\n    f.data_brt_hora,\n    f.id_paciente, \n    f.id_profissional,\n    p.nome_profissional,\n    p.nome_especialidade,\n    f.id_usuario_responsavel, \n    f.motivo_encaminhamento,  \n    f.emitted_at\nfrom \"delta\".\"bronze\".\"stg_cnx_paciente_encaminhamento\" f\nleft join \"delta\".\"silver\".\"cnx_dim_profissional\" p on f.id_profissional = p.id_profissional", "relation_name": "\"delta\".\"silver\".\"cnx_fact_paciente_encaminhamento_profissional\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:29.687916Z", "completed_at": "2025-07-01T18:32:29.722382Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:29.987001Z", "completed_at": "2025-07-01T18:32:29.987001Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3521089553833008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_profissionais", "compiled": true, "compiled_code": "\n\nwith dim_professional as (\nselect * \nfrom zenklub.modelo_2023.dim_professional\n  ),\ncte_subscription as (\nselect * \nfrom zenklub.modelo_2023.dim_professional_subscription\n  ),\nactive_subscription as (\nselect professional_id \nfrom cte_subscription \nwhere status in ('active', 'past_due')\n  )\nselect distinct\n  to_hex(md5(to_utf8(p.id || 'zk'))) as sk_profissional,\n\tp.id as id_profissional,\n\tcast(p.updt_reg_ts at time zone 'America/Sao_Paulo' as timestamp) as data_hora_ultima_atualizacao,\n  date(p.updt_reg_ts at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n\tcast(p.created_at at time zone 'America/Sao_Paulo' as timestamp) as data_cadastro_profissional, --ToDo: validar se equivale ao \"created_at\"\n  date(p.created_at at time zone 'America/Sao_Paulo') as data_brt_cadastro_profissional,\n\tfirst_value(cast(s.created_at at time zone 'America/Sao_Paulo' as timestamp)) over (partition by p.id order by s.created_at asc) as data_ativacao_profissional, --Data da primeira subscri\u00e7\u00e3o. ToDo: verificar se equivale\n  first_value(date(s.created_at at time zone 'America/Sao_Paulo')) over (partition by p.id order by s.created_at asc) as data_brt_ativacao_profissional, \n\tcase \n      when p.email like 'deleted%' and (p.display_name = '' or p.display_name is null) then 'PROFISSIONAL REMOVIDO' \n      else upper(p.display_name)\n  end nome_profissional, \n\tcast(p.birthdate as date) as data_nascimento_profissional,\n\tp.fiscalId as cpf_profissional,\n\tgender as sexo_profissional,\n\temail as email_profissional,\n\tphone_number as telefone_profissional,\n\tnull as nacionalidade_profissional, --ToDo: verificar se temos\n\tcase\n        when license is not null then 'CRP'\n        when medical_license is not null then 'CRM'\n        when nutritionist_license is not null then 'CRN'\n        else null\n  end tipo_conselho,\n\tcoalesce(license, medical_license, nutritionist_license) as numero_conselho,\n\tnull as uf_conselho, --ToDo: verificar se temos\n\tcase\n\t\twhen main_type = 'nutritionist' then 'Nutri\u00e7\u00e3o Cl\u00ednica'\n\t\twhen main_type = 'psychiatrist' then 'Psiquiatria'\n\t\twhen main_type = 'psychoanalyst' then 'Psicanalise'\n\t\twhen main_type = 'psychologist' then 'Psicologia Cl\u00ednica'\n    when main_type = 'coach' then 'Health Coach'\n    when main_type = 'therapist' then 'Terapia'\n\t\telse main_type \n\tend as nome_especialidade,\n  null as status_cancelamento,\n\tnull as tipo_abordagem, --ToDo: verificar se temos\n\tactive as flag_ativo,\n\tnull as id_clinica_plano,\n\tnull as flag_crm_validado,--ToDo: verificar se temos\n\ttrue as flag_profissional_proprio,\n\t'Zenklub' as plataforma\nfrom dim_professional as p\nleft join cte_subscription as s on s.professional_id = p.id\nleft join active_subscription as sa on sa.professional_id = p.id\n\nunion all\n\nselect \n    to_hex(md5(to_utf8(cast(id_profissional as varchar) || 'cnx'))) as sk_profissional,  \n    cast(id_profissional as varchar) as id_profissional,\n    data_hora_ultima_atualizacao,\n    data_brt_ultima_atualizacao,\n    data_cadastro as data_cadastro_profissional,\n    data_brt_cadastro as data_brt_cadastro_profissional,\n    data_ativacao as data_ativacao_profissional,\n    data_brt_ativacao as data_brt_ativacao_profissional,\n    upper(nome_profissional) as nome_profissional,\n    data_nascimento_profissional,\n    cpf_profissional,\n    sexo_profissional,\n    email_profissional,\n    telefone_profissional,\n    nacionalidade as nacionalidade_profissional, \n    tipo_conselho,\n    numero_conselho,\n    uf_conselho, \n    nome_especialidade,\n    null as status_cancelamento,\n    null as tipo_abordagem, \n    flag_ativo,\n   \tid_clinica as id_clinica_plano, \n    flag_crm_validado, \n    flag_profissional_conexa as flag_profissional_proprio,\n    'Conexa' as plataforma\nfrom \"delta\".\"silver\".\"cnx_dim_profissional\"\n\nunion all     \n\nselect  \n    to_hex(md5(to_utf8(cast(id_profissional as varchar) || 'pvv'))) as sk_profissional, \n    cast(id_profissional as varchar) as id_profissional,\n    data_ultima_alteracao as data_hora_ultima_atualizacao,\n    data_brt_ultima_alteracao as data_brt_ultima_alteracao,\n    data_do_cadastro as data_cadastro_profissional,\n    data_brt_do_cadastro as data_brt_cadastro_profissional,\n    data_vigencia as data_ativacao_profissional,\n    data_brt_vigencia as data_brt_ativacao_profissional,\n    upper(nome_profissional) as nome_profissional,\n    data_nascimento_profissional,\n    if(cpf_profissional = '',null,if(regexp_position(replace(replace(cpf_profissional, '-'), '.'), '[^0-9]') = -1, lpad(replace(replace(cpf_profissional, '-'), '.'), 11, '0'), null)) as cpf_profissional,\n    sexo_profissional,\n    email_profissional,\n    case\n      when telefone_profissional is null\n        then celular_profissional\n      else telefone_profissional\n    end as telefone_profissional,\n    nacionalidade as nacionalidade_profissional,\n    case \n         when tipo_profissional in('Psic\u00f3logo','Triagem') then 'CRP'\n         when tipo_profissional in('Nutricionista') then 'CRN'\n         else null\n    end as tipo_conselho,\n    CRP as numero_conselho,\n    estado_crp as uf_conselho, \n    case  \n         when tipo_profissional in('Nutricionista') then 'Nutri\u00e7\u00e3o Cl\u00ednica'\n         when tipo_profissional in('Psic\u00f3logo') then 'Psicologia Cl\u00ednica'\n         else tipo_profissional\n    end nome_especialidade,\n    status_cancelamento,\n    tipo_abordagem, \n    flag_ativo, \n    null as id_clinica_plano,\n    null as flag_crm_validado, \n    true as flag_profissional_proprio,\n    'Psicologia Viva' AS plataforma\nfrom \"delta\".\"silver\".\"pvv_dim_profissional\"", "relation_name": "\"delta\".\"gold\".\"stg_profissionais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:30.142253Z", "completed_at": "2025-07-01T18:32:30.180807Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:30.203998Z", "completed_at": "2025-07-01T18:32:30.203998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11555933952331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_clinicas_planos", "compiled": true, "compiled_code": "\n\nwith clinicas_planos as (\n    SELECT\n        sk_clinica as sk_clinica_plano,\n        cast(id_clinica as varchar) as id_clinica_plano,\n        nome_clinica as nome_clinica_plano,\n        data_hora_insert,\n        data_brt_insert,\n        data_hora_bloqueio,\n        data_brt_bloqueio,\n        data_hora_ultima_atualizacao,\n        data_brt_ultima_atualizacao,\n        nome_clinica_sistema,\n        case\n            when flag_clinica_unificada = true\n                then true\n            else false\n        end as flag_clinica_unificada,\n        email,\n        cnpj,\n        unidade_negocio as unidade_negocio_clinica_plano,\n        nome_canal_autoritativa,\n        tipo_canal_autoritativa,\n        categoria_cliente_autoritativa,\n        chave_login,\n        case\n            when flag_triagem = true\n                then true\n            else false\n        end as flag_triagem,\n        c.status as status_clinica_plano,\n        tipo_contrato,\n        case\n            when flag_permite_consulta_dependente = true\n                then true\n            else false\n        end as flag_permite_consulta_dependente,\n        case\n            when flag_servico_medico = true\n                then true\n            else false\n        end as flag_servico_medico,\n        case\n            when flag_servico_especialidades = true\n                then true\n            else false\n        end as flag_servico_especialidades,\n        case\n            when flag_servico_pronto_atendimento = true\n                then true\n            else false\n        end as flag_servico_pronto_atendimento,\n        landing_page,\n        id_cliente_autoritativa as id_empresa,\n        case\n            when source = 'Conexa'\n                then to_hex(md5(to_utf8(id_cliente_autoritativa || 'cnx'))) \n            else to_hex(md5(to_utf8(id_cliente_autoritativa || 'pvv')))\n        end as sk_empresa,\n        nome_cliente_autoritativa as nome_empresa,\n        quantidade_vidas_ans_autoritativa as quantidade_vidas_ans,\n        nome_conta_pai_operadoras_autoritativa as nome_conta_pai_operadoras,\n        source as plataforma\n    FROM \"delta\".\"gold\".\"clinicas\" as c\n\n    UNION ALL\n\n    select\n        to_hex(md5(to_utf8(cast(p.id as varchar) || 'zk')))  as sk_clinica_plano,\n        p.id as id_clinica_plano,\n    \tupper(p.name) as nome_clinica_plano, \n        cast(p.created_at_dt as timestamp) as data_hora_insert,\n        p.created_at_dt as data_brt_insert,\n        null as data_hora_bloqueio,\n        null as data_brt_bloqueio,\n        cast(p.updt_reg_ts at time zone 'America/Sao_Paulo' as timestamp) as data_hora_ultima_atualizacao,\n        date(p.updt_reg_ts at time zone 'America/Sao_Paulo') as data_brt_ultima_atualizacao,\n        null as nome_clinica_sistema,\n        false as flag_clinica_unificada,\n        null as email,\n        cp.cnpj,\n        case\n    \t\twhen p.type is null \n    \t\t\tthen null\n    \t\twhen p.type = 'corporate_subscription'\n    \t\t\tthen 'Corporate'\n    \t\telse 'Outros'\n    \tend as unidade_negocio_clinica_plano,\n        null as nome_canal_autoritativa,\n        null as tipo_canal_autoritativa,\n        cp.company_category as categoria_cliente_autoritativa,\n        p.validation_field as chave_login,\n        if(coordinated_care_type='screening',true,false) as flag_triagem,\n        if(p.active = true,'ATIVA','BLOQUEADA') as status_clinica_plano,\n        null as tipo_contrato,\n        if(p.dependents_plan_id is not null, true, false) as flag_permite_consulta_dependente,\n        if(coordinated_care_type='psychiatry_sessions',true,false) as flag_servico_medico,\n        if(coordinated_care_type='psychiatry_sessions',true,false) as flag_servico_especialidades,\n        false as flag_servico_pronto_atendimento,\n        case \n    \t\twhen p.activation_code is not null and p.validation_field is not null then concat('https://zenklub.com.br/auth/activation-code/', p.activation_code ,'/', '<vc>')\n            when p.activation_code is not null and p.validation_field is null     then concat('https://zenklub.com.br/auth/activation-code/', p.activation_code)\n            else null \n        end as landing_page,\n    \tcast(cp.id as varchar) as id_empresa,\n    \tto_hex(md5(to_utf8(cast(cp.id as varchar) || 'zk'))) as sk_empresa,\n    \tcp.name as nome_empresa,\n        null as quantidade_vidas_ans,\n        null as nome_conta_pai_operadoras,\n        'Zenklub' as plataforma\n    from zenklub.modelo_2023.dim_plan p\n    left join zenklub.modelo_2023.stg_aux_plan_contract pc on pc.plan_id = p.id\n    left join zenklub.modelo_2023.dim_contract ct on ct.id = pc.contract_id\n    left join zenklub.modelo_2023.dim_company cp on cp.id = ct.company_id\n),\najustado as (\n    select\n        *,\n        lower(to_hex(md5(to_utf8(cast(coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_empresa as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\n    from clinicas_planos\n),\nprincipal as (\n    select\n        *,\n        row_number() OVER (partition by sk_teste) as ranking\n    from ajustado\n)\nselect\n    *\nfrom principal\nwhere ranking = 1", "relation_name": "\"delta\".\"gold\".\"stg_clinicas_planos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:30.298166Z", "completed_at": "2025-07-01T18:32:30.336874Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:30.354994Z", "completed_at": "2025-07-01T18:32:30.354994Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10686755180358887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_atendimento", "compiled": true, "compiled_code": "\n\nwith t1 as(\n\nselect  \n       pag.id_atendimento,\n       pag.data_ultima_alteracao,\n       pag.data_brt_ultima_alteracao,\n       pag.usuario_ultima_alteracao,\n       pag.data_inclusao,\n       pag.data_brt_inclusao,\n       pag.id_convenio as id_convenio_atendimento,\n       -- Dados conv\u00eanios\n       conv.nome_convenio,\n       conv.nome_convenio_sistema,\n       conv.unidade_negocio_autoritativa,\n       conv.flag_paciente_pagante,\n       if((pag.id_convenio is not null),conv.tipo_convenio,'Particular') as tipo_convenio,\n       -- Dados pacientes\n       pag.id_paciente,\n       pac.id_seguranca_usuario,\n       pag.login_pagamento,\n       pac.nome_paciente,\n       pac.id_convenio as id_convenio_atual_paciente,\n       pac.cpf as cpf_paciente, \n       pac.email_paciente,\n       pac.faixa_etaria as faixa_etaria_paciente,\n       pac.idade as idade_paciente,\n       pac.origem as origem_paciente,\n       pac.empresa,\n       pac.id_empresa_subsidiaria,\n       pac.departamento,\n       pac.cargo,\n       pac.flag_ativo as flag_ativo_paciente,\n       pac.data_status as data_status_paciente, \n       pac.data_brt_status as data_brt_status_paciente,\n       pac.estado as estado_paciente,\n       pac.sexo as sexo_paciente,\n       -- Dados profissionais\n       pag.id_profissional,\n       pag.login_profissional,\n       psi.nome_profissional,\n       psi.email_profissional,\n       psi.formacao,\n       psi.tipo_profissional,\n       psi.tipo_conselho,\n       psi.crp as numero_conselho,\n       psi.data_inativo as data_inativo_profissional,\n       psi.flag_desativado as flag_desativado_profissional,\n       psi.status_cancelamento as status_cancelamento_profissional,\n       psi.data_do_cadastro as data_do_cadastro_profissional,\n       --\n       pag.data_atendimento,\n       pag.data_brt_atendimento,\n       pag.data_pagamento,\n       pag.data_brt_pagamento,\n       pag.entrou_atendimento_paciente,\n       pag.entrou_atendimento_profissional,\n       pag.tipo_atendimento,\n       pag.voucher_utilizado,\n       pag.produto,\n       pag.status,\n       pag.flag_atendimento_reservada,\n       pag.status_sul_america,\n       pag.senha_autorizacao,\n       pag.voucher_sul_america,\n       pag.flag_voucher_sul_america,\n       pag.repasse_convenio,\n       pag.moeda,\n       pag.moeda_repasse,\n       pag.moeda_pagamento,\n       pag.moeda_profissional,\n       pag.valor_profissional,\n       pag.flag_pagamento_pagarme,\n       pag.id_pagarme,\n       pag.valor_pagamento,\n       pag.tempo_atendimento,  \n       pag.simultaneidade,\n       pag.id_sulamerica,\n       pag.id_pagamento_paciente,\n       pag.flag_atendimento_confirmada_profissional,\n       pag.atendimento_pago_na_plataforma,\n       pag.motivo_noshow_profissional,\n       pag.motivo_reagendamento,\n       pag.justificativa,\n       pag.id_data_agenda_profissional,\n       case \n           when (pag.id_convenio IS NULL and pac.pais_atuacao = 'BR') then 999999\n           when (pag.id_convenio IS NULL and (pac.pais_atuacao not in('BR') or pac.pais_atuacao is null)) then 999998\n           else pag.id_convenio\n       end id_convenio,\n       case \n           when pac.id_convenio is null then pag.moeda_profissional \n           when pac.id_convenio is not null and pag.valor_pagamento <> 0 then pag.moeda_pagamento \n           when pac.id_convenio is not null and pag.valor_pagamento = 0 then pag.moeda_repasse \n           else null \n       end moeda_calculada,\n       case\n           when pac.pais_atuacao = 'BR' then 'BR'\n           else 'LATAM'\n       end origem,\n       case\n              when pag.status = 'C' then 'Cancelado' \n              when pag.status = 'P' then 'Pendente autoriza\u00e7\u00e3o' \n              when pag.id_convenio = 81 then -- Regras conv\u00eanio SA\n                     case \n                            when pag.status_sul_america = 'FINALIZADO'            then 'Realizado'\n                            when pag.status_sul_america = 'CANCELADO'             then 'Cancelado'\n                            when pag.status_sul_america = 'CANCELADO_PELO_MEDICO' then 'Cancelado'\n                            when pag.status_sul_america = 'NO_SHOW_PROFISSIONAL'  then 'No show profissional'\n                            when pag.status_sul_america = 'NO_SHOW_BENEFICIARIO'  then 'No show paciente'\n                            when pag.status_sul_america = 'N\u00e3o Realizada'         then 'N\u00e3o realizado'\n                            when pag.status_sul_america = 'N\u00e3o Realizado'         then 'N\u00e3o realizado'\n                            when pag.status_sul_america = 'N\u00c3O REALIZADA'         then 'N\u00e3o realizado'\n                            when pag.status_sul_america = 'Pendente'              then 'Pendente'\n                            when pag.status_sul_america = 'PENDENTE'              then 'Pendente'\n                            when (pag.status_sul_america = 'AGUARDANDO RETORNO OPERADORA' and pag.data_atendimento < date_add('day', -1, current_timestamp(3))) then 'Pendente'\n                            when (pag.status_sul_america = 'AGUARDANDO RETORNO OPERADORA' and pag.data_atendimento > date_add('day', -1, current_timestamp(3))) then 'Agendado'\n                     end\n              when pag.id_convenio = 277 then -- Regras conv\u00eanio Seduc\n                     case \n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.status = 'C') then 'Cancelado' \n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and ava.flag_realizada = false) then 'N\u00e3o realizado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and pag.status is null and\n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3)) and pag.simultaneidade = true) then 'Realizado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and pag.status = 'R' and \n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3)) and pag.simultaneidade = true) then 'Realizado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente is null and pag.entrou_atendimento_profissional is null) and\n                                   pag.status is null and pag.data_atendimento > date_add('day', -1, current_timestamp(3))) then 'Agendado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.status = 'R' and pag.data_atendimento > date_add('day', -1, current_timestamp(3))) then 'Reagendado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and\n                                   pag.status = 'R' and pag.data_atendimento > date_add('day', -1, current_timestamp(3)) and pag.simultaneidade = true) then 'Realizado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.status = 'V') then 'Reservado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente is null) and \n                                   pag.entrou_atendimento_profissional = 'S' and (pag.status = 'R' or pag.status is null) and \n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3))) then 'No show paciente'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.entrou_atendimento_paciente = 'S' and \n                                   (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional is null)) and (pag.status = 'R' or pag.status is null) and \n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3)) then 'No show profissional'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente is null) and \n                                   (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional is null) and (pag.status = 'R' or pag.status is null) and\n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3)) then 'No show ambos'\n                            else 'N\u00e3o realizado'\n                     end\n              when pag.id_convenio in (450,579) then -- Regras conv\u00eanios: Dr. Alper e Doutor Inter. Sem simultaneidade\n                     case \n                            when (aap.flag_realizada = true and (pag.status = 'R' or pag.status IS NULL)) then 'Realizado'\n                            when (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and (pag.status = 'R' or pag.status IS NULL) and\n                                 (aap.flag_realizada = true or aap.flag_realizada IS NULL) then 'Realizado'\n                            when (pag.entrou_atendimento_paciente IS NULL and pag.entrou_atendimento_profissional IS NULL) and pag.status IS NULL and aap.flag_realizada IS NULL and pag.data_atendimento > now() then 'Agendado'\n                            when  pag.status = 'R' and pag.data_atendimento > NOW() - interval '30' minute then 'Reagendado'\n                            when  pag.status = 'V' and pag.data_atendimento > NOW() - interval '30' minute then 'Reservado'\n                            when ((pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente IS NULL) and pag.entrou_atendimento_profissional = 'S') and \n                                  (pag.status = 'R' or pag.status IS NULL) and aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show paciente'\n                            when (pag.entrou_atendimento_paciente = 'S' and (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional IS NULL)) and (pag.status = 'R' or pag.status IS NULL) and \n                                  aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show profissional'\n                            when (pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente IS NULL) and (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional IS NULL) and\n                                 (pag.status = 'R' or pag.status IS NULL) and aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show ambos'\n                            else 'N\u00e3o realizado'\n                     end\n              else -- Regras PV sem exce\u00e7\u00e3o\n                     case \n                            when (aap.flag_realizada = true and (pag.status = 'R' or pag.status IS NULL) and pag.simultaneidade = true) then 'Realizado'\n                            when (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and (pag.status = 'R' or pag.status IS NULL) and pag.simultaneidade = true and\n                                 (aap.flag_realizada = true or aap.flag_realizada IS NULL) then 'Realizado'\n                            when (pag.entrou_atendimento_paciente IS NULL and pag.entrou_atendimento_profissional IS NULL) and pag.status IS NULL and aap.flag_realizada IS NULL and pag.data_atendimento > now() then 'Agendado'\n                            when  pag.status = 'R' and pag.data_atendimento > NOW() - interval '30' minute then 'Reagendado'\n                            when  pag.status = 'V' and pag.data_atendimento > NOW() - interval '30' minute then 'Reservado'\n                            when ((pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente IS NULL) and pag.entrou_atendimento_profissional = 'S') and \n                                  (pag.status = 'R' or pag.status IS NULL) and aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show paciente'\n                            when (pag.entrou_atendimento_paciente = 'S' and (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional IS NULL)) and (pag.status = 'R' or pag.status IS NULL) and \n                                  aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show profissional'\n                            when (pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente IS NULL) and (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional IS NULL) and\n                                 (pag.status = 'R' or pag.status IS NULL) and aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show ambos'\n                            else 'N\u00e3o realizado'\n                     end\n       end status_atendimento,\n       -- AVALIACAO PACIENTE\n       if((ava.id_atendimento is not null),true,false) as flag_paciente_avaliou_atendimento,\n       ava.data_ultima_alteracao as data_paciente_avaliou_atendimento,\n       ava.nps_profissional, \n       ava.csat_profissional,\n       ava.csat_audio_video_paciente,\n       ava.csat_plataforma_paciente,\n       ava.paciente_comentario,\n       ava.obs_nps as observacao_paciente,\n       -- AVALIACAO PROFISSIONAL\n       if((aap.id_atendimento is not null),true,false) as flag_profissional_avaliou_atendimento,\n       aap.data_ultima_alteracao as data_profissional_avaliou_atendimento,\n       aap.csat_paciente, -- Avaliacao do paciente feita pelo profissional\n       aap.csat_audio_video_profissional,\n       aap.csat_plataforma_profissional,\n       aap.tema_relatado_profissional_atendimento,\n       -- Dados ROI\n       pcs.id_pagamento_convenio_split as id_roi,\n       pcs.data_ultima_alteracao as data_ultima_alteracao_roi,\n       pcs.usuario_ultima_alteracao as usuario_ultima_alteracao_roi,\n       pcs.data_inclusao as data_inclusao_roi,\n       pcs.data_transferencia,\n       pcs.flag_aprovacao,\n       pcs.flag_confirmacao_roi,\n       pcs.status as status_roi,\n       pcs.valor_consulta as valor_consulta_roi,\n       pcs.valor_total as valor_total_roi,\n       pcs.valor_repasse,\n       pcs.flag_antecipacao,\n       if((pcs.id_pagamento_convenio_split is not null),true,false) as flag_existe_roi,\n       -- Consulta cancelada?\n       cc.data_ultima_alteracao as data_cancelamento,\n       cc.data_brt_ultima_alteracao as data_brt_cancelamento,\n       cc.responsavel as responsavel_cancelamento,\n       cc.motivo as motivo_cancelamento,\n       -- Atendimento foi reagendado?\n       case\n           when pag.status = 'R' or quantidade_reagendamento > 0 then true\n           else false\n       end flag_atendimento_reagendado,\n       qr.quantidade_reagendamento,\n       qr.ultima_data_inclusao_reagendamento,\n       -- Atendimento instabilidade\n       if((ci.id_atendimento is not null),true,false) as flag_atendimento_instabilidade,\n       ci.motivo as instabilidade_motivo,\n       ci.observacao as instabilidade_observacao,\n       conv.id_cliente_autoritativa,\n       conv.nome_cliente_autoritativa,\n       pag.emitted_at,\n       pag.is_delete,\n       pag.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_atendimento\" as pag\ninner join \"delta\".\"silver\".\"pvv_dim_paciente\" as pac on pac.id_paciente = pag.id_paciente\ninner join \"delta\".\"silver\".\"pvv_dim_profissional\" as psi on psi.id_profissional = pag.id_profissional\nleft join \"delta\".\"silver\".\"pvv_dim_convenio\" as conv on conv.id_convenio = pag.id_convenio\nleft join \"delta\".\"bronze\".\"stg_pvv_avaliacao_paciente\" as ava on ava.id_atendimento = pag.id_atendimento\nleft join \"delta\".\"bronze\".\"stg_pvv_avaliacao_psicologo\" as aap on aap.id_atendimento = pag.id_atendimento\nleft join \"delta\".\"bronze\".\"stg_pvv_pagamento_convenio_split\" as pcs on pcs.id_atendimento = pag.id_atendimento \nleft join \"delta\".\"bronze\".\"stg_pvv_cancelamento_consulta\"  as cc on cc.id_atendimento = pag.id_atendimento\nleft join \"delta\".\"bronze\".\"stg_pvv_quantidade_reagendamento_atendimento\"  as qr on qr.id_atendimento = pag.id_atendimento  \nleft join \"delta\".\"bronze\".\"stg_pvv_consulta_instabilidade\"  as ci on ci.id_atendimento = pag.id_atendimento\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\" AS apv\n    WHERE apv.id_atendimento_pviva = pag.id_atendimento\n)\n)\n\nselect t1.*,\n       case \n            when t1.status_atendimento = 'Realizado' then 1 \n            when t1.status_atendimento = 'Agendado' then 2 \n            when t1.status_atendimento = 'Reagendado' then 3 \n            when t1.status_atendimento = 'Reservado' then 4\n            when t1.status_atendimento = 'Cancelado' then 5 \n            when t1.status_atendimento = 'No show profissional' then 6 \n            when t1.status_atendimento = 'No show paciente' then 7 \n            when t1.status_atendimento = 'No show ambos' then 8 \n            when t1.status_atendimento = 'N\u00e3o realizado' then 9 \n            when t1.status_atendimento = 'Pendente' then 10\n            when t1.status_atendimento = 'Pendente autoriza\u00e7\u00e3o' then 11\n            else 12\n        end flag_atendimento\nfrom t1 --", "relation_name": "\"delta\".\"silver\".\"pvv_fact_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:30.450313Z", "completed_at": "2025-07-01T18:32:30.489894Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:30.514509Z", "completed_at": "2025-07-01T18:32:30.514509Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10978412628173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_atendimento_financeiro", "compiled": true, "compiled_code": "\n\nwith t1 as(\n\nselect  \n       pag.id_atendimento,\n       apv.id_atendimento as id_atendimento_cnx,\n       pag.data_ultima_alteracao,\n       pag.data_brt_ultima_alteracao,\n       pag.usuario_ultima_alteracao,\n       pag.data_inclusao,\n       pag.data_brt_inclusao,\n       pag.id_convenio as id_convenio_atendimento,\n       -- Dados conv\u00eanios\n       conv.nome_convenio,\n       conv.nome_convenio_sistema,\n       conv.unidade_negocio_autoritativa,\n       conv.flag_paciente_pagante,\n       if((pag.id_convenio is not null),conv.tipo_convenio,'Particular') as tipo_convenio,\n       -- Dados pacientes\n       pag.id_paciente,\n       pac.id_seguranca_usuario,\n       pag.login_pagamento,\n       pac.nome_paciente,\n       pac.id_convenio as id_convenio_atual_paciente,\n       pac.cpf as cpf_paciente, \n       pac.email_paciente,\n       pac.faixa_etaria as faixa_etaria_paciente,\n       pac.idade as idade_paciente,\n       pac.origem as origem_paciente,\n       pac.empresa,\n       pac.id_empresa_subsidiaria,\n       pac.departamento,\n       pac.cargo,\n       pac.flag_ativo as flag_ativo_paciente,\n       pac.data_status as data_status_paciente, \n       pac.data_brt_status as data_brt_status_paciente,\n       pac.estado as estado_paciente,\n       pac.sexo as sexo_paciente,\n       -- Dados profissionais\n       pag.id_profissional,\n       pag.login_profissional,\n       psi.nome_profissional,\n       psi.email_profissional,\n       psi.formacao,\n       psi.tipo_profissional,\n       psi.tipo_conselho,\n       psi.crp as numero_conselho,\n       psi.data_inativo as data_inativo_profissional,\n       psi.flag_desativado as flag_desativado_profissional,\n       psi.status_cancelamento as status_cancelamento_profissional,\n       psi.data_do_cadastro as data_do_cadastro_profissional,\n       --\n       pag.data_atendimento,\n       pag.data_brt_atendimento,\n       pag.data_pagamento,\n       pag.data_brt_pagamento,\n       pag.entrou_atendimento_paciente,\n       pag.entrou_atendimento_profissional,\n       pag.tipo_atendimento,\n       pag.voucher_utilizado,\n       pag.produto,\n       pag.status,\n       pag.flag_atendimento_reservada,\n       pag.status_sul_america,\n       pag.senha_autorizacao,\n       pag.voucher_sul_america,\n       pag.flag_voucher_sul_america,\n       pag.repasse_convenio,\n       pag.moeda,\n       pag.moeda_repasse,\n       pag.moeda_pagamento,\n       pag.moeda_profissional,\n       pag.valor_profissional,\n       pag.flag_pagamento_pagarme,\n       pag.id_pagarme,\n       pag.valor_pagamento,\n       pag.tempo_atendimento,  \n       pag.simultaneidade,\n       pag.id_sulamerica,\n       pag.id_pagamento_paciente,\n       pag.flag_atendimento_confirmada_profissional,\n       pag.atendimento_pago_na_plataforma,\n       pag.motivo_noshow_profissional,\n       pag.motivo_reagendamento,\n       pag.justificativa,\n       pag.id_data_agenda_profissional,\n       case \n           when (pag.id_convenio IS NULL and pac.pais_atuacao = 'BR') then 999999\n           when (pag.id_convenio IS NULL and (pac.pais_atuacao not in('BR') or pac.pais_atuacao is null)) then 999998\n           else pag.id_convenio\n       end id_convenio,\n       case \n           when pac.id_convenio is null then pag.moeda_profissional \n           when pac.id_convenio is not null and pag.valor_pagamento <> 0 then pag.moeda_pagamento \n           when pac.id_convenio is not null and pag.valor_pagamento = 0 then pag.moeda_repasse \n           else null \n       end moeda_calculada,\n       case\n           when pac.pais_atuacao = 'BR' then 'BR'\n           else 'LATAM'\n       end origem,\n       case\n              when pag.status = 'C' then 'Cancelado' \n              when pag.status = 'P' then 'Pendente autoriza\u00e7\u00e3o' \n              when pag.id_convenio = 81 then -- Regras conv\u00eanio SA\n                     case \n                            when pag.status_sul_america = 'FINALIZADO'            then 'Realizado'\n                            when pag.status_sul_america = 'CANCELADO'             then 'Cancelado'\n                            when pag.status_sul_america = 'CANCELADO_PELO_MEDICO' then 'Cancelado'\n                            when pag.status_sul_america = 'NO_SHOW_PROFISSIONAL'  then 'No show profissional'\n                            when pag.status_sul_america = 'NO_SHOW_BENEFICIARIO'  then 'No show paciente'\n                            when pag.status_sul_america = 'N\u00e3o Realizada'         then 'N\u00e3o realizado'\n                            when pag.status_sul_america = 'N\u00e3o Realizado'         then 'N\u00e3o realizado'\n                            when pag.status_sul_america = 'N\u00c3O REALIZADA'         then 'N\u00e3o realizado'\n                            when pag.status_sul_america = 'Pendente'              then 'Pendente'\n                            when pag.status_sul_america = 'PENDENTE'              then 'Pendente'\n                            when (pag.status_sul_america = 'AGUARDANDO RETORNO OPERADORA' and pag.data_atendimento < date_add('day', -1, current_timestamp(3))) then 'Pendente'\n                            when (pag.status_sul_america = 'AGUARDANDO RETORNO OPERADORA' and pag.data_atendimento > date_add('day', -1, current_timestamp(3))) then 'Agendado'\n                     end\n              when pag.id_convenio = 277 then -- Regras conv\u00eanio Seduc\n                     case \n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.status = 'C') then 'Cancelado' \n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and ava.flag_realizada = false) then 'N\u00e3o realizado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and pag.status is null and\n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3)) and pag.simultaneidade = true) then 'Realizado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and pag.status = 'R' and \n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3)) and pag.simultaneidade = true) then 'Realizado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente is null and pag.entrou_atendimento_profissional is null) and\n                                   pag.status is null and pag.data_atendimento > date_add('day', -1, current_timestamp(3))) then 'Agendado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.status = 'R' and pag.data_atendimento > date_add('day', -1, current_timestamp(3))) then 'Reagendado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and\n                                   pag.status = 'R' and pag.data_atendimento > date_add('day', -1, current_timestamp(3)) and pag.simultaneidade = true) then 'Realizado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.status = 'V') then 'Reservado'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and (pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente is null) and \n                                   pag.entrou_atendimento_profissional = 'S' and (pag.status = 'R' or pag.status is null) and \n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3))) then 'No show paciente'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.entrou_atendimento_paciente = 'S' and \n                                   (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional is null)) and (pag.status = 'R' or pag.status is null) and \n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3)) then 'No show profissional'\n                            when ((pag.tipo_atendimento = 'ONLINE - Seduc') and pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente is null) and \n                                   (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional is null) and (pag.status = 'R' or pag.status is null) and\n                                   pag.data_atendimento < date_add('day', -1, current_timestamp(3)) then 'No show ambos'\n                            else 'N\u00e3o realizado'\n                     end\n              when pag.id_convenio in (450,579) then -- Regras conv\u00eanios: Dr. Alper e Doutor Inter. Sem simultaneidade\n                     case \n                            when (aap.flag_realizada = true and (pag.status = 'R' or pag.status IS NULL)) then 'Realizado'\n                            when (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and (pag.status = 'R' or pag.status IS NULL) and\n                                 (aap.flag_realizada = true or aap.flag_realizada IS NULL) then 'Realizado'\n                            when (pag.entrou_atendimento_paciente IS NULL and pag.entrou_atendimento_profissional IS NULL) and pag.status IS NULL and aap.flag_realizada IS NULL and pag.data_atendimento > now() then 'Agendado'\n                            when  pag.status = 'R' and pag.data_atendimento > NOW() - interval '30' minute then 'Reagendado'\n                            when  pag.status = 'V' and pag.data_atendimento > NOW() - interval '30' minute then 'Reservado'\n                            when ((pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente IS NULL) and pag.entrou_atendimento_profissional = 'S') and \n                                  (pag.status = 'R' or pag.status IS NULL) and aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show paciente'\n                            when (pag.entrou_atendimento_paciente = 'S' and (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional IS NULL)) and (pag.status = 'R' or pag.status IS NULL) and \n                                  aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show profissional'\n                            when (pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente IS NULL) and (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional IS NULL) and\n                                 (pag.status = 'R' or pag.status IS NULL) and aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show ambos'\n                            else 'N\u00e3o realizado'\n                     end\n              else -- Regras PV sem exce\u00e7\u00e3o\n                     case \n                            when (aap.flag_realizada = true and (pag.status = 'R' or pag.status IS NULL) and pag.simultaneidade = true) then 'Realizado'\n                            when (pag.entrou_atendimento_paciente = 'S' and pag.entrou_atendimento_profissional = 'S') and (pag.status = 'R' or pag.status IS NULL) and pag.simultaneidade = true and\n                                 (aap.flag_realizada = true or aap.flag_realizada IS NULL) then 'Realizado'\n                            when (pag.entrou_atendimento_paciente IS NULL and pag.entrou_atendimento_profissional IS NULL) and pag.status IS NULL and aap.flag_realizada IS NULL and pag.data_atendimento > now() then 'Agendado'\n                            when  pag.status = 'R' and pag.data_atendimento > NOW() - interval '30' minute then 'Reagendado'\n                            when  pag.status = 'V' and pag.data_atendimento > NOW() - interval '30' minute then 'Reservado'\n                            when ((pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente IS NULL) and pag.entrou_atendimento_profissional = 'S') and \n                                  (pag.status = 'R' or pag.status IS NULL) and aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show paciente'\n                            when (pag.entrou_atendimento_paciente = 'S' and (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional IS NULL)) and (pag.status = 'R' or pag.status IS NULL) and \n                                  aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show profissional'\n                            when (pag.entrou_atendimento_paciente = 'N' or pag.entrou_atendimento_paciente IS NULL) and (pag.entrou_atendimento_profissional = 'N' or pag.entrou_atendimento_profissional IS NULL) and\n                                 (pag.status = 'R' or pag.status IS NULL) and aap.flag_realizada IS NULL and pag.data_atendimento < NOW() - interval '30' minute then 'No show ambos'\n                            else 'N\u00e3o realizado'\n                     end\n       end status_atendimento,\n       aap.flag_realizada,\n       -- AVALIACAO PACIENTE\n       if((ava.id_atendimento is not null),true,false) as flag_paciente_avaliou_atendimento,\n       ava.data_ultima_alteracao as data_paciente_avaliou_atendimento,\n       ava.nps_profissional, \n       ava.csat_profissional,\n       ava.csat_audio_video_paciente,\n       ava.csat_plataforma_paciente,\n       ava.paciente_comentario,\n       ava.obs_nps as observacao_paciente,\n       -- AVALIACAO PROFISSIONAL\n       if((aap.id_atendimento is not null),true,false) as flag_profissional_avaliou_atendimento,\n       aap.data_ultima_alteracao as data_profissional_avaliou_atendimento,\n       aap.csat_paciente, -- Avaliacao do paciente feita pelo profissional\n       aap.csat_audio_video_profissional,\n       aap.csat_plataforma_profissional,\n       aap.tema_relatado_profissional_atendimento,\n       -- Dados ROI\n       pcs.id_pagamento_convenio_split as id_roi,\n       pcs.data_ultima_alteracao as data_ultima_alteracao_roi,\n       pcs.usuario_ultima_alteracao as usuario_ultima_alteracao_roi,\n       pcs.data_inclusao as data_inclusao_roi,\n       pcs.data_transferencia,\n       pcs.flag_aprovacao,\n       pcs.flag_confirmacao_roi,\n       pcs.status as status_roi,\n       pcs.valor_consulta as valor_consulta_roi,\n       pcs.valor_total as valor_total_roi,\n       pcs.valor_repasse,\n       pcs.flag_antecipacao,\n       if((pcs.id_pagamento_convenio_split is not null),true,false) as flag_existe_roi,\n       -- Consulta cancelada?\n       cc.data_ultima_alteracao as data_cancelamento,\n       cc.data_brt_ultima_alteracao as data_brt_cancelamento,\n       cc.responsavel as responsavel_cancelamento,\n       cc.motivo as motivo_cancelamento,\n       -- Atendimento foi reagendado?\n       case\n           when pag.status = 'R' or quantidade_reagendamento > 0 then true\n           else false\n       end flag_atendimento_reagendado,\n       qr.quantidade_reagendamento,\n       qr.ultima_data_inclusao_reagendamento,\n       -- Atendimento instabilidade\n       if((ci.id_atendimento is not null),true,false) as flag_atendimento_instabilidade,\n       ci.motivo as instabilidade_motivo,\n       ci.observacao as instabilidade_observacao,\n       conv.id_cliente_autoritativa,\n       conv.nome_cliente_autoritativa,\n       pag.emitted_at,\n       pag.is_delete,\n       pag.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_atendimento\" as pag\ninner join \"delta\".\"silver\".\"pvv_dim_paciente\" as pac on pac.id_paciente = pag.id_paciente\ninner join \"delta\".\"silver\".\"pvv_dim_profissional\" as psi on psi.id_profissional = pag.id_profissional\nleft join \"delta\".\"silver\".\"pvv_dim_convenio\" as conv on conv.id_convenio = pag.id_convenio\nleft join \"delta\".\"bronze\".\"stg_pvv_avaliacao_paciente\" as ava on ava.id_atendimento = pag.id_atendimento\nleft join \"delta\".\"bronze\".\"stg_pvv_avaliacao_psicologo\" as aap on aap.id_atendimento = pag.id_atendimento\nleft join \"delta\".\"bronze\".\"stg_pvv_pagamento_convenio_split\" as pcs on pcs.id_atendimento = pag.id_atendimento \nleft join \"delta\".\"bronze\".\"stg_pvv_cancelamento_consulta\"  as cc on cc.id_atendimento = pag.id_atendimento\nleft join \"delta\".\"bronze\".\"stg_pvv_quantidade_reagendamento_atendimento\"  as qr on qr.id_atendimento = pag.id_atendimento  \nleft join \"delta\".\"bronze\".\"stg_pvv_consulta_instabilidade\"  as ci on ci.id_atendimento = pag.id_atendimento\nleft join \"delta\".\"bronze\".\"raw_cnx_atendimento_pviva\" as apv on pag.id_atendimento = apv.id_atendimento_pviva\n)\n\nselect t1.*,\n       case \n            when t1.status_atendimento = 'Realizado' then 1 \n            when t1.status_atendimento = 'Agendado' then 2 \n            when t1.status_atendimento = 'Reagendado' then 3 \n            when t1.status_atendimento = 'Reservado' then 4\n            when t1.status_atendimento = 'Cancelado' then 5 \n            when t1.status_atendimento = 'No show profissional' then 6 \n            when t1.status_atendimento = 'No show paciente' then 7 \n            when t1.status_atendimento = 'No show ambos' then 8 \n            when t1.status_atendimento = 'N\u00e3o realizado' then 9 \n            when t1.status_atendimento = 'Pendente' then 10\n            when t1.status_atendimento = 'Pendente autoriza\u00e7\u00e3o' then 11\n            else 12\n        end flag_atendimento\nfrom t1 --", "relation_name": "\"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:30.624227Z", "completed_at": "2025-07-01T18:32:30.653854Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:30.676846Z", "completed_at": "2025-07-01T18:32:30.676846Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1010284423828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_avaliacao_plataforma", "compiled": true, "compiled_code": "\n\nwith nps_br as (\n\nselect \n\ttoken,\n\tfrom_iso8601_timestamp(submitted_at) as data_hora_enviado,\n\tfrom_iso8601_timestamp(landed_at) as data_hora_recebido,\n\ttry_cast(value as bigint) as id_paciente,\n\tcase \n\t    when form_id = 'nVFB6H4Q' then 'BR'\n\t\telse 'Latam'\n\tend as origem,\n\tform_id,\n\ttitle,\n\tcase\n\t\twhen element_at(answers, 1) is not null and answers[1].type = 'number' then answers[1].number\n\t\twhen element_at(answers, 2) is not null and answers[2].type = 'number' then answers[2].number\n\tend as nps_plataforma,\n\tcase\n\t\twhen element_at(answers, 1) is not null and answers[1].type = 'text' then answers[1].text\n\t\twhen element_at(answers, 2) is not null and answers[2].type = 'text' then answers[2].text\n\tend as nps_plataforma_comentario\nFROM \"delta\".\"bronze\".\"stg_mongo_pvv_typeform\" t\nWHERE form_id in('nVFB6H4Q','xWzaSa9v')\n\n)\n\nSELECT \n\tnps.token,\n\tnps.data_hora_enviado,\n\tdate(nps.data_hora_enviado at time zone 'America/Sao_Paulo') as data_brt_enviado,\n\tnps.data_hora_recebido,\n\tdate(nps.data_hora_recebido at time zone 'America/Sao_Paulo') as data_brt_recebido,\n\tnps.id_paciente,\n\tnps.origem,\n\tform_id,\n\ttitle,\n\tp.id_convenio,\n\tp.nome_paciente,\n\tp.nome_convenio,\n\tp.nome_convenio_sistema,\n\tp.tipo_convenio,\n\tnps.nps_plataforma,\n\tnps.nps_plataforma_comentario\nFROM nps_br nps\nLEFT JOIN \"delta\".\"silver\".\"pvv_dim_paciente\" p on nps.id_paciente = p.id_paciente\nWHERE nps.id_paciente is not null", "relation_name": "\"delta\".\"silver\".\"pvv_fact_avaliacao_plataforma\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:30.785847Z", "completed_at": "2025-07-01T18:32:30.815555Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:30.836739Z", "completed_at": "2025-07-01T18:32:30.836739Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10289168357849121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_contrato_psicologo", "compiled": true, "compiled_code": "\n\nselect \n    spc.id_contrato,\n    spc.data_ultima_alteracao,\n    spc.data_brt_ultima_alteracao,\n    spc.usuario_ultima_alteracao,\n    spc.data_inclusao,\n    spc.data_brt_inclusao,\n    spc.versao,\n    spc.flag_aceito_paciente,\n    spc.flag_aceito_psicologo,\n    spc.login_paciente,\n    spc.tipo_contrato,\t\n    case\n\t\twhen spc.tipo_contrato = 'CARTILHA_SEDUC' then 'Cartilha Seduc'\n\t\twhen spc.tipo_contrato = 'DECLARACAO_NAO_VINCULO_ESTADO' then 'Referente as conv\u00eanio Seduc'\n\t\twhen spc.tipo_contrato = 'ESP_BRAS_EXTERIOR' then ''\n\t\twhen spc.tipo_contrato = 'EXCLUSIVIDADE_SEDUC' then 'Atendimento exclusivo conv\u00eanio Seduc'\n\t\twhen spc.tipo_contrato = 'PAC_PSIC' then ''\n\t\twhen spc.tipo_contrato = 'PAC_PSIC_CONV' then ''\n\t\twhen spc.tipo_contrato = 'PSIC_CONV' then ''\n\t\twhen spc.tipo_contrato = 'RIESGO_SUICIDA_PROTOCOLO_SEGURIDAD' then 'Protocolo de seguran\u00e7a para risco de suic\u00eddio - LATAM'\n\t\twhen spc.tipo_contrato = 'SAAS' then ''\n\t\twhen spc.tipo_contrato = 'SAAS_V2' then ''\n\t\twhen spc.tipo_contrato = 'SAAS_V3' then ''\n\t\twhen spc.tipo_contrato = 'SAAS_V4' then ''\n\t\twhen spc.tipo_contrato = 'TERMO_SEDUC' then 'Termo Seduc'\n\t\twhen spc.tipo_contrato = 'TERMO_SUPERVISAO_PSI' then 'Termo de confidencialidade e sigilo de supervis\u00e3o'\n\t\twhen spc.tipo_contrato = 'TERMO_USO' then 'Termo e condi\u00e7\u00f5es de uso da plataforma'\n\t\twhen spc.tipo_contrato = 'VIF_PROTOCOLO_SECURIDAD' then ''\n\t\telse spc.tipo_contrato\n\tend as descricao_contrato,\n    spc.data_assinatura,\n    spc.data_brt_assinatura,\n    spc.id_profissional,\n    spc.id_paciente,\n    spc.ip_usuario,\n    spc.emitted_at,\n    spc.is_delete,\n    spc.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_contrato\" as spc\ninner join \"delta\".\"silver\".\"pvv_dim_profissional\" as pro on pro.id_profissional = spc.id_profissional\ninner join \"delta\".\"silver\".\"pvv_dim_paciente\" as pro on pro.id_paciente = spc.id_paciente", "relation_name": "\"delta\".\"silver\".\"pvv_fact_contrato_psicologo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:30.930875Z", "completed_at": "2025-07-01T18:32:30.947829Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:30.978726Z", "completed_at": "2025-07-01T18:32:30.978726Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0960838794708252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_pesquisa_site_paciente", "compiled": true, "compiled_code": "\n\nselect \n    pfp.id_filtros_pesquisa,\n    pfp.id_paciente,\n    pfp.data_inclusao,\n    pfp.data_brt_inclusao,\n    pfp.data_ultima_alteracao,\n    pfp.data_brt_ultima_alteracao,\n    pfp.usuario_ultima_alteracao,\n    pfp.data_final,\n    pfp.data_brt_final,\n    pfp.data_inicial,\n    pfp.data_brt_inicial,\n    pfp.email_paciente,\n    pac.id_convenio,\n    pac.nome_convenio,\n    pac.departamento,\n    pac.departamento_cliente_empresa,\n    pac.empresa,\n    pac.nome_empresa_interna,\n    pfp.sexo,\n    pfp.tema,\n    pfp.abordagem,\n    pfp.area_atuacao,\n    pfp.especialidade,\n    pfp.idioma_atendimento,\n    pfp.opcao_atendimento,\n    pfp.palavra_chave,\n    pfp.flag_atende_em_libras,\n    pfp.flag_atende_presencial,\n    pfp.flag_tem_video,\n    pfp.flag_is_fonasa,\n    pfp.cidade,\n    pfp.estado,\n    pfp.pais,\n    _ab_cdc_deleted_at,\n    _ab_cdc_updated_at,\n    _class,\n    pfp.emitted_at\nfrom \"delta\".\"bronze\".\"stg_mongo_pvv_filtros_pesquisa\" as pfp\nleft join \"delta\".\"silver\".\"pvv_dim_paciente\" as pac on pac.id_paciente = pfp.id_paciente", "relation_name": "\"delta\".\"silver\".\"pvv_fact_pesquisa_site_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:31.081613Z", "completed_at": "2025-07-01T18:32:31.114398Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:31.134707Z", "completed_at": "2025-07-01T18:32:31.134707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11075901985168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_prontuario", "compiled": true, "compiled_code": "\n\nwith motivo_adoecimento_laboral AS (\nselect\n     id_prontuario, \n     array_agg(descricao) as lista_motivos_adoecimento_laboral\nfrom \"delta\".\"bronze\".\"stg_pvv_motivo_adoecimento_laboral_prontuario\" malp\nleft join \"delta\".\"bronze\".\"stg_pvv_decrypted_detalhes_motivo_adoecimento_laboral\" dmalp on dmalp.id_detalhes_motivo_adoecimento_laboral = malp.id_detalhes_motivo_adoecimento_laboral\ngroup by id_prontuario\n),\nrelacao_adoecimento_laboral as(\nselect\n     id_prontuario, \n     array_agg(descricao) as lista_relacao_adoecimento_laboral\nfrom \"delta\".\"bronze\".\"stg_pvv_relacao_adoecimento_laboral_prontuario\" as ralp\nleft join \"delta\".\"bronze\".\"stg_pvv_decrypted_detalhes_relacao_adoecimento_laboral\" as ddral on ddral.id_detalhes_relacao_adoecimento_laboral = ralp.id_relacao_adoecimento_laboral\ngroup by id_prontuario\n)\nselect \n     np.id_prontuario,\n     np.data_ultima_alteracao,\n     np.data_brt_alteracao,\n     np.usuario_ultima_alteracao,\n     np.data_inclusao,\n     np.data_brt_inclusao,\n     np.data_inicio_queixas,\n     np.data_termino_previsto_tratamento,\n     np.id_profissional,\n     np.id_paciente,\n     p.id_convenio,\n     p.nome_convenio_sistema,\n     p.sexo,\n     p.faixa_etaria,\n     p.faixa_etaria2,\n     p.origem,\n     np.id_paciente_prontuario,\n     np.id_diagnostico,\n     np.numero_consultas_previstas,\n     np.queixa_principal,\n\tnp.ocorrencia_queixas,\n     np.mudancas_queixas,\n     np.sintomas_queixas,\n     np.queixas_cognitivas,\n     np.queixas_afetivas,\n     np.psicomotricidade,\n     np.detalhes_psicomotricidade,\n     np.habitos_rotina,\n     np.vida_social,\n     np.estado_atual_saude,\n     np.antecedentes_familiares,\n     np.historia_familiar,\n     np.nomeclatura_cid,\n     np.diagnostico_cid as hipotese_diagnostica,\n     np.regularidade_atendimento,\n     d.codigo as codigo_diagnostico,\n     case \n     \twhen d.descricao is not null then d.descricao\n     \twhen (d.descricao is null and np.queixa_principal is not null) then np.queixa_principal\n     \telse 'N\u00e3o relatado'\n     end as descricao_diagnostico,\n     tp.status_tratamento,\n     tp.data_inicio_tratamento,\n     mal.lista_motivos_adoecimento_laboral,\n     ral.lista_relacao_adoecimento_laboral,\n     np.emitted_at,\n     np.updated_at,\n     np.is_delete\nfrom \"delta\".\"bronze\".\"stg_pvv_decrypted_novo_prontuario\" as np\nleft join \"delta\".\"bronze\".\"stg_pvv_decrypted_diagnostico\" as d on d.id_diagnostico = np.id_diagnostico\nleft join \"delta\".\"bronze\".\"stg_pvv_tratamento_prontuario\" as tp on tp.id_prontuario = np.id_prontuario\nleft join \"delta\".\"silver\".\"pvv_dim_paciente\" as p on p.id_paciente = np.id_paciente\nleft join motivo_adoecimento_laboral as mal on np.id_prontuario = mal.id_prontuario\nleft join relacao_adoecimento_laboral as ral on np.id_prontuario = ral.id_prontuario", "relation_name": "\"delta\".\"silver\".\"pvv_fact_prontuario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:31.221366Z", "completed_at": "2025-07-01T18:32:31.246292Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:31.270043Z", "completed_at": "2025-07-01T18:32:31.270043Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09285211563110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_resultados_dass21", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect response_id,\n       sum(valor_resposta) as resposta, \n       grupo_pergunta \nfrom \"delta\".\"bronze\".\"stg_pvv_typeform_dass21_responses\" as tdr\ninner join \"delta\".\"bronze\".\"stg_pvv_typeform_dass21_fields\" as tdf on tdf.field_id = tdr.id_field \ngroup by response_id,grupo_pergunta \n),\nt2 as(\nselect response_id,\n       case \n       \twhen (resposta * 2) <= 9 and grupo_pergunta = 'Ansiedade' then 'Normal'\n       \twhen (resposta * 2) between 10 and 13 and grupo_pergunta = 'Ansiedade' then 'Leve'\n       \twhen (resposta * 2) between 14 and 20 and grupo_pergunta = 'Ansiedade' then 'Moderado'\n       \twhen (resposta * 2) between 21 and 27 and grupo_pergunta = 'Ansiedade' then 'Severo'\n       \twhen (resposta * 2) between 28 and 42 and grupo_pergunta = 'Ansiedade' then 'Extremamente severo'\n       end ansiedade,\n       case \n       \twhen (resposta * 2) <= 7 and grupo_pergunta = 'Depress\u00e3o' then 'Normal'\n       \twhen (resposta * 2) between 8 and 9 and grupo_pergunta = 'Depress\u00e3o' then 'Leve'\n       \twhen (resposta * 2) between 10 and 14 and grupo_pergunta = 'Depress\u00e3o' then 'Moderado'\n       \twhen (resposta * 2) between 15 and 19 and grupo_pergunta = 'Depress\u00e3o' then 'Severo'\n       \twhen (resposta * 2) between 20 and 42 and grupo_pergunta = 'Depress\u00e3o' then 'Extremamente severo'\n       end depressao,\n       case \n       \twhen (resposta * 2) <= 14 and grupo_pergunta = 'Estresse' then 'Normal'\n       \twhen (resposta * 2) between 15 and 18 and grupo_pergunta = 'Estresse' then 'Leve'\n       \twhen (resposta * 2) between 19 and 25 and grupo_pergunta = 'Estresse' then 'Moderado'\n       \twhen (resposta * 2) between 16 and 33 and grupo_pergunta = 'Estresse' then 'Severo'\n       \twhen (resposta * 2) between 34 and 42 and grupo_pergunta = 'Estresse' then 'Extremamente severo'\n       end estresse,\n       resposta\nfrom t1\n),\nt3 as(\nselect response_id as id_dass21, \n       max(ansiedade) filter(where ansiedade is not null) as ansiedade,\n       sum(resposta) filter(where ansiedade is not null) as valor_ansiedade,\n       max(depressao) filter(where depressao is not null) as depressao,\n       sum(resposta) filter(where depressao is not null) as valor_depressao,\n       max(estresse) filter(where estresse is not null) as estresse,\n       sum(resposta) filter(where estresse is not null) as valor_estresse\nfrom t2 \ngroup by response_id\n)\nselect distinct t3.id_dass21,\n                tdr.data_hora_enviado,\n                tdr.data_hora_recebido, \n                tdr.origem,\n                tdr.tipo_id,\n                cast(tdr.id as bigint) as id_paciente,\n                pa.id_convenio,\n                pa.nome_convenio,\n                pa.faixa_etaria2,\n                pa.sexo as sexo_paciente,\n                pa.estado as estado_paciente,\n                t3.ansiedade,\n                t3.valor_ansiedade,\n                t3.depressao,\n                t3.valor_depressao,\n                t3.estresse,\n                t3.valor_estresse\nfrom t3\ninner join \"delta\".\"bronze\".\"stg_pvv_typeform_dass21_responses\" as tdr on tdr.response_id = t3.id_dass21 \ninner join t1 on t1.response_id = t3.id_dass21\ninner join \"delta\".\"silver\".\"pvv_dim_paciente\" as pa on cast(tdr.id as bigint) = pa.id_paciente and tipo_id = 'PACIENTE_ID'", "relation_name": "\"delta\".\"silver\".\"pvv_fact_resultados_dass21\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:31.355051Z", "completed_at": "2025-07-01T18:32:31.397156Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:31.411218Z", "completed_at": "2025-07-01T18:32:31.411218Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10803604125976562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_elegibilidade", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect \n\t'Zenklub' as plataforma,\n\tdc.id as id_paciente,\n\tvc.code as validation_code,\n\tdc.display_name as nome_paciente, \n\tto_hex(md5(to_utf8(dc.id || 'zk'))) as sk_paciente,\n\tp.id as id_clinica_plano, \n\tto_hex(md5(to_utf8(cast(p.id as varchar) || 'zk')))  as sk_clinica_plano,\n\tp.name as nome_clinica_plano, \n\tcast(cp.id as varchar) as id_empresa,\n\tto_hex(md5(to_utf8(cast(cp.id as varchar) || 'zk'))) as sk_empresa,\n\tcp.name as nome_empresa,\n\tcase \n\t\twhen vc.active = true \n\t\t\tthen true\n\t\telse false\n\tend as flag_elegibilidade,\n\tnull as status_elegibilidade_cnx,\n\tcast(vc.created_at at time zone 'America/Sao_Paulo' as timestamp) as data_elegibilidade,\n\tdate(vc.created_at at time zone 'America/Sao_Paulo') as data_brt_elegibilidade,\n\tcast(vc.associated_at at time zone 'America/Sao_Paulo' as timestamp) as data_termo_aceite,\n\tdate(vc.associated_at at time zone 'America/Sao_Paulo') as data_brt_termo_aceite,\n\tcast(vc.canceled_at at time zone 'America/Sao_Paulo' as timestamp) as data_cancelado_bloqueado,\n\tdate(vc.canceled_at at time zone 'America/Sao_Paulo') as data_brt_cancelado_bloqueado,\n\tcast(vc.deleted_at at time zone 'America/Sao_Paulo' as timestamp(3) with time zone) as data_deletado,\n\tdate(vc.deleted_at at time zone 'America/Sao_Paulo') as data_brt_deletado,\n\tct.contract_type as tipo_contrato, \n\tcase \n\t\twhen p.activation_code is not null and p.validation_field is not null then concat('https://zenklub.com.br/auth/activation-code/', p.activation_code ,'/', vc.code)\n        when p.activation_code is not null and p.validation_field is null     then concat('https://zenklub.com.br/auth/activation-code/', p.activation_code)\n        else null \n    end as url_ativacao, \n    if(p.dependents_plan_id is not null, true, false) as aceita_dependentes,\n\tcp.company_category as categoria_empresa,\n\tcp.company_size as tamanho_empresa,\n\tcp.industry_group as setor_empresa,\n\tcase\n\t\twhen p.type is null \n\t\t\tthen null\n\t\twhen p.type = 'corporate_subscription'\n\t\t\tthen 'Corporate'\n\t\telse 'Outros'\n\tend as unidade_negocio_clinica_plano,\n\tif(p.active = true,'ATIVA','BLOQUEADA') as status_clinica_plano,\n\tnull as quantidade_vidas_ans_clinica_plano,\n    null as nome_conta_pai_operadoras_clinica_plano,\n\tcase\n\t\twhen upd.dependent_validation_code_id is null\n\t\t\tthen 'TITULAR'\n\t\telse 'DEPENDENTE'\n\tend as titularidade_elegibilidade,\n\tnull as data_ultima_atualizacao,\n\tnull as data_brt_ultima_atualizacao\nfrom zenklub.modelo_2023.dim_validation_code vc\nleft join zenklub.modelo_2023.dim_subscription s on s.validation_code = vc.code\nleft join zenklub.modelo_2023.dim_plan p on p.id = vc.plan_id\nleft join zenklub.modelo_2023.stg_aux_plan_contract pc on pc.plan_id = p.id\nleft join zenklub.modelo_2023.dim_contract ct on ct.id = pc.contract_id\nleft join zenklub.modelo_2023.dim_company cp on cp.id = ct.company_id\nleft join zenklub.modelo_2023.dim_customer dc on dc.sk = s.dim_customer_sk\nleft join zenklub.dump.user_plan_dependents as upd on vc.code = upd.dependent_validation_code_id\n\n\t\tunion all\nselect \n    'Psicologia Viva' AS plataforma,\n\tcast(id_paciente AS varchar) id_paciente,\n\tnull as validation_code,\n\tupper(nome_paciente) AS nome_paciente,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    cast(c.id_clinica as varchar) as id_clinica_plano,\n    c.sk_clinica as sk_clinica_plano,\n    c.nome_clinica as nome_clinica_plano,\n    c.id_cliente_autoritativa as id_empresa,\n    to_hex(md5(to_utf8(c.id_cliente_autoritativa || 'pvv'))) as sk_empresa,\n    c.nome_cliente_autoritativa as nome_empresa,\n\tcase \n\t\twhen p.flag_ativo = true \n\t\t\tthen true\n\t\telse false\n\tend as flag_elegibilidade,\n\tnull as status_elegibilidade_cnx,\n\tcase\n\t\twhen p.data_status is not null and p.flag_ativo = true\n\t\t\tthen p.data_status\n\t\twhen p.data_status_anterior is not null and p.flag_ativo = false\n\t\t\tthen p.data_status_anterior\n\t\telse p.data_do_cadastro \n\tend as data_elegibilidade,\n\tcase\n\t\twhen p.data_brt_status is not null and p.flag_ativo = true\n\t\t\tthen p.data_brt_status\n\t\twhen p.data_brt_status_anterior is not null and p.flag_ativo = false\n\t\t\tthen p.data_brt_status_anterior\n\t\telse p.data_brt_do_cadastro \n\tend as data_brt_elegibilidade,\n    p.data_termo_aceite2 as data_termo_aceite,\n\tp.data_brt_termo_aceite2 as data_brt_termo_aceite,\n\tcase\n\t\twhen p.flag_ativo = false\n\t\t\tthen p.data_status\n\t\twhen p.flag_ativo is null \n\t\t\tthen p.data_do_cadastro\n\t\twhen p.flag_ativo = true\n\t\t\tthen cast(null as timestamp) \n\tend as data_cancelado_bloqueado,\n\tcase\n\t\twhen p.flag_ativo = false\n\t\t\tthen p.data_brt_status\n\t\twhen p.flag_ativo is null \n\t\t\tthen p.data_brt_do_cadastro\n\t\twhen p.flag_ativo = true\n\t\t\tthen date(null) \n\tend as data_brt_cancelado_bloqueado,\n\tcast(null as timestamp) as data_deletado,\n\tdate(null) as data_brt_deletado,\n    c.tipo_contrato, \n    c.landing_page as url_ativacao,\n    flag_permite_consulta_dependente as aceita_dependentes,\n\tc.categoria_cliente_autoritativa as categoria_empresa, \n\tco.range_vidas as tamanho_empresa, \n\tco.setor as setor_empresa,\n\tp.unidade_negocio_autoritativa as unidade_negocio_clinica_plano,\n\tc.status as status_clinica_plano,\n\tc.quantidade_vidas_ans_autoritativa as quantidade_vidas_ans_clinica_plano,\n    c.nome_conta_pai_operadoras_autoritativa as nome_conta_pai_operadoras_clinica_plano,\n\tcase\n\t\twhen p.id_paciente_titular is null\n\t\t\tthen 'TITULAR'\n\t\telse 'DEPENDENTE'\n\tend as titularidade_elegibilidade,\n\tdata_ultima_alteracao as data_ultima_atualizacao,\n    data_brt_ultima_alteracao as data_brt_ultima_atualizacao\nfrom \"delta\".\"silver\".\"pvv_dim_paciente\"  as p\ninner join \"delta\".\"gold\".\"clinicas\" as c on c.id_clinica = p.id_convenio  and source = 'Psicologia Viva'\nleft join \"delta\".\"silver\".\"hs_dim_clinicas\" as cl on cl.id_clinica = p.id_convenio and plataforma = 'Psicologia Viva'\nleft join \"delta\".\"silver\".\"hs_dim_companies\" as co on co.id_company_hubspot = cl.id_company_hubspot \n\nunion all\n\nselect \n    'Conexa' AS plataforma,  \n\tCAST(id_paciente AS varchar) id_paciente,\n\tnull as validation_code,\n\tupper(nome_paciente) AS nome_paciente,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,\n    cast(c.id_clinica as varchar) as id_clinica_plano,\n    c.sk_clinica as sk_clinica_plano,\n    c.nome_clinica as nome_clinica_plano,\n    c.id_cliente_autoritativa as id_empresa,\n    to_hex(md5(to_utf8(c.id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n    c.nome_cliente_autoritativa as nome_empresa,\n\tcase\n\t\twhen status_paciente <> 'BLOQUEADO'\n\t\t\tthen true\n\t\telse false\n\tend as flag_elegibilidade,\n\tstatus_paciente as status_elegibilidade_cnx,\n\tcase\n\t\twhen status_paciente <> 'BLOQUEADO'\n\t\t\tthen data_cadastro\n\t\telse null\n    end as data_elegibilidade,\n\tcase\n\t\twhen status_paciente <> 'BLOQUEADO'\n\t\t\tthen data_brt_cadastro\n\t\telse null\n    end as data_brt_elegibilidade,\n\tcdp.data_hora_termo_aceito as data_termo_aceite,\n    cdp.data_brt_termo_aceito as data_brt_termo_aceite,\n\tcdp.data_hora_bloqueio as data_cancelado_bloqueado,\n\tcdp.data_brt_bloqueio as data_brt_cancelado_bloqueado,\n\tcast(null as timestamp) as data_deletado,\n\tdate(null) as data_brt_deletado,\n    c.tipo_contrato, \n    c.landing_page as url_ativacao,\n    flag_permite_consulta_dependente as aceita_dependentes,\n\tc.categoria_cliente_autoritativa as categoria_empresa, \n\trange_vidas as tamanho_empresa, \n\tco.setor as setor_empresa,\n\tc.unidade_negocio as unidade_negocio_clinica_plano,\n\tc.status as status_clinica_plano,\n\tc.quantidade_vidas_ans_autoritativa as quantidade_vidas_ans_clinica_plano,\n    c.nome_conta_pai_operadoras_autoritativa as nome_conta_pai_operadoras_clinica_plano,\n\tcdp.tipo_paciente as titularidade_elegibilidade,\n\tcdp.data_hora_ultima_atualizacao as data_ultima_atualizacao,\n    cdp.data_brt_ultima_atualizacao\nfrom \"delta\".\"silver\".\"cnx_dim_paciente\" as cdp\ninner join \"delta\".\"gold\".\"clinicas\" as c on c.id_clinica = cdp.id_clinica and source = 'Conexa'\nleft join \"delta\".\"silver\".\"hs_dim_clinicas\" sf on c.id_clinica = sf.id_clinica and sf.plataforma = 'Conexa'\nleft join \"delta\".\"silver\".\"hs_dim_companies\" as co on co.id_company_hubspot = sf.id_company_hubspot \n),\nt2 as(\nselect \n    *,\n    lower(to_hex(md5(to_utf8(cast(coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(validation_code as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(flag_elegibilidade as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(status_elegibilidade_cnx as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_elegibilidade as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_elegibilidade as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_termo_aceite as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_termo_aceite as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_cancelado_bloqueado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_cancelado_bloqueado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_deletado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_deletado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo_contrato as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(url_ativacao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(aceita_dependentes as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(categoria_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tamanho_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(setor_empresa as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t1 \n),\nprincipal as(\nselect \n    t2.*,\n    row_number() OVER (partition by sk_teste) as ranking\nfrom t2\n)\nselect *\nfrom principal\nwhere ranking = 1", "relation_name": "\"delta\".\"gold\".\"stg_elegibilidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:31.510433Z", "completed_at": "2025-07-01T18:32:31.539565Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:31.563480Z", "completed_at": "2025-07-01T18:32:31.563480Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09760904312133789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pacientes", "compiled": true, "compiled_code": "\n\nwith dim_customer as (\nselect \n\tid,\n\tdisplay_name,\n\tgender,\n\tbirthdate,\n\tfiscal_id,\n\tage,\n\tstate,\n\tcity,\n\taddress,\n\tcountry,\n\temail,\n\tphone_number,\n\tcreated_at\nfrom zenklub.modelo_2023.dim_customer\n),\ndim_subscription as (\nselect \n\tcustomer_id,\n    created_at\nfrom zenklub.modelo_2023.dim_subscription\n),\nactive_subscription as (\nselect customer_id \nfrom zenklub.modelo_2023.dim_subscription \nwhere status in ('active', 'past_due')\n)\nselect distinct\n\tto_hex(md5(to_utf8(c.id || 'zk'))) as sk_paciente,\n    c.id as id_paciente,\n    case \n\t    when (c.gender in ('Masc')) then 'Masculino' \n\t    when (c.gender in ('Fem')) then 'Feminino' \n\t    when (c.gender in ('Indefinido')) then 'N\u00e3o informado' \n\t    else 'Outro' \n\tend as sexo_paciente,\n    --cast(null as bigint) as id_clinica_empresa,\n    c.display_name as nome_paciente,\n    cast(c.birthdate as date) as data_nascimento_paciente,\n    replace(translate(c.fiscal_id, '-.', ''), ' ', '') cpf_paciente,\n    c.age as idade_paciente,\n    case\n\t\twhen sa.customer_id is not null then true \n\t\telse false\n\tend as flag_ativo,\n    c.state as estado_paciente,\n    c.city as cidade_paciente,\n    c.address as endereco_paciente,\n    c.country as pais_paciente,\n    c.email as email_paciente,\n\tc.phone_number as celular_paciente,\n\tcast(c.created_at at time zone 'America/Sao_Paulo' as timestamp) as data_cadastro_paciente,\n\tdate(c.created_at at time zone 'America/Sao_Paulo') as data_brt_cadastro_paciente,\n    case \n\t    when sa.customer_id is not null then true \n\t    else false \n\tend as termo_aceito,\n\tnull as cargo_paciente,\n\tnull as departamento_paciente,\n    'Zenklub' AS plataforma\nfrom dim_customer as c\nleft join dim_subscription as s on s.customer_id = c.id\nleft join active_subscription as sa on sa.customer_id = c.id\n\nunion all\n\nselect \n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n\tCAST(id_paciente AS varchar) id_paciente,\n\tsexo as sexo_paciente,\n\tupper(nome_paciente) AS nome_paciente,\n\tdata_nascimento as data_nascimento_paciente, \n    if(cpf = '',NULL,if(regexp_position(replace(replace(cpf, '-'), '.'), '[^0-9]') = -1, lpad(replace(replace(cpf, '-'), '.'), 11, '0'), NULL)) AS cpf_paciente, \n\tidade as idade_paciente,\n    flag_ativo, \n\testado as estado_paciente,  \n\tupper(cidade) as cidade_paciente, \n\tendereco as endereco_paciente, \n\tpais as pais_paciente, \n\temail_notificacao as email_paciente,  \n\tcelular as celular_paciente, \n\tdata_do_cadastro as data_cadastro_paciente, \n\tdata_brt_do_cadastro as data_brt_cadastro_paciente,\n    termo_aceite,\n\tcargo as cargo_paciente,\n\tdepartamento as departamento_paciente,\n    'Psicologia Viva' AS plataforma\nfrom \"delta\".\"silver\".\"pvv_dim_paciente\"  \n\nunion all\n\nselect \n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,  \n\tCAST(id_paciente AS varchar) id_paciente,\n\tsexo_paciente,\n\tupper(nome_paciente) AS nome_paciente,\n\tdata_nascimento_paciente, \n    if(cpf_paciente = '',NULL,lpad(cpf_paciente, 11, '0')) AS cpf_paciente, \n\tidade as idade_paciente,\n    flag_ativo, \n\tuf_paciente as estado_paciente,  \n\tupper(cidade_paciente) as cidade_paciente, \n\tendereco_paciente, \n\tpais as pais_paciente, \n\temail_paciente,  \n\ttelefone_cel as celular_paciente, \n\tdata_cadastro as data_cadastro_paciente, \n\tdata_brt_cadastro as data_brt_cadastro_paciente,\n    flag_termo_aceito as termo_aceito,\n\tnome_cargo_backoffice as cargo_paciente,\n\tnome_departamento_backoffice as departamento_paciente,\n    'Conexa' AS plataforma\nfrom \"delta\".\"silver\".\"cnx_dim_paciente\"", "relation_name": "\"delta\".\"gold\".\"stg_pacientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:31.658717Z", "completed_at": "2025-07-01T18:32:31.687023Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:31.712150Z", "completed_at": "2025-07-01T18:32:31.712150Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09948062896728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_srq20", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect\n\tmpt._id as id_srq,\n\tmpt.token,\n\tfrom_iso8601_timestamp(mpt.data_inclusao) as data_inclusao,\n\tdate(substr(mpt.data_inclusao,1,10)) as data_brt_inclusao,\n\tfrom_iso8601_timestamp(mpt.data_ult_alteracao) as data_ultima_alteracao,\n\tdate(substr(mpt.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n\tmpt.event_id,\n\tmpt.type as type1,\n\tcast(mpt.value as bigint) as id_paciente,\n\tmpt.title,\n\tfrom_iso8601_timestamp(mpt.landed_at) as landed_at,\n\tfrom_iso8601_timestamp(mpt.submitted_at) as submitted_at,\n\tmpt.calculated,\n\tt2.*\nfrom \"delta\".\"bronze\".\"stg_mongo_pvv_typeform\" as mpt\ncross join unnest (answers)t2\nwhere form_id = 'EvF2GS4X' \n)\nselect \n\tt1.id_srq,\n\tt1.data_inclusao,\n\tt1.data_brt_inclusao,\n\tt1.data_ultima_alteracao,\n\tt1.data_brt_ultima_alteracao, \n\tpac.id_paciente, \n\tpac.id_convenio,\n\tpac.nome_convenio,\n\tpac.nome_paciente,\n\tpac.sexo as sexo_paciente,\n\tpac.faixa_etaria as faixa_etaria_paciente,\n\tpac.estado as estado_paciente, \n\tt1.boolean as resposta,\n\tcase \n\t\twhen t1.boolean = true then 1\n\t\twhen t1.boolean = false then 0\n\t\telse null\n\tend pontuacao\nfrom t1\ninner join \"delta\".\"silver\".\"pvv_dim_paciente\" as pac on pac.id_paciente = t1.id_paciente", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_srq20\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:31.807703Z", "completed_at": "2025-07-01T18:32:31.817179Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:31.845061Z", "completed_at": "2025-07-01T18:32:31.845061Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08607602119445801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.pvv_snp_paciente", "compiled": true, "compiled_code": "\n\n\n\nselect \n\tid_paciente, \n    nome_paciente, \n    email_paciente, \n    email_notificacao, \n    endereco, \n    estado, \n    estado_civil, \n    cep, \n    cidade, \n    codigo_pais_celular, \n    codigo_pais_pessoa_contato, \n    codigo_pais_telefone, \n    codigo_pais_telefone_responsavel, \n    cpf, \n    celular, \n    idioma, \n    login_perfil, \n    login_titular, \n    nacionalidade, \n    pais, \n    pais_atuacao, \n    profissao, \n    documento, \n    documento_verso, \n    relacao_pessoa_contato, \n    status_convenio, \n    telefone, \n    telefone_pessoa_contato, \n    telefone_responsavel, \n    termo_aceite2, \n    carteira_abertta_saude, \n    carteira_care_plus, \n    carteira_porto_seguro, \n    carteirinha_convenio, \n    nome_empresa, \n    nome_empresa_interna, \n    nome_responsavel, \n    idade, \n    departamento, \n    cargo, \n    origem, \n    sexo, \n    data_inclusao, \n    data_liberacao_encaminhamento_medico, \n    data_nascimento, \n    data_termo_aceite2, \n    data_ultima_alteracao, \n    departamento_cliente_empresa, \n    id_convenio, \n    carteira_unimed, \n    plano_saude, \n    id_empresa_subsidiaria, \n    id_encaminhamento_medico, \n    id_externo_conexa, \n    id_paciente_titular, \n    id_profissional_vinculado, \n    id_seguranca_usuario, \n    termo_aceite, \n    valida_cadastro, \n    termo_autorizacao_enviado, \n    termo_autorizacao_menor_idade, \n    time_zone, \n    tipo_usuario_convenio, \n    usuario_ultima_alteracao, \n    emitted_at, \n    is_delete, \n    updated_at, \n    flag_completou_cadastro, \n    nome_convenio, \n    empresa, \n    faixa_etaria, \n    faixa_etaria2, \n    is_menor_de_idade, \n    tipo_convenio, \n    data_do_cadastro, \n    flag_ativo, \n    data_status\nfrom \"delta\".\"silver\".\"pvv_dim_paciente\" as p\n", "relation_name": "\"delta\".\"silver\".\"pvv_snp_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:31.946847Z", "completed_at": "2025-07-01T18:32:31.952411Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:31.978320Z", "completed_at": "2025-07-01T18:32:31.978320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08255624771118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.pvv_snp_status_paciente", "compiled": true, "compiled_code": "\n\n\n\nselect \n\tp.id_paciente,\n      p.id_convenio,\n      p.status_convenio,\n      p.data_ultima_alteracao\nfrom \"delta\".\"silver\".\"pvv_dim_paciente\" as p\n", "relation_name": "\"delta\".\"silver\".\"pvv_snp_status_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:32.091142Z", "completed_at": "2025-07-01T18:32:32.096142Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:32.120209Z", "completed_at": "2025-07-01T18:32:32.120209Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08104848861694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.cnx_snp_tratamento_psicologia", "compiled": true, "compiled_code": "\n\n\n\n\nselect \n\tid_tratamento,\n\tid_paciente,\n\tid_clinica,\n\tnome_clinica,\n\tid_profissional,\n\tstatus_tratamento,\n\tplano_sugerido,\n\tevolucao_plano_sugerido,\n\tplano_sugerido_proximo,\n\tn_sessoes_sugerido,\n\tn_sessoes_realizadas,\n\tn_sessoes_psiquiatria,\n\tlista_atendimento,\n\tetapa_tratamento,\n\tprimeiro_atendimento,\n\tultimo_atendimento,\n\tlista_cid10,\n\tlista_descricao_cid10,\n\tid_profissional_concluido,\n\tdata_conclusao,\n\tdata_hora_insert,\n\tdata_hora_ultima_atualizacao \nfrom \"delta\".\"silver\".\"cnx_fact_tratamento\"\n\n", "relation_name": "\"delta\".\"silver\".\"cnx_snp_tratamento_psicologia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:32.212958Z", "completed_at": "2025-07-01T18:32:32.243885Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:32.271610Z", "completed_at": "2025-07-01T18:32:32.271610Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10346412658691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.kns_fact_ligacoes", "compiled": true, "compiled_code": "\n\nwith union_calls as (\n\tselect \n\t\tcpf,\n\t\tmax_by(tipo_contato,nivel_call) as tipo_contato,\n\t\tmax_by(clco_tabulacao_1, nivel_call) as clco_tabulacao_1,\n\t\tmax_by(clco_tabulacao_2, nivel_call) as clco_tabulacao_2,\n\t\tmax_by(data_e_hora_tentativa, nivel_call) as data_e_hora_tentativa,\n\t\tmin(data_e_hora_tentativa) as data_primeira_abordagem,\n\t\tmax_by(telefone_discado, nivel_call) as telefone,\n\t\tmax_by(id_clinica, nivel_call) as id_clinica,\n\t\tmax_by(nome_clinica, nivel_call) as nome_clinica,\n\t\tcount(*) filter (where nivel_call >= 50) as tentativas,\n\t\tcount(*) as tentativas_gerais,\n\t\t'Discadora' as fonte\n\tfrom \"delta\".\"silver\".\"kns_fact_discadora\" dsc\n\tgroup by 1\n\tunion all\n\tselect \n\t\tcpf_paciente as cpf,\n\t\ttipo_contato,\n\t\ttabulacao_n1,\n\t\ttabulacao_n2,\n\t\twhat_dt_inclusao,\n\t\tdata_primeira_mensagem,\n\t\twhat_telefone,\n\t\tid_clinica,\n\t\tnome_clinica,\n\t\t1 as tentativas,\n\t\t1 as tentativas_gerais,\n\t\t'Whatsapp' as fonte\n\tfrom \"delta\".\"silver\".\"kns_fact_whatsapp\" \n),\nt1 as (\n\tselect \n\t\tcpf,\n\t\ttipo_contato,\n\t\tcase\n\t\t\twhen clco_tabulacao_1 = 'ACEITE' then 100\n\t\t\twhen clco_tabulacao_1 = 'RECUSA' then 50\n\t\t\twhen clco_tabulacao_1 in ('N\u00c3O \u00c9 ELEG\u00cdVEL', 'N\u00c3O ELEG\u00cdVEL') then 51\n\t\t\twhen clco_tabulacao_1 = 'RETORNAR' then 30\n\t\t\twhen clco_tabulacao_1 = 'TELEFONIA' then 1\n\t\tend nivel_tab,\n\t\tclco_tabulacao_1,\n\t\tclco_tabulacao_2,\n\t\tdata_e_hora_tentativa,\n\t\tdata_primeira_abordagem,\n\t\ttelefone,\n\t\tid_clinica,\n\t\tnome_clinica,\n\t\ttentativas,\n\t\ttentativas_gerais,\n\t\tfonte\n\tfrom union_calls\n)\nselect\n\tcpf,\n\tmax_by(tipo_contato, nivel_tab) as tipo_contato,\n\tmax_by(clco_tabulacao_1, nivel_tab) as  nivel1,\n\tmax_by(clco_tabulacao_2, nivel_tab) as  nivel2,\n\tcast(max_by(data_e_hora_tentativa, nivel_tab) as date) as  data_e_hora_tentativa,\n\tcast(min(data_primeira_abordagem) as date) as data_primeira_abordagem,\n\tmax_by(telefone, nivel_tab) as  telefone,\n\tmax_by(id_clinica, nivel_tab) as  id_clinica,\n\tmax_by(nome_clinica, nivel_tab) as nome_clinica,\n\tsum(tentativas) as n_calls,\n\tsum(tentativas_gerais) as n_calls_gerais,\n\tmax_by(fonte, nivel_tab) as fonte\nfrom t1\ngroup by 1", "relation_name": "\"delta\".\"silver\".\"kns_fact_ligacoes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:32.388892Z", "completed_at": "2025-07-01T18:32:32.592816Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:32.634770Z", "completed_at": "2025-07-01T18:32:32.634770Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3101978302001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_column_values_to_be_unique_lina_dim_paciente_id_paciente__id_paciente_is_not_null.f7bc307a58", "compiled": true, "compiled_code": "\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_paciente,\n        count(*) as \"n_records\"\n    from \"delta\".\"silver\".\"lina_dim_paciente\"\n    where\n        1=1\n        and \n    id_paciente is not null and\n    \n    not (\n        id_paciente is null\n        \n    )\n\n\n    \n    group by\n        id_paciente\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:32.792735Z", "completed_at": "2025-07-01T18:32:32.830160Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:32.851477Z", "completed_at": "2025-07-01T18:32:32.851477Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10007143020629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_column_values_to_not_be_null_lina_dim_paciente_condicoes_de_saude_do_beneficiario.d5b7f51155", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  condicoes_de_saude_do_beneficiario is not null as expression\n\n\n    from \"delta\".\"silver\".\"lina_dim_paciente\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:32.950703Z", "completed_at": "2025-07-01T18:32:32.987363Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:33.009306Z", "completed_at": "2025-07-01T18:32:33.010308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11975312232971191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_column_values_to_not_be_null_lina_dim_paciente_id_paciente__id_paciente_is_not_null.d08ae4b3a3", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  id_paciente is not null as expression\n\n\n    from \"delta\".\"silver\".\"lina_dim_paciente\"\n    where\n        id_paciente is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:33.132124Z", "completed_at": "2025-07-01T18:32:33.174562Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:33.207110Z", "completed_at": "2025-07-01T18:32:33.207110Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14390969276428223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_expectations_expect_row_values_to_have_recent_data_lina_dim_paciente_execution_time__day__5.8965ffacd2", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(execution_time as timestamp(3))) as max_timestamp\n    from\n        \"delta\".\"silver\".\"lina_dim_paciente\"\n    where\n        -- to exclude erroneous future dates\n        cast(execution_time as timestamp(3)) <= cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp(3)))\n        <\n        cast(date_add('day', -5, cast((at_timezone(with_timezone(cast(current_timestamp as timestamp), 'UTC'), 'America/Sao_Paulo')) as timestamp)) as timestamp(3))\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:33.334900Z", "completed_at": "2025-07-01T18:32:33.401922Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:33.434101Z", "completed_at": "2025-07-01T18:32:33.434101Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16565155982971191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_atendimento", "compiled": true, "compiled_code": "\n\nwith prescricao AS (\n    SELECT\n        id_atendimento, \n        array_agg(nome_prescricao order by id_prescricao_item) filter (where tipo_prescricao = 'exame' and nome_prescricao is not null) as lista_exame,\n        array_agg(nome_prescricao order by id_prescricao_item) filter (where tipo_prescricao = 'custom' and nome_prescricao is not null) as lista_custom,\n        --array_agg(nome_prescricao order by id_prescricao_item) filter (where tipo_prescricao = 'atestado' and nome_prescricao is not null) as lista_atestado,\n        array_agg(nome_prescricao order by id_prescricao_item) filter (where tipo_prescricao = 'medicamento' and nome_prescricao is not null) as lista_medicamento\n    FROM \"delta\".\"silver\".\"cnx_fact_prescricao\" p\n    GROUP BY id_atendimento\n),\nprontuario_sm as (\n    select\n        id_paciente,\n        id_profissional,\n        array_agg(codigo_cid10 order by id_prontuario desc) as lista_codigo_cid10,\n        array_agg(descricao_cid10 order by id_prontuario desc) as lista_descricao_cid10,\n        array_agg(titulo_cid order by id_prontuario desc) as lista_grupo_titulo_cid10\n    FROM \"delta\".\"silver\".\"cnx_fact_prontuario_sm\" p\n    GROUP BY id_paciente,id_profissional\n),\nfact as (\n    SELECT\n        a.id_atendimento,\n        a.id_atendimento_pv,\n        a.id_clinica,\n        cl.nome_clinica,\n        cl.produto_clinica,\n        cl.unidade_negocio_autoritativa,\n        a.id_paciente,\n        to_hex(md5(to_utf8(cast(a.id_paciente as varchar) || 'cnx'))) as sk_paciente,\n        pa.id_usuario as id_usuario_paciente,\n        p.id_profissional,\n        p.nome_profissional,\n        p.tipo_conselho,\n        p.numero_conselho,\n        p.flag_profissional_pv as flag_atendimento_profissional_pv,\n        CASE \n            WHEN\n                a.modo_atendimento = 'IMEDIATO' and p.tipo_conselho != 'CRP' THEN 'Cl\u00ednica Geral'\n            ELSE p.nome_especialidade\n        END nome_especialidade,\n        case \n            when p.tipo_conselho = 'CRN' then 'Nutri\u00e7\u00e3o' \n            when p.tipo_conselho = 'CRM' and a.modo_atendimento = 'IMEDIATO' then 'PA'\n            when p.tipo_conselho = 'CRP' and a.modo_atendimento = 'IMEDIATO' then 'PA Psicologia'\n            when p.tipo_conselho = 'CRM' and a.modo_atendimento is null and nome_especialidade = 'Cl\u00ednica Geral' then 'PA'\n            when p.tipo_conselho = 'CRM' and a.modo_atendimento = 'AGENDADO' then 'Especialidades'\n            when p.tipo_conselho = 'CRO' and p.nome_especialidade = 'Dermatologia' and a.modo_atendimento = 'AGENDADO' then 'Especialidades'\n            when p.tipo_conselho = 'CRM' and a.modo_atendimento is null and nome_especialidade != 'Cl\u00ednica Geral' then 'Especialidades'\n            when (p.tipo_conselho = 'CRP' or id_atendimento_pv is not null) then 'Psicologia'\n            when p.tipo_conselho in ('CRO', 'CREFITO', 'CREF', 'CFESS', 'CONTER', 'CFBM', 'HC', 'CREFONO') then 'Outras Terapias'\n            when p.tipo_conselho = 'COREN' or p.nome_especialidade = 'Medicina de Fam\u00edlia e Comunidade' then 'APS'\n        end as produto,\n        pa.nome_paciente,\n        pa.sexo_paciente,\n        pa.cpf_paciente,\n        pa.email_paciente,\n        pa.idade as idade_paciente,\n        pa.tipo_paciente,\n        pa.uf_paciente,\n        pa.flag_aps,\n        a.data_agendamento,\n        a.data_brt_agendamento,\n        a.data_inicio_atendimento,\n        a.data_brt_inicio_atendimento,\n        case\n            when a.status_atendimento = 'Realizado' and ch.data_inicio_chamada is not null\n                then ch.data_inicio_chamada\n            else a.data_atendimento\n        end as data_atendimento,\n        case\n            when a.status_atendimento = 'Realizado' and ch.data_brt_inicio_chamada is not null\n                then ch.data_brt_inicio_chamada\n            else a.data_brt_atendimento\n        end as data_brt_atendimento,\n        a.data_atendimento as data_agendado_para,\n        a.data_brt_atendimento as data_brt_agendado_para,\n        a.data_cancelamento,\n        a.data_brt_cancelamento,\n        a.data_conclusao,\n        a.data_brt_conclusao,\n        a.data_solicitacao_parecer,\n        a.data_brt_solicitacao_parecer,\n        a.id_convenio,\n        a.status,\n        if(a.status_atendimento = 'Pendente' and ch.data_inicio_chamada is not null and ch.status_paciente = 'RESPONDIDA' and ch.status_profissional = 'RESPONDIDA' and (p.tipo_conselho = 'CRP' or id_atendimento_pv is not null),'Realizado',a.status_atendimento) as status_atendimento,\n        if(a.status_atendimento = 'Pendente' and ch.data_inicio_chamada is not null and ch.status_paciente = 'RESPONDIDA' and ch.status_profissional = 'RESPONDIDA' and (p.tipo_conselho = 'CRP' or id_atendimento_pv is not null),true,false) as flag_ajuste_status_psi,\n        a.flag_noshow,\n        CASE\n            WHEN a.desfecho = 'PACIENTE_FALTOU' and ch.tempo_entrada_profissional_minutos > 15\n                THEN true \n            ELSE false\n        end as flag_delay_profissional,\n        ch.tempo_entrada_profissional_minutos,\n        res.status_confirmacao_reserva,\n        res.data_hora_confirmacao_reserva,\n        res.data_brt_confirmacao_reserva,\n        a.desfecho,\n        a.categoria_cancelamento,\n        a.tipo_chamada_desejado,\n        a.flag_atendimento_medico_paciente,\n        a.formato_consulta,\n        a.origem_fila,\n        a.fila_min,\n        a.sla_fila,\n        a.id_fila,\n        a.data_entrada_fila,\n        a.data_brt_entrada_fila,\n        ch.data_hora_criacao_chamada,\n        ch.data_chamada as data_agendamento_chamada,\n        ch.data_inicio_chamada,\n        ch.data_brt_inicio_chamada,\n        ch.data_fim_chamada,\n        ch.data_brt_fim_chamada,\n        ch.tempo_total_chamada as tempo_total_chamada_segundos,\n        ch.tempo_total_chamada/60 as tempo_total_chamada_minutos,\n        date_diff('SECOND', ch.data_inicio_chamada, a.data_conclusao) as tempo_total_atendimento_segundos,\n        date_diff('MINUTE', ch.data_inicio_chamada, a.data_conclusao) as tempo_total_atendimento_minutos,\n        ch.tipo_servico_meeting,\n        ch.detalhes_videochamada_paciente,\n        ch.detalhes_videochamada_profissional,\n        a.id_usuario_cancelamento,\n        u_cancelamento.tipo_perfil_usuario as tipo_perfil_usuario_cancelamento,\n        u_cancelamento.nome_usuario as nome_usuario_cancelamento,\n        a.motivo_atendimento_interrompido,\n        CASE\n            WHEN a.motivo_cancelamento is not null\n                then a.motivo_cancelamento\n            when a.motivo_cancelamento is null and ca.motivo_cancelamento is not null \n                then ca.motivo_cancelamento\n            else null\n        end as motivo_cancelamento,\n        if(can.classificacao_cancelamento is not null, true, false) as flag_classificacao_cancelamento_llm,\n        can.classificacao_cancelamento as classificacao_cancelamento_llm,\n        can.data_hora_classificacao_cancelamento,\n        can.modelo_utilizado_llm as modelo_utilizado_llm_classificacao_cancelamento,\n        a.objetivo_atendimento,\n        --presc.lista_atestado,\n        presc.lista_custom,\n        presc.lista_exame,\n        presc.lista_medicamento,\n        ciap2.lista_codigo_ciap2,\n        ciap2.lista_descricao_ciap2,\n        case\n            when (p.tipo_conselho = 'CRP' or id_atendimento_pv is not null)\n                then psm.lista_codigo_cid10\n            else cid.lista_codigo_cid10\n        end as lista_codigo_cid10,\n        case\n            when (p.tipo_conselho = 'CRP' or id_atendimento_pv is not null)\n                then psm.lista_descricao_cid10\n            else cid.lista_descricao_cid10\n        end as lista_descricao_cid10,\n        case\n            when (p.tipo_conselho = 'CRP' or id_atendimento_pv is not null)\n                then psm.lista_grupo_titulo_cid10\n            else cid.lista_grupo_titulo_cid10\n        end as lista_grupo_titulo_cid10,\n        a.id_epidemia,\n        epi.nome_epidemia,\n        a.epidemia_relato_medico,\n        a.flag_possui_afastamento,\n        a.data_inicio_afastamento,\n        a.data_brt_inicio_afastamento,\n        a.data_fim_afastamento,\n        a.data_brt_fim_afastamento,\n        a.id_convenio_plano,\n        a.carteira_convenio,\n        a.origem_atendimento,\n        a.modo_atendimento,\n        a.usuario_responsavel_criacao as id_usuario_responsavel_criacao,\n        u_criacao.tipo_perfil_usuario as tipo_perfil_usuario_criacao,\n        u_criacao.nome_usuario as nome_usuario_criacao,\n        a.flag_consulta_confirmada,\n        a.data_hora_confirmacao,\n        a.data_brt_confirmacao,\n        a.id_triagem,\n        a.flag_registro_invalidado,\n        am.csat_medico,\n        apl.csat_plataforma,\n        am.nps_medico,\n        apl.nps_plataforma,\n        am.comentarios_avaliacao_medico,\n        apl.comentarios_avaliacao_plataforma,\n        am.itens_avaliados_medico,\n        apl.itens_avaliados_plataforma,\n        a.data_hora_ultima_atualizacao,\n        a.data_brt_ultima_atualizacao,\n        p.flag_profissional_conexa,\n        ep.data_inicio_prescricao,\n        ep.data_fim_prescricao,\n        a.flag_conclusao_robo,\n        a.status_faturamento,\n        pp.id_nfe,\n        pp.flag_nota_gerada,\n        pp.situacao_paciente_pagamento,\n        pp.valor_pago,\n        pp.valor_consulta,\n        pp.valor_custo_operacao,\n        pp.valor_cancelamento,\n        ic.valor_repasse,\n        cast(a.hora_atendimento as int) as hora_atendimento,\n        pc.cupom,\n        pc.flag_gerar_pagamento_profissional,\n        a.historia_doenca_atual,\n        aasc.motivo_avaliacao_sem_chamada,\n        cl.id_cliente_autoritativa,\n        cl.nome_cliente_autoritativa,\n        an.flag_anexo_atendimento,\n        an.qtd_anexo_pre_atendimento,\n        an.qtd_anexo_pos_atendimento,\n        an.qtd_anexos,\n        ic.flag_aps_atendimento,\n        ic.data_hora_invalidacao,\n        ic.data_brt_invalidacao,\n        ic.justificativa_invalidacao,\n        ic.id_usuario_resp_invalidacao,\n        ic.flag_enviado_alerta_24,\n        ic.flag_enviado_alerta_12,\n        ic.data_hora_reagendamento,\n        ic.data_brt_reagendamento,\n        ic.origem_agendamento,\n        re.id_atendimento_origem,\n        CASE \n            WHEN rea.id_atendimento IS NOT NULL THEN true\n            ELSE false\n        END AS flag_atendimento_reagendado,\n        rea.lista_datas_agendamentos_originais,\n        rea.lista_datas_reagendadas,\n        rea.lista_datas_ocorrencia_reagendamentos,\n        case\n            when re.id_atendimento_origem is not null\n                then true\n            else false\n        end as flag_atendimento_encaminhamento,\n        case\n            when pes.id_atendimento IS NOT NULL \n                then true\n            else false\n        END as flag_encaminhado_especialidade,\n        case\n            when pep.id_atendimento IS NOT NULL \n                then true\n            else false\n        END as flag_encaminhado_profissional,\n        a.emitted_at\n    FROM \"delta\".\"bronze\".\"stg_cnx_atendimento\" a\n    LEFT JOIN \"delta\".\"silver\".\"cnx_fact_chamada\" ch on ch.id_atendimento = a.id_atendimento\n    LEFT JOIN \"delta\".\"silver\".\"cnx_dim_clinica\" cl on cl.id_clinica = a.id_clinica\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_atendimento_profissional\" ap on a.id_atendimento = ap.id_atendimento and ap.flag_responsavel = true\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_usuario_profissional\" u on u.id_usuario = ap.id_usuario\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_usuario\" u_criacao on u_criacao.id_usuario = a.usuario_responsavel_criacao\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_usuario\" u_cancelamento on u_cancelamento.id_usuario = a.id_usuario_cancelamento\n    LEFT JOIN \"delta\".\"silver\".\"cnx_dim_profissional\" p on u.id_profissional = p.id_profissional\n    LEFT JOIN \"delta\".\"silver\".\"cnx_dim_paciente\" pa on a.id_paciente = pa.id_paciente\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_medico\" am on a.id_atendimento = am.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_plataforma\" apl on a.id_atendimento = apl.id_atendimento\n    LEFT JOIN \"delta\".\"silver\".\"cnx_dim_ciap2\" ciap2 on a.id_atendimento = ciap2.id_atendimento\n    LEFT JOIN \"delta\".\"silver\".\"cnx_dim_doenca\" cid on a.id_atendimento = cid.id_atendimento\n    LEFT JOIN prescricao presc on a.id_atendimento = presc.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_evento_prescricao\" ep on ep.id_atendimento = a.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_paciente_pagamento\" pp on pp.id_atendimento = a.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_paciente_pagamento_paciente_cupom\" pppc on pppc.id_paciente_pagamento = pp.id_paciente_pagamento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_paciente_cupom\" pc on pc.id_paciente_cupom = pppc.id_paciente_cupom\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_cancelamento\" ca on a.id_atendimento = ca.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_atendimento_avaliacao_sem_chamada\" aasc on a.id_atendimento = aasc.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_atendimento_anexo\" an on a.id_atendimento = an.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_atendimento_informacao_complementar\" ic on a.id_atendimento = ic.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_registro_encaminhamento\" re on a.id_atendimento = re.id_atendimento_encaminhado\n    LEFT JOIN prontuario_sm psm on a.id_paciente = psm.id_paciente and p.id_profissional = psm.id_profissional\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_epidemia\" epi on a.id_epidemia = epi.id_epidemia\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_reagendamento_atendimento\" rea on rea.id_atendimento = a.id_atendimento\n    LEFT JOIN \"delta\".\"bronze\".\"stg_cnx_reserva_consulta\" res on res.id_atendimento = a.id_atendimento\n    LEFT JOIN \"delta\".\"silver\".\"ds_cnx_fact_classificacao_cancelamento\" can on can.id_atendimento = a.id_atendimento\n    left join (\n        select distinct id_atendimento from \"delta\".\"silver\".\"cnx_fact_paciente_encaminhamento_especialidade\"\n    ) pes on pes.id_atendimento = a.id_atendimento\n    left join (\n        select distinct id_atendimento from \"delta\".\"silver\".\"cnx_fact_paciente_encaminhamento_profissional\"\n    ) pep on pep.id_atendimento = a.id_atendimento\n)\n\nSELECT\n    *,\n    case\n\t\twhen data_brt_atendimento in (date'2025-03-22',date'2025-03-23') -- necessidade especifica devido a virada da pv para cnx no dia 22/03/2025, pois esses dias que por regra seriam da fatura de 2025-03 ser\u00e3o pagos pela cnx na fatura de 2025-04\n\t\t\tthen date_format(date_add('month', 1, date_trunc('month', data_brt_atendimento)), '%Y-%m')\n        WHEN day(data_brt_atendimento) >= 24\n            then date_format(date_add('month', 1, date_trunc('month', data_brt_atendimento)), '%Y-%m')\n        ELSE\n            date_format(date_trunc('month', data_brt_atendimento), '%Y-%m')\n    END AS mes_fatura,\n    coalesce(\n        classificacao_cancelamento_llm,\n        CASE\n            WHEN categoria_cancelamento = 'PARTICULAR_FORCA_MAIOR' THEN 'Aus\u00eancia do profissional (No Show ou afastamento)'\n            WHEN categoria_cancelamento = 'PARTICULAR_FORCA_MAIOR_PACIENTE' THEN 'Desist\u00eancia do atendimento pelo paciente'\n            WHEN categoria_cancelamento = 'INCOMPATIBILIDADE_AGENDA' THEN 'Erro de agendamento'\n            WHEN categoria_cancelamento = 'INDISPONIBILIDADE_SISTEMICA_MEDICO' THEN 'Falha sist\u00eamica ou t\u00e9cnica'\n            WHEN categoria_cancelamento = 'INDISPONIBILIDADE_SISTEMICA_PACIENTE' THEN 'Falha sist\u00eamica ou t\u00e9cnica'\n            WHEN categoria_cancelamento = 'INDISPONIBILIDADE_SISTEMICA' THEN 'Falha sist\u00eamica ou t\u00e9cnica'\n            WHEN categoria_cancelamento = 'AFASTAMENTO_TEMPORARIO' THEN 'Aus\u00eancia do profissional (No Show ou afastamento)'\n            WHEN categoria_cancelamento = 'PARTICULAR_FORCA_MAIOR_PROFISSIONAL' THEN 'Aus\u00eancia do profissional (No Show ou afastamento)'\n            WHEN categoria_cancelamento = 'OUTROS' THEN 'Outro motivo n\u00e3o identificado'\n            ELSE categoria_cancelamento\n        END\n    ) AS categoria_cancelamento_enriquecido_llm\nFROM fact", "relation_name": "\"delta\".\"silver\".\"cnx_fact_atendimento\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:33.559629Z", "completed_at": "2025-07-01T18:32:33.614678Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:33.657647Z", "completed_at": "2025-07-01T18:32:33.657647Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15784788131713867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.profissionais", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"delta\".\"gold\".\"stg_profissionais\"", "relation_name": "\"delta\".\"gold\".\"profissionais\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:33.790882Z", "completed_at": "2025-07-01T18:32:33.828864Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:33.882123Z", "completed_at": "2025-07-01T18:32:33.882123Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1572587490081787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.clinicas_planos", "compiled": true, "compiled_code": "\n\nselect \n\tsk_clinica_plano,\n    id_clinica_plano,\n    nome_clinica_plano, \n    data_hora_insert,\n    data_brt_insert,\n    data_hora_bloqueio,\n    data_brt_bloqueio,\n    data_hora_ultima_atualizacao,\n    data_brt_ultima_atualizacao,\n    nome_clinica_sistema,\n    flag_clinica_unificada,\n    email,\n    cnpj,\n    unidade_negocio_clinica_plano,\n    nome_canal_autoritativa,\n    tipo_canal_autoritativa,\n    categoria_cliente_autoritativa,\n    chave_login,\n    flag_triagem,\n    status_clinica_plano,\n    tipo_contrato,\n    flag_permite_consulta_dependente,\n    flag_servico_medico,\n    flag_servico_especialidades,\n    flag_servico_pronto_atendimento,\n    landing_page,\n    id_empresa,\n    sk_empresa,\n    nome_empresa,\n    quantidade_vidas_ans,\n    nome_conta_pai_operadoras,\n    plataforma\nfrom \"delta\".\"gold\".\"stg_clinicas_planos\"", "relation_name": "\"delta\".\"gold\".\"clinicas_planos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:34.015445Z", "completed_at": "2025-07-01T18:32:34.060405Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:34.099955Z", "completed_at": "2025-07-01T18:32:34.099955Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14636635780334473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_view_enhanced_user_profile", "compiled": true, "compiled_code": "\n\nwith atendimento  as(\nselect\n    atd.id_paciente,\n    pac.id_convenio, \n    cast(concat(cast(atd.id_paciente as varchar),cast(pac.id_convenio as varchar))as bigint) as sk_agendamento,\n    min(data_pagamento)   as primeiro_pagamento,\n    min(data_brt_pagamento) as data_brt_primeiro_pagamento,\n    min(data_atendimento) as primeiro_agendamento,\n    min(data_brt_atendimento) as data_brt_primeiro_agendamento,\n    max(data_atendimento) as ultimo_agendamento,\n    max(data_brt_atendimento) as data_brt_ultimo_agendamento, \n    min(data_atendimento) filter (where flag_atendimento = 1 and tipo_profissional = 'Triagem')  as primeira_triagem_realizado,\n    min(data_brt_atendimento) filter (where flag_atendimento = 1 and tipo_profissional = 'Triagem') as data_brt_primeira_triagem_realizado,\n    max(data_atendimento) filter (where flag_atendimento = 1 and tipo_profissional = 'Triagem')  as ultima_triagem_realizado,\n    max(data_brt_atendimento) filter (where flag_atendimento = 1 and tipo_profissional = 'Triagem')  as data_brt_ultima_triagem_realizado,\n    count(id_atendimento) filter (where flag_atendimento = 1 and tipo_profissional = 'Triagem')  as quantidade_triagem,\n    count(id_atendimento) filter (where flag_atendimento = 1 and tipo_profissional <> 'Triagem') as quantidade_atendimento_realizado,\n    max(data_atendimento) filter (where flag_atendimento = 1 and tipo_profissional <> 'Triagem') as ultima_realizado,\n    max(data_brt_atendimento) filter (where flag_atendimento = 1 and tipo_profissional <> 'Triagem') as data_brt_ultima_realizado,\n    min(data_atendimento) filter (where flag_atendimento = 1 and tipo_profissional <> 'Triagem') as primeira_realizado,\n    min(data_brt_atendimento) filter (where flag_atendimento = 1 and tipo_profissional <> 'Triagem') as data_brt_primeira_realizado\nfrom \"delta\".\"silver\".\"pvv_fact_atendimento\" as atd\ninner join \"delta\".\"silver\".\"pvv_dim_paciente\" as pac on pac.id_paciente = atd.id_paciente and pac.id_convenio = atd.id_convenio\ngroup by atd.id_paciente, pac.id_convenio \n),\nt1 as(\nselect \n       tp.id_prontuario,\n       tp.id_paciente,\n       numero_atendimento_prevista,\n       rank() over (partition by tp.id_paciente order by data_ultima_alteracao,tp.id_prontuario desc) as raking \nfrom \"delta\".\"bronze\".\"stg_pvv_prontuario\" as tp\n)\n\nselect pac.id_paciente, \n       pac.flag_ativo,\n       pac.data_do_cadastro,\n       pac.data_brt_do_cadastro,\n       pac.data_status,\n       pac.data_brt_status,\n       pac.termo_aceite,\n       pac.data_termo_aceite2,\n       pac.data_brt_termo_aceite2,\n       pac.origem,\n       pac.id_convenio,\n       pac.nome_convenio,\n       pac.tipo_convenio,\n       conv.flag_paciente_pagante,\n       conv.flag_convenio_conexa,\n       pac.primeiro_acesso,\n       pac.data_brt_primeiro_acesso,\n       tp.status_tratamento,\n       tp.data_inicio_tratamento, \n       prt.numero_atendimento_prevista,\n\tatd.primeiro_pagamento,\n       atd.data_brt_primeiro_pagamento,\n\tatd.primeiro_agendamento,\n       atd.data_brt_primeiro_agendamento,\n\tatd.ultimo_agendamento,\n       atd.data_brt_ultimo_agendamento,\n       atd.primeira_realizado,\n       atd.data_brt_primeira_realizado,\n       atd.ultima_realizado,\n       atd.data_brt_ultima_realizado,\n       atd.quantidade_atendimento_realizado,\n       atd.primeira_triagem_realizado,\n       atd.data_brt_primeira_triagem_realizado,\n       atd.ultima_triagem_realizado,\n       atd.data_brt_ultima_triagem_realizado,\n       atd.quantidade_triagem,\n       date_diff('day',atd.ultimo_agendamento,date_add('day', -1, current_date)) as dias_sem_agendar,\n       date_diff('day',atd.ultima_realizado,date_add('day', -1, current_date)) as dias_sem_realizar,\n       case \n            when atd.ultima_realizado is null then 'Sem Consulta'\n            when tp.status_tratamento = 'Alta' then 'Inativo Alta'\n            when tp.status_tratamento in('Abandono','Interrup\u00e7\u00e3o') then 'Inativo Abandono'\n            when tp.status_tratamento = 'Encaminhamento' then 'Encaminhamento'\n            when tp.status_tratamento = 'Outros' then 'Outros'\n            when date_diff('day',atd.ultima_realizado,date_add('day', -1, current_date)) > 60 and prt.numero_atendimento_prevista is null then 'Inativo Abandono'\n            when date_diff('day',atd.ultima_realizado,date_add('day', -1, current_date)) > 60 and atd.quantidade_atendimento_realizado >= prt.numero_atendimento_prevista then 'Inativo Alta'\n            when date_diff('day',atd.ultima_realizado,date_add('day', -1, current_date)) > 60 then 'Inativo Abandono' \n            when date_diff('day',atd.ultima_realizado,date_add('day', -1, current_date)) <= 60 then 'Ativo' \n            when tp.status_tratamento = 'Em tratamento' then 'Ativo' \n            else 'Checar' \n       end ativo_convenio\nfrom \"delta\".\"silver\".\"pvv_dim_paciente\" as pac\ninner join \"delta\".\"silver\".\"pvv_dim_convenio\" as conv on conv.id_convenio = pac.id_convenio\nleft join atendimento as atd on atd.id_paciente = pac.id_paciente\nleft join  t1 as prt on prt.id_paciente = pac.id_paciente\nleft join \"delta\".\"bronze\".\"stg_pvv_tratamento_prontuario\" as tp on tp.id_prontuario = prt.id_prontuario\nwhere (prt.raking = 1 or prt.raking is null)", "relation_name": "\"delta\".\"silver\".\"pvv_view_enhanced_user_profile\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:34.255873Z", "completed_at": "2025-07-01T18:32:34.295624Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:34.335707Z", "completed_at": "2025-07-01T18:32:34.335707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15689635276794434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_dsm5_n1", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect\n\tmpt._id as id_dsm,\n\tmpt.token,\n\tfrom_iso8601_timestamp(mpt.data_inclusao) as data_inclusao,\n\tdate(substr(mpt.data_inclusao,1,10)) as data_brt_inclusao,\n\tfrom_iso8601_timestamp(mpt.data_ult_alteracao) as data_ultima_alteracao,\n\tdate(substr(mpt.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n\tmpt.event_id,\n\tmpt.type as type1,\n\tcast(mpt.value as bigint) as id_atendimento,\n\tmpt.title,\n\tmpt.form_id,\n\tfrom_iso8601_timestamp(mpt.landed_at) as landed_at,\n\tfrom_iso8601_timestamp(mpt.submitted_at) as submitted_at,\n\tmpt.calculated,\n\tt2.*\nfrom \"delta\".\"bronze\".\"stg_mongo_pvv_typeform\" as mpt\ncross join unnest (answers)t2\nwhere mpt.form_id in('TXURqrEM','buq7dbeA')\n)\nselect \n\tt1.id_dsm,\n\tt1.data_inclusao,\n\tt1.data_brt_inclusao,\n\tt1.data_ultima_alteracao,\n\tt1.data_brt_ultima_alteracao,  \n\tt1.id_atendimento,\n\tatd.id_paciente, \n\tcase \n\t    when t1.form_id = 'TXURqrEM' then 'DSM-5 \u2013 Adulto'\n\t\twhen t1.form_id = 'buq7dbeA' then 'DSM-5 \u2013 Infantojuvenil'\n\t\telse null\n\tend nome_questionario,\n\tt1.form_id,\n\tatd.id_convenio,\n\tatd.nome_convenio,\n\tatd.nome_paciente,\n\tatd.sexo_paciente,\n\tatd.faixa_etaria_paciente,\n\tatd.estado_paciente,\n\tatd.id_profissional,\n\tatd.nome_profissional,\n\treplace(t1.choice.label,'*','')as resposta,\n\tcase \n\t\twhen replace(t1.choice.label,'*','') = 'Nada, de modo algum' then 0\n\t\twhen replace(t1.choice.label,'*','') = 'Muito Leve, raramente, menos de um ou dois dias' then 1\n\t\twhen replace(t1.choice.label,'*','') = 'Leve, v\u00e1rios dias' then 2\n\t\twhen replace(t1.choice.label,'*','') = 'Moderado, mais da metade dos dias' then 3\n\t\twhen replace(t1.choice.label,'*','') = 'Grave, quase todos os dias' then 4\n\tend pontuacao\nfrom t1\ninner join \"delta\".\"silver\".\"pvv_fact_atendimento\" as atd on atd.id_atendimento = t1.id_atendimento\nwhere t1.type = 'choice'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_dsm5_n1\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:34.478046Z", "completed_at": "2025-07-01T18:32:34.515834Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:34.547188Z", "completed_at": "2025-07-01T18:32:34.547188Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14020729064941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_solicitacao_tiss", "compiled": true, "compiled_code": "\n\n  select \n      tiss.id_solicitacao_tiss,\n      tiss.data_ultima_alteracao,\n      tiss.data_brt_ultima_alteracao,\n      tiss.usuario_ultima_alteracao,\n      tiss.data_inclusao, \n      tiss.data_brt_inclusao,\n      tiss.data_solicitacao,\n      tiss.data_brt_solicitacao,\n      tiss.id_atendimento,\n      atd.status_atendimento,\n      atd.id_pagamento_paciente,\n      tiss.id_avaliacao_clinica,\n      tiss.id_paciente,\n      tiss.id_profissional,\n      tiss.cbo,\n      atd.id_convenio,\n      tiss.nome_convenio,\n      tiss.codigo_glosa,\n      tiss.mensagem_glosa,\n      tiss.numero_guia_operadora,\n      tiss.numero_guia_prestador,\n      tiss.quantidade,\n      tiss.quantidade_autorizada, \n      tiss.senha_autorizacao,\n      tiss.tiss_status,\n      tiss.status,\n      tiss.registro_ans,\n      tiss.codigo_procedimento,\n      tiss.descricao_procedimento, \n      tiss.numero_carteirinha, \n      tiss.id_solicitacao_pai, \n      tiss.data_validade_senha,\n      tiss.data_brt_validade_senha,\n      tiss.status_execucao,\n      tiss.reprocessado,\n      tiss.codigo_glosa_execucao,\n      tiss.mensagem_glosa_execucao,\n      tiss.guia_executada,\n      tiss.guia_externa,\n      tiss.token_solicitacao,\n      tiss.motivo_pendencia,\n      tiss.biometria_log,\n      tiss.emitted_at,\n      tiss.is_delete,\n      tiss.updated_at\nfrom \"delta\".\"bronze\".\"stg_pvv_solicitacao_tiss\" as tiss --\nleft join \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as atd on atd.id_atendimento = tiss.id_atendimento", "relation_name": "\"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:34.668199Z", "completed_at": "2025-07-01T18:32:34.728909Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:34.763914Z", "completed_at": "2025-07-01T18:32:34.763914Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15752220153808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_streaming", "compiled": true, "compiled_code": "\n\nwith get_entradas_twilio as (\n     select \n          it.id_informacoes_twilio, \n          it.id_atendimento,\n          it.data_ultima_alteracao,\n          it.data_brt_ultima_alteracao,\n          it.usuario_ultima_alteracao, \n          valida.valida_entrada_psi as entrada_profissional,\n          valida.valida_saida_psi as saida_profissional,\n          valida.valida_entrada_pac as entrada_paciente,\n          valida.valida_saida_pac as saida_paciente,\n          it.duracao_sala as duracao_sala,\n          it.durationp1,\n          it.emitted_at,\n          it.is_delete,\n          it.updated_at\n     from \"delta\".\"bronze\".\"stg_pvv_informacoes_twilio\" as it\n     left join (\n          select \n               it.id_informacoes_twilio, \n               it.data_ultima_alteracao, \n               it.usuario_ultima_alteracao,\n               it.id_atendimento, \n               case \n                    when (it.nome_twiliop1 = pro.nome_profissional) or (it.nome_twiliop2 = pro.nome_profissional) then true\n                    when (it.nome_twiliop1 is not null) and (it.nome_twiliop2 is not null) then true\n                    else false\n               end valida_entrou_sala_psi,\n               case \n                    when (((upper(it.nome_twiliop1) = upper(pro.nome_profissional)) and (upper(it.nome_twiliop2) is not null)) or\n                         ((upper(it.nome_twiliop2) = upper(pro.nome_profissional)) and (upper(it.nome_twiliop1) is not null)) or\n                         ((upper(it.nome_twiliop1) != upper(pro.nome_profissional)) and (upper(it.nome_twiliop2) is not null))or\n                         ((upper(it.nome_twiliop2) != upper(pro.nome_profissional)) and (upper(it.nome_twiliop1) is not null))) then true\n                    when (it.nome_twiliop1 is not null) and (it.nome_twiliop2 is not null) then true\n                    else false\n               end valida_entrou_sala_pac,                              \n               case \n                    when pag.id_convenio = 277 then it.start_timep1\n                    when pag.id_convenio not in(277) and upper(it.nome_twiliop1) = upper(pro.nome_profissional) then it.start_timep1\n                    when pag.id_convenio not in(277) and upper(it.nome_twiliop2) = upper(pro.nome_profissional) then it.start_timep2\n                    else NULL\n               end valida_entrada_psi,\n               case \n                    when pag.id_convenio = 277 then it.start_timep1\n                    when pag.id_convenio not in(277) and upper(it.nome_twiliop1) = upper(pro.nome_profissional) then it.start_timep2\n                    when pag.id_convenio not in(277) and upper(it.nome_twiliop2) = upper(pro.nome_profissional) then it.start_timep1\n                    else NULL\n               end valida_entrada_pac,\n               case \n                    when pag.id_convenio = 277 then it.end_timep1\n                    when pag.id_convenio not in(277) and it.nome_twiliop1 = pro.nome_profissional then it.end_timep1\n                    when pag.id_convenio not in(277) and it.nome_twiliop2 = pro.nome_profissional then it.end_timep2\n                    else NULL\n               end valida_saida_psi,\n               case \n                    when pag.id_convenio = 277 then it.end_timep1\n                    when pag.id_convenio not in(277) and it.nome_twiliop1 = pro.nome_profissional then it.end_timep2\n                    when pag.id_convenio not in(277) and it.nome_twiliop2 = pro.nome_profissional then it.end_timep1\n                    else NULL\n               end valida_saida_pac\n\t     from \"delta\".\"bronze\".\"stg_pvv_informacoes_twilio\" as it\n          inner join \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as pag on pag.id_atendimento = it.id_atendimento\n          inner join \"delta\".\"silver\".\"pvv_dim_profissional\" as pro on pro.id_profissional = pag.id_profissional\n     ) as valida on valida.id_informacoes_twilio = it.id_informacoes_twilio\n), \n\nCAST_TABLE AS (\n     select \n          iv.id_informacoes_vonage as id_streaming, \n          iv.id_atendimento,\n          iv.data_ultima_alteracao,\n          iv.data_brt_ultima_alteracao,\n          iv.usuario_ultima_alteracao,\n          iv.entrada_psi as entrada_profissional,\n          iv.saida_psi as saida_profissional,\n          iv.entrada_pac as entrada_paciente,\n          iv.saida_pac as saida_paciente,\n          iv.duracao_sala,\n          iv.ip_psicologo,\n          iv.ip_paciente,  \n          'vonage' as tabela,\n          iv.tempo_simultaneo,\n          iv.emitted_at,\n          iv.is_delete,\n          iv.updated_at\n     from \"delta\".\"bronze\".\"stg_pvv_informacoes_vonage\" as iv\n     \n     union all\n                   \n     select \n          it.id_informacoes_twilio as id_streaming,\n          it.id_atendimento,\n          it.data_ultima_alteracao,\n          it.data_brt_ultima_alteracao,\n          it.usuario_ultima_alteracao,\n          it.entrada_profissional,\n          it.saida_profissional,\n          it.entrada_paciente,\n          it.saida_paciente,\n          round((it.duracao_sala / 60),2) as duracao_sala,\n          null as ip_psicologo,\n          null as ip_paciente,  \n          'twilio' as tabela,\n          null tempo_simultaneo,\n          it.emitted_at,\n          it.is_delete,\n          it.updated_at\n     from get_entradas_twilio as it\n) \n\nselect *\nfrom CAST_TABLE as ct --", "relation_name": "\"delta\".\"silver\".\"pvv_fact_streaming\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:34.867068Z", "completed_at": "2025-07-01T18:32:34.902482Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:34.932488Z", "completed_at": "2025-07-01T18:32:34.932488Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12216401100158691, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_atendimento_realizado_faturamento_1_x_1_operadoras", "compiled": true, "compiled_code": "\n\nselect \n\tcast(null as bigint) as id_solicitacao_tiss, \n    cast(null as bigint) as id_pagamento_paciente,\n\tcast(null as varchar) as numero_guia_prestador, \n\tcast(null  as varchar) as senha_autorizacao,\n\tpag.nome_convenio, \n\tcast(null  as varchar) as registro_ans, \n\tcast(null  as varchar) as numero_carteirinha,\n\tcast(null  as varchar) as codigo_procedimento, \n\tcast(null  as varchar) as descricao_procedimento,\n\tpag.id_atendimento,\n\tcast(null  as varchar) as status,\n    cast('1900-01-01 00:00:00'  as timestamp(3) with time zone) as data_solicitacao,\n\tcast(null  as int) as quantidade,\n\tcast(null  as int) as quantidade_autorizada,\n    pag.id_convenio,\n    '1_x_1' as tipo_faturamento,\n\t'Consultas realizadas sem solicita\u00e7\u00e3o TISS' as pr_fat,\n\tpag.id_paciente,\n\tpag.id_profissional, \n\tpag.data_atendimento,\n\tpag.data_brt_atendimento,\n    cast(null  as varchar) as codigo_glosa_execucao,\n    cast(null  as varchar) as mensagem_glosa_execucao,\n\tcast(null  as varchar) as motivo_pendencia,\n\tpag.cpf_paciente,\n\tpag.email_paciente,\n\tpag.nome_paciente,\n\tpag.status_atendimento\nfrom \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as pag  \nwhere pag.id_convenio in(24,54,83,106,117,150,291,510,1000022,611,1000195)  \nand pag.status_atendimento = 'Realizado'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_atendimento_realizado_faturamento_1_x_1_operadoras\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:35.074770Z", "completed_at": "2025-07-01T18:32:35.111964Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:35.140364Z", "completed_at": "2025-07-01T18:32:35.140364Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13498306274414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_atendimento_realizado_faturamento_pacote", "compiled": true, "compiled_code": "\n\nselect \n\tcast(null as bigint) as id_solicitacao_tiss, \n    cast(null as bigint) as id_pagamento_paciente,\n\tcast(null as varchar) as numero_guia_prestador, \n\tcast(null  as varchar) as senha_autorizacao,\n\tpag.nome_convenio, \n\tcast(null  as varchar) as registro_ans, \n\tcast(null  as varchar) as numero_carteirinha,\n\tcast(null  as varchar) as codigo_procedimento, \n\tcast(null  as varchar) as descricao_procedimento,\n\tpag.id_atendimento,\n\tcast(null  as varchar) as status,\n    cast('1900-01-01 00:00:00'  as timestamp(3) with time zone) as data_solicitacao,\n\tcast(null  as int) as quantidade,\n\tcast(null  as int) as quantidade_autorizada,\n    pag.id_convenio,\n    'Pacote' as tipo_faturamento,\n\t'N\u00e3o existe TISS' as pr_fat,\n\tpag.id_paciente,\n\tpag.id_profissional, \n\tpag.data_atendimento,\n\tpag.data_brt_atendimento,\n    cast(null  as varchar) as codigo_glosa_execucao,\n    cast(null  as varchar) as mensagem_glosa_execucao,\n\tcast(null  as varchar) as motivo_pendencia,\n\tpag.cpf_paciente,\n\tpag.email_paciente,\n\tpag.nome_paciente,\n\tpag.status_atendimento\nfrom \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as pag \nwhere pag.id_convenio in(57,80,82,84,91,92,94,96,103,115,116,119,126,127,139,152,250,464) \n-- and pag.data_atendimento  > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand pag.status_atendimento = 'Realizado'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_atendimento_realizado_faturamento_pacote\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:35.317676Z", "completed_at": "2025-07-01T18:32:35.419548Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:35.453649Z", "completed_at": "2025-07-01T18:32:35.453649Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.24220728874206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_dsm5_n2", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect\n\tmpt._id as id_dsm,\n\tmpt.token,\n\tfrom_iso8601_timestamp(mpt.data_inclusao) as data_inclusao,\n\tdate(substr(mpt.data_inclusao,1,10)) as data_brt_inclusao,\n\tfrom_iso8601_timestamp(mpt.data_ult_alteracao) as data_ultima_alteracao,\n\tdate(substr(mpt.data_ult_alteracao,1,10)) as data_brt_ultima_alteracao,\n\tmpt.event_id,\n\tmpt.type as type1,\n\tcast(mpt.value as bigint) as id_atendimento,\n\tmpt.title,\n\tmpt.form_id,\n\tfrom_iso8601_timestamp(mpt.landed_at) as landed_at,\n\tfrom_iso8601_timestamp(mpt.submitted_at) as submitted_at,\n\tmpt.calculated,\n\tt2.*\nfrom \"delta\".\"bronze\".\"stg_mongo_pvv_typeform\" as mpt\ncross join unnest (answers)t2\nwhere mpt.form_id in('R0Yp18Ye','JlgFZFmr','SRNG4LLe','CfPRUOoz','XR9HMjWT','wlGOlDsw','ZFwthkVw','skh0DbTN')\n),\nt2  as(\nselect \n\tid_atendimento,\n\tid_paciente,\n\tid_convenio,\n\tnome_convenio,\n\tnome_paciente,\n\tsexo_paciente,\n\tfaixa_etaria_paciente,\n\testado_paciente,\n\tid_profissional,\n\tnome_profissional,\n    'Psicologia Viva' as plataforma\nfrom \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" \n)\nselect \n\tt1.id_dsm,\n\tt1.data_inclusao,\n\tt1.data_brt_inclusao,\n\tt1.data_ultima_alteracao,\n\tt1.data_brt_ultima_alteracao,  \n\tt1.id_atendimento,\n\tatd.id_paciente, \n\tcase \n\t    when t1.form_id = 'R0Yp18Ye' then 'DSM-V N2: Ansiedade' \n\t\twhen t1.form_id = 'JlgFZFmr' then 'DSM-V N2: Depress\u00e3o'\n\t\twhen t1.form_id = 'skh0DbTN' then 'DSM-V N2: Dist\u00farbios do Sono'\n\t\twhen t1.form_id = 'SRNG4LLe' then 'DSM-V N2: Raiva'\n\t\twhen t1.form_id = 'ZFwthkVw' then 'DSM-V N2: Pensamentos e Comportamentos Repetitivos'\n\t\twhen t1.form_id = 'wlGOlDsw' then 'DSM-V N2: Mania'\n\t\twhen t1.form_id = 'XR9HMjWT' then 'DSM-V N2: Uso de Subst\u00e2ncias'\n\t\twhen t1.form_id = 'CfPRUOoz' then 'DSM-V N2: Sintomas Som\u00e1ticos'\n\t\telse null\n\tend as nome_questionario,\n\tt1.form_id, \n\tatd.id_convenio,\n\tatd.nome_convenio,\n\tatd.nome_paciente,\n\tatd.sexo_paciente,\n\tatd.faixa_etaria_paciente,\n\tatd.estado_paciente,\n\tatd.id_profissional,\n\tatd.nome_profissional,\n\treplace(t1.choice.label,'*','')as resposta,\n\tcase \n\t\twhen t1.form_id in('R0Yp18Ye','JlgFZFmr','SRNG4LLe') then -- Ansiedade, Depress\u00e3o e Raiva\n\t\t\t   case \n\t\t\t\t\twhen replace(t1.choice.label,'*','') = 'Nunca' then 1\n\t\t            when replace(t1.choice.label,'*','') = 'Raramente' then 2\n\t\t            when replace(t1.choice.label,'*','') = '\u00c0s vezes' then 3\n\t\t            when replace(t1.choice.label,'*','') = 'Frequentemente' then 4\n\t\t            when replace(t1.choice.label,'*','') = 'Sempre' then 5\n\t\t\t   end \n\t\twhen t1.form_id = 'XR9HMjWT' then -- Uso de Subst\u00e2ncias\n\t\t\t   case \n\t\t\t\t\twhen replace(t1.choice.label,'*','') = 'Nada' then 0\n\t\t            when replace(t1.choice.label,'*','') = '1 ou 2 dias' then 1\n\t\t            when replace(t1.choice.label,'*','') = 'Alguns dias' then 2\n\t\t            when replace(t1.choice.label,'*','') = 'Mais da metade dos dias' then 3\n\t\t\t\t\twhen replace(t1.choice.label,'*','') = 'Quase todos os dias' then 4\n\t\t\t   end\t\t            \n\t\twhen t1.form_id = 'CfPRUOoz' then -- Sintomas Som\u00e1ticos\n\t\t\t   case \n\t\t\t\t\twhen replace(t1.choice.label,'*','') = 'N\u00e3o fui incomodado' then 0\n\t\t            when replace(t1.choice.label,'*','') = 'Fui incomodado pouco' then 1\n\t\t            when replace(t1.choice.label,'*','') = 'Fui incomodado muito' then 2\n\t\t\t   end\n\t\twhen t1.form_id = 'ZFwthkVw' then -- Pensamentos e Comportamentos Repetitivos\n\t\t\t   case \n\t\t\t\t\twhen replace(t1.choice.label,'*','') in('Nada', 'Controlo completamente','N\u00e3o evito') then 0\n\t\t            when replace(t1.choice.label,'*','') in('Leve (menos de 1h por dia)', 'Leve (um pouco perturbado)', 'Muito controle ( normalmente capaz de controlar comportamentos e pensamentos)',\n\t\t                                        'Leve (evito ocasionalmente)','Leve (pouca interfer\u00eancia)') then 1\n\t\t            when replace(t1.choice.label,'*','') in('Moderado (de 1 a 3 horas por dia)','Moderado (preocupa mas ainda administr\u00e1vel)','Moderado (regularmente evito fazer estas coisas)',\n\t\t                                        'Controle moderado (capaz de controlar pensamentos e comportamentos algumas vezes)','Moderado (interfere mas de modo administr\u00e1vel)') then 2\n\t\t            when replace(t1.choice.label,'*','') in('Forte (de 3 a 8 horas por dia)','Forte (perturba muito)','Pouco controle (poucas vezes capaz de controlar pensamentos e comportamentos)',\n\t\t                                        'Forte (evito de forma extensa e frequente)', 'Forte (interfer\u00eancia substancial)') then 3\t\n                    when replace(t1.choice.label,'*','') in('Extremo (mais do que 8 horas por dia)','Extremo (causa sofrimento muito pesado)','Sem controle (incapaz de controlar pensamentos ou comportamentos)',\n                                                'Extremo (evito quase completamente, prefiro ficar em casa)','Extremo (interfer\u00eancia quase total, impacitado)') then 4\t\t\n                    when replace(t1.choice.label,'*','') in('Eu n\u00e3o me sinto feliz ou mais alegre do que de costume','Eu n\u00e3o me sinto mais autoconfiante do que o normal','Eu n\u00e3o preciso dormir menos do que o normal',\n                                                'Eu n\u00e3o falo mais do que o normal','N\u00e3o tenho sido mais ativo (seja socialmente, sexualmente, no trabalho, em casa ou na escola) do que o normal') then 1\n                    when replace(t1.choice.label,'*','') in('Ocasionalmente me sinto mais feliz ou mais alegre do que o normal','Ocasionalmente me sinto mais autoconfiante ou mais alegre do que o normal',\n                                                'Ocasionalmente, preciso dormir menos do que o normal','Eu ocasionalmente falo mais do que o normal','Eu ocasionalmente tenho sido mais ativo do que o normal') then 2\n                    when replace(t1.choice.label,'*','') in('Frequentemente me sinto mais feliz ou mais alegre do que o normal','Muitas vezes me sinto mais autoconfiante do que o normal','Muitas vezes preciso dormir menos do que o normal',\n                                                'Costumo falar mais do que o normal','Muitas vezes tenho sido mais ativo do que o normal') then 3\n                    when replace(t1.choice.label,'*','') in('Eu me sinto mais feliz ou mais alegre do que o normal na maior parte do tempo','Frequentemente me sinto mais autoconfiante do que o normal','Frequentemente preciso dormir menos do que o normal',\n                                                'Eu frequentemente falo mais do que o normal','Frequentemente tenho sido mais ativo do que o normal') then 4\n                    when replace(t1.choice.label,'*','') in('Eu me sinto mais feliz ou mais alegre do que o normal o tempo todo','Eu me sinto extremamente autoconfiante o tempo todo','Posso passar o dia e a noite sem dormir e ainda assim n\u00e3o me sentir cansado',\n                                                'Eu falo constantemente e n\u00e3o posso ser interrompido','Estou constantemente mais ativo ou em movimento o tempo todo') then 5\n\t\t       end\t\n        when t1.form_id = 'wlGOlDsw' then -- Mania\n\t\t\t   case \n\t\t\t\t\twhen replace(t1.choice.label,'*','') in('Eu n\u00e3o falo mais do que o normal','Eu n\u00e3o me sinto feliz ou mais alegre do que de costume','Eu n\u00e3o me sinto mais autoconfiante do que o normal',\n\t\t                                                    'Eu n\u00e3o preciso dormir menos do que o normal','N\u00e3o tenho sido mais ativo (seja socialmente, sexualmente, no trabalho, em casa ou na escola) do que o normal') then 1\n\t\t            when replace(t1.choice.label,'*','') in('Eu ocasionalmente falo mais do que o normal','Eu ocasionalmente tenho sido mais ativo do que o normal','Ocasionalmente me sinto mais autoconfiante ou mais alegre do que o normal',\n\t\t                                                    'Ocasionalmente me sinto mais feliz ou mais alegre do que o normal','Ocasionalmente, preciso dormir menos do que o normal') then 2\n\t\t            when replace(t1.choice.label,'*','') in('Costumo falar mais do que o normal','Frequentemente me sinto mais feliz ou mais alegre do que o normal','Muitas vezes me sinto mais autoconfiante do que o normal',\n\t\t                                                    'Muitas vezes tenho sido mais ativo do que o normal','Muitas vezes preciso dormir menos do que o normal') then 3\n\t\t            when replace(t1.choice.label,'*','') in('Eu frequentemente falo mais do que o normal','Eu me sinto mais feliz ou mais alegre do que o normal na maior parte do tempo',\n\t\t                                                    'Frequentemente me sinto mais autoconfiante do que o normal','Frequentemente preciso dormir menos do que o normal','Frequentemente tenho sido mais ativo do que o normal') then 4\n\t\t            when replace(t1.choice.label,'*','') in('Estou constantemente mais ativo ou em movimento o tempo todo','Eu falo constantemente e n\u00e3o posso ser interrompido','Eu me sinto mais feliz ou mais alegre do que o normal o tempo todo',\n\t\t                                                    'Eu me sinto extremamente autoconfiante o tempo todo','Posso passar o dia e a noite sem dormir e ainda assim n\u00e3o me sentir cansado') then 5\t\t\n\t\t       end\n\t\twhen t1.form_id = 'skh0DbTN' then -- Dist\u00farbios do Sono\n\t\t\t   case -- Meu sono foi inquieto\n\t\t\t\t\twhen t1.field.id = 'oimrJfvlI2Zs' and replace(t1.choice.label,'*','') = 'Nada' then 1\n\t\t\t\t\twhen t1.field.id = 'oimrJfvlI2Zs' and replace(t1.choice.label,'*','') = 'Um pouco' then 2\n\t\t\t\t\twhen t1.field.id = 'oimrJfvlI2Zs' and replace(t1.choice.label,'*','') = 'Mais o menos' then 3\n\t\t\t\t\twhen t1.field.id = 'oimrJfvlI2Zs' and replace(t1.choice.label,'*','') = 'Bastante' then 4\n\t\t\t\t\twhen t1.field.id = 'oimrJfvlI2Zs' and replace(t1.choice.label,'*','') = 'Muito' then 5 \n\t\t\t\t\t-- Eu estive satisfeito com o meu sono\n\t\t\t\t\twhen t1.field.id = 'v6OBDQJxIrbE' and replace(t1.choice.label,'*','') = 'Nada' then 5\n\t\t\t\t\twhen t1.field.id = 'v6OBDQJxIrbE' and replace(t1.choice.label,'*','') = 'Um pouco' then 4\n\t\t\t\t\twhen t1.field.id = 'v6OBDQJxIrbE' and replace(t1.choice.label,'*','') = 'Mais o menos' then 3\n\t\t\t\t\twhen t1.field.id = 'v6OBDQJxIrbE' and replace(t1.choice.label,'*','') = 'Bastante' then 2\n\t\t\t\t\twhen t1.field.id = 'v6OBDQJxIrbE' and replace(t1.choice.label,'*','') = 'Muito' then 1\n\t\t\t\t\t-- Meu sono foi revigorante\n\t\t\t\t\twhen t1.field.id = 'Qe7JsssEN56q' and replace(t1.choice.label,'*','') = 'Nada' then 5\n\t\t\t\t\twhen t1.field.id = 'Qe7JsssEN56q' and replace(t1.choice.label,'*','') = 'Um pouco' then 4\n\t\t\t\t\twhen t1.field.id = 'Qe7JsssEN56q' and replace(t1.choice.label,'*','') = 'Mais o menos' then 3\n\t\t\t\t\twhen t1.field.id = 'Qe7JsssEN56q' and replace(t1.choice.label,'*','') = 'Bastante' then 2\n\t\t\t\t\twhen t1.field.id = 'Qe7JsssEN56q' and replace(t1.choice.label,'*','') = 'Muito' then 1\n\t\t\t\t\t-- tive dificuldade em adormecer\n\t\t\t\t\twhen t1.field.id = 'xYbEBs80AqoE' and replace(t1.choice.label,'*','') = 'Nada' then 1\n\t\t\t\t\twhen t1.field.id = 'xYbEBs80AqoE' and replace(t1.choice.label,'*','') = 'Um pouco' then 2\n\t\t\t\t\twhen t1.field.id = 'xYbEBs80AqoE' and replace(t1.choice.label,'*','') = 'Mais o menos' then 3\n\t\t\t\t\twhen t1.field.id = 'xYbEBs80AqoE' and replace(t1.choice.label,'*','') = 'Bastante' then 4\n\t\t\t\t\twhen t1.field.id = 'xYbEBs80AqoE' and replace(t1.choice.label,'*','') = 'Muito' then 5 \n\t\t\t\t\t-- Eu tive problemas em permanecer dormindo\n\t\t\t\t\twhen t1.field.id = 'tj9Zyx7rMzsj' and replace(t1.choice.label,'*','') = 'Nunca' then 1\n\t\t\t\t\twhen t1.field.id = 'tj9Zyx7rMzsj' and replace(t1.choice.label,'*','') = 'Raramente' then 2\n\t\t\t\t\twhen t1.field.id = 'tj9Zyx7rMzsj' and replace(t1.choice.label,'*','') = '\u00c0s vezes' then 3\n\t\t\t\t\twhen t1.field.id = 'tj9Zyx7rMzsj' and replace(t1.choice.label,'*','') = 'Frequentemente' then 4\n\t\t\t\t\twhen t1.field.id = 'tj9Zyx7rMzsj' and replace(t1.choice.label,'*','') = 'Sempre' then 5  \n\t\t\t\t\t-- Tive problemas para dormir\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = 'Nunca' then 1\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = 'Raramente' then 2\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = '\u00c0s vezes' then 3\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = 'Frequentemente' then 4\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = 'Sempre' then 5  \n\t\t\t\t\t-- Eu dormi o suficiente\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = 'Nunca' then 5\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = 'Raramente' then 4\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = '\u00c0s vezes' then 3\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = 'Frequentemente' then 4\n\t\t\t\t\twhen t1.field.id = 'ccXPLokHAMfw' and replace(t1.choice.label,'*','') = 'Sempre' then 1\n\t\t\t\t\t-- Minha qualidade de sono foi\n\t\t\t\t\twhen t1.field.id = '3LFkU2Qz64Yl' and replace(t1.choice.label,'*','') = 'Muito pobre' then 5\n\t\t\t\t\twhen t1.field.id = '3LFkU2Qz64Yl' and replace(t1.choice.label,'*','') = 'Pobre' then 4\n\t\t\t\t\twhen t1.field.id = '3LFkU2Qz64Yl' and replace(t1.choice.label,'*','') = 'Razo\u00e1vel' then 3\n\t\t\t\t\twhen t1.field.id = '3LFkU2Qz64Yl' and replace(t1.choice.label,'*','') = 'Boa' then 4\n\t\t\t\t\twhen t1.field.id = '3LFkU2Qz64Yl' and replace(t1.choice.label,'*','') = 'Muito Boa' then 1\n\t\t\t   end\n\t\telse null\n\tend pontuacao,\n\tatd.plataforma \nfrom t1\nleft join t2 as atd on atd.id_atendimento = t1.id_atendimento\nwhere t1.type = 'choice'", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_dsm5_n2\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:35.601618Z", "completed_at": "2025-07-01T18:32:35.643225Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:35.675438Z", "completed_at": "2025-07-01T18:32:35.675438Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1460883617401123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_faturamento_senha_operadoras", "compiled": true, "compiled_code": "\n\nwith consultas_classificadas as (select pag.id_atendimento,\n                                        pag.id_paciente,\n\t\t\t\t\t\t\t\t\t\tpag.id_profissional,\n\t\t\t\t\t\t\t\t\t\tpag.id_convenio,\n                                        pag.nome_convenio,\n\t\t\t\t\t\t\t\t\t\tpag.data_atendimento,\n\t\t\t\t\t\t\t\t\t\tpag.data_brt_atendimento,\n\t\t\t\t\t\t\t\t\t\tpag.senha_autorizacao,\n\t                                    pag.cpf_paciente,\n\t                                    pag.email_paciente,\n\t                                    pag.nome_paciente,\n\t                                    pag.status_atendimento\t\n                                   from \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as pag\n\t\t\t\t\t\t          where pag.id_convenio in(89,90,360) \n\t                            ),\n\t faturadas as (select pg.id_atendimento \n                     from \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as pg \n                    where pg.senha_autorizacao is not null\n                      and pg.id_atendimento not in (select lg.id_atendimento\n                                                      from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\"  as lg \n\t\t\t\t\t\t                             where lg.nome_convenio IN ('AMS','CASSE BANESE','Pasa') \n                                                       and lg.numero_protocolo is not null\n\t\t\t\t\t\t                           ) \n\t              ),\n     log_tiss as (select lote.id_lote_guia_tiss,\n\t                     lote.data_envio_lote,\n\t\t\t\t\t\t lote.numero_protocolo,\n\t\t\t\t\t\t lote.status_lote,\n\t\t\t\t\t\t lote.valor_guia,\n\t\t\t\t\t\t lote.codigo_glosa_faturamento,\n\t\t\t\t\t\t lote.enviado_anexo,\n\t\t\t\t\t\t lote.mensagem_glosa_faturamento,\n\t                     lote.id_atendimento\n\t\t\t\t    from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" as lote \n\t\t\t\t   where lote.nome_convenio in('AMS','CASSE BANESE','Pasa')\n\t             )\n    select \t\n\tcast(null as bigint) as id_solicitacao_tiss, \n\tcast(null as varchar) as numero_guia_prestador, \n\tcc.senha_autorizacao,\n\tcc.nome_convenio, \n\tcast(null  as varchar) as registro_ans, \n\tcast(null  as varchar) as numero_carteirinha,\n\tcast(null  as varchar) as codigo_procedimento, \n\tcast(null  as varchar) as descricao_procedimento,\n\tcc.id_atendimento,\n\tcast(null  as varchar) as status,\n    cast('1900-01-01 00:00:00'  as timestamp(3) with time zone) as data_solicitacao,\n\tcast(null  as int) as quantidade,\n\tcast(null  as int) as quantidade_autorizada,\n    cc.id_convenio,\n    'Por Senha' as tipo_faturamento,\n\tcase \n\t\twhen cc.senha_autorizacao is not null then null \n\t    else 'Falta senha de autoriza\u00e7\u00e3o' \n\tend pr_fat,\n\tcc.id_paciente,\n\tcc.id_profissional, \n\tcc.data_atendimento,\n\tcc.data_brt_atendimento,\n    cast(null  as varchar) as codigo_glosa_execucao,\n    cast(null  as varchar) as mensagem_glosa_execucao,\n\tcast(null  as varchar) as motivo_pendencia,\n\tcc.cpf_paciente,\n\tcc.email_paciente,\n\tcc.nome_paciente,\n\tcc.status_atendimento,\n\tlote.id_lote_guia_tiss,\n\tlote.data_envio_lote,\n\tlote.numero_protocolo,\n\tlote.status_lote,\n\tlote.valor_guia,\n\tlote.codigo_glosa_faturamento,\n\tlote.enviado_anexo,\n\tlote.mensagem_glosa_faturamento,\n\t'-' as existe_tiss,\n\tif((lote.id_lote_guia_tiss is not null),true,false) as existe_lote_guia_tiss\nfrom (select fat.id_atendimento\n        from faturadas as fat\n                     union\n      select cc.id_atendimento\n        from consultas_classificadas as cc\n \t   where cc.status_atendimento = 'Realizado'\n           ) as fat\ninner join consultas_classificadas as cc   on cc.id_atendimento   = fat.id_atendimento\n left join log_tiss                as lote on lote.id_atendimento = fat.id_atendimento", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_faturamento_senha_operadoras\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:35.792380Z", "completed_at": "2025-07-01T18:32:35.839664Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:35.877199Z", "completed_at": "2025-07-01T18:32:35.877199Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.142075777053833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.dass21", "compiled": true, "compiled_code": "\n\nSELECT\n    id_dass21, \n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,\n    data_criacao,\n\tid_paciente,\n    id_clinica,\n    to_hex(md5(to_utf8(cast(id_clinica as varchar) || 'cnx'))) as sk_clinica,\n    nome_clinica,\n    faixa_etaria2,\n    sexo_paciente,\n    estado_paciente,\n    nivel_ansiedade,\n    valor_ansiedade,\n    nivel_depressao,\n    valor_depressao,\n    nivel_estresse,\n    valor_estresse,\n    (valor_ansiedade + valor_depressao + valor_estresse) as valor_final,\n    'Conexa' AS source\nFROM \"delta\".\"silver\".\"cnx_fact_resultados_dass21\"\n\nUNION ALL       \n\nSELECT \n    id_dass21,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    data_hora_enviado as data_criacao,\n    id_paciente,\n    id_convenio as id_clinica,\n    to_hex(md5(to_utf8(cast(id_convenio as varchar) || 'pvv'))) as sk_clinica,\n    nome_convenio as nome_clinica,\n    faixa_etaria2,\n    sexo_paciente,\n    estado_paciente,\n    ansiedade as nivel_ansiedade,\n    valor_ansiedade,\n    depressao as nivel_depressao,\n    valor_depressao,\n    estresse as nivel_estresse,\n    valor_estresse,\n    (valor_ansiedade + valor_depressao + valor_estresse) as valor_final,\n    'Psicologia Viva' AS source\nFROM \"delta\".\"silver\".\"pvv_fact_resultados_dass21\"", "relation_name": "\"delta\".\"gold\".\"dass21\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:36.024813Z", "completed_at": "2025-07-01T18:32:36.065031Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:36.104149Z", "completed_at": "2025-07-01T18:32:36.104149Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1456139087677002, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.elegibilidade", "compiled": true, "compiled_code": "\n\nselect \n\tplataforma,\n\tid_paciente,\n\tvalidation_code,\n\tnome_paciente,\n\tsk_paciente,\n\tid_clinica_plano,\n\tsk_clinica_plano,\n\tnome_clinica_plano,\n\tid_empresa,\n\tsk_empresa,\n\tnome_empresa,\n\tflag_elegibilidade,\n\tstatus_elegibilidade_cnx,\n\tdata_elegibilidade,\n\tdata_brt_elegibilidade,\n\tdata_termo_aceite,\n\tdata_brt_termo_aceite,\n\tdata_cancelado_bloqueado,\n\tdata_brt_cancelado_bloqueado,\n\tdata_deletado,\n\tdata_brt_deletado,\n\ttipo_contrato,\n\turl_ativacao,\n\taceita_dependentes,\n\tcategoria_empresa,\n\ttamanho_empresa,\n\tsetor_empresa,\n\tunidade_negocio_clinica_plano,\n\tstatus_clinica_plano,\n\tquantidade_vidas_ans_clinica_plano,\n    nome_conta_pai_operadoras_clinica_plano,\n\ttitularidade_elegibilidade,\n\tdata_ultima_atualizacao,\n\tdata_brt_ultima_atualizacao\nfrom \"delta\".\"gold\".\"stg_elegibilidade\"", "relation_name": "\"delta\".\"gold\".\"elegibilidade\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:36.553485Z", "completed_at": "2025-07-01T18:32:36.681474Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:36.714214Z", "completed_at": "2025-07-01T18:32:36.714214Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5160765647888184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pacientes", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"delta\".\"gold\".\"stg_pacientes\"", "relation_name": "\"delta\".\"gold\".\"pacientes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:36.852801Z", "completed_at": "2025-07-01T18:32:36.902130Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:36.939074Z", "completed_at": "2025-07-01T18:32:36.939074Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15878891944885254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_resultados_srq20", "compiled": true, "compiled_code": "\n\nwith t1 as(\n\nselect \n    id_srq,\n    sum(pontuacao) as t_score\nfrom \"delta\".\"bronze\".\"stg_pvv_srq20\"\ngroup by id_srq\n)\nselect distinct\n\tid_srq,\n\tdata_inclusao,\n\tdata_brt_inclusao,\n\tdata_ultima_alteracao,\n\tdata_brt_ultima_alteracao, \n\tid_paciente,\n\tid_convenio, \n\tnome_convenio,\n\tnome_paciente,\n\tsexo_paciente,\n\tfaixa_etaria_paciente,\n\testado_paciente,  \n\tcase \n\t\twhen t1.t_score = 0 then 'N\u00e3o foi identificado sofrimento mental de acordo com os par\u00e2mentros do SRQ-20.'\n        when t1.t_score between 1 and 7 then 'Sofrimento mental leve.'\n        when t1.t_score between 8 and 14 then 'Sofrimento mental moderado.'\n        when t1.t_score >= 15 then 'Sofrimento mental grave.'\n\t\telse null\n\tend as resultado,\n\tt1.t_score as pontuacao\nfrom \"delta\".\"bronze\".\"stg_pvv_srq20\" \ninner join t1 using(id_srq)", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_resultados_srq20\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:37.122289Z", "completed_at": "2025-07-01T18:32:37.181346Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:37.232477Z", "completed_at": "2025-07-01T18:32:37.232477Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19080209732055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_recebimento_profissional_psicologia", "compiled": true, "compiled_code": "\n\nwith comp as (\nselect \n    a.id_atendimento,\n\ta.id_clinica, \n\ta.nome_clinica,\n\ta.unidade_negocio_autoritativa,\n\tp.id_usuario_profissional as id_usuario,\n\ta.id_profissional,\n\ta.nome_profissional,\n\tp.cpf_profissional,\n\ta.id_paciente,\n\ta.nome_paciente,\n\tcast(date_format(a.data_agendamento at time zone 'America/Sao_Paulo', '%Y-%m-%d %H:%i:%s') as timestamp) as data_agendamento,\n\ta.data_brt_agendamento,\n\tcast(date_format(a.data_agendado_para at time zone 'America/Sao_Paulo', '%Y-%m-%d %H:%i:%s') as timestamp) as data_agendado_para,\n\ta.data_brt_agendado_para,\n\tcast(date_format(a.data_atendimento at time zone 'America/Sao_Paulo', '%Y-%m-%d %H:%i:%s') as timestamp) as data_atendimento,\n\ta.data_brt_atendimento,\n\tcast(date_format(a.data_conclusao at time zone 'America/Sao_Paulo', '%Y-%m-%d %H:%i:%s') as timestamp) as data_conclusao,\n\ta.data_brt_conclusao,\n\ta.status,\n\ta.desfecho,\n\ta.status_atendimento,\n    case\n        when a.id_clinica in (2) -- atualizado para remover o id 10188 que era teste de QA\n            then true\n        else false\n    end as flag_atendimento_b2c,\n\tcase\n        when a.id_clinica in (2) -- atualizado para remover o id 10188 que era teste de QA\n            then 'Particular'\n        else 'Corporativa'\n    end as tipo_atendimento,\n\ta.situacao_paciente_pagamento,\n\ta.valor_pago as valor_pago_paciente,\n\ta.valor_consulta,\n\tcase \n\t\twhen a.id_clinica in (2) -- atualizado para remover o id 10188 que era teste de QA\n\t\t\tthen a.valor_pago\n\t\telse 0\n\tend as valor_pago,\n\tcase \n\t\twhen a.id_clinica in (2) and a.cupom is not null and a.flag_gerar_pagamento_profissional\n\t\t\tthen cast((a.valor_consulta*0.0399) as decimal(10,2))\n\t\twhen a.id_clinica in (2) -- atualizado para remover o id 10188 que era teste de QA\n\t\t\tthen a.valor_custo_operacao\n\t\telse 0\n    end as valor_custo_operacao,\n\tcase\n\t\twhen a.id_profissional in (61154,61155)\n\t\t\tthen 62\n\t\twhen a.id_clinica in (2) -- atualizado para remover o id 10188 que era teste de QA\n\t\t\tthen 0\n\t\telse a.valor_repasse\n    end as valor_repasse,\n\tcase\n\t\twhen a.id_clinica in (2) and a.cupom is not null and a.flag_gerar_pagamento_profissional\n\t\t\tthen cast(a.valor_consulta - (a.valor_consulta*0.0399) as decimal(10,2))\n\t\twhen a.id_profissional in (61154,61155)\n\t\t\tthen 62\n\t\twhen a.id_clinica in (2) -- atualizado para remover o id 10188 que era teste de QA\n\t\t\tthen (a.valor_pago - coalesce(a.valor_custo_operacao,0))\n\t\telse a.valor_repasse\n    end as valor_recebimento,\n\tf.voucher_utilizado,\n\ta.cupom,\n\ta.flag_gerar_pagamento_profissional,\n\ta.mes_fatura,\n\tdate_format(date_add('month', 2, date_parse(a.mes_fatura|| '-01', '%Y-%m-%d')) , '%Y-%m') as mes_pagamento,\n\tsubstring(a.mes_fatura,1,4) as ano_fatura,\n    concat(substring(a.mes_fatura,6,7),'/',substring(a.mes_fatura,1,4)) as mes_fatura_br,\n\tdate_add('day',8,CAST(mes_fatura || '-23' AS DATE)) as data_limite_pendente,\n\tif(f.flag_existe_roi,true,false) as flag_existe_roi,\n\tDENSE_RANK() over(order by CAST(mes_fatura || '-01' AS DATE) desc) as rank\nfrom \"delta\".\"silver\".\"cnx_fact_atendimento\" as a\ninner join \"delta\".\"silver\".\"cnx_dim_profissional\" as p on p.id_profissional = a.id_profissional\nleft join delta.silver.pvv_fact_atendimento_financeiro as f on a.id_atendimento = f.id_atendimento_cnx\n\twhere flag_habilitar_recebimento_para_profissionais = true\n\tand p.tipo_conselho = 'CRP'\n    --and (a.unidade_negocio_autoritativa not in ('Teste') or a.unidade_negocio_autoritativa is null) -- retirado momentaneamente para testes do time de QA\n    and (a.status_atendimento = 'Realizado' or (a.status_atendimento = 'No Show Paciente' and a.id_clinica = 2))\n\tand a.data_brt_atendimento >= date'2025-03-22'\n\tand a.data_atendimento <= now()\n),\najuste as (\nselect\n\t*,\n\tcase \n\t\twhen status = 'CONCLUIDO' and data_brt_conclusao <= data_limite_pendente then true\n        when status = 'PENDENTE' and rank = 1 then true\n        when status = 'PENDENTE' and rank = 2 and data_limite_pendente >= date(now()) then true\n        else false\n\tend as flag_ordem_fatura\nfrom comp\n),\npv_pago as (\nselect\nid_atendimento_cnx\nfrom delta.silver.pvv_fact_atendimento_financeiro as a\nwhere data_brt_atendimento >= date'2025-03-22'\nand a.id_convenio in (999998,999999,480)\nand a.flag_pagamento_pagarme = true\n)\nselect\n\t*\nfrom ajuste as a\nwhere flag_ordem_fatura\nand NOT EXISTS (\n    SELECT 1\n    FROM pv_pago AS apv\n    WHERE apv.id_atendimento_cnx = a.id_atendimento\n)\nand flag_existe_roi = false", "relation_name": "\"delta\".\"gold\".\"az_recebimento_profissional_psicologia\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:37.487802Z", "completed_at": "2025-07-01T18:32:37.590972Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:37.657662Z", "completed_at": "2025-07-01T18:32:37.657662Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2548484802246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_transcription_processado", "compiled": true, "compiled_code": "\n\n\nselect \n\ttns.id_atendimento,\n\ttns.thread_id,\n\tatn.id_profissional,\n\tatn.tipo_conselho,\n\tatn.nome_especialidade,\n\ttns.data_hora_criacao_transcricao,\n\ttns.status_transcricao,\n\ttns.tipo_recurso,\n\ttns.status_recurso,\n\tcoalesce(tns.subjetivo_v1, tns.subjetivo_v2) as subjetivo,\n\tcoalesce(tns.objetivo_v1, tns.objetivo_v2) as objetivo,\n\tcoalesce(tns.avaliacao_v1, tns.avaliacao_v2) as avaliacao,\n\tcoalesce(tns.plano_v1, tns.plano_v2) as plano,\n\tfdb.key_id,\n\tfdb.nota,\n\tfdb.nota_descricao,\n\tfdb.comentario,\n\tfdb.data_hora_criacao_feedback\nfrom \"delta\".\"bronze\".\"stg_mongo_transcription_processado\" tns\nleft join \"delta\".\"bronze\".\"stg_mongo_transcription_feedback\" fdb on tns.thread_id = fdb.thread_id\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" atn on tns.id_atendimento = atn.id_atendimento", "relation_name": "\"delta\".\"silver\".\"cnx_fact_transcription_processado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:38.528024Z", "completed_at": "2025-07-01T18:32:39.197862Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:39.596617Z", "completed_at": "2025-07-01T18:32:39.596617Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.505964756011963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_inter_calendario_nova_agenda", "compiled": true, "compiled_code": "\n\nselect \n\trcss.id_slot,\n\trcss.id_profissional,\n    cdpr.id_clinica,\n    cdpr.nome_profissional,\n    cdpr.nome_especialidade,\n    cdpr.tipo_conselho,\n\trcas.duracao_consulta,\n\tcdpr.flag_profissional_conexa,\n\trcss.slot,\n    rcss.flag_ativo,\n    rcss.flag_disponivel,\n\tIF(rcss.tipo_bloqueio = 'APPOINTMENT', true, false) as flag_atendimento,\n\tif(rcss.tipo_bloqueio = 'APPOINTMENT', rcss.id_bloqueio, null) as id_atendimento,\n\tcfa.status_atendimento,\n\tcfa.data_agendado_para\nfrom \"delta\".\"bronze\".\"stg_cnx_schedule_slots\" rcss \ninner join \"delta\".\"bronze\".\"stg_cnx_availability_intervals\" rcai on rcss.id_intervalo_disponibilidade = rcai.id_intervalo_disponibilidade\ninner join \"delta\".\"bronze\".\"stg_cnx_availabilities\" rca on rcai.id_disponibilidade = rca.id_disponibilidade\ninner join \"delta\".\"bronze\".\"stg_cnx_availability_settings\" rcas on rcas.id_configuracao_disponibilidade = rca.id_configuracao_disponibilidade\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" cfa on rcss.id_bloqueio = cfa.id_atendimento and rcss.tipo_bloqueio = 'APPOINTMENT'\nleft join \"delta\".\"silver\".\"cnx_dim_profissional\" cdpr on rcss.id_profissional = cdpr.id_profissional", "relation_name": "\"delta\".\"silver\".\"cnx_inter_calendario_nova_agenda\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:40.601438Z", "completed_at": "2025-07-01T18:32:40.918496Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:41.497778Z", "completed_at": "2025-07-01T18:32:41.498305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1625583171844482, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.medicamentos", "compiled": true, "compiled_code": "\n\nselect \n\tid_prescricao,\n\tto_hex(md5(to_utf8(cast(id_prescricao as varchar) || 'cnx'))) as sk_prescricao,\n\tid_prescricao_item,\n\tto_hex(md5(to_utf8(cast(id_prescricao_item as varchar) || 'cnx'))) as sk_prescricao_item,\n\tcast(p.id_atendimento as varchar) as id_atendimento,\n\tto_hex(md5(to_utf8(cast(p.id_atendimento as varchar) || 'cnx'))) as sk_atendimento,\n\tnome_prescricao as nome_medicamento,\n\tcast(null as varchar) as categoria_medicamento,\n\tdata_hora_insert as data_medicamento,\n\tdata_brt_insert as data_brt_medicamento,\n\tfabricante_prescricao as fabricante,\n\tcast(null as varchar) as brasindice,\n\tcast(null as varchar) as composto_atico,\n\tquantidade as dosagem,\n\tposologia_prescricao as instrucoes,\n\ta.nome_paciente,\n\ta.nome_profissional,\n    'Conexa' as plataforma \nfrom \"delta\".\"silver\".\"cnx_fact_prescricao\" as p\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" as a on a.id_atendimento = p.id_atendimento  \nwhere tipo_prescricao = 'medicamento' \nand year(a.data_atendimento at time zone 'America/Sao_Paulo') >= 2019\nand upper(nome_prescricao) not like'%LAUDO%'\nand upper(nome_prescricao) not like'%ATESTADO%'\nand upper(nome_prescricao) not like'%ACOMPANHAMENTO%'\nand upper(nome_prescricao) not like'%AFASTAMENTO%'\nand upper(nome_prescricao) not like'%ATESTO%'\nand upper(nome_prescricao) not like'%ENCAM%'\nand upper(nome_prescricao) not like'%DECLARACAO%'\nand upper(nome_prescricao) not like'%DECLARO%'\nand upper(nome_prescricao) not like'%ACADEMIA%'\nand upper(nome_prescricao) not like'%ACUPUNTURA%'", "relation_name": "\"delta\".\"gold\".\"medicamentos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:41.692940Z", "completed_at": "2025-07-01T18:32:41.749288Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:41.785573Z", "completed_at": "2025-07-01T18:32:41.785573Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18606305122375488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_atendimentos", "compiled": true, "compiled_code": "\n\nwith dim_session as(\n    select distinct \n        event_id,\n        status,\n        case\n            when noshow = true\n                then true\n            else false\n        end as noshow,\n        session_start_ts,\n        session_end_ts,\n        array_agg(distinct professional_session_reason order by professional_session_reason) as lista_professional_session_reason\n    from zenklub.modelo_2023.dim_session\n    group by 1,2,3,4,5\n),\nqualify_promptuary as(\n    select distinct \n        id as id_prontuario,\n        event.id,\n        row_number() over (partition by event.id order by created_at) as rn\n    from zenklub.modelo_2023.promptuary \n    where is_registered = true\n),\npromptuary as(\n    select \n        id_prontuario,\n        id\n    from qualify_promptuary \n    where rn = 1\n),\nclient_evolution as(\n    select \n        session_id,\n        max(case when cgi_type_evolution = 'Sa\u00fade' then cgi_datapoint_result end) as cgi_resultado_saude,\n        max(case when cgi_type_evolution = 'Qualidade de Vida' then cgi_datapoint_result end) as cgi_resultado_qualidade_vida\n    from zenklub.support.client_evolution\n    group by 1\n),\nzk as(\n    select\n        to_hex(md5(to_utf8(e.event_id || 'zk'))) as sk_atendimento,\n        'Zenklub' as plataforma,\n        e.event_id as id_atendimento,\n        if((e.subscription_planId is null),'999999',e.subscription_planId) as id_clinica_plano,\n        case\n        \twhen e.subscription_planId is not null then to_hex(md5(to_utf8(e.subscription_planId || 'zk')))\n        \telse to_hex(md5(to_utf8('999999' || 'zk')))\n        end as sk_clinica_plano,\n        if((pl.name is null),'Particular',pl.name) as nome_clinica_plano,\n        cast(e.company_id as varchar) as id_empresa,\n        to_hex(md5(to_utf8(cast(e.company_id as varchar) || 'zk'))) as sk_empresa,\n        dc.name as nome_empresa,\n        cast(e.day at time zone 'America/Sao_Paulo' as timestamp) as data_atendimento,\n        date(e.day at time zone 'America/Sao_Paulo') as data_brt_atendimento,\n        year(e.day at time zone 'America/Sao_Paulo') as ano_atendimento,\n        month(e.day at time zone 'America/Sao_Paulo') as mes_atendimento,\n        day(e.day at time zone 'America/Sao_Paulo') as dia_atendimento,\n        cast(e.createdAt at time zone 'America/Sao_Paulo' as timestamp) as data_agendamento,\n        date(e.createdAt at time zone 'America/Sao_Paulo') as data_brt_agendamento,\n        cast(cancellation_cancelledDate at time zone 'America/Sao_Paulo' as timestamp) as data_cancelamento,\n        date(cancellation_cancelledDate at time zone 'America/Sao_Paulo') as data_brt_cancelamento,\n        null as motivo_cancelamento,\n        case \n            when (dim_session.status = 'cancelled' or dim_session.status = 'canceled') and e.reschedule_eventid is null and e.paymentdate is not null then 'Cancelado'\n            when dim_session.status = 'paid' and e.day < now() and dim_session.noshow = true and sr.bad_rating_reason = 'professional-no-show' then 'No show ambos'\n            when dim_session.status = 'paid' and e.day < now() and dim_session.noshow = true then 'No show paciente'\n            when dim_session.status = 'paid' and e.day < now() and dim_session.noshow = false and sr.bad_rating_reason = 'professional-no-show' then 'No show profissional'\n            when dim_session.status = 'paid' and e.day < now() then 'Realizado'\n            when dim_session.status = 'paid' and e.day >= now() then 'Agendado'\n            when dim_session.status in ('invite','new') then 'Agendado'\n            when dim_session.status = 'reserved' then 'Reservado'\n            when dim_session.status in ('reschedule_request','reschedule') then  'Reagendado'\n            when (dim_session.status = 'cancelled' or dim_session.status = 'canceled') and e.reschedule_eventid is not null then 'Reagendado'\n            when (dim_session.status = 'cancelled' or dim_session.status = 'canceled') and e.paymentdate is null then 'N\u00e3o Pago'\n            else dim_session.status\n        end status_atendimento,\n        dim_session.status as status_atendimento_zk, -- fazer de para com a cnx/pv\n        null as flag_consulta_confirmada,\n\t    null as status_confirmacao_reserva,\n        case\n            when e.noshow = true\n                then true\n            else false\n        end as flag_noshow_paciente,\n        case\n            when sr.bad_rating_reason = 'professional-no-show'\n                then true\n            else false\n        end as flag_noshow_profissional,\n        case\n                when dim_professional.main_type = 'nutritionist' then 'Nutri\u00e7\u00e3o Cl\u00ednica'\n                when dim_professional.main_type = 'psychiatrist' then 'Psiquiatria'\n                when dim_professional.main_type = 'psychoanalyst' then 'Psicanalise'\n                when dim_professional.main_type = 'psychologist' then 'Psicologia Cl\u00ednica'\n                when dim_professional.main_type = 'coach' then 'Health Coach'\n                when dim_professional.main_type = 'therapist' then 'Terapia'\n                else main_type \n            end nome_especialidade,\n        case\n                when dim_professional.main_type = 'nutritionist' then 'Nutri\u00e7\u00e3o'\n                when dim_professional.main_type = 'psychiatrist' then 'Especialidades'\n                when dim_professional.main_type in ('psychoanalyst','therapist','coach') then 'Outras Terapias' \n                when dim_professional.main_type = 'psychologist' then 'Psicologia'\n                else main_type \n            end as produto,\n        dim_professional.id  as id_profissional,\n        to_hex(md5(to_utf8(dim_professional.id || 'zk'))) as sk_profissional,\n        case \n            when dim_professional.email like 'deleted%' and (dim_professional.display_name = '' or dim_professional.display_name is null) then 'PROFISSIONAL REMOVIDO' \n            else dim_professional.display_name\n        end nome_profissional,\n        e.profileId as id_paciente,\n        to_hex(md5(to_utf8(e.profileId || 'zk'))) as sk_paciente,\n        --e.profileId as id_usuario_paciente, -- Identificador de elegibilidade\n        case\n            when license is not null then 'CRP'\n            when medical_license is not null then 'CRM'\n            when nutritionist_license is not null then 'CRN'\n            else null\n        end tipo_conselho,\n        coalesce(license, medical_license, nutritionist_license) as numero_conselho,\n        ce.cgi_resultado_saude,\n        ce.cgi_resultado_qualidade_vida,\n        p.id_prontuario,\n        cast(dim_session.session_start_ts at time zone 'America/Sao_Paulo' as timestamp) as data_inicio_atendimento,\n        cast(dim_session.session_end_ts at time zone 'America/Sao_Paulo' as timestamp) as data_fim_atendimento,\n        if(e.clientvcdetails is null, null, array[e.clientvcdetails]) as detalhes_videochamada_paciente,\n        if(e.professionalvcdetails is null, null, array[e.clientvcdetails]) as detalhes_videochamada_profissional,\n        null as lista_codigo_cid10,\n        null as desfecho,\n        null as lista_codigo_ciap2,\n        true as flag_profissional_proprio,\n        replace(translate(u.fiscal_id, '-.', ''), ' ', '') cpf_paciente, -- Ser\u00e1 a chave para vincular com CNX?\n        e.new_b2_type as b2_type,  -- Inclui pois acho relevante\n        dim_session.lista_professional_session_reason as lista_motivo_atendimento,\n        null as origem_fila,\n        null as fila_min,\n        null as sla_fila,\n        null as id_fila,\n        null as data_entrada_fila,\n        null as data_brt_entrada_fila,\n        cast(e.day at time zone 'America/Sao_Paulo' as timestamp) as data_agendado_para,\n        date(e.day at time zone 'America/Sao_Paulo') as data_brt_agendado_para\n    from zenklub.core.events as e --ToDo: substituir por fact_session quando estiver validada\n    left join dim_session on dim_session.event_id = e.event_id\n    left join promptuary as p on p.id = e.event_id \n    left join zenklub.modelo_2023.dim_professional as dim_professional on dim_professional.id = e.professionalId\n    left join zenklub.modelo_2023.dim_customer as u on u.id = e.profileId\n    left JOIN zenklub.modelo_2023.dim_company dc ON dc.id = cast(e.company_id as bigint)\n    left JOIN zenklub.modelo_2023.dim_plan as pl on pl.id = e.subscription_planId\n    left join client_evolution as ce on ce.session_id = e.event_id\n    left join zenklub.dump.session_rating as sr on sr.session_id = e.event_id\n    where year(e.day at time zone 'America/Sao_Paulo') >= 2019 \n),\ncnx as(\n    select\n        to_hex(md5(to_utf8(cast(id_atendimento as varchar) || 'cnx'))) as sk_atendimento,        \n        'Conexa' as plataforma,\n        cast(id_atendimento as varchar) as id_atendimento,\n        cast(id_clinica as varchar) as id_clinica_plano,\n        to_hex(md5(to_utf8(cast(id_clinica as varchar) || 'cnx'))) as sk_clinica_plano,\n        nome_clinica as nome_clinica_plano,\n        id_cliente_autoritativa as id_empresa,\n        to_hex(md5(to_utf8(id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n        nome_cliente_autoritativa as nome_empresa,\n        data_atendimento,\n        data_brt_atendimento,\n        year(data_atendimento at time zone 'America/Sao_Paulo') as ano_atendimento,\n        month(data_atendimento at time zone 'America/Sao_Paulo') as mes_atendimento,\n        day(data_atendimento at time zone 'America/Sao_Paulo') as dia_atendimento,\n        data_agendamento,\n        data_brt_agendamento,\n        data_cancelamento,\n        data_brt_cancelamento,\n        motivo_cancelamento,\n        status_atendimento,\n        null as status_atendimento_zk,\n        flag_consulta_confirmada,\n\t    status_confirmacao_reserva,\n        case\n            when status_atendimento = 'No show paciente'\n                then true\n            else false\n        end as flag_noshow_paciente,\n        cast(null as boolean) as flag_noshow_profissional,\n        nome_especialidade,\n        produto,\n        cast(id_profissional as varchar) as id_profissional,\n        to_hex(md5(to_utf8(cast(id_profissional as varchar) || 'cnx'))) as sk_profissional,\n        nome_profissional,\n        cast(id_paciente as varchar) as id_paciente,\n        to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,\n        -- id_usuario_paciente,\n        tipo_conselho,\n        numero_conselho, -- n\u00e3o existe na silver, levar para l\u00e1 e trazer\n        objetivo_atendimento,\n        null as cgi_resultado_saude, -- n\u00e3o temos na cnx e pv ainda\n        null as cgi_resultado_qualidade_vida, -- n\u00e3o temos na cnx e pv ainda\n        null as id_prontuario, -- temos mas ainda temos que entender a forma de trazer corretamente\n        data_inicio_chamada as data_inicio_atendimento,\n        data_fim_chamada as data_fim_atendimento,\n        detalhes_videochamada_paciente,\n        detalhes_videochamada_profissional,\n        lista_codigo_cid10,\n        desfecho,\n        lista_codigo_ciap2,\n        flag_profissional_conexa as flag_profissional_proprio,\n        cpf_paciente,\n        unidade_negocio_autoritativa as b2_type,\n        origem_fila,\n        fila_min,\n        sla_fila,\n        id_fila,\n        data_entrada_fila,\n        data_brt_entrada_fila,\n        data_agendado_para,\n        data_brt_agendado_para\n    from \"delta\".\"silver\".\"cnx_fact_atendimento\"\n    where year(data_atendimento at time zone 'America/Sao_Paulo') >= 2019\n\nunion all\n\n    select \n        to_hex(md5(to_utf8(cast(id_atendimento as varchar) || 'pvv'))) as sk_atendimento,       \n        'Psicologia Viva' as plataforma,\n        cast(id_atendimento as varchar) as id_atendimento,\n        cast(id_convenio as varchar) as id_clinica_plano,\n        to_hex(md5(to_utf8(cast(id_convenio as varchar) || 'pvv'))) as sk_clinica_plano,\n        nome_convenio as nome_clinica_plano,\n        id_cliente_autoritativa as id_empresa,\n        to_hex(md5(to_utf8(id_cliente_autoritativa || 'pvv'))) as sk_empresa,\n        nome_cliente_autoritativa as nome_empresa,\n        data_atendimento,\n        data_brt_atendimento,\n        year(data_atendimento at time zone 'America/Sao_Paulo') as ano_atendimento,\n        month(data_atendimento at time zone 'America/Sao_Paulo') as mes_atendimento,\n        day(data_atendimento at time zone 'America/Sao_Paulo') as dia_atendimento,\n        data_pagamento as data_agendamento,\n        data_brt_pagamento as data_brt_agendamento,\n        data_cancelamento,\n        data_brt_cancelamento,\n        motivo_cancelamento,\n        status_atendimento,\n        null as status_atendimento_zk,\n        null as flag_consulta_confirmada,\n\t    null as status_confirmacao_reserva,\n        case\n            when status_atendimento in ('No show paciente', 'No show ambos')\n                then true\n            else false\n        end as flag_noshow_paciente,\n        case\n            when status_atendimento in ('No show profissional', 'No show ambos')\n                then true\n            else false\n        end as flag_noshow_profissional,\n        case  \n            when tipo_profissional in('Nutricionista') then 'Nutri\u00e7\u00e3o Cl\u00ednica'\n            when tipo_profissional in('Psic\u00f3logo') then 'Psicologia Cl\u00ednica'\n            else tipo_profissional\n        end nome_especialidade,\n        case  \n            when tipo_profissional in('Nutricionista') then 'Nutri\u00e7\u00e3o'\n            when tipo_profissional in('Psic\u00f3logo') then 'Psicologia'\n            else tipo_profissional\n        end as produto,\n        cast(id_profissional as varchar) as id_profissional,\n        to_hex(md5(to_utf8(cast(id_profissional as varchar) || 'pvv'))) as sk_profissional,\n        nome_profissional,\n        cast(id_paciente as varchar) as id_paciente,\n        to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n        --id_seguranca_usuario as id_usuario_paciente,\n        tipo_conselho,\n        numero_conselho, -- n\u00e3o existe na silver, levar para l\u00e1 e trazer\n        'TERAPIA' as objetivo_atendimento,\n        null as cgi_resultado_saude, -- n\u00e3o temos na cnx e pv ainda\n        null as cgi_resultado_qualidade_vida, -- n\u00e3o temos na cnx e pv ainda\n        null as id_prontuario, -- temos mas ainda temos que entender a forma de trazer corretamente\n        null as data_inicio_atendimento,\n        null as data_fim_atendimento,\n        null as detalhes_videochamada_paciente,\n        null as detalhes_videochamada_profissional,\n        null as lista_codigo_cid10,\n        null as desfecho,\n        null as lista_codigo_ciap2,\n        true as flag_profissional_proprio,\n        cpf_paciente,\n        unidade_negocio_autoritativa as b2_type,\n        null as origem_fila,\n        null as fila_min,\n        null as sla_fila,\n        null as id_fila,\n        null as data_entrada_fila,\n        null as data_brt_entrada_fila,\n        data_atendimento as data_agendado_para,\n        data_brt_atendimento as data_brt_agendado_para\n    from \"delta\".\"silver\".\"pvv_fact_atendimento\"\n    where year(data_atendimento at time zone 'America/Sao_Paulo') >= 2019\n),\nmotivo_atendimento as (\n    select \n        sk_atendimento,\n        array_agg(objetivo_atendimento order by objetivo_atendimento) as lista_objetivo_atendimento\n    from cnx\n    group by 1\n),\namil as (\n\n    select \n        to_hex(md5(to_utf8(cast(id_atendimento as varchar) || 'amil'))) as sk_atendimento,       \n        'Amil' as plataforma,\n        cast(id_atendimento as varchar) as id_atendimento,\n        '8678' as id_clinica_plano,\n        to_hex(md5(to_utf8('8678' || 'amil'))) as sk_clinica_plano,\n        'Amil' as nome_clinica_plano,\n        '0013t00002CnHrAAAV' as id_empresa,\n        to_hex(md5(to_utf8('0013t00002CnHrAAAV' || 'amil'))) as sk_empresa,\n        'Amil' as nome_empresa,\n        COALESCE(data_atendimento, data_atendimento_fila) as data_atendimento,\n        date(COALESCE(data_atendimento, data_atendimento_fila) at time zone 'America/Sao_Paulo') as data_brt_atendimento,\n        year(COALESCE(data_atendimento, data_atendimento_fila) at time zone 'America/Sao_Paulo') as ano_atendimento,\n        month(COALESCE(data_atendimento, data_atendimento_fila) at time zone 'America/Sao_Paulo') as mes_atendimento,\n        day(COALESCE(data_atendimento, data_atendimento_fila) at time zone 'America/Sao_Paulo') as dia_atendimento,\n        COALESCE(data_atendimento, data_atendimento_fila) as data_agendamento,\n        date(COALESCE(data_atendimento, data_atendimento_fila) at time zone 'America/Sao_Paulo') as data_brt_agendamento,\n        null as data_cancelamento,\n        null as data_brt_cancelamento,\n        null as motivo_cancelamento,\n        status_atendimento,\n        null as status_atendimento_zk,\n        null as flag_consulta_confirmada,\n\t    null as status_confirmacao_reserva,\n        case\n            when status_atendimento = 'No show paciente'\n                then true\n            else false\n        end as flag_noshow_paciente,\n        cast(null as boolean) as flag_noshow_profissional,\n        especialidade as nome_especialidade,\n        produto,\n        to_hex(md5(to_utf8(cast(numero_conselho as varchar) || 'amil'))) as id_profissional,\n        to_hex(md5(to_utf8(cast(numero_conselho as varchar) || 'amil'))) as sk_profissional,\n        nome_profissional,\n        cast(id_paciente as varchar) as id_paciente,\n        to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'amil'))) as sk_paciente,\n        --id_seguranca_usuario as id_usuario_paciente,\n        tipo_conselho,\n        cast(numero_conselho as varchar) as numero_conselho,\n        null as cgi_resultado_saude,\n        null as cgi_resultado_qualidade_vida, \n        null as id_prontuario,\n        null as data_inicio_atendimento,\n        null as data_fim_atendimento,\n        null as detalhes_videochamada_paciente,\n        null as detalhes_videochamada_profissional,\n        null as lista_codigo_cid10,\n        desfecho,\n        null as lista_codigo_ciap2,\n        true as flag_profissional_proprio,\n        null as cpf_paciente,\n        'Operadoras' as b2_type,\n        null as lista_motivo_atendimento,\n        null as origem_fila,\n        null as fila_min,\n        null as sla_fila,\n        null as id_fila,\n        null as data_entrada_fila,\n        null as data_brt_entrada_fila,\n        null as data_agendado_para,\n        null as data_brt_agendado_para\n    from \"delta\".\"silver\".\"aml_fact_atendimento\"\n    where year(COALESCE(data_atendimento, data_atendimento_fila) at time zone 'America/Sao_Paulo') >= 2019\n)\n\nselect * from zk\n\nunion all\n\nselect \n    sk_atendimento,\n    plataforma,\n    id_atendimento,\n    id_clinica_plano,\n    sk_clinica_plano,\n    nome_clinica_plano,\n    id_empresa,\n    sk_empresa,\n    nome_empresa,\n    data_atendimento,\n    data_brt_atendimento,\n    ano_atendimento,\n    mes_atendimento,\n\tdia_atendimento,\n\tdata_agendamento,\n    data_brt_agendamento,\n\tdata_cancelamento,\n    data_brt_cancelamento,\n    case \n    \twhen status_atendimento <> 'Cancelado' then null\n    \telse motivo_cancelamento\n    end motivo_cancelamento, \n\tstatus_atendimento,\n\tstatus_atendimento_zk,\n\tflag_consulta_confirmada,\n\tstatus_confirmacao_reserva,\n    flag_noshow_paciente,\n    flag_noshow_profissional,\n\tnome_especialidade,\n    produto,\n\tid_profissional,\n\tsk_profissional,\n\tnome_profissional, \n\tid_paciente,\n\tsk_paciente, \n\ttipo_conselho,\n\tnumero_conselho,\n\tcgi_resultado_saude,\n\tcgi_resultado_qualidade_vida,\n\tid_prontuario,\n\tdata_inicio_atendimento,\n\tdata_fim_atendimento,\n    detalhes_videochamada_paciente,\n    detalhes_videochamada_profissional,\n\tlista_codigo_cid10,\n\tdesfecho,\n\tlista_codigo_ciap2,\n\tflag_profissional_proprio,\n\tcpf_paciente,\n    b2_type, \n    case \n        when objetivo_atendimento is null then null\n        else ma.lista_objetivo_atendimento\n    end as lista_objetivo_atendimento,\n    origem_fila,\n    fila_min,\n    sla_fila,\n    id_fila,\n    data_entrada_fila,\n    data_brt_entrada_fila,\n    data_agendado_para,\n    data_brt_agendado_para\nfrom cnx\nleft join motivo_atendimento as ma using(sk_atendimento)\n\nunion all\n\nselect * from amil", "relation_name": "\"delta\".\"gold\".\"stg_atendimentos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:42.034210Z", "completed_at": "2025-07-01T18:32:42.148471Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:42.213189Z", "completed_at": "2025-07-01T18:32:42.213189Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2958073616027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_atestados", "compiled": true, "compiled_code": "\n\nwith t1 as (\nselect \n\tsk_atestado,\n\tatest.id_atendimento,\n\tto_hex(md5(to_utf8(cast(atest.id_atendimento as varchar) || 'cnx'))) as sk_atendimento,\n\taten.id_paciente,\n\tto_hex(md5(to_utf8(cast(aten.id_paciente as varchar) || 'cnx'))) as sk_paciente,\n\tcast(aten.id_clinica as varchar) as id_clinica_plano,\n\tto_hex(md5(to_utf8(cast(aten.id_clinica as varchar) || 'cnx'))) as sk_clinica_plano,\n    atest.id_prescricao,\n    atest.id_prescricao_item,\n\taten.nome_clinica as nome_clinica_plano,\n\taten.id_cliente_autoritativa as id_empresa,\n\tto_hex(md5(to_utf8(aten.id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n\taten.nome_cliente_autoritativa as nome_empresa,\n\tdata_registro_atestado,\n\tdias_afastamento,\n\tcid as codigo_cid,\n\tdescricao_cid10 as descricao_cid,\n\tflag_cid_atestado,\n\tdetalhe_atestado,\n\tplataforma as fonte_atestado,\n\t'Conexa' as plataforma\nfrom \"delta\".\"silver\".\"cnx_fact_atestado\" as atest\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" as aten on atest.id_atendimento = aten.id_atendimento \nleft join \"delta\".\"bronze\".\"stg_cnx_doenca_cid10\" as cid on atest.cid = cid.codigo_cid10\n)\nselect \n    t1.*,\n    lower(to_hex(md5(to_utf8(cast(coalesce(cast(sk_atestado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_prescricao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_prescricao_item as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_registro_atestado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(dias_afastamento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(codigo_cid as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(descricao_cid as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(flag_cid_atestado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(detalhe_atestado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fonte_atestado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t1", "relation_name": "\"delta\".\"gold\".\"stg_atestados\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:42.426782Z", "completed_at": "2025-07-01T18:32:42.664196Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:42.728285Z", "completed_at": "2025-07-01T18:32:42.728285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4227123260498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_avaliacoes", "compiled": true, "compiled_code": "\n\nWITH\n    CNX_AVALIACOES AS (\n        SELECT\n            id_atendimento,\n            TO_HEX(\n                MD5(TO_UTF8(CAST(id_atendimento AS VARCHAR) || 'cnx'))\n            ) AS sk_atendimento,\n            'Conexa' AS plataforma,\n            to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,\n            cast(id_paciente as varchar) as id_paciente,\n            to_hex(md5(to_utf8(cast(id_profissional as varchar) || 'cnx'))) as sk_profissional,\n            cast(id_profissional as varchar) as id_profissional,\n            nome_profissional,\n            data_brt_atendimento AS data_avaliacao,\n            YEAR(data_brt_atendimento) AS ano_avaliacao,\n            MONTH(data_brt_atendimento) AS mes_avaliacao,\n            to_hex(md5(to_utf8(cast(id_clinica as varchar) || 'cnx'))) as sk_clinica_plano,\n            cast(id_clinica as varchar) as id_clinica_plano,\n            nome_clinica as nome_clinica_plano,\n            produto,\n            tipo_conselho,\n            nome_especialidade,\n            produto_clinica,\n            flag_profissional_conexa,\n            modo_atendimento,\n            t2.*\n        FROM\n            \"delta\".\"silver\".\"cnx_fact_atendimento\" a\n            CROSS JOIN UNNEST (\n                ARRAY[\n                    'nps_profissional',\n                    'nps_plataforma',\n                    'csat_profissional',\n                    'csat_plataforma'\n                ],\n                ARRAY[\n                    a.nps_medico,\n                    a.nps_plataforma,\n                    a.csat_medico,\n                    a.csat_plataforma\n                ],\n                ARRAY[a.comentarios_avaliacao_medico, a.comentarios_avaliacao_plataforma]\n            ) t2 (tipo_avaliacao, nota_avaliacao, comentarios)\n        WHERE\n            (\n                csat_medico IS NOT NULL\n                OR csat_plataforma IS NOT NULL\n                OR nps_medico IS NOT NULL\n                OR nps_plataforma IS NOT NULL\n            )\n        AND year(data_brt_atendimento) >= 2019\n    \n    ),\n    PVV_AVALIACOES AS (\n        SELECT\n            id_atendimento,\n            TO_HEX(\n                MD5(TO_UTF8(CAST(id_atendimento AS VARCHAR) || 'pvv'))\n            ) AS sk_atendimento,\n            'Psicologia Viva' AS plataforma,\n            to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n            cast(id_paciente as varchar) as id_paciente,\n            to_hex(md5(to_utf8(cast(id_profissional as varchar) || 'pvv'))) as sk_profissional,\n            cast(id_profissional as varchar) as id_profissional,\n            nome_profissional,\n            data_brt_atendimento AS data_avaliacao,\n            YEAR(data_brt_atendimento) AS ano_avaliacao,\n            MONTH(data_brt_atendimento) AS mes_avaliacao,\n            to_hex(md5(to_utf8(cast(id_convenio as varchar) || 'pvv'))) as sk_clinica_plano,\n            cast(id_convenio as varchar) as id_clinica_plano,\n            nome_convenio as nome_clinica_plano,\n            produto,\n            'CRP' AS tipo_conselho,\n            'Psicologia Cl\u00ednica' AS nome_especialidade,\n            tipo_convenio AS produto_clinica,\n            TRUE AS flag_profissional_conexa,\n            'AGENDADO' AS modo_atendimento,\n            t2.*\n        FROM\n            \"delta\".\"silver\".\"pvv_fact_atendimento\" a\n            CROSS JOIN UNNEST (\n                ARRAY[\n                    'nps_profissional',\n                    'csat_profissional',\n                    'csat_paciente',\n                    'csat_plataforma',\n                    'csat_audio_video_paciente',\n                    'csat_audio_video_profissional',\n                    'nps_plataforma_profissional'\n                ],\n                ARRAY[\n                    a.nps_profissional,\n                    a.csat_profissional,\n                    a.csat_paciente,\n                    a.csat_plataforma_paciente,\n                    a.csat_audio_video_paciente,\n                    a.csat_audio_video_profissional,\n                    a.csat_plataforma_profissional\n                ],\n                ARRAY[null, a.paciente_comentario]\n            ) t2 (tipo_avaliacao, nota_avaliacao, comentarios)\n        WHERE\n            (\n                csat_profissional IS NOT NULL\n                OR csat_plataforma_paciente IS NOT NULL\n                OR nps_profissional IS NOT NULL\n            )\n            \n        AND year(data_brt_atendimento) >= 2019\n    ),\n    PVV_NPS_PLATAFORMA AS (\n        SELECT\n            NULL AS id_atendimento,\n            NULL AS sk_atendimento,\n            'Psicologia Viva' AS plataforma,\n            to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n            cast(id_paciente as varchar) as id_paciente,\n            null as sk_profissional,\n            null as id_profissional,\n            NULL AS nome_profissional,\n            data_brt_recebido AS data_avaliacao,\n            YEAR(data_brt_recebido) AS ano_avaliacao,\n            MONTH(data_brt_recebido) AS mes_avaliacao,\n            to_hex(md5(to_utf8(cast(id_convenio as varchar) || 'pvv'))) as sk_clinica_plano,\n            cast(id_convenio as varchar) as id_clinica_plano,\n            nome_convenio AS nome_clinica_plano,\n            'Psicologia' AS produto,\n            'CRP' AS tipo_conselho,\n            'Psicologia Cl\u00ednica' AS nome_especialidade,\n            NULL AS produto_clinica,\n            NULL AS flag_profissional_conexa,\n            'AGENDADO' AS modo_atendimento,\n            'nps_plataforma' AS nps_plataforma,\n            nps_plataforma,\n            nps_plataforma_comentario as comentarios\n        FROM\n            \"delta\".\"silver\".\"pvv_fact_avaliacao_plataforma\"\n        WHERE year(data_brt_recebido) >= 2019\n    ),\n    ZK_CSAT_PROFISSIONAL AS (\n        SELECT\n            NULL as id_atendimento,\n            NULL as sk_atendimento,\n            'Zenklub' as plataforma, \n            to_hex(md5(to_utf8(c.id || 'zk'))) as sk_paciente,\n            c.id as id_paciente,\n            to_hex(md5(to_utf8(p.id || 'zk'))) as sk_profissional,\n            p.id as id_profissional,\n            case \n                when p.email like 'deleted%' and (p.display_name = '' or p.display_name is null) then 'PROFISSIONAL REMOVIDO' \n                else upper(p.display_name)\n            end nome_profissional, \n            dim_calendar_sk as data_avaliacao,\n            YEAR(dim_calendar_sk) AS ano_avaliacao,\n            MONTH(dim_calendar_sk) AS mes_avaliacao,\n            to_hex(md5(to_utf8(cast(pl.id as varchar) || 'zk')))  as sk_clinica_plano,\n            pl.id as id_clinica_plano,\n            pl.name as nome_clinica_plano,\n            case\n                when p.main_type = 'nutritionist' then 'Nutri\u00e7\u00e3o'\n                when p.main_type = 'psychiatrist' then 'Especialidades'\n                when p.main_type in ('psychoanalyst','therapist','coach') then 'Outras Terapias'\n                when p.main_type = 'psychologist' then 'Psicologia'\n                else main_type \n            end as produto,\n            null as tipo_conselho,\n            case\n                when p.main_type = 'nutritionist' then 'Nutri\u00e7\u00e3o Cl\u00ednica'\n                when p.main_type = 'psychiatrist' then 'Psiquiatria'\n                when p.main_type = 'psychoanalyst' then 'Psicanalise'\n                when p.main_type = 'psychologist' then 'Psicologia Cl\u00ednica'\n                when p.main_type = 'coach' then 'Health Coach'\n                when p.main_type = 'therapist' then 'Terapia'\n                else main_type \n            end nome_especialidade,\n            NULL as produto_clinica,\n            true as flag_profissional_conexa,\n            'AGENDADO' as modo_atendimento,\n            'csat_profissional' as tipo_avaliacao,\n            rating_vl as nota_avaliacao,\n            comment_ds as comentarios\n        from zenklub.modelo_2023.fact_rating f\n        left join zenklub.modelo_2023.dim_professional p on p.sk = f.dim_professional_sk\n        left join zenklub.modelo_2023.dim_customer as c on c.sk = f.dim_customer_sk\n        left join zenklub.modelo_2023.dim_plan as pl on pl.sk = f.dim_plan_sk\n        WHERE year(dim_calendar_sk) >= 2019\n    ),\nt1 as(\n    SELECT * FROM CNX_AVALIACOES\n\n    UNION ALL \n\n    SELECT * FROM PVV_AVALIACOES\n\n    UNION ALL\n\n    SELECT * FROM PVV_NPS_PLATAFORMA\n\n    UNION ALL\n\n    SELECT * FROM ZK_CSAT_PROFISSIONAL\n)\nselect \n    *,\n    lower(to_hex(md5(to_utf8(cast(coalesce(cast(id_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_avaliacao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ano_avaliacao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(mes_avaliacao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(produto as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo_conselho as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_especialidade as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(produto_clinica as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(flag_profissional_conexa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(modo_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo_avaliacao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nota_avaliacao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(comentarios as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t1", "relation_name": "\"delta\".\"gold\".\"stg_avaliacoes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:43.228733Z", "completed_at": "2025-07-01T18:32:43.415287Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:43.497102Z", "completed_at": "2025-07-01T18:32:43.497102Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5254766941070557, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_mensuracoes", "compiled": true, "compiled_code": "\n\nwith mensuracao as (\nselect \n\tid_atendimento,\n\tid_atendimento_comorbidade,\n\tdata_atendimento,\n\tteste.*\nfrom \"delta\".\"silver\".\"cnx_fact_atendimento_comorbidade\"\ncross join unnest (\n\tarray['Peso','Altura','PA Diastolica','PA Sistolica','Temperatura Corporal','Atividade F\u00edsica'],\n\tarray[sv_peso,sv_altura,sv_pa_diastolica,sv_pa_sistolica,temperatura_corporal,atividade_fisica],\n\tarray[null,null,null,null,null,frequencia_atividade_fisica],\n\tarray[sv_peso_und,sv_altura_und,sv_pa_diastolica_und,sv_pa_sistolica_und,temperatura_corporal_und,'frequ\u00eancia semanal'],\n\tarray[data_atendimento,data_atendimento,data_sv_pa_diastolica,data_sv_pa_sistolica,data_atendimento,data_atendimento],\n\tarray['Antropometrico','Antropometrico','Sinais Vitais','Sinais Vitais','Sinais Vitais','Frequ\u00eancia']\n) teste(nome_mensuracao, medicao_numerica, medicao_descritiva, unidade_medicao, data_medicao, tipo_medicao)\nwhere (teste.medicao_numerica is not null and teste.medicao_numerica != 0)\nor (teste.medicao_numerica = 0 and teste.nome_mensuracao = 'Atividade F\u00edsica')\n),\nt1 as (\nselect \n\tate.id_paciente,\n    to_hex(md5(to_utf8(cast(ate.id_paciente as varchar) || 'cnx'))) as sk_paciente,\n\tate.nome_paciente,\n\tate.id_clinica as id_clinica_plano,\n    to_hex(md5(to_utf8(cast(ate.id_clinica as varchar) || 'cnx'))) as sk_clinica_plano,\n\tate.nome_clinica as nome_clinica_plano,\n\tate.id_profissional,\n    to_hex(md5(to_utf8(cast(ate.id_profissional as varchar) || 'cnx'))) as sk_profissional,\n\tate.nome_profissional,\n    m.id_atendimento,\n    to_hex(md5(to_utf8(cast(m.id_atendimento as varchar) || 'cnx'))) as sk_atendimento,\n    ate.nome_especialidade,\n\tm.nome_mensuracao,\n\tm.medicao_numerica,\n\tm.medicao_descritiva,\n\tm.unidade_medicao,\n\tm.tipo_medicao,\n\tcase \n\t\twhen m.data_medicao is null\n\t\t\tthen date(m.data_atendimento at time zone 'America/Sao_Paulo')\n\t\telse date(m.data_medicao at time zone 'America/Sao_Paulo')\n\tend as data_medicao,\n    'atendimento comorbidade' as origem_mensuracao,\n\tid_atendimento_comorbidade as id_origem,\n\t'paciente' as fonte_medicao_input,\n    'Conexa' as plataforma\nfrom mensuracao as m\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" as ate on m.id_atendimento = ate.id_atendimento\n)\nselect \n    *,\n    lower(to_hex(md5(to_utf8(cast(coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_especialidade as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_mensuracao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(medicao_numerica as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(medicao_descritiva as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(unidade_medicao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo_medicao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_medicao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(origem_mensuracao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_origem as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(fonte_medicao_input as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t1 \nwhere year(data_medicao) >= 2019", "relation_name": "\"delta\".\"gold\".\"stg_mensuracoes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:43.792111Z", "completed_at": "2025-07-01T18:32:43.856650Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:43.899426Z", "completed_at": "2025-07-01T18:32:43.899426Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2511472702026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_vivo_descricao_paciente", "compiled": true, "compiled_code": "\n\n\nselect\n\tid_formulario\n\t,date_parse(horario_inicio_preenchimento_formulario, '%Y-%m-%d %H:%i:%s') as horario_inicio_preenchimento_formulario\n\t,date_parse(horario_final_preenchimento_formulario, '%Y-%m-%d %H:%i:%s') as horario_final_preenchimento_formulario\n\t,email_preenchimento_formulario\n\t,nome_preenchimento_formulario\n\t,cast(v.id_atendimento as bigint) as id_atendimento\n\t,a.id_paciente\n\t,coalesce(a.nome_paciente, v.nome_paciente) as nome_paciente\n\t,a.id_clinica\n\t,a.nome_clinica\n\t,cast(date_parse(data_nascimento_paciente, '%Y-%m-%d %H:%i:%s') as date) as data_nascimento_paciente\n\t,a.id_profissional\n\t,coalesce(a.nome_profissional, v.nome_profissional) as nome_profissional\n\t,date_parse(v.data_atendimento, '%Y-%m-%d %H:%i:%s') as data_atendimento\n\t,v.origem_atendimento\n\t,seguimento_paciente\n\t,sintomas_tem_relacao_com_trabalho\n\t,coalesce(iniciada_medicacao_1, iniciada_medicacao) as iniciada_medicacao\n\t,classificacao_paciente_agudo\n\t,tratamento_com_psicologo\n\t,ideacao_suicida_na_consulta\n\t,previsao_tempo_de_tratamento\n\t,necessidade_de_afastamento_laboral\n\t,classificacao_sintomas\n\t,paciente_em_uso_medicacao\n\t,foi_alterada_medicacao\n\t,paciente_retornou_no_tempo_previsto\nfrom \"delta\".\"bronze\".\"raw_vivo_descricao_paciente\" v\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" a on a.id_atendimento = cast(v.id_atendimento as bigint)", "relation_name": "\"delta\".\"bronze\".\"stg_vivo_descricao_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:44.118304Z", "completed_at": "2025-07-01T18:32:44.194043Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:44.245391Z", "completed_at": "2025-07-01T18:32:44.245391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2272939682006836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_vivo_elegiveis_psiquiatria", "compiled": true, "compiled_code": "\n\n\nselect\n\tcast(v.id_do_atendimento as bigint) as id_atendimento\n\t,coalesce(p.id_paciente, cast(v.id_paciente as bigint)) as id_paciente\n\t,p.nome_paciente\n\t,p.cpf_paciente\n\t,p.data_nascimento_paciente\n\t,v.email_corporativo as email_corporativo_paciente\n\t,v.email_pessoal as email_pessoal_paciente\n\t,p.telefone_cel as telefone_paciente\n\t,coalesce(p.info_adicionais, v.dado_adicional) as info_adicionais_paciente\n\t,coalesce(p.nome_empresa_backoffice, v.empresa) as nome_empresa_backoffice\n\t,p.id_clinica\n\t,p.nome_clinica\n\t,v.matricula\n\t,p.status_paciente\n\t,v.obs_contato\n\t,UPPER(TRIM(v.tipo_de_atendimento)) as tipo_de_atendimento\n\t,a.formato_consulta\n\t,a.id_profissional\n\t,a.nome_profissional\n\t,a.data_atendimento\n\t,a.status\n\t,a.desfecho as desfecho\n\t,a.status_atendimento\n\t,v.receita_controlada\n\t,if(v.receita_controlada like '%Azul%' , true, false) as flag_receita_azul\n\t,if(v.receita_controlada like '%Amarela%' , true, false) as flag_receita_amarela\n\t,v.receita_enviada_correio\n\t,v.feedback_colaborador as feedback_colaborador\n\t,a.comentarios_avaliacao_medico as comentarios_avaliacao_medico\n\t,a.comentarios_avaliacao_plataforma as comentarios_avaliacao_plataforma\n\t,a.nps_medico\n\t,a.nps_plataforma\n\t,v.encaminhado_programa\n\t,v.data_base as data_base_vivo\n\t,if(v.retorno is null, false, true) as flag_retorno\n\t,if(v.primeira_consulta is null, false, true) as flag_primeira_consulta\nfrom \"delta\".\"bronze\".\"raw_vivo_elegiveis_psiquiatria\" v\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" a on a.id_atendimento = cast(v.id_do_atendimento as bigint)\nleft join \"delta\".\"silver\".\"cnx_dim_paciente\" p on p.id_paciente = cast(v.id_paciente as bigint)", "relation_name": "\"delta\".\"bronze\".\"stg_vivo_elegiveis_psiquiatria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:44.432356Z", "completed_at": "2025-07-01T18:32:44.496826Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:44.541335Z", "completed_at": "2025-07-01T18:32:44.541335Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20254158973693848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_chamada_cnx", "compiled": true, "compiled_code": "\nselect\n\tid_atendimento\nfrom \"delta\".\"silver\".\"cnx_fact_atendimento\"\ninner join \"delta\".\"silver\".\"cnx_fact_chamada\" using(id_atendimento)\nwhere ((data_hora_entrada_profissional > data_hora_saida_profissional) or (data_hora_entrada_paciente > data_hora_saida_paciente))", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:45.013925Z", "completed_at": "2025-07-01T18:32:45.103304Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:45.159620Z", "completed_at": "2025-07-01T18:32:45.159620Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2644321918487549, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_profissionais_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.fbcd8ae823", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"profissionais\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:45.502282Z", "completed_at": "2025-07-01T18:32:45.649234Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:45.691702Z", "completed_at": "2025-07-01T18:32:45.691702Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.42262816429138184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_profissionais_tipo_conselho__CFBM__CFESS__CONTER__COREN__CREF__CREFITO__CREFONO__CRM__CRN__CRO__CRP__HC____None.e93617a5aa", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_conselho as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"profissionais\"\n    group by tipo_conselho\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'CFBM','CFESS','CONTER','COREN','CREF','CREFITO','CREFONO','CRM','CRN','CRO','CRP','HC','','None'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:45.860092Z", "completed_at": "2025-07-01T18:32:45.919200Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:45.956705Z", "completed_at": "2025-07-01T18:32:45.956705Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17403721809387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_not_empty_string_profissionais_nome_profissional__False.ccc58a7831", "compiled": true, "compiled_code": "\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            nome_profissional\n            \n        from (select * from \"delta\".\"gold\".\"profissionais\" where flag_ativo = true) dbt_subquery\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where nome_profissional = ''\n\n    )\n\n    select * from errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:46.091085Z", "completed_at": "2025-07-01T18:32:46.132369Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:46.162854Z", "completed_at": "2025-07-01T18:32:46.162854Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13657784461975098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_profissionais_nome_especialidade.a44d0c5c54", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_especialidade\nfrom (select * from \"delta\".\"gold\".\"profissionais\" where flag_ativo = true) dbt_subquery\nwhere nome_especialidade is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:46.330834Z", "completed_at": "2025-07-01T18:32:46.374780Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:46.406216Z", "completed_at": "2025-07-01T18:32:46.406216Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16860508918762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_profissionais_numero_conselho.a12b55fb17", "compiled": true, "compiled_code": "\n\n\n\nselect \n    numero_conselho\nfrom (select * from \"delta\".\"gold\".\"profissionais\" where flag_ativo = true) dbt_subquery\nwhere numero_conselho is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:46.524246Z", "completed_at": "2025-07-01T18:32:46.562513Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:46.591856Z", "completed_at": "2025-07-01T18:32:46.591856Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12506103515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_profissionais_sk_profissional.96c4d6e16b", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_profissional\nfrom \"delta\".\"gold\".\"profissionais\"\nwhere sk_profissional is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:46.706794Z", "completed_at": "2025-07-01T18:32:46.749291Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:46.773377Z", "completed_at": "2025-07-01T18:32:46.773377Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1263289451599121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_profissionais_tipo_conselho.8c0a55c531", "compiled": true, "compiled_code": "\n\n\n\nselect \n    tipo_conselho\nfrom (select * from \"delta\".\"gold\".\"profissionais\" where flag_ativo = true) dbt_subquery\nwhere tipo_conselho is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:46.873879Z", "completed_at": "2025-07-01T18:32:46.909677Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:46.936814Z", "completed_at": "2025-07-01T18:32:46.936814Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11104202270507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_profissionais", "compiled": true, "compiled_code": "\nwith silver as(\nselect cast(id_profissional as varchar) as id_profissional, 'Conexa' as plataforma\nfrom \"delta\".\"silver\".\"cnx_dim_profissional\"\nunion\nselect cast(id_profissional as varchar) as id_profissional, 'Psicologia Viva' as plataforma\nfrom \"delta\".\"silver\".\"pvv_dim_profissional\"\nunion\nselect id as id_profissional, 'Zenklub' as plataforma\nfrom zenklub.modelo_2023.dim_professional\n),\ngold as(\nselect id_profissional, plataforma\nfrom \"delta\".\"gold\".\"profissionais\"\n)\nselect s.*, 'silver' as fonte\nfrom silver as s\nleft join gold as g on g.id_profissional = s.id_profissional\nwhere g.id_profissional is null\nunion\nselect g.*, 'gold' as fonte\nfrom gold as g\nleft join silver as s on s.id_profissional = g.id_profissional\nwhere s.id_profissional is null", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:47.040588Z", "completed_at": "2025-07-01T18:32:47.073509Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:47.098205Z", "completed_at": "2025-07-01T18:32:47.098205Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11125802993774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_indices_profissionais_sk_profissional__sk_profissional__ref_profissionais_.3a1674f55b", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_profissional as id\nfrom \"delta\".\"gold\".\"profissionais\"\n),\nt2 as (\nselect\n    sk_profissional as id\nfrom \"delta\".\"gold\".\"indices_profissionais\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:47.196353Z", "completed_at": "2025-07-01T18:32:47.228901Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:47.255265Z", "completed_at": "2025-07-01T18:32:47.255799Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10777926445007324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_profissionais_sk_profissional.050393b90d", "compiled": true, "compiled_code": "\n\n\n\nselect\n    sk_profissional\nfrom \"delta\".\"gold\".\"profissionais\"\nwhere sk_profissional is not null\ngroup by sk_profissional\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:47.355400Z", "completed_at": "2025-07-01T18:32:47.390564Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:47.413665Z", "completed_at": "2025-07-01T18:32:47.413665Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10684418678283691, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_cpf_profissionais_cpf_profissional.f4e6005d69", "compiled": true, "compiled_code": "\n\n\n\nselect cpf_profissional\nfrom \"delta\".\"gold\".\"profissionais\"\nwhere regexp_like(cpf_profissional,'^\\d{3}\\.?(\\d{3})\\.?(\\d{3})\\-?(\\d{2})$') = false \nand flag_ativo = true\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:47.515167Z", "completed_at": "2025-07-01T18:32:47.546826Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:47.570282Z", "completed_at": "2025-07-01T18:32:47.570282Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10642552375793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_email_profissionais_email_profissional.1145a53c68", "compiled": true, "compiled_code": "\n\n\n\nselect \n    email_profissional\nfrom \"delta\".\"gold\".\"profissionais\"\nwhere regexp_like(email_profissional, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$') = true\nand flag_ativo = true\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:47.665870Z", "completed_at": "2025-07-01T18:32:47.697745Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:47.722949Z", "completed_at": "2025-07-01T18:32:47.722949Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10572123527526855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_teste_profissionais_nome_profissional.83eff6b035", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_profissional\nfrom \"delta\".\"gold\".\"profissionais\"\nwhere upper(nome_profissional) like '%TESTE%'\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:47.855577Z", "completed_at": "2025-07-01T18:32:47.885393Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:47.909309Z", "completed_at": "2025-07-01T18:32:47.909309Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10512995719909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_resultados_dsm5_n1", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect id_atendimento,pontuacao,\n       row_number() OVER (partition by id_atendimento order by max(pontuacao)  desc) as ranking\nfrom \"delta\".\"bronze\".\"stg_pvv_dsm5_n1\"  \ngroup by id_atendimento, pontuacao\n)\nselect distinct \n\tdsm.id_dsm, \n\tdsm.data_inclusao, \n\tdsm.data_brt_inclusao, \n\tdsm.data_ultima_alteracao, \n\tdsm.data_brt_ultima_alteracao, \n\tdsm.id_atendimento, \n\tdsm.id_paciente, \n\tdsm.id_convenio,\n\tdsm.nome_convenio, \n\tdsm.nome_paciente, \n\tdsm.sexo_paciente, \n\tdsm.faixa_etaria_paciente, \n\tdsm.estado_paciente, \n\tdsm.id_profissional, \n\tdsm.nome_profissional,\n    dsm.nome_questionario, \n\tcase \n\t\twhen t1.pontuacao = 0 then 'Nada'\n\t\twhen t1.pontuacao = 1 then 'Muito Leve'\n\t\twhen t1.pontuacao = 2 then 'Leve'\n\t\twhen t1.pontuacao = 3 then 'Moderado'\n\t\twhen t1.pontuacao = 4 then 'Grave'\n\tend resultado,\n\tt1.pontuacao\nfrom \"delta\".\"bronze\".\"stg_pvv_dsm5_n1\" as dsm\ninner join t1 on t1.id_atendimento = dsm.id_atendimento\nwhere t1.ranking = 1", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_resultados_dsm5_n1\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:48.007360Z", "completed_at": "2025-07-01T18:32:48.046801Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:48.072722Z", "completed_at": "2025-07-01T18:32:48.072722Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1170039176940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_lote_guia_tiss_unicos", "compiled": true, "compiled_code": "\n\nwith approvals as (\n\tselect \n\t\tid_atendimento,\n\t\tmax_by(id_lote_guia_tiss, data_envio_lote) as id_lote_guia_tiss\n\tfrom \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" \n\twhere mensagem_glosa_faturamento is null\n\tgroup by 1\n),\nt1 as (\n\tselect\n\t\tid_atendimento,\n\t\tid_lote_guia_tiss,\n\t\tmensagem_glosa_faturamento,\n\t\tsenha_autorizacao,\n\t\tdata_envio_lote,\n        valor_guia,\n        status_lote,\n\t\trank() over (partition by id_atendimento order by data_envio_lote, numero_lote desc) as ranking,\n\t\t(select id_lote_guia_tiss from approvals where ltiss.id_atendimento = approvals.id_atendimento) as lote_approved,\n\t\tif(id_atendimento in (select id_atendimento from approvals), true, false) as has_approval\n\tfrom \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" as ltiss\n),\nt2 as (\n\tselect \n\t\tif(has_approval = false, id_lote_guia_tiss, lote_approved) as id_lote_guia\n\tfrom t1\n\twhere ranking = 1\n),\ntiss as (\n    select\n    \ts.id_solicitacao_tiss,\n    \ts.status,\n    \ta.id_atendimento,\n    \tp.pacote,\n    \tp.quantidade_uso\n    from \"delta\".\"silver\".\"pvv_fact_pagamento_paciente\" p\n    inner join \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" s on p.id_solicitacao_tiss = s.id_solicitacao_tiss \n    inner join \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" a on p.id_realizar_pagamento_paciente = a.id_pagamento_paciente \n)\nselect \n    lot.nome_convenio,\n    atd.data_brt_atendimento as data_atendimento,\n    atd.id_atendimento,\n    lot.id_paciente,\n    lot.paciente_carteirinha,\n    atd.nome_paciente,\n    pro.crp,\n    pro.nome_profissional,\n    pro.id_profissional,\n    lot.data_autorizacao_atendimento,\n    lot.senha_autorizacao,\n    lot.numero_guia_operadora,\n    lot.numero_guia_prestador,\n    lot.numero_lote,\n    lot.data_brt_envio_lote,\n    lot.data_envio_lote,\n    lot.id_lote_guia_tiss,\n    lot.numero_protocolo,\n    lot.valor_guia,\n    lot.enviado_anexo,\n    lot.codigo_glosa_faturamento,\n    lot.mensagem_glosa_faturamento,\n    lot.status_lote,\n    tiss.pacote as quantidade_aprovada,\n    tiss.quantidade_uso,\n    if(tiss.id_solicitacao_tiss is null, false, true) as existe_tiss,\n    tiss.id_solicitacao_tiss,\n    tiss.status\nfrom \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" as lot\nleft join \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as atd on lot.id_atendimento = atd.id_atendimento\nleft join \"delta\".\"silver\".\"pvv_dim_profissional\" as pro on pro.id_profissional = lot.id_profissional\nleft join tiss on tiss.id_atendimento = lot.id_atendimento\nwhere id_lote_guia_tiss in (select distinct id_lote_guia from t2)", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_lote_guia_tiss_unicos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:48.179703Z", "completed_at": "2025-07-01T18:32:48.185137Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:48.210028Z", "completed_at": "2025-07-01T18:32:48.210028Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08222079277038574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.lakehouse.pvv_snp_solicitacao_tiss", "compiled": true, "compiled_code": "\n\n\n\nselect \n\t*\nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as p\n", "relation_name": "\"delta\".\"silver\".\"pvv_snp_solicitacao_tiss\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:48.313914Z", "completed_at": "2025-07-01T18:32:48.345214Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:48.369132Z", "completed_at": "2025-07-01T18:32:48.369132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10484647750854492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_chamada_pvv", "compiled": true, "compiled_code": "\nselect\n    id_atendimento\nfrom \"delta\".\"silver\".\"pvv_fact_atendimento\" as pfa\ninner join \"delta\".\"silver\".\"pvv_fact_streaming\" aspfs using(id_atendimento)\nWHERE ((saida_profissional < entrada_profissional) or (saida_paciente < entrada_paciente)) \nand pfa.data_brt_inclusao >= date('2023-06-01')", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:48.478252Z", "completed_at": "2025-07-01T18:32:48.512744Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:48.542324Z", "completed_at": "2025-07-01T18:32:48.542324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11570596694946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_inter_consultas_realizadas_faturamento_1_x_1", "compiled": true, "compiled_code": "\n\nselect distinct\n\tpag.id_solicitacao_tiss, \n    pag.id_pagamento_paciente,\n\tpag.numero_guia_prestador, \n\tpag.senha_autorizacao,\n\tpag.nome_convenio, \n\tpag.registro_ans, \n\tpag.numero_carteirinha,\n\tpag.codigo_procedimento, \n\tpag.descricao_procedimento,\n\tpag.id_atendimento,\n\tpag.status,\n    pag.data_solicitacao,\n\tpag.quantidade,\n\tpag.quantidade_autorizada,\n    pag.id_convenio,\n    pag.tipo_faturamento,\n\t'Consultas realizadas sem TISS' as pr_fat,\n\tpag.id_paciente,\n\tpag.id_profissional, \n\tpag.data_atendimento,\n\tpag.data_brt_atendimento,\n    pag.codigo_glosa_execucao,\n    pag.mensagem_glosa_execucao,\n\tpag.motivo_pendencia,\n\tpag.cpf_paciente,\n\tpag.email_paciente,\n\tpag.nome_paciente,\n\tpag.status_atendimento\nfrom \"delta\".\"bronze\".\"stg_pvv_atendimento_realizado_faturamento_1_x_1_operadoras\"  as pag\nleft join \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as t1 on t1.id_atendimento = pag.id_atendimento\nwhere t1.id_solicitacao_tiss is null", "relation_name": "\"delta\".\"silver\".\"pvv_inter_consultas_realizadas_faturamento_1_x_1\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:48.650520Z", "completed_at": "2025-07-01T18:32:48.690399Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:48.714015Z", "completed_at": "2025-07-01T18:32:48.714015Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11435270309448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_faturamento_pacote", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect id_pagamento_paciente,\n       count(id_atendimento) as quantidade\nfrom bronze.stg_pvv_atendimento_realizado_faturamento_pacote\ngroup by id_pagamento_paciente\n),\npacote as(\nselect \n\ttiss.id_solicitacao_tiss, \n\tfpp.id_realizar_pagamento_paciente as id_pagamento_paciente,\n    tiss.numero_guia_prestador, \n    tiss.senha_autorizacao, \n    tiss.nome_convenio, \n    tiss.registro_ans, \n    tiss.numero_carteirinha, \n    tiss.codigo_procedimento, \n    tiss.descricao_procedimento, \n    atd.id_atendimento, \n    tiss.status, \n    tiss.data_solicitacao, \n    if((t1.quantidade is not null),t1.quantidade,0) as quantidade, \n    tiss.quantidade_autorizada, \n    atd.id_convenio, \n    'Pacote' as tipo_faturamento, \n    cast(null as varchar) as pr_fat, \n    tiss.id_paciente, \n    tiss.id_profissional, \n    atd.data_atendimento, \n    atd.data_brt_atendimento,\n    tiss.codigo_glosa_execucao, \n    tiss.mensagem_glosa_execucao, \n    tiss.motivo_pendencia, \n    atd.cpf_paciente, \n    atd.email_paciente, \n    atd.nome_paciente, \n    atd.status_atendimento\nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as tiss \ninner join \"delta\".\"silver\".\"pvv_fact_pagamento_paciente\" as fpp on fpp.id_solicitacao_tiss = tiss.id_solicitacao_tiss\ninner join \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as atd on atd.id_pagamento_paciente = fpp.id_realizar_pagamento_paciente\nleft join t1 on t1.id_pagamento_paciente = fpp.id_realizar_pagamento_paciente\nwhere tiss.quantidade_autorizada > 0 \nand tiss.senha_autorizacao is not null\nand atd.status_atendimento = 'Realizado'\nand atd.id_atendimento not in (select id_atendimento from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" where numero_protocolo is not null)  \nand tiss.nome_convenio in('Unimed Amparo', 'Unimed Anhanguera', 'Unimed Ara\u00e7atuba', 'Unimed BH', 'Unimed COP', \n                          'Unimed Guaratinguet\u00e1', 'Unimed Nordeste Paulista', 'Unimed Jaboticabal', \n                          'Unimed Presidente Prudente', 'Unimed RP', 'Unimed Fesp', 'Unimed S\u00e3o Roque', \n                          'Unimed S\u00e3o Jos\u00e9 do Rio Preto', 'Unimed Santa Barbara do Oeste e Americana', \n                          'Unimed Itatiba', 'Unimed Tatui', 'Unimed Lins', 'Unimed Piracicaba')\n),                          \nconsultas_realizadas as(\nselect arfp.*\nfrom \"delta\".\"bronze\".\"stg_pvv_atendimento_realizado_faturamento_pacote\" as arfp\nwhere arfp.id_atendimento not in(select id_atendimento from pacote)\n),\nerros_fat as(\nselect \n\ttiss.id_solicitacao_tiss, \n\tfpp.id_realizar_pagamento_paciente as id_pagamento_paciente,\n    tiss.numero_guia_prestador, \n    tiss.senha_autorizacao, \n    tiss.nome_convenio, \n    tiss.registro_ans, \n    tiss.numero_carteirinha, \n    tiss.codigo_procedimento, \n    tiss.descricao_procedimento, \n    atd.id_atendimento, \n    tiss.status, \n    tiss.data_solicitacao,  \n    if((t1.quantidade is null),t1.quantidade,0) as quantidade, \n    tiss.quantidade_autorizada, \n    atd.id_convenio, \n    'Pacote' as tipo_faturamento, \n    concat_ws(' || ', case when atd.status_atendimento <> 'Realizado' then 'Somente consultas realizadas' else null end,\n    \t              if((t1.quantidade > tiss.quantidade_autorizada),'Quantidade de consulta realizado do pacote \u00e9 maior do que liberado',null),\n                      case when fpp.id_realizar_pagamento_paciente is null then 'Somente consultas atreladas a um pacote' else null end,\n                      case when tiss.id_solicitacao_tiss is null then 'N\u00e3o existe TISS' else null end,\n                      if((tiss.senha_autorizacao is null or tiss.senha_autorizacao = 'null' or tiss.senha_autorizacao = ''),'A autoriza\u00e7\u00e3o tiss n\u00e3o possui senha de autoriza\u00e7\u00e3o.',null),\n                      if((tiss.quantidade_autorizada < 1 or tiss.quantidade_autorizada is null),'A quantidade autorizada \u00e9 menor ou igual a 0.', null)) as pr_fat, \n    tiss.id_paciente, \n    tiss.id_profissional, \n    atd.data_atendimento, \n    atd.data_brt_atendimento,\n    tiss.codigo_glosa_execucao, \n    tiss.mensagem_glosa_execucao, \n    tiss.motivo_pendencia, \n    atd.cpf_paciente, \n    atd.email_paciente, \n    atd.nome_paciente, \n    atd.status_atendimento\nfrom \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as atd \nleft join \"delta\".\"silver\".\"pvv_fact_pagamento_paciente\" as fpp on fpp.id_realizar_pagamento_paciente = atd.id_pagamento_paciente\nleft join \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as tiss on tiss.id_solicitacao_tiss = fpp.id_solicitacao_tiss\nleft join t1 on t1.id_pagamento_paciente = fpp.id_realizar_pagamento_paciente\nwhere atd.id_atendimento not in(select id_atendimento from consultas_realizadas union all select id_atendimento from pacote)\nand tiss.nome_convenio in('Unimed Amparo', 'Unimed Anhanguera', 'Unimed Ara\u00e7atuba', 'Unimed BH', 'Unimed COP', \n                          'Unimed Guaratinguet\u00e1', 'Unimed Nordeste Paulista', 'Unimed Jaboticabal', \n                          'Unimed Presidente Prudente', 'Unimed RP', 'Unimed Fesp', 'Unimed S\u00e3o Roque', \n                          'Unimed S\u00e3o Jos\u00e9 do Rio Preto', 'Unimed Santa Barbara do Oeste e Americana', \n                          'Unimed Itatiba', 'Unimed Tatui', 'Unimed Lins', 'Unimed Piracicaba')\n)\nselect pct.*\nfrom pacote as pct \n    union\nselect er_fat.* \nfrom erros_fat as er_fat\n    union\nselect pag.*\nfrom consultas_realizadas as pag", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_faturamento_pacote\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:48.824259Z", "completed_at": "2025-07-01T18:32:48.857232Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:48.881380Z", "completed_at": "2025-07-01T18:32:48.881380Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11212635040283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_resultados_dsm5_n2", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect \n\tid_dsm,\n\tform_id,\n\tcase \n\t\twhen form_id = 'SRNG4LLe' then round(sum(pontuacao)*5/count(id_dsm)) -- Raiva\n\t\twhen form_id = 'wlGOlDsw' then round(sum(pontuacao)*5/count(id_dsm)) -- Mania\n\t\twhen form_id = 'R0Yp18Ye' then round(sum(pontuacao)*7/count(id_dsm)) -- Ansiedade\n\t\twhen form_id = 'JlgFZFmr' then round(sum(pontuacao)*8/count(id_dsm)) -- Depress\u00e3o\n\t\twhen form_id = 'skh0DbTN' then round(sum(pontuacao)*8/count(id_dsm)) -- Dist\u00farbios do Sono\n\t\twhen form_id = 'XR9HMjWT' then round(sum(pontuacao)*8/count(id_dsm)) -- Uso de Subst\u00e2ncias\n\t\twhen form_id = 'CfPRUOoz' then round(sum(pontuacao)*15/count(id_dsm)) -- Sintomas Som\u00e1ticos\n\t\twhen form_id = 'ZFwthkVw' then round(sum(pontuacao)*5/count(id_dsm)) -- Pensamentos e Comportamentos Repetitivos\n\t\telse null\n\tend as total_bruto,\n\tcase \n\t\twhen form_id = 'wlGOlDsw' then -- Mania\n\t\t\t   case \n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) <= 5 then 0\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) >= 6 then 1  \n\t\t\t   end\n\t\twhen form_id = 'SRNG4LLe' then -- Raiva\n\t\t\t   case \n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 5 then 32.9\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 6 then 38.1\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 7 then 41.3\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 8 then 44\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 9 then 46.3\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 10 then 48.4\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 11 then 50.5\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 12 then 52.6\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 13 then 54.7\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 14 then 56.7\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 15 then 58.8\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 16 then 60.8\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 17 then 62.9\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 18 then 65\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 19 then 67.2\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 20 then 69.4\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 21 then 71.7\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 22 then 74.1\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 23 then 76.8\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 24 then 79.7\n\t\t\t\t\twhen round(sum(pontuacao)*5/count(id_dsm)) = 25 then 83.3  \n\t\t\t   end\n\t\twhen form_id = 'R0Yp18Ye' then -- Ansiedade\n\t\t\t   case \n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 7 then 36.3\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 8 then 42.1 \n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 9 then 44.7 \n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 10 then 46.4\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 11 then 48.4\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 12 then 49.9 \n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 13 then 51.3\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 14 then 52.6\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 15 then 53.8\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 16 then 55.1\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 17 then 56.3\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 18 then 57.6\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 19 then 58.8\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 20 then 60.0\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 21 then 61.3\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 22 then 62.6\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 23 then 63.8\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 24 then 65.1\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 25 then 66.4\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 26 then 67.7\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 27 then 68.9\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 28 then 70.2\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 29 then 71.5\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 30 then 72.9\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 31 then 74.3\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 32 then 75.8\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 33 then 77.4\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 34 then 79.5\n\t\t\t\t\twhen round(sum(pontuacao)*7/count(id_dsm)) = 35 then 82.7  \n\t\t\t   end\n\t\twhen form_id = 'JlgFZFmr' then -- Depress\u00e3o\n\t\t\t   case \n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 8 then 37.1\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 9 then 43.3 \n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 10 then 46.2 \n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 11 then 48.2\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 12 then 49.8\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 13 then 51.2 \n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 14 then 52.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 15 then 53.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 16 then 54.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 17 then 55.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 18 then 56.2\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 19 then 57.1\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 20 then 57.9\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 21 then 58.8\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 22 then 59.7\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 23 then 60.7\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 24 then 61.6\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 25 then 62.5\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 26 then 63.5\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 27 then 64.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 28 then 65.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 29 then 66.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 30 then 67.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 31 then 68.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 32 then 69.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 33 then 70.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 34 then 71.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 35 then 72.5\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 36 then 73.6\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 37 then 74.8\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 38 then 76.2\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 39 then 77.9\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 40 then 81.1\n\t\t\t   end\n\t\twhen form_id = 'skh0DbTN' then -- Dist\u00farbios do Sono\n\t\t\t   case \n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 8 then 28.9\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 9 then 33.1\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 10 then 35.9\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 11 then 38.0\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 12 then 39.8\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 13 then 41.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 14 then 42.9\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 15 then 44.2\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 16 then 45.5\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 17 then 46.7\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 18 then 47.9\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 19 then 49.0\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 20 then 50.1\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 21 then 51.2\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 22 then 52.2\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 23 then 53.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 24 then 54.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 25 then 55.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 26 then 56.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 27 then 57.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 28 then 58.3\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 29 then 59.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 30 then 60.4\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 31 then 61.5\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 32 then 62.6\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 33 then 63.7\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 34 then 64.9\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 35 then 66.1\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 36 then 67.5\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 37 then 69.0\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 38 then 70.8\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 39 then 73.0\n\t\t\t\t\twhen round(sum(pontuacao)*8/count(id_dsm)) = 40 then 76.5\n\t\t\t   end\t\n\t\twhen form_id = 'CfPRUOoz' then round(sum(pontuacao)*15/count(id_dsm)) -- Sintomas Som\u00e1ticos\n\t\twhen form_id = 'ZFwthkVw' then round(sum(pontuacao)/count(id_dsm)) -- Pensamentos e Comportamentos Repetitivos\n\t\twhen form_id = 'XR9HMjWT' then  -- Uso de Subst\u00e2ncias\n\t\t\t   case \n\t\t\t        when sum(pontuacao) = 0 then 0\n\t\t\t\t\twhen (count(id_dsm) filter (where pontuacao > 0)) > 1 then 1\n\t\t\t\t\telse 2\n\t\t\t   end\n\t\telse null\n\tend t_score \nfrom \"delta\".\"bronze\".\"stg_pvv_dsm5_n2\"\nwhere form_id in('R0Yp18Ye','JlgFZFmr','SRNG4LLe','CfPRUOoz','XR9HMjWT','wlGOlDsw','skh0DbTN','ZFwthkVw') \ngroup by id_dsm, form_id\n)\nselect distinct\n\tn2.id_dsm,\n\tn2.data_inclusao,\n\tn2.data_brt_inclusao,\n\tn2.data_ultima_alteracao,\n\tn2.data_brt_ultima_alteracao,\n\tn2.id_atendimento, \n\tn2.id_paciente,\n\tn2.id_convenio,\n\tn2.nome_convenio,\n\tn2.nome_paciente,\n\tn2.sexo_paciente,\n\tn2.faixa_etaria_paciente,\n\tn2.estado_paciente,\n\tn2.id_profissional,\n\tn2.nome_profissional,\n\tn2.nome_questionario, \n\tn2.form_id, \n\tcase \n\t\twhen t1.form_id in('SRNG4LLe','R0Yp18Ye','JlgFZFmr','skh0DbTN') then -- Raiva, Ansiedade, Depress\u00e3o e Dist\u00farbios do Sono\n\t\t\t   case\t\t\n\t\t            when t_score < 55 then 'Nenhum a leve'\n                    when t_score between 55.1 and 59.9 then 'Leve'\n\t\t            when t_score between 60.0 and 69.9 then 'Moderado'\n\t\t            when t_score >= 70 then 'Grave'\n\t\t\t   end\n\t\twhen t1.form_id = 'wlGOlDsw' then -- Mania\n\t\t\t   case \n\t\t\t\t\twhen t_score = 1 then 'Indica probabilidade de uma condi\u00e7\u00e3o man\u00edaca ou hipoman\u00edaca'\n\t\t            when t_score = 0 then 'Indica menos probabilidade de estar associada a sintomas significativos de mania'\n\t\t\t   end\n\t\twhen t1.form_id = 'CfPRUOoz' then -- Sintomas Som\u00e1ticos\n\t\t\t   case \n\t\t\t   \t   when total_bruto <= 9 then 'Leve'\n\t\t\t   \t   when total_bruto between 10 and 14 then 'Moderado'\n\t\t\t\t   when total_bruto >= 15 then 'Grave'\n\t\t\t   end\n\t\twhen t1.form_id = 'ZFwthkVw' then -- Pensamentos e Comportamentos Repetitivos\n\t\t\t   case \n\t\t\t   \t   when t_score <= 1 then 'Leve'\n\t\t\t   \t   when t_score = 2 then 'Moderado'\n\t\t\t\t   when t_score in(3,4) then 'Grave'\n\t\t\t   end\n\t\twhen t1.form_id = 'XR9HMjWT' then  -- Uso de Subst\u00e2ncias\n\t\t       case\n\t\t\t   \t   when t_score = 0 then 'N\u00e3o h\u00e1 ind\u00edcios de risco de uso'\n\t\t\t\t   when t_score = 1 then 'H\u00e1 ind\u00edcios de risco de uso'\n\t\t\t\t   when t_score = 2 then 'O psic\u00f3logo deve interpletar este item'\n\t\t\t   end\n\t\telse null\n\tend as resultado,\n\tt1.t_score as pontuacao,\n\tn2.plataforma\nfrom t1\ninner join \"delta\".\"bronze\".\"stg_pvv_dsm5_n2\" as n2 on n2.id_dsm = t1.id_dsm\nwhere n2.form_id in('R0Yp18Ye','JlgFZFmr','SRNG4LLe','CfPRUOoz','XR9HMjWT','wlGOlDsw','skh0DbTN','ZFwthkVw')", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_resultados_dsm5_n2\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:48.990570Z", "completed_at": "2025-07-01T18:32:49.029369Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:49.056574Z", "completed_at": "2025-07-01T18:32:49.056574Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11968708038330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_inter_faturamento_operadoras_senha", "compiled": true, "compiled_code": "\n\nselect \n\tid_solicitacao_tiss,\n\tid_atendimento,\n\tcast(null as bigint) as id_lote_guia_tiss,\n\tcast(null as bigint) as id_pagamento_paciente,\n\tif((id_solicitacao_tiss is not null),true,false) as flag_existe_tiss,\n\tcast(existe_lote_guia_tiss as boolean) as flag_existe_lote_guia_tiss,\n\tif((pr_fat is not null),true,false) as flag_autorizacao_com_problemas,\n\tnumero_guia_prestador,\n\tsenha_autorizacao,\n\tnome_convenio,\n\tregistro_ans,\n\tnumero_carteirinha,\n\tcodigo_procedimento,\n\tdescricao_procedimento,\n\tstatus,\n\tdata_solicitacao,\n\tquantidade,\n\tquantidade_autorizada,\n\tid_convenio,\n\ttipo_faturamento,\n\tpr_fat,\n\tid_paciente,\n\tid_profissional,\n\tdata_atendimento,\n\tdata_brt_atendimento,\n\tcodigo_glosa_execucao,\n\tmensagem_glosa_execucao,\n\tmotivo_pendencia,\n\tcast(null as varchar) as enviado_anexo,\n\tcast(null as varchar) as numero_protocolo,\n\tcast(null as date) as data_envio_lote,\n\tcast(null as varchar) as status_lote,\n\tcast(null as bigint) valor_guia,\t\n\tcpf_paciente,\n\temail_paciente,\n\tnome_paciente,\n\tstatus_atendimento\nfrom \"delta\".\"bronze\".\"stg_pvv_faturamento_senha_operadoras\"", "relation_name": "\"delta\".\"silver\".\"pvv_inter_faturamento_operadoras_senha\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:49.163540Z", "completed_at": "2025-07-01T18:32:49.283765Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:49.317558Z", "completed_at": "2025-07-01T18:32:49.317558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20993566513061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_elegibilidade_categoria_empresa__Small_Business__media__gigante_____Mid_market__Enterprise__grande__pequena.d789dd78ea", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        categoria_empresa as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"elegibilidade\"\n    group by categoria_empresa\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Small Business','media','gigante',' ','Mid-market','Enterprise','grande','pequena'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:49.561924Z", "completed_at": "2025-07-01T18:32:49.609978Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:49.660634Z", "completed_at": "2025-07-01T18:32:49.660634Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2399733066558838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_elegibilidade_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.e1cc2df2c9", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"elegibilidade\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:49.794516Z", "completed_at": "2025-07-01T18:32:49.861511Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:49.890998Z", "completed_at": "2025-07-01T18:32:49.890998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16564249992370605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_elegibilidade_tipo_contrato__coordinated_care__direct__distribution__extra__partnership__PER_CAPITA__POR_CONSULTA__POR_VIDA__SAAS__SMB__trial__VIDA_CONSULTA__ZERO_BARREIRAS__ZERO_BARREIRAS_LATAM.e6a172adf5", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_contrato as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"elegibilidade\"\n    group by tipo_contrato\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'coordinated_care','direct','distribution','extra','partnership','PER_CAPITA','POR_CONSULTA','POR_VIDA','SAAS','SMB','trial','VIDA_CONSULTA','ZERO_BARREIRAS','ZERO_BARREIRAS_LATAM'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:50.021121Z", "completed_at": "2025-07-01T18:32:50.063627Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:50.093138Z", "completed_at": "2025-07-01T18:32:50.093138Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13565325736999512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_elegibilidade_sk_paciente__id_clinica_plano__sk_empresa__validation_code__tipo_contrato.44485a6596", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sk_paciente, id_clinica_plano, sk_empresa, validation_code, tipo_contrato\n    from \"delta\".\"gold\".\"elegibilidade\"\n    group by sk_paciente, id_clinica_plano, sk_empresa, validation_code, tipo_contrato\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:50.201651Z", "completed_at": "2025-07-01T18:32:50.242702Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:50.268766Z", "completed_at": "2025-07-01T18:32:50.268766Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12162947654724121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_elegibilidade_id_clinica_plano.b4f7f4fe18", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_clinica_plano\nfrom \"delta\".\"gold\".\"elegibilidade\"\nwhere id_clinica_plano is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:50.376681Z", "completed_at": "2025-07-01T18:32:50.423918Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:50.451299Z", "completed_at": "2025-07-01T18:32:50.451299Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12740850448608398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_pacientes_elegibilidade_exclude_plataforma_zk", "compiled": true, "compiled_code": "\n\nselect \n    id_paciente\nfrom \"delta\".\"gold\".\"elegibilidade\"\nwhere id_paciente is null\nand plataforma <> 'Zenklub'", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:50.573374Z", "completed_at": "2025-07-01T18:32:50.613702Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:50.642369Z", "completed_at": "2025-07-01T18:32:50.642369Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13113808631896973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_validation_code_elegibilidade_plataforma_zk", "compiled": true, "compiled_code": "\n\nselect \n    validation_code\nfrom \"delta\".\"gold\".\"elegibilidade\"\nwhere validation_code is null\nand plataforma = 'Zenklub'", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:50.762917Z", "completed_at": "2025-07-01T18:32:50.807062Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:50.841409Z", "completed_at": "2025-07-01T18:32:50.841409Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13927388191223145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_elegibilidade_sk_clinica_plano__sk_clinica__ref_clinicas_.9b15189a02", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_clinica as id\nfrom \"delta\".\"gold\".\"clinicas\"\n),\nt2 as (\nselect\n    sk_clinica_plano as id\nfrom (select * from \"delta\".\"gold\".\"elegibilidade\" where plataforma not in('Amil','Zenklub')) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:50.962631Z", "completed_at": "2025-07-01T18:32:51.008266Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:51.038245Z", "completed_at": "2025-07-01T18:32:51.038245Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13767671585083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_pacientes_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.e75b6b15f7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"pacientes\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:51.139573Z", "completed_at": "2025-07-01T18:32:51.173617Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:51.199367Z", "completed_at": "2025-07-01T18:32:51.199367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10948991775512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_not_empty_string_pacientes_nome_paciente__False.8098ace0d3", "compiled": true, "compiled_code": "\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            nome_paciente\n            \n        from (select * from \"delta\".\"gold\".\"pacientes\" where plataforma <> 'Psicologia Viva' and flag_ativo = true) dbt_subquery\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where nome_paciente = ''\n\n    )\n\n    select * from errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:51.298149Z", "completed_at": "2025-07-01T18:32:51.337485Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:51.365418Z", "completed_at": "2025-07-01T18:32:51.365418Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11896729469299316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_pacientes_sk_paciente.de0192d7c4", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_paciente\nfrom \"delta\".\"gold\".\"pacientes\"\nwhere sk_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:51.470815Z", "completed_at": "2025-07-01T18:32:51.502068Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:51.525842Z", "completed_at": "2025-07-01T18:32:51.525842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1051938533782959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_pacientes", "compiled": true, "compiled_code": "\nwith silver as(\nselect cast(id_paciente as varchar) as id_paciente, 'Conexa' as plataforma\nfrom \"delta\".\"silver\".\"cnx_dim_paciente\"\nunion\nselect cast(id_paciente as varchar) as id_paciente, 'Psicologia Viva' as plataforma\nfrom \"delta\".\"silver\".\"pvv_dim_paciente\"\nunion\nselect id as id_paciente, 'Zenklub' as plataforma\nfrom zenklub.modelo_2023.dim_customer\n),\ngold as(\nselect id_paciente, plataforma\nfrom \"delta\".\"gold\".\"pacientes\"\n)\nselect s.*, 'silver' as fonte\nfrom silver as s\nleft join gold as g on g.id_paciente = s.id_paciente\nwhere g.id_paciente is null\nunion\nselect g.*, 'gold' as fonte\nfrom gold as g\nleft join silver as s on s.id_paciente = g.id_paciente\nwhere s.id_paciente is null", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:51.622430Z", "completed_at": "2025-07-01T18:32:51.657241Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:51.682050Z", "completed_at": "2025-07-01T18:32:51.682050Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10832095146179199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_elegibilidade_sk_paciente__sk_paciente__ref_pacientes_.fd423cec98", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"elegibilidade\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:51.781547Z", "completed_at": "2025-07-01T18:32:51.818319Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:51.843315Z", "completed_at": "2025-07-01T18:32:51.843315Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11049389839172363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_engajamento_id_paciente__cast_id_paciente_as_varchar___ref_pacientes_.d7c9d09d74", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    cast(id_paciente as varchar) as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    id_paciente as id\nfrom (select * from \"delta\".\"gold\".\"engajamento\" where plataforma <> 'Amil') dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:51.953377Z", "completed_at": "2025-07-01T18:32:51.994262Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:52.025282Z", "completed_at": "2025-07-01T18:32:52.025282Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13216686248779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_indices_pacientes_sk_paciente__sk_paciente__ref_pacientes_.3dd323a32e", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"indices_pacientes\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:52.149753Z", "completed_at": "2025-07-01T18:32:52.185346Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:52.212455Z", "completed_at": "2025-07-01T18:32:52.212455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12118268013000488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_pacientes_sk_paciente.63bd50e998", "compiled": true, "compiled_code": "\n\n\n\nselect\n    sk_paciente\nfrom \"delta\".\"gold\".\"pacientes\"\nwhere sk_paciente is not null\ngroup by sk_paciente\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:52.314456Z", "completed_at": "2025-07-01T18:32:52.349450Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:52.374526Z", "completed_at": "2025-07-01T18:32:52.374526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11090707778930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_cpf_pacientes_cpf_paciente.bd93d8ceac", "compiled": true, "compiled_code": "\n\n\n\nselect cpf_paciente\nfrom \"delta\".\"gold\".\"pacientes\"\nwhere regexp_like(cpf_paciente,'^\\d{3}\\.?(\\d{3})\\.?(\\d{3})\\-?(\\d{2})$') = false \nand flag_ativo = true\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:52.482280Z", "completed_at": "2025-07-01T18:32:52.520219Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:52.548169Z", "completed_at": "2025-07-01T18:32:52.548169Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11962652206420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_email_pacientes_email_paciente.82c58f00fb", "compiled": true, "compiled_code": "\n\n\n\nselect \n    email_paciente\nfrom \"delta\".\"gold\".\"pacientes\"\nwhere regexp_like(email_paciente, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$') = true\nand flag_ativo = true\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:52.665446Z", "completed_at": "2025-07-01T18:32:52.705432Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:52.741315Z", "completed_at": "2025-07-01T18:32:52.741315Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13827848434448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_idade_pacientes_idade_paciente.d5a5e8719d", "compiled": true, "compiled_code": "\n\n\n\nselect idade_paciente\nfrom \"delta\".\"gold\".\"pacientes\"\nwhere idade_paciente < 0 or idade_paciente > 120\nand flag_ativo = true\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:53.239657Z", "completed_at": "2025-07-01T18:32:53.327180Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:53.362304Z", "completed_at": "2025-07-01T18:32:53.362304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2896392345428467, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_teste_pacientes_nome_paciente.d06b2249ff", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_paciente\nfrom \"delta\".\"gold\".\"pacientes\"\nwhere upper(nome_paciente) like '%TESTE%'\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:53.563244Z", "completed_at": "2025-07-01T18:32:53.623711Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:53.662428Z", "completed_at": "2025-07-01T18:32:53.662428Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18810009956359863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_recebimento_profissional_psicologia_arquivo", "compiled": true, "compiled_code": "\n\nwith temp_valor as (\n\tselect\n\t\tid_profissional,\n\t\tnome_profissional,\n\t\tcpf_profissional,\n\t\tmes_fatura,\n\t\tano_fatura,\n\t\tmes_pagamento,\n\t\tcase\n\t\t\twhen cupom is not null and flag_gerar_pagamento_profissional = false\n\t\t\t\tthen 0\n\t\t\telse valor_recebimento\n\t\tend as valor_recebimento,\n\t\tcase \n     \t\twhen flag_gerar_pagamento_profissional = true and id_clinica = 2 and cupom is not null \n\t\t\t\tthen valor_custo_operacao\n     \t\twhen id_clinica = 2 and flag_gerar_pagamento_profissional = false and cupom is not null \n\t\t\t\tthen 0\n     \t\twhen id_clinica = 2 \n\t\t\t\tthen valor_custo_operacao\n     \twhen valor_repasse is null or valor_repasse = 0 \n\t\t\tthen 0\n     \telse 0 \n\t\tend as valor_custo_operacao\n\tfrom \"delta\".\"gold\".\"az_recebimento_profissional_psicologia\"\n\twhere status = 'CONCLUIDO'\n),\nvalores as (\n\tselect\n\t\tid_profissional,\n\t\tnome_profissional,\n\t\tcpf_profissional,\n\t\tmes_fatura,\n\t\tano_fatura,\n\t\tmes_pagamento,\n\t\tsum(valor_recebimento) as valor_recebimento,\n\t\tsum(valor_custo_operacao) as valor_custo_operacao\n\tfrom temp_valor\n\tgroup by 1,2,3,4,5,6\n)\nselect\n\tv.nome_profissional,\n\tv.cpf_profissional,\n\td.cnpj,\n\td.tipo_conta,\n\td.banco_codigo,\n\td.agencia,\n\td.agencia_digito,\n\td.conta,\n\td.conta_digito,\n\td.tipo_chave_pix,\n\td.chave_pix,\n\tv.mes_fatura,\n\tv.ano_fatura,\n\tv.mes_pagamento,\n\tv.valor_recebimento,\n\tv.valor_custo_operacao\nfrom valores as v\nleft join mysql_cnx.\"connectdoctor-prod\".profissional_dados_financeiros as d on v.id_profissional = d.idprofissional", "relation_name": "\"delta\".\"gold\".\"az_recebimento_profissional_psicologia_arquivo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:53.802290Z", "completed_at": "2025-07-01T18:32:53.848286Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:53.880371Z", "completed_at": "2025-07-01T18:32:53.880371Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14953255653381348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.cnx_fact_calendario", "compiled": true, "compiled_code": "\n\nwith cancelamentos as (\n    select \n        id_profissional,\n        data_agendado_para,\n        max_by(tipo_perfil_usuario_cancelamento, data_agendado_para) as ultimo_perfil_usuario_cancelamento,\n        max_by(data_cancelamento, data_agendado_para) as ultima_data_cancelamento, \n        max_by(motivo_cancelamento, data_agendado_para) as ultimo_motivo_cancelamento, \n        count(*) as n_cancelamentos\n    from \"delta\".\"silver\".\"cnx_fact_atendimento\"\n    where status_atendimento = 'Cancelado'\n        and data_agendado_para >= date'2024-01-01'\n        and flag_profissional_conexa = true\n    group by 1,2\n),\nagenda_new as (\n    SELECT\n        id_slot,\n        agenda.id_profissional,\n        agenda.id_clinica,\n        nome_profissional,\n        nome_especialidade,\n        tipo_conselho,\n        duracao_consulta,\n        flag_profissional_conexa,\n        slot,\n        flag_atendimento,\n        null as data_calendario,\n        id_atendimento,\n        case\n            when cancelamentos.ultima_data_cancelamento >= agenda.slot then 'Cancelado'\n            when agenda.flag_ativo = false and agenda.id_atendimento is null then 'Inativo'\n            when agenda.status_atendimento is null then 'Aberto'\n            else agenda.status_atendimento\n        end as status_atendimento,\n        cancelamentos.n_cancelamentos,\n        cancelamentos.ultima_data_cancelamento,\n        cancelamentos.ultimo_motivo_cancelamento,\n        cancelamentos.ultimo_perfil_usuario_cancelamento,\n        agenda.data_agendado_para\n    FROM\n        \"delta\".\"silver\".\"cnx_inter_calendario_nova_agenda\" agenda\n    LEFT JOIN cancelamentos on \n        cancelamentos.id_profissional = agenda.id_profissional and cancelamentos.data_agendado_para = agenda.slot\n),\nagenda_old as (\n    SELECT\n        calendario.id_calendario,\n        calendario.id_profissional,\n        profissional.id_clinica,\n        profissional.nome_profissional,\n        profissional.nome_especialidade,\n        profissional.tipo_conselho,\n        profissional.intervalo_atendimento,\n        calendario.intervalo_minute,\n        profissional.flag_profissional_conexa,\n        calendario.slot,\n        calendario.flag_atendimento,\n        calendario.data_calendario,\n        atendimento.id_atendimento,\n        case\n            when cancelamentos.ultima_data_cancelamento >= calendario.slot then 'Cancelado'\n            when atendimento.status_atendimento is null then 'Aberto'\n            else status_atendimento\n        end as status_atendimento,\n        cancelamentos.n_cancelamentos,\n        cancelamentos.ultima_data_cancelamento,\n        cancelamentos.ultimo_motivo_cancelamento,\n        cancelamentos.ultimo_perfil_usuario_cancelamento,\n        atendimento.data_agendado_para,\n        row_number() over (partition by calendario.id_profissional, calendario.slot, atendimento.id_atendimento order by calendario.id_calendario desc) as rnk \n    FROM \"delta\".\"bronze\".\"stg_cnx_compute_agenda\" calendario\n    LEFT JOIN \"delta\".\"silver\".\"cnx_dim_profissional\" profissional on calendario.id_profissional = profissional.id_profissional\n    LEFT JOIN \"delta\".\"silver\".\"cnx_fact_atendimento\" atendimento on \n        calendario.id_profissional = atendimento.id_profissional \n        and calendario.slot = atendimento.data_agendado_para\n        and atendimento.status_atendimento not in ('Cancelado')\n    LEFT JOIN cancelamentos on \n        cancelamentos.id_profissional = calendario.id_profissional and\n        cancelamentos.data_agendado_para = calendario.slot\n)\nSELECT\n    agenda_old.id_calendario,\n    agenda_old.id_profissional,\n    agenda_old.id_clinica,\n    agenda_old.nome_profissional,\n    agenda_old.nome_especialidade,\n    agenda_old.tipo_conselho,\n    cast(replace(agenda_old.intervalo_minute, ' minute', '') as bigint) as intervalo_atendimento,\n    agenda_old.flag_profissional_conexa,\n    cast(agenda_old.slot as timestamp(3) with time zone) as slot,\n    agenda_old.flag_atendimento,\n    cast(agenda_old.data_calendario as timestamp(3) with time zone) as data_calendario,\n    agenda_old.id_atendimento,\n    agenda_old.status_atendimento,\n    agenda_old.n_cancelamentos,\n    cast(agenda_old.ultima_data_cancelamento as timestamp(3) with time zone) as ultima_data_cancelamento,\n    agenda_old.ultimo_motivo_cancelamento,\n    agenda_old.ultimo_perfil_usuario_cancelamento,\n    agenda_old.data_agendado_para\nFROM agenda_old\nleft join agenda_new on agenda_new.id_atendimento = agenda_old.id_atendimento\nWHERE rnk = 1 and agenda_new.id_atendimento is null\n    -- AND id_atendimento not in (SELECT id_atendimento FROM agenda_new)\n-- Remover as duplicadas no id_calendario. \n-- Caso acontece quando existem multiplas mudan\u00e7as na agenda do mesmo dia em horario diferentes. \n-- Remover os atendimentos contidos na agenda nova\n\nUNION ALL\n\nSELECT *\nFROM agenda_new", "relation_name": "\"delta\".\"silver\".\"cnx_fact_calendario\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:54.062917Z", "completed_at": "2025-07-01T18:32:54.143707Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:54.216613Z", "completed_at": "2025-07-01T18:32:54.216613Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2581899166107178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_medicamentos_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.b5e6181f53", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"medicamentos\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:54.437319Z", "completed_at": "2025-07-01T18:32:54.518469Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:54.563229Z", "completed_at": "2025-07-01T18:32:54.563229Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21714544296264648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_medicamentos_id_prescricao__id_prescricao_item__id_atendimento.2f641288a4", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_prescricao, id_prescricao_item, id_atendimento\n    from \"delta\".\"gold\".\"medicamentos\"\n    group by id_prescricao, id_prescricao_item, id_atendimento\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:54.723055Z", "completed_at": "2025-07-01T18:32:54.782308Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:54.819645Z", "completed_at": "2025-07-01T18:32:54.819645Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17457246780395508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_medicamentos_id_atendimento.8ff0197dd3", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_atendimento\nfrom \"delta\".\"gold\".\"medicamentos\"\nwhere id_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:54.983984Z", "completed_at": "2025-07-01T18:32:55.035080Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:55.069842Z", "completed_at": "2025-07-01T18:32:55.069842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16205334663391113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_medicamentos_id_prescricao.86f01568b7", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_prescricao\nfrom \"delta\".\"gold\".\"medicamentos\"\nwhere id_prescricao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:55.231677Z", "completed_at": "2025-07-01T18:32:55.290301Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:55.331756Z", "completed_at": "2025-07-01T18:32:55.332747Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18472695350646973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_medicamentos_nome_medicamento.78088f52df", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_medicamento\nfrom \"delta\".\"gold\".\"medicamentos\"\nwhere nome_medicamento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:55.496244Z", "completed_at": "2025-07-01T18:32:55.548968Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:55.590185Z", "completed_at": "2025-07-01T18:32:55.590185Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17589092254638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_medicamentos_nome_paciente.ea7607b6f2", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_paciente\nfrom \"delta\".\"gold\".\"medicamentos\"\nwhere nome_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:55.742508Z", "completed_at": "2025-07-01T18:32:55.795488Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:55.829320Z", "completed_at": "2025-07-01T18:32:55.829320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16044068336486816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_medicamentos_id_prescricao__id_prescricao__ref_cnx_fact_prescricao_.5d1f5ac9c2", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    id_prescricao as id\nfrom \"delta\".\"silver\".\"cnx_fact_prescricao\"\n),\nt2 as (\nselect\n    id_prescricao as id\nfrom \"delta\".\"gold\".\"medicamentos\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:55.975304Z", "completed_at": "2025-07-01T18:32:56.025231Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:56.074049Z", "completed_at": "2025-07-01T18:32:56.074049Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1718144416809082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.atendimentos", "compiled": true, "compiled_code": "\n\nSELECT *\nFROM \"delta\".\"gold\".\"stg_atendimentos\"", "relation_name": "\"delta\".\"gold\".\"atendimentos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:56.280511Z", "completed_at": "2025-07-01T18:32:56.343111Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:56.375543Z", "completed_at": "2025-07-01T18:32:56.375543Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17269229888916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.atestados", "compiled": true, "compiled_code": "\n\nselect \n\tsk_atestado,\n\tid_atendimento,\n\tsk_atendimento,\n\tid_paciente,\n\tsk_paciente,\n\tid_clinica_plano,\n\tsk_clinica_plano,\n\tid_prescricao,\n\tid_prescricao_item,\n\tnome_clinica_plano,\n\tid_empresa,\n\tsk_empresa,\n\tnome_empresa,\n\tdata_registro_atestado,\n\tdias_afastamento,\n\tcodigo_cid,\n\tdescricao_cid,\n\tflag_cid_atestado,\n\tdetalhe_atestado,\n\tfonte_atestado,\n\tplataforma\nfrom \"delta\".\"gold\".\"stg_atestados\"", "relation_name": "\"delta\".\"gold\".\"atestados\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:56.506643Z", "completed_at": "2025-07-01T18:32:56.548922Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:56.578599Z", "completed_at": "2025-07-01T18:32:56.578599Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13535404205322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.avaliacoes", "compiled": true, "compiled_code": "\n\nselect \n    id_atendimento, \n    sk_atendimento, \n    plataforma, \n    sk_paciente, \n    id_paciente,\n    sk_profissional,\n    id_profissional,\n    nome_profissional, \n    data_avaliacao, \n    ano_avaliacao, \n    mes_avaliacao, \n    sk_clinica_plano, \n    nome_clinica_plano, \n    produto, \n    tipo_conselho, \n    nome_especialidade, \n    produto_clinica, \n    flag_profissional_conexa, \n    modo_atendimento, \n    tipo_avaliacao, \n    nota_avaliacao, \n    case \n        when tipo_avaliacao like 'nps_%' then\n                     case \n                         when nota_avaliacao <= 6 then 'Detrator'\n                         when nota_avaliacao between 7 and 8 then 'Neutro'\n                         when nota_avaliacao > 8 then 'Promotor'\n                     end\n        when tipo_avaliacao like 'csat_%' then\n                     case \n                         when nota_avaliacao < 3 then 'Insatisfeito'\n                         when nota_avaliacao = 3 then 'Neutro'\n                         when nota_avaliacao > 3 then 'Satisfeito'\n                     end\n        else null\n    end classificacao,\n    comentarios\nfrom \"delta\".\"gold\".\"stg_avaliacoes\"\nwhere nota_avaliacao is not null or (comentarios is not null or comentarios != '')", "relation_name": "\"delta\".\"gold\".\"avaliacoes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:56.700222Z", "completed_at": "2025-07-01T18:32:56.738315Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:56.766377Z", "completed_at": "2025-07-01T18:32:56.766377Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1285102367401123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.mensuracoes", "compiled": true, "compiled_code": "\n\nselect \n\tid_paciente,\n\tsk_paciente,\n\tnome_paciente,\n\tid_clinica_plano,\n\tsk_clinica_plano,\n\tnome_clinica_plano,\n\tid_profissional,\n\tsk_profissional,\n\tnome_profissional,\n\tid_atendimento,\n\tsk_atendimento,\n\tnome_especialidade,\n\tnome_mensuracao,\n\tmedicao_numerica,\n\tmedicao_descritiva,\n\tunidade_medicao,\n\ttipo_medicao,\n\tdata_medicao,\n\torigem_mensuracao,\n\tid_origem,\n\tfonte_medicao_input,\n\tplataforma\nfrom \"delta\".\"gold\".\"stg_mensuracoes\"", "relation_name": "\"delta\".\"gold\".\"mensuracoes\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:56.871280Z", "completed_at": "2025-07-01T18:32:56.903538Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:56.931289Z", "completed_at": "2025-07-01T18:32:56.931289Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11278605461120605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.spo_fact_vivo_descricao_paciente", "compiled": true, "compiled_code": "\n\n\nselect \n\tid_formulario\n\t,horario_inicio_preenchimento_formulario\n\t,horario_final_preenchimento_formulario\n\t,email_preenchimento_formulario\n\t,nome_preenchimento_formulario\n\t,id_atendimento\n\t,id_paciente\n\t,nome_paciente\n\t,id_clinica\n\t,nome_clinica\n\t,data_nascimento_paciente\n\t,id_profissional\n\t,nome_profissional\n\t,data_atendimento\n\t,origem_atendimento\n\t,seguimento_paciente\n\t,sintomas_tem_relacao_com_trabalho\n\t,iniciada_medicacao\n\t,classificacao_paciente_agudo\n\t,tratamento_com_psicologo\n\t,ideacao_suicida_na_consulta\n\t,previsao_tempo_de_tratamento\n\t,necessidade_de_afastamento_laboral\n\t,classificacao_sintomas\n\t,paciente_em_uso_medicacao\n\t,foi_alterada_medicacao\n\t,paciente_retornou_no_tempo_previsto\nfrom \"delta\".\"bronze\".\"stg_vivo_descricao_paciente\"", "relation_name": "\"delta\".\"silver\".\"spo_fact_vivo_descricao_paciente\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:57.036141Z", "completed_at": "2025-07-01T18:32:57.069263Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:57.095479Z", "completed_at": "2025-07-01T18:32:57.095479Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1128072738647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.spo_fact_vivo_elegiveis_psiquiatria", "compiled": true, "compiled_code": "\n\n\nselect \n    id_atendimento\n    ,id_paciente\n    ,nome_paciente\n    ,cpf_paciente\n    ,data_nascimento_paciente\n    ,email_corporativo_paciente\n    ,email_pessoal_paciente\n    ,telefone_paciente\n    ,info_adicionais_paciente\n    ,nome_empresa_backoffice\n    ,id_clinica\n    ,nome_clinica\n    ,matricula\n    ,status_paciente\n    ,obs_contato\n    ,tipo_de_atendimento\n    ,formato_consulta\n    ,id_profissional\n    ,nome_profissional\n    ,data_atendimento\n    ,status\n    ,desfecho\n    ,status_atendimento\n    ,receita_controlada\n    ,flag_receita_azul\n    ,flag_receita_amarela\n    ,receita_enviada_correio\n    ,feedback_colaborador\n    ,comentarios_avaliacao_medico\n    ,comentarios_avaliacao_plataforma\n    ,nps_medico\n    ,nps_plataforma\n    ,encaminhado_programa\n    ,data_base_vivo\n    ,flag_retorno\n    ,flag_primeira_consulta\nfrom \"delta\".\"bronze\".\"stg_vivo_elegiveis_psiquiatria\"", "relation_name": "\"delta\".\"silver\".\"spo_fact_vivo_elegiveis_psiquiatria\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:57.200312Z", "completed_at": "2025-07-01T18:32:57.245298Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:57.273169Z", "completed_at": "2025-07-01T18:32:57.273169Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1261608600616455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_faturamento_1_x_1_operadoras", "compiled": true, "compiled_code": "\n\nwith t1 as (\n-- Abertta Sa\u00fade \nselect \n    s.id_solicitacao_tiss,\n\ts.data_ultima_alteracao,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento, \n\ts.id_paciente,\n\ts.id_profissional,  \n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia \nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s  \nwhere /*s.data_solicitacao > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand */s.status_atendimento = 'Realizado'\nand s.numero_guia_prestador is not null\nand s.senha_autorizacao is not null\nand s.senha_autorizacao != 'null' \nand s.nome_convenio = 'Abertta Sa\u00fade'\n/*and s.id_atendimento not in (select lg.id_atendimento\n                                 from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\"  as lg \n\t\t\t\t\t\t        where lg.nome_convenio = 'Abertta Sa\u00fade'\n                                  and lg.numero_protocolo is not null)*/\n                                                     union all -- Porto Seguro\t\t \nselect \n    s.id_solicitacao_tiss,\n\ts.data_ultima_alteracao,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento, \n\ts.id_paciente,\n\ts.id_profissional,  \n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia \nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s\ninner join \"delta\".\"silver\".\"pvv_dim_paciente\"  as pac on s.id_paciente = pac.id_paciente \nwhere /*s.data_solicitacao > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand */s.status_atendimento = 'Realizado'\nand (s.registro_ans is null or s.registro_ans = '000582' or s.registro_ans = '00058-2' or s.registro_ans = '312126' or s.registro_ans = '31212-6')\nand s.numero_guia_prestador is not null\nand s.senha_autorizacao is not null\nand s.nome_convenio in('Porto Seguro','Porto 2022')\nand pac.documento is not null\nand pac.carteirinha_convenio is not null\n/*and s.id_atendimento not in (select lg.id_atendimento\n                                 from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\"  as lg \n\t\t\t\t\t\t        where lg.nome_convenio in ('Porto Seguro','Porto 2022') \n                                  and lg.numero_protocolo is not null)*/\n                                                     union all -- Unimed Rio\nselect \n    s.id_solicitacao_tiss,\n\ts.data_ultima_alteracao,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento, \n\ts.id_paciente,\n\ts.id_profissional,  \n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia \nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s \nwhere /*s.data_solicitacao > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand */s.status_atendimento = 'Realizado'\nand s.numero_guia_prestador is not null \nand s.senha_autorizacao is not null \nand s.senha_autorizacao != 'null' \nand s.senha_autorizacao != '' \nand s.nome_convenio = 'Unimed Rio' \nand s.status = '1 - AUTORIZADO'\n/*and s.id_atendimento not in (select lg.id_atendimento\n                                 from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\"  as lg \n\t\t\t\t\t\t        where lg.nome_convenio = 'Unimed Rio' \n\t\t\t\t\t\t          and lg.numero_protocolo is not null)*/\n                                                     union all -- Prevent Senior\nselect \n    s.id_solicitacao_tiss,\n\ts.data_ultima_alteracao,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento, \n\ts.id_paciente,\n\ts.id_profissional,  \n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia \nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s \nwhere /*s.data_solicitacao > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand */s.status_atendimento = 'Realizado'\nand s.numero_guia_prestador is not null \nand s.senha_autorizacao is not null \nand s.senha_autorizacao != 'null' \nand s.senha_autorizacao != '' \nand s.nome_convenio = 'Prevent Senior' \n/*and s.id_atendimento not in (select lg.id_atendimento\n                                 from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\"  as lg \n\t\t\t\t\t\t        where lg.nome_convenio = 'Prevent Senior'\n \t\t\t\t\t\t\t\t  and lg.numero_protocolo is not null)*/                  \n            \t\t\t\t\t\t                  union all -- Amil     \nselect \n    s.id_solicitacao_tiss,\n\ts.data_ultima_alteracao,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento, \n\ts.id_paciente,\n\ts.id_profissional,  \n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia \nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s \nwhere /*s.data_solicitacao > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand */s.status_atendimento = 'Realizado'\nand s.numero_guia_prestador is not null \nand s.senha_autorizacao is not null \nand s.senha_autorizacao != 'null' \nand s.senha_autorizacao != '' \nand s.nome_convenio in('Amil','Amil One','Amil One Sa\u00fade Mental','Amil Sa\u00fade Mental')  \nand s.status = '1 - AUTORIZADO'\nand s.token_solicitacao is not null \n/*and s.id_atendimento not in (select lg.id_atendimento\n                                 from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" as lg \n\t\t\t\t\t\t        where lg.nome_convenio = 'Amil'\n\t\t\t\t\t\t          and lg.numero_protocolo is not null)*/\n\t\t\t\t\t\t                           union all -- Unimed Rondon\u00f3polis\nselect \n    s.id_solicitacao_tiss,\n\ts.data_ultima_alteracao,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento, \n\ts.id_paciente,\n\ts.id_profissional,  \n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia \nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s \nwhere /*s.data_solicitacao > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand */s.status_atendimento = 'Realizado'\nand s.nome_convenio = 'Unimed Rondon\u00f3polis'\nand s.status = '1 - AUTORIZADO'\nand s.quantidade_autorizada > 0 \nand s.senha_autorizacao is not null\nand s.id_solicitacao_pai is not null  \n/*and s.id_atendimento not in (select lg.id_atendimento\n                                 from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" as lg \n\t\t\t\t\t\t        where lg.nome_convenio = 'Unimed Rondon\u00f3polis' \n    \t\t\t \t\t\t      and lg.numero_protocolo is not null)*/\n\t\t\t\t\t\t                           union all -- Unimed VTRP\nselect \n    s.id_solicitacao_tiss,\n\ts.data_ultima_alteracao,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento, \n\ts.id_paciente,\n\ts.id_profissional,  \n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia \nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s \nwhere /*s.data_solicitacao > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand */s.status_atendimento = 'Realizado'\nand s.numero_guia_prestador is not null \nand s.senha_autorizacao is not null \nand s.senha_autorizacao != 'null' \nand s.senha_autorizacao != ''\nand s.nome_convenio = 'Unimed VTRP'\n/*and s.id_atendimento not in (select lg.id_atendimento\n                                 from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" as lg \n\t\t\t\t\t\t        where lg.nome_convenio = 'Unimed VTRP' \n                                  and lg.numero_protocolo is not null) */\n\t\t\t\t\t\t                           union all -- Bradesco\nselect \n    s.id_solicitacao_tiss,\n\ts.data_ultima_alteracao,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento, \n\ts.id_paciente,\n\ts.id_profissional,  \n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia \nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s \nwhere /*s.data_solicitacao > cast('2022-01-01 00:00:00.000 -0300' as timestamp(3) with time zone)\nand */s.status_atendimento = 'Realizado'\nand s.numero_guia_prestador is not null\nand s.senha_autorizacao is not null\nand s.senha_autorizacao != 'null'\nand s.status = '1 - AUTORIZADO'\nand s.status_execucao = '1'\nand s.nome_convenio = 'Bradesco' \nand s.guia_executada = 'S' \n/*and s.id_atendimento not in (select lg.id_atendimento\n                                 from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\" as lg \n\t\t\t\t\t\t        where lg.nome_convenio = 'Bradesco' \n\t\t\t\t\t\t\t      and lg.numero_protocolo is not null \n\t\t\t\t\t\t\t\t  and lg.status_lote != 'ERRO_NO_FATURAMENTO')*/\n)\t\t\t\t\t\t\t\t  \nselect \n    t1.id_solicitacao_tiss,\n\tt1.data_ultima_alteracao,\n\tt1.numero_guia_prestador, \n\tt1.senha_autorizacao,  \n    t1.nome_convenio, \n    t1.registro_ans, \n\tt1.numero_carteirinha,\n\tt1.codigo_procedimento, \n\tt1.descricao_procedimento,\n\tt1.id_atendimento,\n    t1.status,\n\tt1.data_solicitacao,\n\tt1.quantidade,\n\tt1.quantidade_autorizada, \n\t'1_x_1' as tipo_faturamento,\n\tcase \n\t\twhen lote.id_atendimento is not null then 'Faturada'\n\t\telse null\n\tend as pr_fat,\n\tt1.id_paciente,\n\tt1.id_profissional,  \n    t1.codigo_glosa_execucao,\n    t1.mensagem_glosa_execucao,\n\tt1.motivo_pendencia \nfrom t1\nleft join \"delta\".\"bronze\".\"stg_pvv_lote_guia_tiss_unicos\" as lote on lote.id_atendimento = t1.id_atendimento", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_faturamento_1_x_1_operadoras\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:57.395105Z", "completed_at": "2025-07-01T18:32:57.439368Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:57.475575Z", "completed_at": "2025-07-01T18:32:57.475575Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14032483100891113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_inter_faturamento_operadoras_pacote", "compiled": true, "compiled_code": "\n\nselect\n\tfat.id_solicitacao_tiss,\n\tfat.id_atendimento,\n\tlot.id_lote_guia_tiss,\n\tfat.id_pagamento_paciente,\n\tif((fat.id_solicitacao_tiss is not null),true,false) as flag_existe_tiss,\n\tif((lot.id_lote_guia_tiss is not null),true,false) as flag_existe_lote_guia_tiss,\n\tif((fat.pr_fat is not null),true,false) as flag_autorizacao_com_problemas,\n\tfat.numero_guia_prestador,\n\tfat.senha_autorizacao,\n\tfat.nome_convenio,\n\tfat.registro_ans,\n\tfat.numero_carteirinha,\n\tfat.codigo_procedimento,\n\tfat.descricao_procedimento,\n\tfat.status,\n\tfat.data_solicitacao,\n\tfat.quantidade,\n\tfat.quantidade_autorizada,\n\tfat.id_convenio,\n\tfat.tipo_faturamento,\n\tfat.pr_fat,\n\tfat.id_paciente,\n\tfat.id_profissional,\n\tfat.data_atendimento,\n\tfat.data_brt_atendimento,\n\tfat.codigo_glosa_execucao,\n\tfat.mensagem_glosa_execucao,\n\tfat.motivo_pendencia,\n\tlot.enviado_anexo,\n\tlot.numero_protocolo, \n\tlot.data_envio_lote,\n\tlot.status_lote,\n\tlot.valor_guia,\n\tfat.cpf_paciente,\n\tfat.email_paciente,\n\tfat.nome_paciente,\n\tfat.status_atendimento\nfrom \"delta\".\"bronze\".\"stg_pvv_faturamento_pacote\" as fat\nleft join \"delta\".\"bronze\".\"stg_pvv_lote_guia_tiss_unicos\" as lot on lot.id_atendimento = fat.id_atendimento", "relation_name": "\"delta\".\"silver\".\"pvv_inter_faturamento_operadoras_pacote\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:57.587785Z", "completed_at": "2025-07-01T18:32:57.644134Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:57.677646Z", "completed_at": "2025-07-01T18:32:57.677646Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14510512351989746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_exames", "compiled": true, "compiled_code": "\n\nwith t1 as(\nselect \n    case\n        when dss.source = 'Conexa' then to_hex(md5(to_utf8(cast(dss.id_dass21 as varchar) || 'cnx')))\n        else to_hex(md5(to_utf8(cast(dss.id_dass21 as varchar) || 'pvv')))\n    end as sk_exame,\n    dss.id_dass21 as id_exame,\n    'Mental' as tipo,\n    'Question\u00e1rio' as subtipo,\n    cast(null as varchar) as tuss,\n    'DASS-21' as nome_exame,\n    dss.data_criacao as data_exame,\n    date(dss.data_criacao at time zone 'America/Sao_Paulo') as data_brt_exame,\n    'Realiza\u00e7\u00e3o' as acao,\n    cast(null as varchar) as anexo,\n    cast(pac.id_paciente as varchar) as id_paciente,\n    pac.sk_paciente,\n    -- pac.nome_paciente,\n    cast(null as bigint) as id_profissional,\n    cast(null as varchar) as sk_profissional,\n    cast(null as varchar) as nome_profissional,\n    cast(dss.id_clinica as varchar) as id_clinica_plano,\n    dss.sk_clinica as sk_clinica_plano,\n    dss.nome_clinica as nome_clinica_plano,\n    cl.id_cliente_autoritativa as id_empresa,\n\tto_hex(md5(to_utf8(cl.id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n    cl.nome_cliente_autoritativa as nome_empresa,\n    cast(null as varchar) as id_atendimento,\n    cast(null as varchar) as sk_atendimento,\n    dss.source as plataforma\nfrom \"delta\".\"gold\".\"dass21\" as dss\ninner join \"delta\".\"gold\".\"pacientes\" as pac on dss.sk_paciente = pac.sk_paciente\nleft join \"delta\".\"gold\".\"clinicas\" as cl on dss.sk_clinica = cl.sk_clinica\n\nunion all       \n\nselect \n    to_hex(md5(to_utf8(cast(tcp.id_tabela_classificacao_paciente as varchar) || 'pvv'))) as sk_exame,\n    cast(tcp.id_tabela_classificacao_paciente as varchar) as id_exame,\n    'Mental' as tipo,\n    'An\u00e1lise Cl\u00ednica' as subtipo,\n    cast(null as varchar) as tuss,\n    'Avalia\u00e7\u00e3o Cl\u00ednica Psicol\u00f3gica' as nome_exame,\n    tcp.data_inclusao as data_exame,\n    tcp.data_brt_inclusao as data_brt_exame,\n    'Realiza\u00e7\u00e3o' as acao,\n    cast(null as varchar) as anexo,\n    cast(tcp.id_paciente as varchar) as id_paciente,\n    to_hex(md5(to_utf8(cast(tcp.id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    -- pac.nome_paciente,\n    tcp.id_profissional,\n    to_hex(md5(to_utf8(cast(tcp.id_profissional as varchar) || 'pvv'))) as sk_profissional,\n    pro.nome_profissional,\n    cast(pac.id_convenio as varchar) as id_clinica_plano,\n    to_hex(md5(to_utf8(cast(pac.id_convenio as varchar) || 'pvv'))) as sk_clinica_plano,\n    pac.nome_convenio as nome_clinica_plano,\n    con.id_cliente_autoritativa as id_empresa,\n\tto_hex(md5(to_utf8(con.id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n    con.nome_cliente_autoritativa as nome_empresa,\n    cast(null as varchar) as id_atendimento,\n    cast(null as varchar) as sk_atendimento,\n    'Psicologia Viva' as plataforma\nfrom \"delta\".\"silver\".\"pvv_dim_tabela_classificacao_paciente\" as tcp\nleft join \"delta\".\"silver\".\"pvv_dim_paciente\" as pac on tcp.id_paciente = pac.id_paciente\nleft join \"delta\".\"silver\".\"pvv_dim_profissional\" as pro on pro.id_profissional = tcp.id_profissional\nleft join \"delta\".\"silver\".\"pvv_dim_convenio\" as con on con.id_convenio = pac.id_convenio\n\nunion all\n\nselect\n\tto_hex(md5(to_utf8(response_id || 'zk'))) as sk_exame,\n    response_id as id_exame,\n    'Mental' as tipo,\n    'Question\u00e1rio' as subtipo,\n    cast(null as varchar) as tuss,\n    case \n\t    when lower(form_title) like '%ans%' then 'GAD-7'\n        when lower(form_title) like '%dep%' then 'PHQ-9'\n        when lower(form_title) like '%ibc%' then 'IBC'\n        else form_title\n    end as nome_exame,\n    dim_calendar_sk as data_exame,\n    dim_calendar_sk as data_brt_exame,\n    'Realiza\u00e7\u00e3o' as acao,\n    cast(null as varchar) as anexo,\n    c.id as id_paciente,\n    to_hex(md5(to_utf8(c.id || 'zk'))) as sk_paciente,\n    -- c.display_name as nome_paciente,\n    cast(null as bigint) as id_profissional,\n    cast(null as varchar) as sk_profissional,\n    cast(null as varchar) as nome_profissional,\n    p.id as id_clinica_plano,\n    to_hex(md5(to_utf8(cast(p.id as varchar) || 'zk'))) as sk_clinica_plano,\n    p.name as nome_clinica_plano,\n    cast(cp.id as varchar) as id_empresa,\n    to_hex(md5(to_utf8(cast(cp.id as varchar) || 'zk')))  as sk_empresa,\n\tcp.name as nome_empresa,\n    cast(null as varchar) as id_atendimento,\n    cast(null as varchar) as sk_atendimento,\n    'Zenklub' as plataforma \nfrom zenklub.modelo_2023.fact_typeform as t\nleft join zenklub.modelo_2023.dim_plan p on p.sk = t.dim_plan_sk\nleft join zenklub.modelo_2023.dim_customer as c on c.sk = t.dim_customer_sk\nleft join zenklub.modelo_2023.dim_company cp on cp.sk = t.dim_company_sk\nwhere c.id is not null \n\nunion all\n\nselect \n    to_hex(md5(to_utf8(cast(id_dsm as varchar) || 'pvv'))) as sk_exame,\n    cast(id_dsm as varchar) as id_exame,\n    'Mental' as tipo,\n    'An\u00e1lise Cl\u00ednica' as subtipo,\n    cast(null as varchar) as tuss,\n    nome_questionario as nome_exame,\n    ds.data_inclusao as data_exame,\n    ds.data_brt_inclusao as data_brt_exame,\n    'Realiza\u00e7\u00e3o' as acao,\n    cast(null as varchar) as anexo,\n    cast(id_paciente as varchar) as id_paciente,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    -- nome_paciente,\n    id_profissional,\n    to_hex(md5(to_utf8(cast(id_profissional as varchar) || 'pvv'))) as sk_profissional,\n    nome_profissional,\n    cast(ds.id_convenio as varchar) as id_clinica_plano,\n    to_hex(md5(to_utf8(cast(ds.id_convenio as varchar) || 'pvv'))) as sk_clinica_plano,\n    ds.nome_convenio as nome_clinica_plano,\n    con.id_cliente_autoritativa as id_empresa,\n\tto_hex(md5(to_utf8(con.id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n    con.nome_cliente_autoritativa as nome_empresa,\n    cast(ds.id_atendimento as varchar) as id_atendimento,\n    to_hex(md5(to_utf8(cast(ds.id_atendimento as varchar) || 'pvv'))) as sk_atendimento,\n    ds.plataforma\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_dsm5_n2\" as ds\nleft join \"delta\".\"silver\".\"pvv_dim_convenio\" as con on con.id_convenio = ds.id_convenio\n\nunion all\n\nselect \n    to_hex(md5(to_utf8(cast(id_dsm as varchar) || 'pvv'))) as sk_exame,\n    cast(id_dsm as varchar) as id_exame,\n    'Mental' as tipo,\n    'An\u00e1lise Cl\u00ednica' as subtipo,\n    cast(null as varchar) as tuss,\n    nome_questionario as nome_exame,\n    ds.data_inclusao as data_exame,\n    ds.data_brt_inclusao as data_brt_exame,\n    'Realiza\u00e7\u00e3o' as acao,\n    cast(null as varchar) as anexo,\n    cast(id_paciente as varchar) as id_paciente,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    -- nome_paciente,\n    id_profissional,\n    to_hex(md5(to_utf8(cast(id_profissional as varchar) || 'pvv'))) as sk_profissional,\n    nome_profissional,\n    cast(ds.id_convenio as varchar) as id_clinica_plano,\n    to_hex(md5(to_utf8(cast(ds.id_convenio as varchar) || 'pvv'))) as sk_clinica_plano,\n    ds.nome_convenio as nome_clinica_plano,\n    con.id_cliente_autoritativa as id_empresa,\n\tto_hex(md5(to_utf8(con.id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n    con.nome_cliente_autoritativa as nome_empresa,\n    cast(ds.id_atendimento as varchar) as id_atendimento,\n    to_hex(md5(to_utf8(cast(ds.id_atendimento as varchar) || 'pvv'))) as sk_atendimento,\n    'Psicologia Viva' as plataforma\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_dsm5_n1\" as ds\nleft join \"delta\".\"silver\".\"pvv_dim_convenio\" as con on con.id_convenio = ds.id_convenio\n\nunion all\n\nselect \n    to_hex(md5(to_utf8(cast(id_srq as varchar) || 'pvv'))) as sk_exame,\n    cast(id_srq as varchar) as id_exame,\n    'Mental' as tipo,\n    'An\u00e1lise Cl\u00ednica' as subtipo,\n    cast(null as varchar) as tuss,\n    'SRQ-20: RASTREAMENTO DE SINTOMAS DE TRANSTORNOS MENTAIS E COMPORTAMENTAIS (copy) (copy) (copy)' as nome_exame,\n    srq.data_inclusao as data_exame,\n    srq.data_brt_inclusao as data_brt_exame,\n    'Realiza\u00e7\u00e3o' as acao,\n    cast(null as varchar) as anexo,\n    cast(id_paciente as varchar) as id_paciente,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    -- nome_paciente,\n    cast(null as bigint) as id_profissional,\n    cast(null as varchar) as sk_profissional,\n    cast(null as varchar) as nome_profissional,\n    cast(srq.id_convenio as varchar) as id_clinica_plano,\n    to_hex(md5(to_utf8(cast(srq.id_convenio as varchar) || 'pvv'))) as sk_clinica_plano,\n    srq.nome_convenio as nome_clinica_plano,\n    con.id_cliente_autoritativa as id_empresa,\n\tto_hex(md5(to_utf8(con.id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n    con.nome_cliente_autoritativa as nome_empresa,\n    cast(null as varchar) as id_atendimento,\n    cast(null as varchar) as sk_atendimento,\n    'Psicologia Viva' as plataforma\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_srq20\" as srq\nleft join \"delta\".\"silver\".\"pvv_dim_convenio\" as con on con.id_convenio = srq.id_convenio\n\n\nunion all\n\nselect\n\tto_hex(md5(to_utf8(cast(p.id_prescricao_item as varchar) || 'cnx'))) as sk_exame,\n    cast(p.id_prescricao_item as varchar) as id_exame,\n    'F\u00edsico' as tipo,\n    'Imagem, Coleta ou Outros Suplementares' as subtipo,\n    p.exames_tuss_codigo as tuss,\n    case\n        when p.nome_exame_tuss is null\n            then p.nome_prescricao\n        else p.nome_exame_tuss \n    end as nome_exame,\n    p.data_hora_insert as data_exame,\n    p.data_brt_insert as data_brt_exame,\n    'Prescri\u00e7\u00e3o' as acao,\n    cast(null as varchar) as anexo,\n    cast(a.id_paciente as varchar) as id_paciente,\n    to_hex(md5(to_utf8(cast(a.id_paciente as varchar) || 'cnx'))) as sk_paciente,\n    -- nome_paciente,\n    p.id_profissional,\n    to_hex(md5(to_utf8(cast(p.id_profissional as varchar) || 'cnx'))) as sk_profissional,\n    a.nome_profissional,\n    cast(a.id_clinica as varchar) as id_clinica_plano,\n    to_hex(md5(to_utf8(cast(a.id_clinica as varchar) || 'cnx'))) as sk_clinica_plano,\n    a.nome_clinica as nome_clinica_plano,\n    c.id_cliente_autoritativa as id_empresa,\n\tto_hex(md5(to_utf8(c.id_cliente_autoritativa || 'cnx'))) as sk_empresa,\n    c.nome_cliente_autoritativa as nome_empresa,\n    cast(p.id_atendimento as varchar) as id_atendimento,\n    to_hex(md5(to_utf8(cast(p.id_atendimento as varchar) || 'cnx'))) as sk_atendimento,\n    'Conexa' as plataforma\nfrom \"delta\".\"silver\".\"cnx_fact_prescricao\" as p\ninner join \"delta\".\"silver\".\"cnx_fact_atendimento\" as a on p.id_atendimento = a.id_atendimento \nleft join \"delta\".\"silver\".\"cnx_dim_clinica\" as c on c.id_clinica = a.id_clinica \nwhere p.tipo_prescricao = 'exame'\nand year(data_brt_atendimento) >= 2019\n),\nt2 as(\nselect \n    *,\n    lower(to_hex(md5(to_utf8(cast(coalesce(cast(sk_exame as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_exame as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(subtipo as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tuss as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_exame as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_exame as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_exame as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(acao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(anexo as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_profissional as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_clinica_plano as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_empresa as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_atendimento as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t1\n),\nprincipal as(\nselect \n    t2.*,\n    row_number() OVER (partition by sk_teste) as ranking\nfrom t2\n)\nselect *\nfrom principal\nwhere ranking = 1", "relation_name": "\"delta\".\"gold\".\"stg_exames\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:57.798153Z", "completed_at": "2025-07-01T18:32:57.837750Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:57.863689Z", "completed_at": "2025-07-01T18:32:57.863689Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12014102935791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_atendimentos_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.8656c650b4", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"atendimentos\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:57.969368Z", "completed_at": "2025-07-01T18:32:58.196928Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:58.228160Z", "completed_at": "2025-07-01T18:32:58.228160Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3102760314941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_atendimentos_status_atendimento__Agendado__Cancelado__Inv_lido__No_show_ambos__No_show_paciente__No_show_profissional__N_o_realizado__Pendente__Pendente_autoriza_o__Reagendado__Realizado__Reservado__N_o_Pago.2787310ab9", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status_atendimento as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"atendimentos\"\n    group by status_atendimento\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Agendado','Cancelado','Inv\u00e1lido','No show ambos','No show paciente','No show profissional','N\u00e3o realizado','Pendente','Pendente autoriza\u00e7\u00e3o','Reagendado','Realizado','Reservado','N\u00e3o Pago'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:58.337227Z", "completed_at": "2025-07-01T18:32:58.376958Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:58.401652Z", "completed_at": "2025-07-01T18:32:58.401652Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11936664581298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_atendimentos_status_atendimento_zk__cancelled__canceled__invite__new__paid__reschedule__reschedule_request__reserved.27fc907299", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status_atendimento_zk as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"atendimentos\"\n    group by status_atendimento_zk\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cancelled','canceled','invite','new','paid','reschedule','reschedule_request','reserved'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:58.499353Z", "completed_at": "2025-07-01T18:32:58.531688Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:58.556114Z", "completed_at": "2025-07-01T18:32:58.556114Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10433363914489746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_atendimentos_tipo_conselho__CFBM__CFESS__CONTER__COREN__CREF__CREFITO__CREFONO__CRM__CRN__CRO__CRP__HC____None.f80ffcbd7b", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_conselho as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"atendimentos\"\n    group by tipo_conselho\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'CFBM','CFESS','CONTER','COREN','CREF','CREFITO','CREFONO','CRM','CRN','CRO','CRP','HC','','None'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:58.653377Z", "completed_at": "2025-07-01T18:32:58.685961Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:58.710908Z", "completed_at": "2025-07-01T18:32:58.710908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10373926162719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_not_empty_string_atendimentos_nome_clinica_plano__False.3c9fb550b1", "compiled": true, "compiled_code": "\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            nome_clinica_plano\n            \n        from \"delta\".\"gold\".\"atendimentos\"\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where nome_clinica_plano = ''\n\n    )\n\n    select * from errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:58.805420Z", "completed_at": "2025-07-01T18:32:58.836396Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:58.864149Z", "completed_at": "2025-07-01T18:32:58.864149Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10671758651733398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_not_empty_string_atendimentos_nome_especialidade__False.697a6a1ac7", "compiled": true, "compiled_code": "\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            nome_especialidade\n            \n        from \"delta\".\"gold\".\"atendimentos\"\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where nome_especialidade = ''\n\n    )\n\n    select * from errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:58.960469Z", "completed_at": "2025-07-01T18:32:58.991872Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:59.016153Z", "completed_at": "2025-07-01T18:32:59.016153Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10679268836975098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_not_empty_string_atendimentos_nome_profissional__False.33cff5685c", "compiled": true, "compiled_code": "\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            nome_profissional\n            \n        from (select * from \"delta\".\"gold\".\"atendimentos\" where plataforma <> 'Amil' and ano_atendimento >= 2024) dbt_subquery\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where nome_profissional = ''\n\n    )\n\n    select * from errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:59.114254Z", "completed_at": "2025-07-01T18:32:59.150404Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:59.172863Z", "completed_at": "2025-07-01T18:32:59.172863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10838103294372559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_not_empty_string_atendimentos_produto__False.a1ab70319c", "compiled": true, "compiled_code": "\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            produto\n            \n        from (select * from \"delta\".\"gold\".\"atendimentos\" where id_profissional is not null and id_profissional <> '13252') dbt_subquery\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where produto = ''\n\n    )\n\n    select * from errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:59.272953Z", "completed_at": "2025-07-01T18:32:59.328519Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:59.360143Z", "completed_at": "2025-07-01T18:32:59.360143Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13588738441467285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_relationships_where_medicamentos_id_atendimento__id_atendimento__plataforma_Conexa___ref_atendimentos_.1cd5e0fde0", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    id_atendimento as id\n\n  from \"delta\".\"gold\".\"medicamentos\"\n\n  where id_atendimento is not null\n    and plataforma = 'Conexa'\n\n),\n\nright_table as (\n\n  select\n    id_atendimento as id\n\n  from \"delta\".\"gold\".\"atendimentos\"\n\n  where id_atendimento is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:59.457045Z", "completed_at": "2025-07-01T18:32:59.510269Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:59.536398Z", "completed_at": "2025-07-01T18:32:59.536398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12747573852539062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_id_atendimento.04c8a8d754", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_atendimento\nfrom \"delta\".\"gold\".\"atendimentos\"\nwhere id_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:59.668732Z", "completed_at": "2025-07-01T18:32:59.705184Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:59.734240Z", "completed_at": "2025-07-01T18:32:59.734240Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13954663276672363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_id_clinica_plano.a0837649d3", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_clinica_plano\nfrom \"delta\".\"gold\".\"atendimentos\"\nwhere id_clinica_plano is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:32:59.845334Z", "completed_at": "2025-07-01T18:32:59.883556Z"}, {"name": "execute", "started_at": "2025-07-01T18:32:59.909322Z", "completed_at": "2025-07-01T18:32:59.909322Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11982870101928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_id_paciente.27f95e1bd6", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_paciente\nfrom \"delta\".\"gold\".\"atendimentos\"\nwhere id_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:00.026376Z", "completed_at": "2025-07-01T18:33:00.065376Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:00.094294Z", "completed_at": "2025-07-01T18:33:00.095299Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12849688529968262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_id_profissional.03885f8aea", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_profissional\nfrom (select * from \"delta\".\"gold\".\"atendimentos\" where plataforma <> 'Amil' and ano_atendimento >= 2024) dbt_subquery\nwhere id_profissional is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:00.216729Z", "completed_at": "2025-07-01T18:33:00.256549Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:00.282254Z", "completed_at": "2025-07-01T18:33:00.282254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1281135082244873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_nome_clinica_plano.0c871fd509", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_clinica_plano\nfrom \"delta\".\"gold\".\"atendimentos\"\nwhere nome_clinica_plano is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:00.398101Z", "completed_at": "2025-07-01T18:33:00.445765Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:00.476073Z", "completed_at": "2025-07-01T18:33:00.476073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13776898384094238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_nome_especialidade.937a2d1c99", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_especialidade\nfrom (select * from \"delta\".\"gold\".\"atendimentos\" where id_profissional is not null and ano_atendimento >= 2024 and id_profissional in (select id_profissional from gold.profissionais where flag_ativo = true)) dbt_subquery\nwhere nome_especialidade is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:00.588400Z", "completed_at": "2025-07-01T18:33:00.627649Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:00.658153Z", "completed_at": "2025-07-01T18:33:00.658153Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13033270835876465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_produto.81216e0fe1", "compiled": true, "compiled_code": "\n\n\n\nselect \n    produto\nfrom (select * from \"delta\".\"gold\".\"atendimentos\" where id_profissional is not null and id_profissional <> '13252' and id_profissional in (select id_profissional from gold.profissionais where flag_ativo = true)) dbt_subquery\nwhere produto is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:00.795321Z", "completed_at": "2025-07-01T18:33:00.836848Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:00.870259Z", "completed_at": "2025-07-01T18:33:00.870259Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14655399322509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_sk_atendimento.eb932364b0", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_atendimento\nfrom \"delta\".\"gold\".\"atendimentos\"\nwhere sk_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:00.992918Z", "completed_at": "2025-07-01T18:33:01.033575Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:01.061541Z", "completed_at": "2025-07-01T18:33:01.061541Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13107728958129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_status_atendimento.3ea6b25eeb", "compiled": true, "compiled_code": "\n\n\n\nselect \n    status_atendimento\nfrom \"delta\".\"gold\".\"atendimentos\"\nwhere status_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:01.182142Z", "completed_at": "2025-07-01T18:33:01.220127Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:01.249383Z", "completed_at": "2025-07-01T18:33:01.249383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.127211332321167, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atendimentos_status_atendimento_zk.05feb25143", "compiled": true, "compiled_code": "\n\n\n\nselect \n    status_atendimento_zk\nfrom (select * from \"delta\".\"gold\".\"atendimentos\" where plataforma = 'Zenklub' and ano_atendimento >= 2022) dbt_subquery\nwhere status_atendimento_zk is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:01.359532Z", "completed_at": "2025-07-01T18:33:01.417344Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:01.444326Z", "completed_at": "2025-07-01T18:33:01.444326Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14029669761657715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_atendimentos", "compiled": true, "compiled_code": "\nwith silver as(\nselect cast(id_atendimento as varchar) id_atendimento, 'Conexa' as plataforma\nfrom \"delta\".\"silver\".\"cnx_fact_atendimento\" \nwhere year(data_atendimento at time zone 'America/Sao_Paulo') >= 2019\nunion\nselect cast(id_atendimento as varchar) id_atendimento, 'Psicologia Viva' as plataforma\nfrom \"delta\".\"silver\".\"pvv_fact_atendimento\"\nwhere year(data_atendimento at time zone 'America/Sao_Paulo') >= 2019\nunion\nselect cast(id_atendimento as varchar) id_atendimento, 'Aml' as plataforma\nfrom \"delta\".\"silver\".\"aml_fact_atendimento\"\nwhere year(data_atendimento at time zone 'America/Sao_Paulo') >= 2019\nunion\nselect event_id as id_atendimento, 'Zenklub' as plataforma\nfrom zenklub.core.events\nwhere year(day at time zone 'America/Sao_Paulo') >= 2019 \n),\ngold as(\nselect id_atendimento, plataforma\nfrom \"delta\".\"gold\".\"atendimentos\"\n)\nselect s.*, 'silver' as fonte\nfrom silver as s\nleft join gold as g on g.id_atendimento = s.id_atendimento\nwhere g.id_atendimento is null\nunion\nselect g.*, 'gold' as fonte\nfrom gold as g\nleft join silver as s on s.id_atendimento = g.id_atendimento\nwhere s.id_atendimento is null", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:01.555126Z", "completed_at": "2025-07-01T18:33:01.591996Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:01.622616Z", "completed_at": "2025-07-01T18:33:01.622616Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12302923202514648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_atendimentos_sk_clinica_plano__sk_clinica__ref_clinicas_.679f3a0e17", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_clinica as id\nfrom \"delta\".\"gold\".\"clinicas\"\n),\nt2 as (\nselect\n    sk_clinica_plano as id\nfrom (select * from \"delta\".\"gold\".\"atendimentos\" where plataforma not in('Amil','Zenklub')) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:01.776760Z", "completed_at": "2025-07-01T18:33:01.820501Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:01.847854Z", "completed_at": "2025-07-01T18:33:01.847854Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1725633144378662, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_atendimentos_sk_paciente__sk_paciente__ref_pacientes_.3de68abb36", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom (select * from \"delta\".\"gold\".\"atendimentos\" where plataforma <> 'Amil') dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:02.210868Z", "completed_at": "2025-07-01T18:33:02.283589Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:02.320655Z", "completed_at": "2025-07-01T18:33:02.320655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4047524929046631, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_atendimentos_sk_profissional__sk_profissional__ref_profissionais_.0f20c7fe4d", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_profissional as id\nfrom \"delta\".\"gold\".\"profissionais\"\n),\nt2 as (\nselect\n    sk_profissional as id\nfrom (select * from \"delta\".\"gold\".\"atendimentos\" where plataforma <> 'Amil') dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:02.481653Z", "completed_at": "2025-07-01T18:33:02.542874Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:02.573998Z", "completed_at": "2025-07-01T18:33:02.573998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18128728866577148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.unique_atendimentos_sk_atendimento.f4be5cb23a", "compiled": true, "compiled_code": "\n\n\n\nselect\n    sk_atendimento\nfrom \"delta\".\"gold\".\"atendimentos\"\nwhere sk_atendimento is not null\ngroup by sk_atendimento\nhaving count(*) > 1\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:02.707240Z", "completed_at": "2025-07-01T18:33:02.777685Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:02.812319Z", "completed_at": "2025-07-01T18:33:02.812319Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17538857460021973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_cancelamento", "compiled": true, "compiled_code": "\nselect \n    id_atendimento\nfrom \"delta\".\"gold\".\"atendimentos\" \nwhere status_atendimento = 'Cancelado'\nand data_cancelamento is null", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:02.949390Z", "completed_at": "2025-07-01T18:33:02.992872Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:03.022041Z", "completed_at": "2025-07-01T18:33:03.022041Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1369762420654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_teste_atendimentos_nome_clinica_plano.1a514e876c", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_clinica_plano\nfrom (select * from \"delta\".\"gold\".\"atendimentos\" where plataforma <> 'Amil') dbt_subquery\nwhere upper(nome_clinica_plano) like '%TESTE%'\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:03.140059Z", "completed_at": "2025-07-01T18:33:03.180664Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:03.206554Z", "completed_at": "2025-07-01T18:33:03.206554Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12212419509887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_atestados_fonte_atestado__conexa__memed__mevo.286b89a83d", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        fonte_atestado as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"atestados\"\n    group by fonte_atestado\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'conexa','memed','mevo'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:03.307383Z", "completed_at": "2025-07-01T18:33:03.338436Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:03.363194Z", "completed_at": "2025-07-01T18:33:03.363194Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1060032844543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_atestados_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.bf8f7204b2", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"atestados\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:03.459225Z", "completed_at": "2025-07-01T18:33:03.493923Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:03.518088Z", "completed_at": "2025-07-01T18:33:03.518088Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1066901683807373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_not_empty_string_atestados_nome_clinica_plano__False.bbcdd4f555", "compiled": true, "compiled_code": "\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            nome_clinica_plano\n            \n        from \"delta\".\"gold\".\"atestados\"\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where nome_clinica_plano = ''\n\n    )\n\n    select * from errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:03.628068Z", "completed_at": "2025-07-01T18:33:03.666651Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:03.694464Z", "completed_at": "2025-07-01T18:33:03.694464Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12087893486022949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_relationships_where_atestados_id_atendimento__id_atendimento__ref_cnx_fact_atestado_.ecb95ca205", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    id_atendimento as id\n\n  from \"delta\".\"gold\".\"atestados\"\n\n  where id_atendimento is not null\n    and 1=1\n\n),\n\nright_table as (\n\n  select\n    id_atendimento as id\n\n  from \"delta\".\"silver\".\"cnx_fact_atestado\"\n\n  where id_atendimento is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:03.795321Z", "completed_at": "2025-07-01T18:33:03.830361Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:03.856566Z", "completed_at": "2025-07-01T18:33:03.856566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11249923706054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_atestados_sk_atestado__id_prescricao__id_prescricao_item__data_registro_atestado__sk_empresa.cae076ecb3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sk_atestado, id_prescricao, id_prescricao_item, data_registro_atestado, sk_empresa\n    from \"delta\".\"gold\".\"atestados\"\n    group by sk_atestado, id_prescricao, id_prescricao_item, data_registro_atestado, sk_empresa\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:03.959455Z", "completed_at": "2025-07-01T18:33:03.989150Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:04.013327Z", "completed_at": "2025-07-01T18:33:04.013327Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1058042049407959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atestados_fonte_atestado.1149d163ae", "compiled": true, "compiled_code": "\n\n\n\nselect \n    fonte_atestado\nfrom \"delta\".\"gold\".\"atestados\"\nwhere fonte_atestado is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:04.112530Z", "completed_at": "2025-07-01T18:33:04.143452Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:04.165181Z", "completed_at": "2025-07-01T18:33:04.165181Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10008764266967773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atestados_id_atendimento.44ae199996", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_atendimento\nfrom \"delta\".\"gold\".\"atestados\"\nwhere id_atendimento is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:04.265509Z", "completed_at": "2025-07-01T18:33:04.298293Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:04.323235Z", "completed_at": "2025-07-01T18:33:04.323235Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10898780822753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atestados_id_paciente.fee0ff7b8b", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_paciente\nfrom \"delta\".\"gold\".\"atestados\"\nwhere id_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:04.429582Z", "completed_at": "2025-07-01T18:33:04.466375Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:04.493184Z", "completed_at": "2025-07-01T18:33:04.493184Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11771225929260254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atestados_nome_clinica_plano.10bdc0e542", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_clinica_plano\nfrom \"delta\".\"gold\".\"atestados\"\nwhere nome_clinica_plano is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:04.593988Z", "completed_at": "2025-07-01T18:33:04.626364Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:04.655254Z", "completed_at": "2025-07-01T18:33:04.655254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11190247535705566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_atestados_sk_atestado.28a0fab3f2", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_atestado\nfrom \"delta\".\"gold\".\"atestados\"\nwhere sk_atestado is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:04.751755Z", "completed_at": "2025-07-01T18:33:04.786338Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:04.811787Z", "completed_at": "2025-07-01T18:33:04.811787Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10816264152526855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_atestados_sk_clinica_plano__sk_clinica__ref_clinicas_.12d361ca27", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_clinica as id\nfrom \"delta\".\"gold\".\"clinicas\"\n),\nt2 as (\nselect\n    sk_clinica_plano as id\nfrom (select * from \"delta\".\"gold\".\"atestados\" where plataforma not in('Amil','Zenklub')) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:04.908492Z", "completed_at": "2025-07-01T18:33:04.941500Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:04.967773Z", "completed_at": "2025-07-01T18:33:04.967773Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10602617263793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_atestados_sk_paciente__sk_paciente__ref_pacientes_.f77c67e932", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"atestados\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:05.070405Z", "completed_at": "2025-07-01T18:33:05.107018Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:05.133641Z", "completed_at": "2025-07-01T18:33:05.133641Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11430692672729492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.valid_teste_atestados_nome_clinica_plano.1698ba74ea", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_clinica_plano\nfrom \"delta\".\"gold\".\"atestados\"\nwhere upper(nome_clinica_plano) like '%TESTE%'\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:05.237628Z", "completed_at": "2025-07-01T18:33:05.277400Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:05.302412Z", "completed_at": "2025-07-01T18:33:05.302412Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11726641654968262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_avaliacoes_classificacao__Detrator__Insatisfeito__Neutro__Promotor__Satisfeito.a2aba43db7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classificacao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"avaliacoes\"\n    group by classificacao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Detrator','Insatisfeito','Neutro','Promotor','Satisfeito'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:05.413187Z", "completed_at": "2025-07-01T18:33:05.491625Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:05.521465Z", "completed_at": "2025-07-01T18:33:05.521465Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16632747650146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_avaliacoes_modo_atendimento__IMEDIATO__AGENDADO.4d432c8bb7", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        modo_atendimento as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"avaliacoes\"\n    group by modo_atendimento\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'IMEDIATO','AGENDADO'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:05.631962Z", "completed_at": "2025-07-01T18:33:05.675842Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:05.703350Z", "completed_at": "2025-07-01T18:33:05.703350Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12598490715026855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_avaliacoes_nota_avaliacao__False__0__1__2__3__4__5__6__7__8__9__10.e3a0859112", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        nota_avaliacao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"avaliacoes\"\n    group by nota_avaliacao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    0,1,2,3,4,5,6,7,8,9,10\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:05.812484Z", "completed_at": "2025-07-01T18:33:05.853855Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:05.883386Z", "completed_at": "2025-07-01T18:33:05.883386Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12332487106323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_avaliacoes_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.28f1434eb6", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"avaliacoes\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:06.020908Z", "completed_at": "2025-07-01T18:33:06.069405Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:06.095508Z", "completed_at": "2025-07-01T18:33:06.095508Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.143341064453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_avaliacoes_produto__APS__coach__Especialidades__Nutri_o__Outras_Terapias__PA__Psicologia__therapist__PA_Psicologia.a6897c5e81", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        produto as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"avaliacoes\"\n    group by produto\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'APS','coach','Especialidades','Nutri\u00e7\u00e3o','Outras Terapias','PA','Psicologia','therapist','PA Psicologia'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:06.212542Z", "completed_at": "2025-07-01T18:33:06.279918Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:06.306088Z", "completed_at": "2025-07-01T18:33:06.306088Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15245890617370605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_avaliacoes_produto_clinica__Associa_o__DOCPASS__Empresa__Operadora__OPERADORA__Particular__REDE_CONEXA__SAAS__SMB__WHITELABEL.6e93978b36", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        produto_clinica as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"avaliacoes\"\n    group by produto_clinica\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Associa\u00e7\u00e3o','DOCPASS','Empresa','Operadora','OPERADORA','Particular','REDE_CONEXA','SAAS','SMB','WHITELABEL'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:06.417446Z", "completed_at": "2025-07-01T18:33:06.464610Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:06.491130Z", "completed_at": "2025-07-01T18:33:06.491130Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13001298904418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_avaliacoes_tipo_avaliacao__csat_audio_video_paciente__csat_audio_video_profissional__csat_paciente__csat_plataforma__csat_profissional__nps_plataforma__nps_plataforma_profissional__nps_profissional.e0e266736f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_avaliacao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"avaliacoes\"\n    group by tipo_avaliacao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'csat_audio_video_paciente','csat_audio_video_profissional','csat_paciente','csat_plataforma','csat_profissional','nps_plataforma','nps_plataforma_profissional','nps_profissional'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:06.610295Z", "completed_at": "2025-07-01T18:33:06.659192Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:06.689219Z", "completed_at": "2025-07-01T18:33:06.689219Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14190983772277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_avaliacoes_tipo_conselho__CFBM__CFESS__CONTER__COREN__CREF__CREFITO__CREFONO__CRM__CRN__CRO__CRP__HC____None.2c3ace17df", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_conselho as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"avaliacoes\"\n    group by tipo_conselho\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'CFBM','CFESS','CONTER','COREN','CREF','CREFITO','CREFONO','CRM','CRN','CRO','CRP','HC','','None'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:06.807351Z", "completed_at": "2025-07-01T18:33:06.844385Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:06.875884Z", "completed_at": "2025-07-01T18:33:06.875884Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12176918983459473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_relationships_where_avaliacoes_sk_clinica_plano__sk_clinica__plataforma_not_in_Amil_Zenklub_and_sk_atendimento_is_not_null__ref_clinicas_.84887ba656", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    sk_clinica_plano as id\n\n  from \"delta\".\"gold\".\"avaliacoes\"\n\n  where sk_clinica_plano is not null\n    and plataforma not in('Amil','Zenklub') and sk_atendimento is not null\n\n),\n\nright_table as (\n\n  select\n    sk_clinica as id\n\n  from \"delta\".\"gold\".\"clinicas\"\n\n  where sk_clinica is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:06.996364Z", "completed_at": "2025-07-01T18:33:07.040323Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:07.068556Z", "completed_at": "2025-07-01T18:33:07.068556Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12810373306274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_avaliacoes_sk_atendimento__tipo_avaliacao.f66564a2d6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sk_atendimento, tipo_avaliacao\n    from (select * from \"delta\".\"gold\".\"avaliacoes\" where sk_atendimento is not null) dbt_subquery\n    group by sk_atendimento, tipo_avaliacao\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:07.181565Z", "completed_at": "2025-07-01T18:33:07.222803Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:07.256836Z", "completed_at": "2025-07-01T18:33:07.257364Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12985587120056152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_avaliacoes_sk_paciente.554ae3dd25", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_paciente\nfrom (select * from \"delta\".\"gold\".\"avaliacoes\" where ano_avaliacao >= 2024) dbt_subquery\nwhere sk_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:07.359356Z", "completed_at": "2025-07-01T18:33:07.397534Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:07.424354Z", "completed_at": "2025-07-01T18:33:07.424354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1171109676361084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_avaliacoes_sk_atendimento__cast_sk_atendimento_as_varchar___ref_atendimentos_.ceffcb3efa", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    cast(sk_atendimento as varchar) as id\nfrom \"delta\".\"gold\".\"atendimentos\"\n),\nt2 as (\nselect\n    sk_atendimento as id\nfrom (select * from \"delta\".\"gold\".\"avaliacoes\" where plataforma = 'Conexa') dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:07.536077Z", "completed_at": "2025-07-01T18:33:07.572650Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:07.599836Z", "completed_at": "2025-07-01T18:33:07.599836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1189579963684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_avaliacoes_sk_paciente__cast_sk_paciente_as_varchar___ref_pacientes_.b71e542b61", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    cast(sk_paciente as varchar) as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom (select * from \"delta\".\"gold\".\"avaliacoes\" where ano_avaliacao >= 2024 and sk_paciente is not null and plataforma <> 'Amil' and id_paciente not in(select cast(pac.id as varchar) from bronze.raw_pvv_seg_user as sg inner join bronze.raw_pvv_pacientes as pac on pac.id_seg_user = sg.id  where sg.teste = 1)) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:07.711765Z", "completed_at": "2025-07-01T18:33:07.754350Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:07.783905Z", "completed_at": "2025-07-01T18:33:07.783905Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13006377220153809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_avaliacoes_sk_profissional__sk_profissional__ref_profissionais_.feea3a7a8b", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_profissional as id\nfrom \"delta\".\"gold\".\"profissionais\"\n),\nt2 as (\nselect\n    sk_profissional as id\nfrom \"delta\".\"gold\".\"avaliacoes\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:07.908555Z", "completed_at": "2025-07-01T18:33:07.962163Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:07.990673Z", "completed_at": "2025-07-01T18:33:07.990673Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14159083366394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_cronicos_linha_cuidado", "compiled": true, "compiled_code": "\n\n\nwith pacientes_filtrados as ( -- j\u00e1 criado um filtro de pacientes desde o inicio para ser usado nos joins e n\u00e3o ser feito um join na dim_paciente toda vez\n    select\n        id_paciente,\n        id_clinica,\n        nome_clinica,\n        flag_aps,\n        nome_paciente,\n        cpf_paciente,\n        carteira_convenio,\n        idade,\n        faixa_etaria,\n        faixa_etaria2,\n        tipo_paciente,\n        data_brt_cadastro,\n        data_brt_ativacao,\n        status_paciente,\n        sexo_paciente,\n        id_equipe_aps,\n        nome_equipe_aps,\n        trim(split_part(info_adicionais, '-', 1)) AS info_adicionais,\n        data_nascimento_paciente\n\tfrom \"delta\".\"silver\".\"cnx_dim_paciente\"\n    WHERE ((flag_aps = TRUE AND id_equipe_aps in (47, 53, 13, 34, 35, 17, 31, 38, 41,54)) OR id_clinica = 7809)\n),\nmensageria as ( -- corre\u00e7\u00e3o pra n\u00e3o pegar o max telefone e sim o telefone referente a ultima data de mensagem\n    SELECT \n        id_paciente,\n        telefone_paciente,\n        data_mensagem as last_data_mensagem\n    FROM (\n        SELECT \n            me.id_paciente,\n            me.telefone_paciente,\n            me.data_mensagem,\n            ROW_NUMBER() OVER (PARTITION BY me.id_paciente ORDER BY me.data_mensagem DESC) as rn\n        FROM \"delta\".\"silver\".\"lina_fact_mensageria\" as me\n    ) sub\n    WHERE rn = 1\n),\natendimentos AS ( -- mantendo o join na 'pacientes_filtrados' pois mantemos dessa forma apenas 1,2% dos dados poss\u00edveis\n    SELECT \n        p.id_paciente,\n        MAX(data_brt_atendimento) FILTER (WHERE a.nome_especialidade IN ('Enfermagem', 'Medicina de Fam\u00edlia e Comunidade', 'Nutri\u00e7\u00e3o Cl\u00ednica')) AS last_data_atendimento,\n        MIN(data_brt_atendimento) FILTER (WHERE a.nome_especialidade IN ('Enfermagem', 'Medicina de Fam\u00edlia e Comunidade', 'Nutri\u00e7\u00e3o Cl\u00ednica')) AS prim_data_atendimento,\n        MAX(data_brt_atendimento) FILTER (WHERE produto = 'PA') AS pa_last_data_atendimento,\n        COUNT(id_atendimento) FILTER (WHERE A.nome_especialidade = 'Medicina de Fam\u00edlia e Comunidade') AS atent_med_fam,\n        COUNT(id_atendimento) FILTER (WHERE A.nome_especialidade = 'Nutri\u00e7\u00e3o Cl\u00ednica') AS atent_nutricao,\n        COUNT(id_atendimento) FILTER (WHERE A.nome_especialidade = 'Enfermagem' AND a.produto = 'APS') AS atend_enfermagem,\n        COUNT (id_atendimento) FILTER (WHERE a.nome_especialidade IN ('Enfermagem', 'Medicina de Fam\u00edlia e Comunidade', 'Nutri\u00e7\u00e3o Cl\u00ednica')) AS atend_total\n    FROM \"delta\".\"silver\".\"cnx_fact_atendimento\" as a \n    inner JOIN pacientes_filtrados as p ON p.id_paciente = a.id_paciente\n    where a.flag_profissional_conexa = TRUE\n    and status_atendimento = 'Realizado'\n    GROUP BY p.id_paciente\n),\ncarelines_qtd as ( -- mantendo o join na 'pacientes_filtrados' pois mantemos dessa forma apenas 1,3% dos dados poss\u00edveis, al\u00e9m de diminuir joins na dim paciente e carregando a fact carelines apenas 1x inv\u00e9s de 5\n    select\n        p.id_paciente,\n        count(cl.id_linha_de_cuidado) FILTER (WHERE cl.id_linha_de_cuidado in ('ead61184-340f-403b-ba45-6dec76415670', '02acde30-ff30-11ed-8c0e-05a002b576db', 'e553accd-9fa3-41bc-b21e-15a9d4a7fd91', '00ddd970-a23c-11ed-99fa-8371d3af67ab', '1f8585a0-9777-11ed-b3d4-dbaa90fa6a1e', '64cd80a0-b913-11ed-a214-8b290e27322b', '07ea2e30-a647-11ed-8c64-7753498c9ff5', '99479b50-c763-11ed-808a-2b50f4382f9f', '0f59d712-3d48-4e1b-ba84-44b13ca5dc75', '0eab6938-93a7-4c0b-982e-70a7d8bb960b', 'a5aaada0-ff31-11ed-8c0e-05a002b576db', '0d0a9010-ac84-11ed-ae57-bd5b39aa57ae', 'd5f3e1c0-0fa3-11ee-b67c-b3323f3891e6', '899398f0-f7de-4663-847d-05ccd00ec3e8', '7c058e60-ff32-11ed-8c0e-05a002b576db', '7bc5a5cb-d046-445a-a1a5-e5d9b5952204', 'bf0eeee6-65cb-4c91-91e8-537451497abf', 'f9a3ea22-3bbd-45e8-9582-091ad2186afd', '3e185593-7996-4ff6-b159-aef3d41f65f2', 'd93cec2c-c30f-47ad-8367-8683d9e8dceb', '8bd236a9-4435-45bb-9c2d-aa2103fee3c8', 'd481b407-305e-411a-a166-2e6b4ca9b5ba', '331acada-a9a1-4c23-a702-94b0e2f35409', '67f87a43-7e7d-4c7b-b490-9faa79dc0945', 'fce3e472-e5e4-44b3-a7d7-639c589547a3', '1d80c4b4-08e4-464b-a2f1-2ebe42636dc1', 'f0ede8f3-27ff-4cbf-b3ab-e32aceab81e3', '1dabbae7-00b6-47ed-acd4-8e7c81e78657')) AS qtd_linha_de_cuidado,\n        MAX(cl.data_inativacao) FILTER (WHERE cl.id_linha_de_cuidado in ('ead61184-340f-403b-ba45-6dec76415670', '02acde30-ff30-11ed-8c0e-05a002b576db', 'e553accd-9fa3-41bc-b21e-15a9d4a7fd91', '00ddd970-a23c-11ed-99fa-8371d3af67ab', '1f8585a0-9777-11ed-b3d4-dbaa90fa6a1e', '64cd80a0-b913-11ed-a214-8b290e27322b', '07ea2e30-a647-11ed-8c64-7753498c9ff5', '99479b50-c763-11ed-808a-2b50f4382f9f', '0f59d712-3d48-4e1b-ba84-44b13ca5dc75', '0eab6938-93a7-4c0b-982e-70a7d8bb960b', 'a5aaada0-ff31-11ed-8c0e-05a002b576db', '0d0a9010-ac84-11ed-ae57-bd5b39aa57ae', 'd5f3e1c0-0fa3-11ee-b67c-b3323f3891e6', '899398f0-f7de-4663-847d-05ccd00ec3e8', '7c058e60-ff32-11ed-8c0e-05a002b576db', '7bc5a5cb-d046-445a-a1a5-e5d9b5952204', 'bf0eeee6-65cb-4c91-91e8-537451497abf', 'f9a3ea22-3bbd-45e8-9582-091ad2186afd', '3e185593-7996-4ff6-b159-aef3d41f65f2', 'd93cec2c-c30f-47ad-8367-8683d9e8dceb', '8bd236a9-4435-45bb-9c2d-aa2103fee3c8', 'd481b407-305e-411a-a166-2e6b4ca9b5ba', '331acada-a9a1-4c23-a702-94b0e2f35409', '67f87a43-7e7d-4c7b-b490-9faa79dc0945', 'fce3e472-e5e4-44b3-a7d7-639c589547a3', '1d80c4b4-08e4-464b-a2f1-2ebe42636dc1', 'f0ede8f3-27ff-4cbf-b3ab-e32aceab81e3', '1dabbae7-00b6-47ed-acd4-8e7c81e78657')) AS inativacao_linha,\n        MAX(cl.motivo_de_recusa) FILTER (WHERE cl.id_linha_de_cuidado in ('ead61184-340f-403b-ba45-6dec76415670', '02acde30-ff30-11ed-8c0e-05a002b576db', 'e553accd-9fa3-41bc-b21e-15a9d4a7fd91', '00ddd970-a23c-11ed-99fa-8371d3af67ab', '1f8585a0-9777-11ed-b3d4-dbaa90fa6a1e', '64cd80a0-b913-11ed-a214-8b290e27322b', '07ea2e30-a647-11ed-8c64-7753498c9ff5', '99479b50-c763-11ed-808a-2b50f4382f9f', '0f59d712-3d48-4e1b-ba84-44b13ca5dc75', '0eab6938-93a7-4c0b-982e-70a7d8bb960b', 'a5aaada0-ff31-11ed-8c0e-05a002b576db', '0d0a9010-ac84-11ed-ae57-bd5b39aa57ae', 'd5f3e1c0-0fa3-11ee-b67c-b3323f3891e6', '899398f0-f7de-4663-847d-05ccd00ec3e8', '7c058e60-ff32-11ed-8c0e-05a002b576db', '7bc5a5cb-d046-445a-a1a5-e5d9b5952204', 'bf0eeee6-65cb-4c91-91e8-537451497abf', 'f9a3ea22-3bbd-45e8-9582-091ad2186afd', '3e185593-7996-4ff6-b159-aef3d41f65f2', 'd93cec2c-c30f-47ad-8367-8683d9e8dceb', '8bd236a9-4435-45bb-9c2d-aa2103fee3c8', 'd481b407-305e-411a-a166-2e6b4ca9b5ba', '331acada-a9a1-4c23-a702-94b0e2f35409', '67f87a43-7e7d-4c7b-b490-9faa79dc0945', 'fce3e472-e5e4-44b3-a7d7-639c589547a3', '1d80c4b4-08e4-464b-a2f1-2ebe42636dc1', 'f0ede8f3-27ff-4cbf-b3ab-e32aceab81e3', '1dabbae7-00b6-47ed-acd4-8e7c81e78657')) AS motivo_inativacao_linha,\n        MAX(cl.data_criacao) FILTER (WHERE cl.id_linha_de_cuidado in ('0f12f5d2-a452-4156-a35c-fc6120a55d91')) AS data_captacao,\n        MAX(cl.data_inativacao) FILTER (WHERE cl.id_linha_de_cuidado in ('0f12f5d2-a452-4156-a35c-fc6120a55d91')) AS inativacao_captacao,\n        MAX(cl.motivo_de_recusa) FILTER (WHERE cl.id_linha_de_cuidado in ('0f12f5d2-a452-4156-a35c-fc6120a55d91')) as motivo_inativacao_captacao,\n        count(cl.id_linha_de_cuidado) FILTER (WHERE cl.id_linha_de_cuidado in ('039148a7-3fe3-41b7-a754-290f4f8a288b','b3a14b67-b893-42e2-a40d-4795f8208219','464d0b40-7657-11ed-a82b-bd7c4d5aba51','12b25802-d26b-4b96-a4a0-3698719f6a1d','77c051b1-ea67-4c4b-bd79-b147268b4da0','f014c5af-8cc4-49ff-a181-7de72ba796b9','bce62a06-d9d7-4e58-b98a-3c9c2e0f1e67','f1b73fa9-ba8a-4ff7-8f09-319783350d6c','8a639680-16b8-11ee-adb8-9926cf7e6d4a','d75b5ea1-cc81-4efd-98fc-f37169183070','b64a4850-9776-11ed-b3d4-dbaa90fa6a1e','6ed38a10-a8a9-11ed-944f-832495960abe','e60406c0-c99f-11ed-91df-3fd05f83421e','eac21a7d-a772-4f69-a08c-54b8a2de3dbd','5f1e125b-0513-4e60-9a79-ebdcc9704a4a','f3e5daa2-d3ce-4b5f-8454-f29ece0f8789','6b6bb849-5167-45fa-a54f-832b35c4fa8e','6b1189a1-d19a-4693-a469-be70efa0edd5','bb3ebd6b-36ab-494c-b90f-7d76c220f3c3','9b44d310-c9a1-11ed-91df-3fd05f83421e','00fa09af-8df3-48f0-b19c-f44f5fc3426e','0c3bc6d7-1bd3-4046-a88d-f82666245524','17a0ce00-244b-47d0-86b8-70a284aa269b','392c97f0-93f2-49dd-a3ba-52db24486eeb','f206303f-7e42-42c1-9bac-7973b6c07e2a','5e2cbbe3-c59a-4448-85f0-c1fe5b4fb9a7','b918eff0-e0ef-4ff8-8811-8435cf76da39','dfdb1321-057a-4f6a-bcdd-b16316a9f5a6','4069d262-3f4b-4447-af97-b2e1a97b19ec','b5b2a29b-214d-490e-a2fd-f49464c157b8','efceb583-94fa-4080-a8ae-ac1676ae61b7','8da82576-5fe7-4c0e-abe7-90d08248ceea','2da97643-7c7b-4328-95a5-5d1ad254e685','112e6f88-6f24-4e4e-9309-bee7622162a1','8a4f27a3-2561-499d-8d84-5df619422a51','6d7c5c4f-6350-4eee-8d86-bcf77aa2df6a','75ebc921-1843-474a-8fc1-e1bbd20289cd','117f032f-3cea-42c4-a2da-53c6dd77ae1b','8632fa36-b4e1-4905-8649-34288e361369','e4594c15-a702-4d57-ae34-bfb97bae9051','f1f5a2de-7cb3-4688-8c91-4c781f57857a','c9bab244-5fe0-4092-b65a-2f389bca86b1','83864a75-500c-42cb-88ed-0835bd419418','dbc5bf00-465e-4d62-8d3c-93b119d0b588','fce6e3ef-b58c-4dcd-838a-360712e2a1c3','9fbc6fd5-bbd2-42c9-862b-bef41f221ce4','47feef42-5d6f-45cd-a6d5-f7e527d629a3','b441cb6c-c4b4-4503-a9f8-80d48000dcc6','9d93c13c-7650-4fed-93c5-1981aef9ee78','935632a0-5720-4611-bac4-4e14d551bef9','db72716c-f299-46ba-8c18-7e3e633e6b68','33824f7a-41b8-4b0a-8f1f-5b34341dde7e','16792f41-e1a8-48f9-979e-954357069e27','d9dcb678-c14c-4d0b-852e-55906e387f6b','24cec35e-08f0-454f-8dd1-2a6f268a2b83','72cae569-6b53-4143-891d-4a95d7063a81','647230d2-42a8-4df7-8487-1bbe62efdfc2','9ec56fa6-a5a1-432a-8285-54169ec590c7','3e9ac6af-bc71-4201-b86d-41e5b722a52d','9cac21fc-0b6b-4275-b721-132d6f0679ed','98d3eb81-8752-4958-809d-355c02439976','5c81989b-955b-430c-8e8f-c1280569974d','2596335b-5918-463f-822a-6c76922cf2be','59caae93-0174-4c83-9733-42c82ca1fdc3','ca53597f-a094-4e14-baac-413c2b6692d4','0b8b21d9-f35e-4b51-875a-f7ba1a02a07e','d2ac4969-7a02-4cd4-ab20-6eda4944c93b','6239d08c-c847-4548-a63e-91f56dec09ae','bd9924e3-6491-47d7-8e9f-0b7190a64e4c','7c13f2a1-d8b5-46b2-91cf-05bff5b2716c','913ff97f-3abe-4007-9717-63c863f228a2','2c7fd362-0f23-4412-8b81-8813acd5c3ba','ebd1a030-da25-46d7-8eaa-d9174ca783b3','1d082bd8-a776-48bb-9ca6-a5f6ffd04e9f','1517e3a2-1ad3-40d4-a743-41648653252e','fd9c87dc-9887-4a92-bce8-221efae113c4','ccbffda0-3afc-45ae-8038-be4b74031942')) AS qtd_comorbidades,\n        ARRAY_JOIN(\n            ARRAY_AGG(DISTINCT cl.linha_de_cuidado) FILTER (WHERE cl.id_linha_de_cuidado in ('039148a7-3fe3-41b7-a754-290f4f8a288b','b3a14b67-b893-42e2-a40d-4795f8208219','464d0b40-7657-11ed-a82b-bd7c4d5aba51','12b25802-d26b-4b96-a4a0-3698719f6a1d','77c051b1-ea67-4c4b-bd79-b147268b4da0','f014c5af-8cc4-49ff-a181-7de72ba796b9','bce62a06-d9d7-4e58-b98a-3c9c2e0f1e67','f1b73fa9-ba8a-4ff7-8f09-319783350d6c','8a639680-16b8-11ee-adb8-9926cf7e6d4a','d75b5ea1-cc81-4efd-98fc-f37169183070','b64a4850-9776-11ed-b3d4-dbaa90fa6a1e','6ed38a10-a8a9-11ed-944f-832495960abe','e60406c0-c99f-11ed-91df-3fd05f83421e','eac21a7d-a772-4f69-a08c-54b8a2de3dbd','5f1e125b-0513-4e60-9a79-ebdcc9704a4a','f3e5daa2-d3ce-4b5f-8454-f29ece0f8789','6b6bb849-5167-45fa-a54f-832b35c4fa8e','6b1189a1-d19a-4693-a469-be70efa0edd5','bb3ebd6b-36ab-494c-b90f-7d76c220f3c3','9b44d310-c9a1-11ed-91df-3fd05f83421e','00fa09af-8df3-48f0-b19c-f44f5fc3426e','0c3bc6d7-1bd3-4046-a88d-f82666245524','17a0ce00-244b-47d0-86b8-70a284aa269b','392c97f0-93f2-49dd-a3ba-52db24486eeb','f206303f-7e42-42c1-9bac-7973b6c07e2a','5e2cbbe3-c59a-4448-85f0-c1fe5b4fb9a7','b918eff0-e0ef-4ff8-8811-8435cf76da39','dfdb1321-057a-4f6a-bcdd-b16316a9f5a6','4069d262-3f4b-4447-af97-b2e1a97b19ec','b5b2a29b-214d-490e-a2fd-f49464c157b8','efceb583-94fa-4080-a8ae-ac1676ae61b7','8da82576-5fe7-4c0e-abe7-90d08248ceea','2da97643-7c7b-4328-95a5-5d1ad254e685','112e6f88-6f24-4e4e-9309-bee7622162a1','8a4f27a3-2561-499d-8d84-5df619422a51','6d7c5c4f-6350-4eee-8d86-bcf77aa2df6a','75ebc921-1843-474a-8fc1-e1bbd20289cd','117f032f-3cea-42c4-a2da-53c6dd77ae1b','8632fa36-b4e1-4905-8649-34288e361369','e4594c15-a702-4d57-ae34-bfb97bae9051','f1f5a2de-7cb3-4688-8c91-4c781f57857a','c9bab244-5fe0-4092-b65a-2f389bca86b1','83864a75-500c-42cb-88ed-0835bd419418','dbc5bf00-465e-4d62-8d3c-93b119d0b588','fce6e3ef-b58c-4dcd-838a-360712e2a1c3','9fbc6fd5-bbd2-42c9-862b-bef41f221ce4','47feef42-5d6f-45cd-a6d5-f7e527d629a3','b441cb6c-c4b4-4503-a9f8-80d48000dcc6','9d93c13c-7650-4fed-93c5-1981aef9ee78','935632a0-5720-4611-bac4-4e14d551bef9','db72716c-f299-46ba-8c18-7e3e633e6b68','33824f7a-41b8-4b0a-8f1f-5b34341dde7e','16792f41-e1a8-48f9-979e-954357069e27','d9dcb678-c14c-4d0b-852e-55906e387f6b','24cec35e-08f0-454f-8dd1-2a6f268a2b83','72cae569-6b53-4143-891d-4a95d7063a81','647230d2-42a8-4df7-8487-1bbe62efdfc2','9ec56fa6-a5a1-432a-8285-54169ec590c7','3e9ac6af-bc71-4201-b86d-41e5b722a52d','9cac21fc-0b6b-4275-b721-132d6f0679ed','98d3eb81-8752-4958-809d-355c02439976','5c81989b-955b-430c-8e8f-c1280569974d','2596335b-5918-463f-822a-6c76922cf2be','59caae93-0174-4c83-9733-42c82ca1fdc3','ca53597f-a094-4e14-baac-413c2b6692d4','0b8b21d9-f35e-4b51-875a-f7ba1a02a07e','d2ac4969-7a02-4cd4-ab20-6eda4944c93b','6239d08c-c847-4548-a63e-91f56dec09ae','bd9924e3-6491-47d7-8e9f-0b7190a64e4c','7c13f2a1-d8b5-46b2-91cf-05bff5b2716c','913ff97f-3abe-4007-9717-63c863f228a2','2c7fd362-0f23-4412-8b81-8813acd5c3ba','ebd1a030-da25-46d7-8eaa-d9174ca783b3','1d082bd8-a776-48bb-9ca6-a5f6ffd04e9f','1517e3a2-1ad3-40d4-a743-41648653252e','fd9c87dc-9887-4a92-bce8-221efae113c4','ccbffda0-3afc-45ae-8038-be4b74031942')),\n            ', '\n        ) AS array_comorbidades,\n        ARRAY_JOIN(\n            ARRAY_AGG(DISTINCT cl.linha_de_cuidado) FILTER (WHERE cl.id_linha_de_cuidado in ('ead61184-340f-403b-ba45-6dec76415670', '02acde30-ff30-11ed-8c0e-05a002b576db', 'e553accd-9fa3-41bc-b21e-15a9d4a7fd91', '00ddd970-a23c-11ed-99fa-8371d3af67ab', '1f8585a0-9777-11ed-b3d4-dbaa90fa6a1e', '64cd80a0-b913-11ed-a214-8b290e27322b', '07ea2e30-a647-11ed-8c64-7753498c9ff5', '99479b50-c763-11ed-808a-2b50f4382f9f', '0f59d712-3d48-4e1b-ba84-44b13ca5dc75', '0eab6938-93a7-4c0b-982e-70a7d8bb960b', 'a5aaada0-ff31-11ed-8c0e-05a002b576db', '0d0a9010-ac84-11ed-ae57-bd5b39aa57ae', 'd5f3e1c0-0fa3-11ee-b67c-b3323f3891e6', '899398f0-f7de-4663-847d-05ccd00ec3e8', '7c058e60-ff32-11ed-8c0e-05a002b576db', '7bc5a5cb-d046-445a-a1a5-e5d9b5952204', 'bf0eeee6-65cb-4c91-91e8-537451497abf', 'f9a3ea22-3bbd-45e8-9582-091ad2186afd', '3e185593-7996-4ff6-b159-aef3d41f65f2', 'd93cec2c-c30f-47ad-8367-8683d9e8dceb', '8bd236a9-4435-45bb-9c2d-aa2103fee3c8', 'd481b407-305e-411a-a166-2e6b4ca9b5ba', '331acada-a9a1-4c23-a702-94b0e2f35409', '67f87a43-7e7d-4c7b-b490-9faa79dc0945', 'fce3e472-e5e4-44b3-a7d7-639c589547a3', '1d80c4b4-08e4-464b-a2f1-2ebe42636dc1', 'f0ede8f3-27ff-4cbf-b3ab-e32aceab81e3', '1dabbae7-00b6-47ed-acd4-8e7c81e78657')),\n            ', '\n        ) AS array_linha_de_cuidado\n    from \"delta\".\"silver\".\"lina_fact_carelines\" as cl\n    inner join pacientes_filtrados as p ON cl.id_paciente = cast(p.id_paciente as varchar)\n    where id_linha_de_cuidado in (\n        '0f12f5d2-a452-4156-a35c-fc6120a55d91', -- captacao\n        'ead61184-340f-403b-ba45-6dec76415670', '02acde30-ff30-11ed-8c0e-05a002b576db', 'e553accd-9fa3-41bc-b21e-15a9d4a7fd91', '00ddd970-a23c-11ed-99fa-8371d3af67ab', '1f8585a0-9777-11ed-b3d4-dbaa90fa6a1e', '64cd80a0-b913-11ed-a214-8b290e27322b', '07ea2e30-a647-11ed-8c64-7753498c9ff5', '99479b50-c763-11ed-808a-2b50f4382f9f', '0f59d712-3d48-4e1b-ba84-44b13ca5dc75', '0eab6938-93a7-4c0b-982e-70a7d8bb960b', 'a5aaada0-ff31-11ed-8c0e-05a002b576db', '0d0a9010-ac84-11ed-ae57-bd5b39aa57ae', 'd5f3e1c0-0fa3-11ee-b67c-b3323f3891e6', '899398f0-f7de-4663-847d-05ccd00ec3e8', '7c058e60-ff32-11ed-8c0e-05a002b576db', '7bc5a5cb-d046-445a-a1a5-e5d9b5952204', 'bf0eeee6-65cb-4c91-91e8-537451497abf', 'f9a3ea22-3bbd-45e8-9582-091ad2186afd', '3e185593-7996-4ff6-b159-aef3d41f65f2', 'd93cec2c-c30f-47ad-8367-8683d9e8dceb', '8bd236a9-4435-45bb-9c2d-aa2103fee3c8', 'd481b407-305e-411a-a166-2e6b4ca9b5ba', '331acada-a9a1-4c23-a702-94b0e2f35409', '67f87a43-7e7d-4c7b-b490-9faa79dc0945', 'fce3e472-e5e4-44b3-a7d7-639c589547a3', '1d80c4b4-08e4-464b-a2f1-2ebe42636dc1', 'f0ede8f3-27ff-4cbf-b3ab-e32aceab81e3', '1dabbae7-00b6-47ed-acd4-8e7c81e78657', -- linhas de cuidado\n        '039148a7-3fe3-41b7-a754-290f4f8a288b','b3a14b67-b893-42e2-a40d-4795f8208219','464d0b40-7657-11ed-a82b-bd7c4d5aba51','12b25802-d26b-4b96-a4a0-3698719f6a1d','77c051b1-ea67-4c4b-bd79-b147268b4da0','f014c5af-8cc4-49ff-a181-7de72ba796b9','bce62a06-d9d7-4e58-b98a-3c9c2e0f1e67','f1b73fa9-ba8a-4ff7-8f09-319783350d6c','8a639680-16b8-11ee-adb8-9926cf7e6d4a','d75b5ea1-cc81-4efd-98fc-f37169183070','b64a4850-9776-11ed-b3d4-dbaa90fa6a1e','6ed38a10-a8a9-11ed-944f-832495960abe','e60406c0-c99f-11ed-91df-3fd05f83421e','eac21a7d-a772-4f69-a08c-54b8a2de3dbd','5f1e125b-0513-4e60-9a79-ebdcc9704a4a','f3e5daa2-d3ce-4b5f-8454-f29ece0f8789','6b6bb849-5167-45fa-a54f-832b35c4fa8e','6b1189a1-d19a-4693-a469-be70efa0edd5','bb3ebd6b-36ab-494c-b90f-7d76c220f3c3','9b44d310-c9a1-11ed-91df-3fd05f83421e','00fa09af-8df3-48f0-b19c-f44f5fc3426e','0c3bc6d7-1bd3-4046-a88d-f82666245524','17a0ce00-244b-47d0-86b8-70a284aa269b','392c97f0-93f2-49dd-a3ba-52db24486eeb','f206303f-7e42-42c1-9bac-7973b6c07e2a','5e2cbbe3-c59a-4448-85f0-c1fe5b4fb9a7','b918eff0-e0ef-4ff8-8811-8435cf76da39','dfdb1321-057a-4f6a-bcdd-b16316a9f5a6','4069d262-3f4b-4447-af97-b2e1a97b19ec','b5b2a29b-214d-490e-a2fd-f49464c157b8','efceb583-94fa-4080-a8ae-ac1676ae61b7','8da82576-5fe7-4c0e-abe7-90d08248ceea','2da97643-7c7b-4328-95a5-5d1ad254e685','112e6f88-6f24-4e4e-9309-bee7622162a1','8a4f27a3-2561-499d-8d84-5df619422a51','6d7c5c4f-6350-4eee-8d86-bcf77aa2df6a','75ebc921-1843-474a-8fc1-e1bbd20289cd','117f032f-3cea-42c4-a2da-53c6dd77ae1b','8632fa36-b4e1-4905-8649-34288e361369','e4594c15-a702-4d57-ae34-bfb97bae9051','f1f5a2de-7cb3-4688-8c91-4c781f57857a','c9bab244-5fe0-4092-b65a-2f389bca86b1','83864a75-500c-42cb-88ed-0835bd419418','dbc5bf00-465e-4d62-8d3c-93b119d0b588','fce6e3ef-b58c-4dcd-838a-360712e2a1c3','9fbc6fd5-bbd2-42c9-862b-bef41f221ce4','47feef42-5d6f-45cd-a6d5-f7e527d629a3','b441cb6c-c4b4-4503-a9f8-80d48000dcc6','9d93c13c-7650-4fed-93c5-1981aef9ee78','935632a0-5720-4611-bac4-4e14d551bef9','db72716c-f299-46ba-8c18-7e3e633e6b68','33824f7a-41b8-4b0a-8f1f-5b34341dde7e','16792f41-e1a8-48f9-979e-954357069e27','d9dcb678-c14c-4d0b-852e-55906e387f6b','24cec35e-08f0-454f-8dd1-2a6f268a2b83','72cae569-6b53-4143-891d-4a95d7063a81','647230d2-42a8-4df7-8487-1bbe62efdfc2','9ec56fa6-a5a1-432a-8285-54169ec590c7','3e9ac6af-bc71-4201-b86d-41e5b722a52d','9cac21fc-0b6b-4275-b721-132d6f0679ed','98d3eb81-8752-4958-809d-355c02439976','5c81989b-955b-430c-8e8f-c1280569974d','2596335b-5918-463f-822a-6c76922cf2be','59caae93-0174-4c83-9733-42c82ca1fdc3','ca53597f-a094-4e14-baac-413c2b6692d4','0b8b21d9-f35e-4b51-875a-f7ba1a02a07e','d2ac4969-7a02-4cd4-ab20-6eda4944c93b','6239d08c-c847-4548-a63e-91f56dec09ae','bd9924e3-6491-47d7-8e9f-0b7190a64e4c','7c13f2a1-d8b5-46b2-91cf-05bff5b2716c','913ff97f-3abe-4007-9717-63c863f228a2','2c7fd362-0f23-4412-8b81-8813acd5c3ba','ebd1a030-da25-46d7-8eaa-d9174ca783b3','1d082bd8-a776-48bb-9ca6-a5f6ffd04e9f','1517e3a2-1ad3-40d4-a743-41648653252e','fd9c87dc-9887-4a92-bce8-221efae113c4','ccbffda0-3afc-45ae-8038-be4b74031942' -- comorbidades\n    )\n    group by 1\n),\ncompromissos_adesao as ( -- corre\u00e7\u00e3o pra n\u00e3o pegar o max resultado e sim o resultado referente a ultima data de compromisso\n    SELECT\n        id_paciente,\n        MAX(data_compromisso_realizado) FILTER (\n            WHERE compromisso = 'Ades\u00e3o aos Medicamentos'\n        ) AS data_medicamento,\n        MAX(resultado) FILTER (\n            WHERE compromisso = 'Ades\u00e3o aos Medicamentos'\n              AND data_compromisso_realizado = (\n                  SELECT MAX(data_compromisso_realizado)\n                  FROM \"delta\".\"silver\".\"lina_fact_lina_compromisso\" sub\n                  WHERE sub.id_paciente = c.id_paciente\n                    AND sub.compromisso = 'Ades\u00e3o aos Medicamentos'\n              )\n        ) AS resultado_medicamento,\n        MAX(data_compromisso_realizado) FILTER (\n            WHERE compromisso = 'Ades\u00e3o a nutri\u00e7\u00e3o'\n        ) AS data_nutricao,\n        MAX(resultado) FILTER (\n            WHERE compromisso = 'Ades\u00e3o a nutri\u00e7\u00e3o'\n              AND data_compromisso_realizado = (\n                  SELECT MAX(data_compromisso_realizado)\n                  FROM \"delta\".\"silver\".\"lina_fact_lina_compromisso\" sub\n                  WHERE sub.id_paciente = c.id_paciente\n                    AND sub.compromisso = 'Ades\u00e3o a nutri\u00e7\u00e3o'\n              )\n        ) AS resultado_nutricao,\n        MAX(data_compromisso_realizado) FILTER (\n            WHERE compromisso = 'Ader\u00eancia a Atividade F\u00edsica'\n        ) AS data_atividade,\n        MAX(resultado) FILTER (\n            WHERE compromisso = 'Ader\u00eancia a Atividade F\u00edsica'\n              AND data_compromisso_realizado = (\n                  SELECT MAX(data_compromisso_realizado)\n                  FROM \"delta\".\"silver\".\"lina_fact_lina_compromisso\" sub\n                  WHERE sub.id_paciente = c.id_paciente\n                    AND sub.compromisso = 'Ader\u00eancia a Atividade F\u00edsica'\n              )\n        ) AS resultado_atividade_fisica\n    FROM \"delta\".\"silver\".\"lina_fact_lina_compromisso\" c\n    WHERE compromisso IN (\n        'Ades\u00e3o aos Medicamentos',\n        'Ades\u00e3o a nutri\u00e7\u00e3o',\n        'Ader\u00eancia a Atividade F\u00edsica'\n    )\n    GROUP BY id_paciente\n),\n-- filtros de pacientes inseridos devido aos volumes de dados mantendo s\u00f3 0,6% na comorbidade e 11% na compromisso. troca do max(case) para ctes apartadas unificadas num full outer join sendo mais performatico\npa_comorbidade as (\n    select\n        cast(a.id_paciente as varchar) as id_paciente,\n        a.sv_pa_sistolica as pa_sistolica,\n        a.sv_pa_diastolica as pa_diastolica,\n        a.data_brt_atendimento as data_medicao\n    from \"delta\".\"silver\".\"cnx_fact_atendimento_comorbidade\" as a\n    inner JOIN pacientes_filtrados as p ON p.id_paciente = a.id_paciente\n    where (a.sv_pa_sistolica is not null and a.sv_pa_sistolica != 0) and (a.sv_pa_diastolica is not null and a.sv_pa_diastolica != 0)\n),\npa_compromisso as (\n    select\n        c.id_paciente as id_paciente,\n        cast(max(case when c.compromisso = 'Aferi\u00e7\u00e3o PA sist\u00f3lica' then c.resultado end) as integer) as pa_sistolica,\n        cast(max(case when c.compromisso = 'Aferi\u00e7\u00e3o PA diast\u00f3lica' then c.resultado end) as integer) as pa_diastolica,\n        c.data_inclusao as data_medicao\n    from \"delta\".\"silver\".\"lina_fact_lina_compromisso\" as c\n    inner JOIN pacientes_filtrados as p ON cast(p.id_paciente as varchar) = c.id_paciente\n    where c.compromisso in ('Aferi\u00e7\u00e3o PA sist\u00f3lica', 'Aferi\u00e7\u00e3o PA diast\u00f3lica')\n    and c.resultado != '0'\n    group by c.id_paciente, c.data_inclusao\n    having\n        max(case when c.compromisso = 'Aferi\u00e7\u00e3o PA sist\u00f3lica' then c.resultado end) is not null and\n        max(case when c.compromisso = 'Aferi\u00e7\u00e3o PA diastolica' then c.resultado end) is not null\n),\npa_unificada as (\n    select * from pa_comorbidade\n    union all\n    select * from pa_compromisso\n),\npa_primeira_rn as (\n    select\n        id_paciente,\n        pa_sistolica,\n        pa_diastolica,\n        data_medicao,\n        row_number() over (partition by id_paciente order by data_medicao asc) as rn\n    from pa_unificada\n),\npa_primeira as (\n    select\n        id_paciente,\n        pa_sistolica,\n        pa_diastolica,\n        data_medicao\n    from pa_primeira_rn\n    where rn = 1\n),\npa_ultima_rn as (\n    select\n        id_paciente,\n        pa_sistolica,\n        pa_diastolica,\n        data_medicao,\n        row_number() over (partition by id_paciente order by data_medicao desc) as rn\n    from pa_unificada\n),\npa_ultima as (\n    select\n        id_paciente,\n        pa_sistolica,\n        pa_diastolica,\n        data_medicao\n    from pa_ultima_rn\n    where rn = 1\n),\npa_final as (\n    select\n        coalesce(pr.id_paciente, ul.id_paciente) as id_paciente,\n        pr.pa_sistolica as primeira_pa_sistolica,\n        pr.pa_diastolica as primeira_pa_diastolica,\n        pr.data_medicao as data_primeira_pa,\n        ul.pa_sistolica as ultima_pa_sistolica,\n        ul.pa_diastolica as ultima_pa_diastolica,\n        ul.data_medicao as data_ultima_pa\n    from pa_primeira pr\n    full outer join pa_ultima ul on pr.id_paciente = ul.id_paciente\n),\npa_classificada as (\n    select *,\n        round((primeira_pa_sistolica + 2 * primeira_pa_diastolica) / 3.0, 2) as primeira_pam,\n        round((ultima_pa_sistolica + 2 * ultima_pa_diastolica) / 3.0, 2) as ultima_pam,\n        case\n            when primeira_pa_sistolica < 120 and primeira_pa_diastolica < 80 then 'Press\u00e3o Arterial Normal'\n            when primeira_pa_sistolica between 120 and 129 and primeira_pa_diastolica < 80 then 'Press\u00e3o Arterial Elevada'\n            when (primeira_pa_sistolica between 130 and 139) or (primeira_pa_diastolica between 80 and 89) then 'Hipertens\u00e3o Est\u00e1gio 1'\n            when primeira_pa_sistolica >= 140 or primeira_pa_diastolica >= 90 then 'Hipertens\u00e3o Est\u00e1gio 2'\n            else null\n        end as classificacao_primeira_pa,\n        case\n            when ultima_pa_sistolica < 120 and ultima_pa_diastolica < 80 then 'Press\u00e3o Arterial Normal'\n            when ultima_pa_sistolica between 120 and 129 and ultima_pa_diastolica < 80 then 'Press\u00e3o Arterial Elevada'\n            when (ultima_pa_sistolica between 130 and 139) or (ultima_pa_diastolica between 80 and 89) then 'Hipertens\u00e3o Est\u00e1gio 1'\n            when ultima_pa_sistolica >= 140 or ultima_pa_diastolica >= 90 then 'Hipertens\u00e3o Est\u00e1gio 2'\n            else null\n        end as classificacao_ultima_pa\n    from pa_final\n),\n-- filtros de pacientes inseridos devido aos volumes de dados mantendo s\u00f3 11% na compromisso. troca do max(case) para ctes apartadas unificadas num full outer join sendo mais performatico\nhemoglobina_filtrada as (\n    select\n        c.id_paciente,\n        c.resultado as hemoglobina_glicada,\n        c.data_compromisso_realizado\n    from \"delta\".\"silver\".\"lina_fact_lina_compromisso\" c\n    inner JOIN pacientes_filtrados as p ON cast(p.id_paciente as varchar) = c.id_paciente\n    where compromisso = 'Hemoglobina glicada'\n),\nprimeira_hemoglobina as (\n    select\n        id_paciente,\n        hemoglobina_glicada as primeira_hemoglobina,\n        data_compromisso_realizado as data_primeira_hemoglobina\n    from (\n        select\n            id_paciente,\n            hemoglobina_glicada,\n            data_compromisso_realizado,\n            row_number() over (partition by id_paciente order by data_compromisso_realizado asc) as rn\n        from hemoglobina_filtrada\n    ) t\n    where rn = 1\n),\nultima_hemoglobina as (\n    select\n        id_paciente,\n        hemoglobina_glicada as ultima_hemoglobina,\n        data_compromisso_realizado as data_ultima_hemoglobina\n    from (\n        select\n            id_paciente,\n            hemoglobina_glicada,\n            data_compromisso_realizado,\n            row_number() over (partition by id_paciente order by data_compromisso_realizado desc) as rn\n        from hemoglobina_filtrada\n    ) t\n    where rn = 1\n),\nhemoglobina_finalizada as (\n    select\n        coalesce(p.id_paciente, u.id_paciente) as id_paciente,\n        p.primeira_hemoglobina,\n        p.data_primeira_hemoglobina,\n        u.ultima_hemoglobina,\n        u.data_ultima_hemoglobina\n    from primeira_hemoglobina p\n    full outer join ultima_hemoglobina u on p.id_paciente = u.id_paciente\n),\n-- filtros de pacientes inseridos devido aos volumes de dados mantendo s\u00f3 2,7% na mensura\u00e7\u00e3o. troca do max(case) para ctes apartadas unificadas num full outer join sendo mais performatico\nmedidas_filtradas as (\n    select\n        p.id_paciente,\n        m.nome_mensuracao,\n        m.medicao_numerica,\n        m.data_medicao\n    from \"delta\".\"gold\".\"mensuracoes\" as m\n    inner JOIN pacientes_filtrados as p ON p.id_paciente = m.id_paciente\n    where nome_mensuracao in ('Altura', 'Peso') and plataforma = 'Conexa'\n),\nprimeiro_peso as (\n    select\n        id_paciente,\n        medicao_numerica as primeiro_peso,\n        data_medicao as data_primeiro_peso\n    from (\n        select\n            id_paciente,\n            medicao_numerica,\n            data_medicao,\n            row_number() over (partition by id_paciente order by data_medicao asc) as rn\n        from medidas_filtradas\n        where nome_mensuracao = 'Peso'\n    ) t\n    where rn = 1\n),\nultima_peso as (\n    select\n        id_paciente,\n        medicao_numerica as ultimo_peso,\n        data_medicao as data_ultimo_peso\n    from (\n        select\n            id_paciente,\n            medicao_numerica,\n            data_medicao,\n            row_number() over (partition by id_paciente order by data_medicao desc) as rn\n        from medidas_filtradas\n        where nome_mensuracao = 'Peso'\n    ) t\n    where rn = 1\n),\nprimeira_altura as (\n    select\n        id_paciente,\n        medicao_numerica as primeira_altura,\n        data_medicao as data_primeira_altura\n    from (\n        select\n            id_paciente,\n            medicao_numerica,\n            data_medicao,\n            row_number() over (partition by id_paciente order by data_medicao asc) as rn\n        from medidas_filtradas\n        where nome_mensuracao = 'Altura'\n    ) t\n    where rn = 1\n),\nultima_altura as (\n    select\n        id_paciente,\n        medicao_numerica as ultima_altura,\n        data_medicao as data_ultima_altura\n    from (\n        select\n            id_paciente,\n            medicao_numerica,\n            data_medicao,\n            row_number() over (partition by id_paciente order by data_medicao desc) as rn\n        from medidas_filtradas\n        where nome_mensuracao = 'Altura'\n    ) t\n    where rn = 1\n),\nimc_finalizado as (\n    select\n        coalesce(p.id_paciente, up.id_paciente, a.id_paciente, ua.id_paciente) as id_paciente,\n        p.primeiro_peso,\n        a.primeira_altura,\n        p.data_primeiro_peso,\n        a.data_primeira_altura,\n        case when p.primeiro_peso is not null and a.primeira_altura is not null then\n          p.primeiro_peso / (a.primeira_altura * a.primeira_altura)\n        else null end as primeiro_imc,\n        up.ultimo_peso,\n        ua.ultima_altura,\n        up.data_ultimo_peso,\n        ua.data_ultima_altura,\n        case when up.ultimo_peso is not null and ua.ultima_altura is not null then\n          up.ultimo_peso / (ua.ultima_altura * ua.ultima_altura)\n        else null end as ultimo_imc\n    from primeiro_peso p\n    full outer join ultima_peso up on p.id_paciente = up.id_paciente\n    full outer join primeira_altura a on coalesce(p.id_paciente, up.id_paciente) = a.id_paciente\n    full outer join ultima_altura ua on coalesce(p.id_paciente, up.id_paciente, a.id_paciente) = ua.id_paciente\n),\nimc_classificacao as (\n    select *,\n        case\n            when primeiro_imc < 18.5 then 'Magreza'\n            when primeiro_imc between 18.5 and 24.9 then 'Normal'\n            when primeiro_imc between 25 and 29.9 then 'Sobrepeso'\n            when primeiro_imc between 30 and 34.9 then 'Obesidade grau I'\n            when primeiro_imc between 35 and 39.9 then 'Obesidade grau II'\n            when primeiro_imc >= 40 then 'Obesidade grau III'\n            else null\n        end as classificacao_primeiro_imc,\n        case\n            when ultimo_imc < 18.5 then 'Magreza'\n            when ultimo_imc between 18.5 and 24.9 then 'Normal'\n            when ultimo_imc between 25 and 29.9 then 'Sobrepeso'\n            when ultimo_imc between 30 and 34.9 then 'Obesidade grau I'\n            when ultimo_imc between 35 and 39.9 then 'Obesidade grau II'\n            when ultimo_imc >= 40 then 'Obesidade grau III'\n            else null\n        end as classificacao_ultimo_imc\n    from imc_finalizado\n),\ncarelines_info as (\n    select\n        p.id_paciente,\n        cl.id_linha_de_cuidado,\n        cl.linha_de_cuidado, \n        CASE    WHEN cl.id_linha_de_cuidado IN ( 'ead61184-340f-403b-ba45-6dec76415670', '02acde30-ff30-11ed-8c0e-05a002b576db', 'e553accd-9fa3-41bc-b21e-15a9d4a7fd91', '00ddd970-a23c-11ed-99fa-8371d3af67ab', '1f8585a0-9777-11ed-b3d4-dbaa90fa6a1e', '64cd80a0-b913-11ed-a214-8b290e27322b', '07ea2e30-a647-11ed-8c64-7753498c9ff5', '99479b50-c763-11ed-808a-2b50f4382f9f', '0f59d712-3d48-4e1b-ba84-44b13ca5dc75', '0eab6938-93a7-4c0b-982e-70a7d8bb960b', 'a5aaada0-ff31-11ed-8c0e-05a002b576db', '0d0a9010-ac84-11ed-ae57-bd5b39aa57ae', 'd5f3e1c0-0fa3-11ee-b67c-b3323f3891e6', '899398f0-f7de-4663-847d-05ccd00ec3e8', '7c058e60-ff32-11ed-8c0e-05a002b576db', '7bc5a5cb-d046-445a-a1a5-e5d9b5952204', 'bf0eeee6-65cb-4c91-91e8-537451497abf', 'f9a3ea22-3bbd-45e8-9582-091ad2186afd', '3e185593-7996-4ff6-b159-aef3d41f65f2', 'd93cec2c-c30f-47ad-8367-8683d9e8dceb', '8bd236a9-4435-45bb-9c2d-aa2103fee3c8', 'd481b407-305e-411a-a166-2e6b4ca9b5ba', '331acada-a9a1-4c23-a702-94b0e2f35409', '67f87a43-7e7d-4c7b-b490-9faa79dc0945', 'fce3e472-e5e4-44b3-a7d7-639c589547a3', '1d80c4b4-08e4-464b-a2f1-2ebe42636dc1', 'f0ede8f3-27ff-4cbf-b3ab-e32aceab81e3', '1dabbae7-00b6-47ed-acd4-8e7c81e78657')\n                THEN linha_de_cuidado\n                ELSE NULL \n        END AS linha_de_cuidado_LC,\n        cl.data_criacao,\n        ROW_NUMBER() OVER (PARTITION BY cl.id_paciente ORDER BY cl.data_criacao ASC) AS contagem\n    from \"delta\".\"silver\".\"lina_fact_carelines\" as cl\n    inner join pacientes_filtrados as p ON cl.id_paciente = cast(p.id_paciente as varchar)\n),\ncompleto as (\n    select\n        p.id_paciente,\n\t\tto_hex(md5(to_utf8(cast(p.id_paciente as varchar) || 'cnx'))) as sk_paciente,\n        cli.contagem,\n        cli.id_linha_de_cuidado,\n        cli.linha_de_cuidado,\n        cli.linha_de_cuidado_LC,\n        cli.data_criacao,\n        p.id_clinica,\n        cast(p.id_clinica as varchar) as id_clinica_plano,\n        p.nome_clinica,\n        p.flag_aps,\n        p.nome_paciente,\n        p.cpf_paciente,\n        p.carteira_convenio,\n        p.idade,\n        p.faixa_etaria,\n        p.faixa_etaria2,\n        p.tipo_paciente,\n        p.data_brt_cadastro,\n        p.data_brt_ativacao,\n        p.status_paciente,\n        p.sexo_paciente,\n        p.id_equipe_aps,\n        p.nome_equipe_aps,\n        p.info_adicionais,\n        p.data_nascimento_paciente,\n        c.id_cliente_autoritativa as id_empresa,\n        c.nome_cliente_autoritativa as nome_empresa,\n        car.array_linha_de_cuidado,\n        car.qtd_linha_de_cuidado,\n        car.inativacao_linha,\n        car.motivo_inativacao_linha,\n        car.array_comorbidades,\n        car.qtd_comorbidades,\n        car.data_captacao,\n        case\n            when car.data_captacao is not null\n                then 'Capta\u00e7\u00e3o'\n            else NULL\n        end as captacao,\n        car.inativacao_captacao,\n        car.motivo_inativacao_captacao,\n        ade.resultado_medicamento,\n        ade.resultado_nutricao,\n        ade.resultado_atividade_fisica,\n        atd.last_data_atendimento,\n        atd.prim_data_atendimento,\n        atd.PA_last_data_atendimento,\n        atd.atent_med_fam,\n        atd.atent_nutricao,\n        atd.atend_enfermagem,\n        atd.atend_total,\n        COALESCE(DATE_DIFF('day', atd.last_data_atendimento , CURRENT_DATE),9999) AS dias_desde_ultimo_atendimento,\n        imc.primeiro_peso,\n        imc.data_primeiro_peso,\n        imc.ultimo_peso,\n        imc.data_ultimo_peso,\n        imc.primeira_altura,\n        imc.data_primeira_altura,\n        imc.primeiro_imc,\n        imc.classificacao_primeiro_imc,\n        imc.ultima_altura,\n        imc.data_ultima_altura,\n        imc.ultimo_imc,\n        imc.classificacao_ultimo_imc,\n        hem.primeira_hemoglobina,\n        hem.data_primeira_hemoglobina,\n        hem.ultima_hemoglobina,\n        hem.data_ultima_hemoglobina,\n        pa.primeira_pa_sistolica,\n        pa.primeira_pa_diastolica,\n        pa.primeira_pam,\n        pa.classificacao_primeira_pa,\n        CASE\n            WHEN pa.classificacao_primeira_pa = 'Press\u00e3o Arterial Normal' THEN 1\n            WHEN pa.classificacao_primeira_pa = 'Press\u00e3o Arterial Elevada' THEN 2\n            WHEN pa.classificacao_primeira_pa = 'Hipertens\u00e3o Est\u00e1gio 1' THEN 3\n            WHEN pa.classificacao_primeira_pa = 'Hipertens\u00e3o Est\u00e1gio 2' THEN 4\n            ELSE NULL\n        END AS classificacao_primeira_pa_numero,\n        CASE\n            WHEN pa.classificacao_ultima_pa = 'Press\u00e3o Arterial Normal' THEN 1\n            WHEN pa.classificacao_ultima_pa = 'Press\u00e3o Arterial Elevada' THEN 2\n            WHEN pa.classificacao_ultima_pa = 'Hipertens\u00e3o Est\u00e1gio 1' THEN 3\n            WHEN pa.classificacao_ultima_pa = 'Hipertens\u00e3o Est\u00e1gio 2' THEN 4\n            ELSE NULL\n        END AS classificacao_ultima_pa_numero,\n        pa.data_primeira_pa,\n        pa.ultima_pa_sistolica,\n        pa.ultima_pa_diastolica,\n        pa.data_ultima_pa,\n        pa.ultima_pam,\n        pa.classificacao_ultima_pa,\n        m.last_data_mensagem,\n        -- metricas que existiam internamente no superset\n        CASE\n            WHEN car.data_captacao IS NOT NULL AND p.status_paciente = 'ATIVO' AND car.inativacao_captacao IS NULL AND (car.qtd_linha_de_cuidado IS NULL OR car.qtd_linha_de_cuidado = 0) THEN 'Em Capta\u00e7\u00e3o'\n            WHEN car.motivo_inativacao_linha IN ('Paciente deixou de ter a condi\u00e7\u00e3o de sa\u00fade', 'Paciente ativo em outra iniciativa') THEN 'Conclu\u00eddos'\n            WHEN car.qtd_linha_de_cuidado > 0 AND car.inativacao_linha IS NULL AND p.status_paciente = 'ATIVO' AND COALESCE(DATE_DIFF('day', atd.last_data_atendimento , CURRENT_DATE),9999) <= 30 THEN 'Engajado Recente'\n            WHEN car.qtd_linha_de_cuidado > 0 AND car.inativacao_linha IS NULL AND p.status_paciente = 'ATIVO' AND COALESCE(DATE_DIFF('day', atd.last_data_atendimento , CURRENT_DATE),9999) <= 90 THEN 'Engajado'\n            WHEN car.qtd_linha_de_cuidado > 0 AND car.inativacao_linha IS NULL AND p.status_paciente = 'ATIVO' AND COALESCE(DATE_DIFF('day', atd.last_data_atendimento , CURRENT_DATE),9999) > 90 THEN 'Desengajado'\n            WHEN car.inativacao_linha IS NOT NULL THEN 'Exclu\u00eddos'\n            ELSE NULL \n        END as status_linha,\n        CASE\n            WHEN atd.pa_last_data_atendimento IS NOT NULL THEN 'Sim'\n            ELSE 'N\u00e3o' \n        END as passou_pelo_pa,\n        CASE\n            WHEN p.idade < 60 AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) < 7 THEN 'Menor que 7'\n            WHEN p.idade < 60 AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) >= 7 THEN 'Maior ou igual a 7'\n            WHEN p.idade >= 60 AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) < 7.5 THEN 'Menor que 7.5'\n            WHEN p.idade >= 60 AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) >= 7.5 THEN 'Maior ou igual a 7.5'\n            ELSE NULL\n        END as classificacao_hemoglobina_ultima,\n        CASE\n            WHEN imc.primeiro_peso IS NOT NULL AND imc.ultimo_peso IS NOT NULL AND imc.primeiro_peso = imc.ultimo_peso THEN 'Peso igual'\n            WHEN imc.primeiro_peso IS NOT NULL AND imc.ultimo_peso IS NOT NULL AND imc.primeiro_peso != imc.ultimo_peso THEN 'Peso diferente'\n            ELSE NULL\n        END as peso_diferente,\n        CASE\n        WHEN hem.data_primeira_hemoglobina IS NOT NULL\n            AND hem.data_ultima_hemoglobina IS NOT NULL\n            AND hem.data_primeira_hemoglobina != hem.data_ultima_hemoglobina\n            AND TRY_CAST(hem.primeira_hemoglobina AS DOUBLE) IS NOT NULL\n            AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) IS NOT NULL\n            AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) > TRY_CAST(hem.primeira_hemoglobina AS DOUBLE) * 1.05 THEN 'Piora'\n        WHEN hem.data_primeira_hemoglobina IS NOT NULL\n            AND hem.data_ultima_hemoglobina IS NOT NULL\n            AND hem.data_primeira_hemoglobina != hem.data_ultima_hemoglobina\n            AND TRY_CAST(hem.primeira_hemoglobina AS DOUBLE) IS NOT NULL\n            AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) IS NOT NULL\n            AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) < TRY_CAST(hem.primeira_hemoglobina AS DOUBLE) * 0.95 THEN 'Melhora'\n        WHEN hem.data_primeira_hemoglobina IS NOT NULL\n            AND hem.data_ultima_hemoglobina IS NOT NULL\n            AND hem.data_primeira_hemoglobina != hem.data_ultima_hemoglobina\n            AND TRY_CAST(hem.primeira_hemoglobina AS DOUBLE) IS NOT NULL\n            AND TRY_CAST(hem.ultima_hemoglobina AS DOUBLE) IS NOT NULL THEN 'Manteve'\n        ELSE NULL\n        END as evolucao_hemoglobina,\n        CASE\n            WHEN car.qtd_linha_de_cuidado > 0 AND car.inativacao_linha IS NULL AND p.status_paciente = 'ATIVO' THEN 'Dentro do Programa'\n            ELSE 'Fora do Programa' \n        END as status_programa\n    from pacientes_filtrados as p\n    left join \"delta\".\"silver\".\"cnx_dim_clinica\" as c on p.id_clinica = c.id_clinica\n    left join carelines_qtd as car on p.id_paciente = car.id_paciente\n    left join carelines_info as cli on p.id_paciente = cli.id_paciente\n    left join compromissos_adesao as ade on cast(p.id_paciente as varchar) = ade.id_paciente\n    left join atendimentos as atd on p.id_paciente = atd.id_paciente\n    left join imc_classificacao as imc on p.id_paciente = imc.id_paciente\n    left join hemoglobina_finalizada as hem on cast(p.id_paciente as varchar) = hem.id_paciente\n    left join pa_classificada as pa on cast(p.id_paciente as varchar) = pa.id_paciente\n    left join mensageria as m on cast(p.id_paciente as varchar) = m.id_paciente\n)\nselect\n    *,\n    CASE\n        WHEN data_ultima_pa IS NULL\n          OR data_primeira_pa IS NULL\n          OR data_ultima_pa = data_primeira_pa\n          OR classificacao_primeira_pa_numero IS NULL\n          OR classificacao_ultima_pa_numero IS NULL\n        THEN NULL\n        WHEN classificacao_ultima_pa_numero < classificacao_primeira_pa_numero THEN 'Melhorou'\n        WHEN classificacao_ultima_pa_numero > classificacao_primeira_pa_numero THEN 'Piorou'\n        WHEN classificacao_ultima_pa_numero = classificacao_primeira_pa_numero THEN 'Permaneceu igual'\n    END as resultado_pa\nfrom completo", "relation_name": "\"delta\".\"gold\".\"az_cronicos_linha_cuidado\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:08.115523Z", "completed_at": "2025-07-01T18:33:08.161049Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:08.186246Z", "completed_at": "2025-07-01T18:33:08.186246Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13092350959777832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_mensuracoes_fonte_medicao_input__paciente.f10ce318ed", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        fonte_medicao_input as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"mensuracoes\"\n    group by fonte_medicao_input\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'paciente'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:08.315876Z", "completed_at": "2025-07-01T18:33:08.356513Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:08.381638Z", "completed_at": "2025-07-01T18:33:08.381638Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1287529468536377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_mensuracoes_medicao_descritiva__1_a_2_vezes_na_semana__3_a_5_vezes_na_semana__N_o_informado__N_o_pratica__Todos_os_dias__None.903ad8b5ba", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        medicao_descritiva as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"mensuracoes\"\n    group by medicao_descritiva\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1 a 2 vezes na semana','3 a 5 vezes na semana','N\u00e3o informado','N\u00e3o pratica','Todos os dias','None'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:08.495783Z", "completed_at": "2025-07-01T18:33:08.543698Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:08.573600Z", "completed_at": "2025-07-01T18:33:08.573600Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13976168632507324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_mensuracoes_nome_mensuracao__Altura__PA_Diastolica__PA_Sistolica__Peso__Temperatura_Corporal__Atividade_F_sica.a7ce46ea5a", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        nome_mensuracao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"mensuracoes\"\n    group by nome_mensuracao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Altura','PA Diastolica','PA Sistolica','Peso','Temperatura Corporal','Atividade F\u00edsica'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:08.688601Z", "completed_at": "2025-07-01T18:33:08.730404Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:08.758910Z", "completed_at": "2025-07-01T18:33:08.758910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12661242485046387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_mensuracoes_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.dcad7b5c2a", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"mensuracoes\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:08.884768Z", "completed_at": "2025-07-01T18:33:08.936983Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:08.970742Z", "completed_at": "2025-07-01T18:33:08.970742Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1479806900024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_mensuracoes_tipo_medicao__Antropometrico__Sinais_Vitais__Frequ_ncia.505fe48b2e", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_medicao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"mensuracoes\"\n    group by tipo_medicao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Antropometrico','Sinais Vitais','Frequ\u00eancia'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:09.079581Z", "completed_at": "2025-07-01T18:33:09.127611Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:09.154369Z", "completed_at": "2025-07-01T18:33:09.155318Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12674331665039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_mensuracoes_unidade_medicao_____kg__m__mg_dL__mmHg___C__frequ_ncia_semanal.a1e0f37f89", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        unidade_medicao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"mensuracoes\"\n    group by unidade_medicao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '%','kg','m','mg/dL','mmHg','\u00b0C','frequ\u00eancia semanal'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:09.264193Z", "completed_at": "2025-07-01T18:33:09.320496Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:09.349081Z", "completed_at": "2025-07-01T18:33:09.349081Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1393594741821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_relationships_where_mensuracoes_cast_id_atendimento_as_varchar___cast_id_atendimento_as_varchar___year_data_medicao_2019__ref_cnx_fact_atendimento_comorbidade_.09da593598", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    cast(id_atendimento as varchar) as id\n\n  from \"delta\".\"gold\".\"mensuracoes\"\n\n  where cast(id_atendimento as varchar) is not null\n    and year(data_medicao) >= 2019\n\n),\n\nright_table as (\n\n  select\n    cast(id_atendimento as varchar) as id\n\n  from \"delta\".\"silver\".\"cnx_fact_atendimento_comorbidade\"\n\n  where cast(id_atendimento as varchar) is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:09.466974Z", "completed_at": "2025-07-01T18:33:09.506682Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:09.533057Z", "completed_at": "2025-07-01T18:33:09.533057Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12368631362915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_relationships_where_mensuracoes_sk_clinica_plano__sk_clinica__ref_clinicas___source_Conexa_.5b768ce7bc", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    sk_clinica_plano as id\n\n  from \"delta\".\"gold\".\"mensuracoes\"\n\n  where sk_clinica_plano is not null\n    and 1=1\n\n),\n\nright_table as (\n\n  select\n    sk_clinica as id\n\n  from \"delta\".\"gold\".\"clinicas\"\n\n  where sk_clinica is not null\n    and source = 'Conexa'\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:09.660406Z", "completed_at": "2025-07-01T18:33:09.701895Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:09.730972Z", "completed_at": "2025-07-01T18:33:09.730972Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1353442668914795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_mensuracoes_sk_paciente__id_atendimento__nome_mensuracao.91c04377b6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sk_paciente, id_atendimento, nome_mensuracao\n    from \"delta\".\"gold\".\"mensuracoes\"\n    group by sk_paciente, id_atendimento, nome_mensuracao\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:09.841212Z", "completed_at": "2025-07-01T18:33:09.877524Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:09.905274Z", "completed_at": "2025-07-01T18:33:09.905274Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11988091468811035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_mensuracoes_cast_id_atendimento_as_varchar_.51dde2282a", "compiled": true, "compiled_code": "\n\n\n\nselect \n    cast(id_atendimento as varchar)\nfrom \"delta\".\"gold\".\"mensuracoes\"\nwhere cast(id_atendimento as varchar) is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:10.009384Z", "completed_at": "2025-07-01T18:33:10.045094Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:10.074405Z", "completed_at": "2025-07-01T18:33:10.074405Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1164708137512207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_mensuracoes_cast_id_paciente_as_varchar_.2054e30c38", "compiled": true, "compiled_code": "\n\n\n\nselect \n    cast(id_paciente as varchar)\nfrom \"delta\".\"gold\".\"mensuracoes\"\nwhere cast(id_paciente as varchar) is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:10.173265Z", "completed_at": "2025-07-01T18:33:10.209368Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:10.234447Z", "completed_at": "2025-07-01T18:33:10.234447Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11097168922424316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_mensuracoes_id_clinica_plano.9c378d25a0", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_clinica_plano\nfrom \"delta\".\"gold\".\"mensuracoes\"\nwhere id_clinica_plano is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:10.336294Z", "completed_at": "2025-07-01T18:33:10.371720Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:10.616581Z", "completed_at": "2025-07-01T18:33:10.616581Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3308370113372803, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_mensuracoes_id_origem.6f0475cfc2", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_origem\nfrom \"delta\".\"gold\".\"mensuracoes\"\nwhere id_origem is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:10.777961Z", "completed_at": "2025-07-01T18:33:10.826087Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:10.856486Z", "completed_at": "2025-07-01T18:33:10.856486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14555120468139648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_mensuracoes_medicao_numerica.5c2545c3ae", "compiled": true, "compiled_code": "\n\n\n\nselect \n    medicao_numerica\nfrom \"delta\".\"gold\".\"mensuracoes\"\nwhere medicao_numerica is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:10.982144Z", "completed_at": "2025-07-01T18:33:11.026175Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:11.062683Z", "completed_at": "2025-07-01T18:33:11.062683Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14531302452087402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_mensuracoes_nome_mensuracao.96c3f00d1f", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_mensuracao\nfrom \"delta\".\"gold\".\"mensuracoes\"\nwhere nome_mensuracao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:11.182196Z", "completed_at": "2025-07-01T18:33:11.220650Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:11.249330Z", "completed_at": "2025-07-01T18:33:11.249330Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12776708602905273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_mensuracoes_tipo_medicao.829bf184f9", "compiled": true, "compiled_code": "\n\n\n\nselect \n    tipo_medicao\nfrom \"delta\".\"gold\".\"mensuracoes\"\nwhere tipo_medicao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:11.367536Z", "completed_at": "2025-07-01T18:33:11.418554Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:11.452374Z", "completed_at": "2025-07-01T18:33:11.452374Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14539194107055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_mensuracoes_unidade_medicao.bc2da04238", "compiled": true, "compiled_code": "\n\n\n\nselect \n    unidade_medicao\nfrom \"delta\".\"gold\".\"mensuracoes\"\nwhere unidade_medicao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:11.582745Z", "completed_at": "2025-07-01T18:33:11.626922Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:11.656389Z", "completed_at": "2025-07-01T18:33:11.656389Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13776803016662598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_mensuracoes_cast_id_atendimento_as_varchar___id_atendimento__ref_atendimentos_.8ccc6fb259", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    id_atendimento as id\nfrom \"delta\".\"gold\".\"atendimentos\"\n),\nt2 as (\nselect\n    cast(id_atendimento as varchar) as id\nfrom (select * from \"delta\".\"gold\".\"mensuracoes\" where cast(id_atendimento as varchar) not in(select id_atendimento from gold.atendimentos where ano_atendimento >= 2019)) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:11.783201Z", "completed_at": "2025-07-01T18:33:11.825374Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:11.859430Z", "completed_at": "2025-07-01T18:33:11.860031Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13547492027282715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_mensuracoes_sk_paciente__sk_paciente__ref_pacientes_.ac0cdbf511", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"mensuracoes\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:11.989192Z", "completed_at": "2025-07-01T18:33:12.035729Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:12.073802Z", "completed_at": "2025-07-01T18:33:12.073802Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14993882179260254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_mensuracoes_sk_profissional__sk_profissional__ref_profissionais_.5799d37667", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_profissional as id\nfrom \"delta\".\"gold\".\"profissionais\"\n),\nt2 as (\nselect\n    sk_profissional as id\nfrom \"delta\".\"gold\".\"mensuracoes\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:12.211299Z", "completed_at": "2025-07-01T18:33:12.258115Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:12.292286Z", "completed_at": "2025-07-01T18:33:12.292286Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1445472240447998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_inter_registros_faturamento_1_x_1", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"delta\".\"bronze\".\"stg_pvv_faturamento_1_x_1_operadoras\"", "relation_name": "\"delta\".\"silver\".\"pvv_inter_registros_faturamento_1_x_1\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:12.429076Z", "completed_at": "2025-07-01T18:33:12.473423Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:12.506322Z", "completed_at": "2025-07-01T18:33:12.506322Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14809393882751465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.exames", "compiled": true, "compiled_code": "\n\nselect \n\tsk_exame,\n\tid_exame,\n\ttipo,\n\tsubtipo,\n\ttuss,\n\tnome_exame,\n\tdata_exame,\n\tdata_brt_exame,\n\tacao,\n\tanexo,\n\tid_paciente,\n\tsk_paciente,\n\tid_profissional,\n\tsk_profissional,\n\tnome_profissional,\n\tid_clinica_plano,\n\tsk_clinica_plano,\n\tnome_clinica_plano,\n\tid_empresa,\n\tsk_empresa,\n\tnome_empresa,\n\tid_atendimento,\n\tsk_atendimento,\n\tplataforma\nfrom \"delta\".\"gold\".\"stg_exames\"", "relation_name": "\"delta\".\"gold\".\"exames\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:12.686728Z", "completed_at": "2025-07-01T18:33:12.745155Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:12.785760Z", "completed_at": "2025-07-01T18:33:12.785760Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19526433944702148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_erros_faturamento_1_x_1_operadoras", "compiled": true, "compiled_code": "\n\nwith t1 as (\n     select id_solicitacao_tiss,\n\t\t\trow_number() OVER (partition by id_atendimento order by data_ultima_alteracao desc) as ranking\n\t from \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\"\n)\t \n\nselect \n\ts.id_solicitacao_tiss, \n\tcast(null as bigint) as id_pagamento_paciente,\n\ts.numero_guia_prestador, \n\ts.senha_autorizacao,  \n    s.nome_convenio, \n    s.registro_ans, \n\ts.numero_carteirinha,\n\ts.codigo_procedimento, \n\ts.descricao_procedimento,\n\ts.id_atendimento,\n    s.status,\n\ts.data_solicitacao,\n\ts.quantidade,\n\ts.quantidade_autorizada,\n    pag.id_convenio,\n\t'1_x_1' as tipo_faturamento,\n    concat_ws(' || ', case when s.status_atendimento <> 'Realizado' then 'Somente consultas realizadas' else null end,\n\t                  case when s.id_atendimento is null then 'A autoriza\u00e7\u00e3o tiss n\u00e3o tem v\u00ednculo com a consulta.' else null end,\n                      case when s.id_paciente is null then 'A autoriza\u00e7\u00e3o tiss n\u00e3o tem v\u00ednculo com o paciente.' else null end,\n                      case when s.id_profissional is null then 'A autoriza\u00e7\u00e3o tiss n\u00e3o tem v\u00ednculo com o profissional' else null end,\n                      case when s.numero_guia_prestador is null then 'A autoriza\u00e7\u00e3o tiss n\u00e3o possui o n\u00famero da guia do prestador.' else null end,\n                      if((s.senha_autorizacao is null or s.senha_autorizacao = 'null' or s.senha_autorizacao = ''),'A autoriza\u00e7\u00e3o tiss n\u00e3o possui senha de autoriza\u00e7\u00e3o.',null),\n                      if(((s.nome_convenio in('Amil','Amil One','Amil One Sa\u00fade Mental','Amil Sa\u00fade Mental') or s.nome_convenio = 'Bradesco' or s.nome_convenio = 'Unimed Rondon\u00f3polis' or s.nome_convenio = 'Unimed Rio') and \n                          (s.status is null or s.status != '1 - AUTORIZADO')),'A autoriza\u00e7\u00e3o tiss tem que ser autorizada.',null),\n                      if((s.nome_convenio in('Amil','Amil One','Amil One Sa\u00fade Mental','Amil Sa\u00fade Mental') and s.token_solicitacao is null),'Token Amil deve ser preenchido.',null),\n                      if((s.nome_convenio = 'Bradesco' and s.status_execucao is null or s.status_execucao != '1'),'A execu\u00e7\u00e3o de uma guia tem que ser autorizada.',null),\n                      if((s.nome_convenio = 'Bradesco' and (s.guia_executada != 'S' or s.guia_executada is null)),'A execu\u00e7\u00e3o de uma guia tem que ser autorizada.',null),\n                      if((s.nome_convenio in('Porto Seguro','Porto 2022') and (s.registro_ans not in('000582','00058-2','312126','31212-6'))),concat('registro_ans',' = ',s.registro_ans),null),\n                      case when s.nome_convenio in('Porto Seguro','Porto 2022') and pac.documento is null then 'Paciente n\u00e3o possui documento v\u00e1lido.' else null end,\n                      case when s.nome_convenio in('Porto Seguro','Porto 2022') and pac.carteirinha_convenio is null then 'Paciente n\u00e3o possui carteirinha no cadastro.'else null end,\n                      if((s.nome_convenio = 'Unimed Rondon\u00f3polis' and (s.quantidade_autorizada = 0 or s.quantidade_autorizada is null)),'A quantidade de consultas pela operadora tem que ser maior ou igual a 1.',null),\n                      if((s.nome_convenio = 'Unimed Rondon\u00f3polis' and s.id_solicitacao_pai is null),'Toda autoriza\u00e7\u00e3o tiss tem que ter um v\u00ednculo com uma autoriza\u00e7\u00e3o pai.',null)) as pr_fat,\n\ts.id_paciente,\n\ts.id_profissional, \n\tpag.data_atendimento,\n\tpag.data_brt_atendimento,\n    s.codigo_glosa_execucao,\n    s.mensagem_glosa_execucao,\n\ts.motivo_pendencia,\n\tpag.cpf_paciente,\n\tpag.email_paciente,\n\tpag.nome_paciente,\n\tpag.status_atendimento\nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\" as s \ninner join t1 on t1.id_solicitacao_tiss = s.id_solicitacao_tiss and t1.ranking = 1\ninner join \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as pag on s.id_atendimento = pag.id_atendimento\ninner join \"delta\".\"silver\".\"pvv_dim_paciente\" as pac on s.id_paciente = pac.id_paciente\nwhere s.nome_convenio in('Abertta Sa\u00fade','Porto Seguro','Porto 2022','Unimed Rio','Prevent Senior','Amil','Amil One','Amil One Sa\u00fade Mental','Amil Sa\u00fade Mental','Unimed Rondon\u00f3polis','Unimed VTRP','Bradesco')\nand (s.id_solicitacao_tiss not in(select id_solicitacao_tiss from \"delta\".\"silver\".\"pvv_inter_registros_faturamento_1_x_1\")\nand s.id_atendimento not in(select id_atendimento from \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\"))", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_erros_faturamento_1_x_1_operadoras\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:12.943130Z", "completed_at": "2025-07-01T18:33:13.025280Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:13.062372Z", "completed_at": "2025-07-01T18:33:13.062372Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19662189483642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_resultados", "compiled": true, "compiled_code": "\nwith t1 as(\nselect \n    id_dass21 as id_t1,\n    id_paciente, \n    t2.*,\n    'dass' as validacao,\n    source\nfrom \"delta\".\"gold\".\"dass21\"\ncross join unnest (\n\tarray['nivel_ansiedade', 'nivel_depressao', 'nivel_estresse'],\n\tarray[valor_ansiedade, valor_depressao, valor_estresse],\n\tarray[nivel_ansiedade, nivel_depressao, nivel_estresse]\n) t2(tipo, valor, resultado)\nunion all\nselect \n    cast(id_tabela_classificacao_paciente as varchar) as id_t1,\n    id_paciente,\n\t'avaliacao_clinica_psicologica' as tipo,\n    classificacao as valor,\n\tnivel_tmc as resultado,\n    'dsm' as validacao,\n    'Psicologia Viva' as source\nfrom \"delta\".\"silver\".\"pvv_dim_tabela_classificacao_paciente\" \n),\ncomor as (\nselect \n\tid_atendimento,\n\tid_atendimento_comorbidade,\n\tid_paciente,\n\tdata_atendimento,\n\tdata_brt_atendimento,\n\tteste.*\nfrom \"delta\".\"silver\".\"cnx_fact_atendimento_comorbidade\"\ncross join unnest (\n\tarray[sv_hemoglobina_glicada,hdlc,ldlc,triglicerideo,colesterol_total],\n\tarray[sv_hemoglobina_glicada_und,hdlc_und,ldlc_und,triglicerideo_und,colesterol_total_und],\n\tarray[data_sv_hemoglobina_glicada,data_hdlc,data_ldlc,data_triglicerideo,data_colesterol_total],\n\tarray['nivel_glicada','nivel_hdl','nivel_ldl','nivel_triglicerideo','nivel_colesterol_total'],\n\tarray['Hemoglobina Glicada','Lipidograma','Lipidograma','Lipidograma','Lipidograma']\n) teste(medicao_resultado, unidade_medicao, data_medicao, nome_medicao, nome_exame)\nwhere teste.medicao_resultado is not null \nand teste.medicao_resultado != 0\n),\nt2 as(\nselect \n\tresponse_id,\n\tdim_calendar_sk, \n\tdim_customer_sk,\n\tform_title,\n\tscore,\n\tresult,\n\trow_number() OVER (partition by response_id) as ranking\nfrom zenklub.modelo_2023.fact_typeform\t\n),\nt3 as (\nselect \n    case\n        when exm.plataforma = 'Conexa'\n            then to_hex(md5(to_utf8(cast(exm.id_exame as varchar) || to_hex(md5(to_utf8('result'))) || 'cnx' ))) \n        else to_hex(md5(to_utf8(cast(exm.id_exame as varchar) || to_hex(md5(to_utf8('result'))) || 'pvv' )))\n    end as id_resultado,\n    exm.id_exame,\n    exm.sk_exame,\n    exm.id_paciente,\n    exm.sk_paciente,\n    exm.subtipo as tipo_resultado,\n    cast(null as varchar) as tuss,\n    exm.data_exame as data_coleta,\n    exm.data_brt_exame as data_brt_coleta,\n    exm.data_exame as data_resultado,\n    exm.data_brt_exame as data_brt_resultado,\n    exm.nome_exame,\n    t1.tipo as nome_medicao,\n    t1.valor as medicao_resultado,\n    'Escala' as unidade_medicao,\n    t1.resultado as resultado_final,\n    'Leve' as resultado_referencia_inferior,\n    case\n        when validacao = 'dsm'\n            then 'Graviss\u00edma'\n        when validacao = 'dass'\n            then 'Extremamente severo'\n    end as resultado_referencia_superior,\n    exm.plataforma\nfrom \"delta\".\"gold\".\"exames\" as exm\ninner join t1 on t1.id_t1 = exm.id_exame and t1.source = exm.plataforma\nwhere exm.nome_exame in ('DASS-21', 'Avalia\u00e7\u00e3o Cl\u00ednica Psicol\u00f3gica')\n\nunion all\n\nselect \n\tto_hex(md5(to_utf8(cast(id_dsm as varchar) || to_hex(md5(to_utf8('result'))) || 'pvv' ))) as id_resultado,\n\tid_dsm as id_exame,\n\tto_hex(md5(to_utf8(id_dsm || 'pvv'))) as sk_exame,\n\tcast(id_paciente as varchar) as id_paciente,\n\tto_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    cast('Question\u00e1rio' as varchar) as tipo_resultado,\n    cast(null as varchar) as tuss,\n    data_inclusao as data_exame,\n    data_brt_inclusao as data_brt_exame,\n    data_inclusao as data_resultado,\n    data_brt_inclusao as data_brt_resultado,\n    nome_questionario as nome_exame,\n    'transtornos_mentais' as nome_medicao,\n    pontuacao as medicao_resultado,\n    'Escala' as unidade_medicao,\n    resultado as resultado_final,\n    'Nada, de modo algum' as resultado_referencia_inferior,\n    'Grave, quase todos os dias' as resultado_referencia_superior,\n    'Psicologia Viva' as plataforma\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_dsm5_n1\"\n\nunion all\n\nselect \n\tto_hex(md5(to_utf8(cast(id_dsm as varchar) || to_hex(md5(to_utf8('result'))) || 'pvv' ))) as id_resultado,\n\tid_dsm as id_exame,\n\tto_hex(md5(to_utf8(id_dsm || 'pvv'))) as sk_exame,\n\tcast(id_paciente as varchar) as id_paciente,\n\tto_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    cast('Question\u00e1rio' as varchar) as tipo_resultado,\n    cast(null as varchar) as tuss,\n    data_inclusao as data_exame,\n    data_brt_inclusao as data_brt_exame,\n    data_inclusao as data_resultado,\n    data_brt_inclusao as data_brt_resultado,\n    nome_questionario as nome_exame,\n    case\n        when form_id = 'R0Yp18Ye' then 'transtorno_mental_ansiedade'\n        when form_id = 'JlgFZFmr' then 'transtorno_mental_depressao'\n        when form_id = 'skh0DbTN' then 'transtorno_mental_disturbio_sono'\n        when form_id = 'wlGOlDsw' then 'transtorno_mental_mania'\n        when form_id = 'ZFwthkVw' then 'transtorno_mental_pensamento_comportamento_repetitivo'\n        when form_id = 'CfPRUOoz' then 'transtorno_mental_sintoma_somatico'\n        when form_id = 'XR9HMjWT' then 'transtorno_mental_uso_substancia' \n        when form_id = 'SRNG4LLe' then 'transtorno_mental_raiva'\n        else null\n    end as nome_medicao,\n    pontuacao as medicao_resultado,\n    'Escala' as unidade_medicao,\n    resultado as resultado_final,\n    case\n    \twhen form_id in('SRNG4LLe','R0Yp18Ye','JlgFZFmr','skh0DbTN') then 'Nenhum a leve'\n    \twhen form_id = 'wlGOlDsw' then 'Indica menos probabilidade de estar associada a sintomas significativos de mania'\n    \twhen form_id in('CfPRUOoz','ZFwthkVw') then 'Leve'\n    \twhen form_id = 'XR9HMjWT' then 'N\u00e3o h\u00e1 ind\u00edcios de risco de uso'\n    \telse null\n    end as resultado_referencia_inferior,\n    case\n    \twhen form_id in('SRNG4LLe','R0Yp18Ye','JlgFZFmr','skh0DbTN','CfPRUOoz','ZFwthkVw') then 'Grave'\n    \twhen form_id = 'wlGOlDsw' then 'Indica probabilidade de uma condi\u00e7\u00e3o man\u00edaca ou hipoman\u00edaca' \n    \twhen form_id = 'XR9HMjWT' then 'H\u00e1 ind\u00edcios de risco de uso'\n    \telse null\n    end  as resultado_referencia_superior,\n    plataforma\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_dsm5_n2\"\n\nunion all\n\nselect \n\tto_hex(md5(to_utf8(cast(id_srq as varchar) || to_hex(md5(to_utf8('result'))) || 'pvv' ))) as id_resultado,\n\tid_srq as id_exame,\n\tto_hex(md5(to_utf8(id_srq || 'pvv'))) as sk_exame,\n\tcast(id_paciente as varchar) as id_paciente,\n\tto_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n    cast('Question\u00e1rio' as varchar) as tipo_resultado,\n    cast(null as varchar) as tuss,\n    data_inclusao as data_exame,\n    data_brt_inclusao as data_brt_exame,\n    data_inclusao as data_resultado,\n    data_brt_inclusao as data_brt_resultado,\n    'SRQ-20: RASTREAMENTO DE SINTOMAS DE TRANSTORNOS MENTAIS E COMPORTAMENTAIS (copy) (copy) (copy)' as nome_exame,\n    'sofrimento_mental' as nome_medicao,\n    pontuacao as medicao_resultado,\n    'Escala' as unidade_medicao,\n    resultado as resultado_final,\n    'N\u00e3o foi identificado sofrimento mental de acordo com os par\u00e2mentros do SRQ-20.' as resultado_referencia_inferior,\n    'Sofrimento mental grave.' as resultado_referencia_superior,\n    'Psicologia Viva' as plataforma\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_srq20\"\n\nunion all\n\nselect\n    to_hex(md5(to_utf8(response_id || to_hex(md5(to_utf8('result'))) || 'zk' ))) as id_resultado,\n    response_id as id_exame,\n    to_hex(md5(to_utf8(response_id || 'zk'))) as sk_exame,\n    c.id as id_paciente,\n    to_hex(md5(to_utf8(c.id || 'zk'))) as sk_paciente,\n    cast('Question\u00e1rio' as varchar) as tipo_resultado,\n    cast(null as varchar) as tuss,\n    dim_calendar_sk as data_coleta,\n    dim_calendar_sk as data_brt_coleta,\n    dim_calendar_sk as data_resultado,\n    dim_calendar_sk as data_brt_resultado,\n    case \n\t    when lower(form_title) like '%ans%' then 'GAD-7'\n        when lower(form_title) like '%dep%' then 'PHQ-9'\n        when lower(form_title) like '%ibc%' then 'IBC'\n        else form_title\n    end as nome_exame,\n    case \n        when lower(form_title) like '%ans%' then 'nivel_ansiedade'\n        when lower(form_title) like '%dep%' then 'nivel_depressao'\n        when lower(form_title) like '%ibc%' then 'nivel_exaustao'\n        else form_title\n    end as nome_medicao,\n    cast(score as bigint) as medicao_resultado,\n    'Escala' as unidade_medicao,\n    case \n\t    when result = 'minimal' then 'Normal'\n        when result = 'mild' then 'Leve'\n        when result = 'moderate' then 'Moderado'\n        when result = 'severe mild' then 'Levemente severo'\n        when result = 'moderately severe' then 'Moderadamente severo'\n        when result = 'severe' then 'Severo'\n        else null \n    end as resultado_final,\n    'Normal' as resultado_referencia_inferior,\n    'Severo' as resultado_referencia_superior,\n    'Zenklub' as plataforma\nfrom t2 as t\nleft join zenklub.modelo_2023.dim_customer as c on c.sk = t.dim_customer_sk\nwhere t.ranking = 1\nand c.id is not null\n\nunion all\n\nselect\n\tto_hex(md5(to_utf8(cast(com.id_atendimento_comorbidade as varchar) || to_hex(md5(to_utf8('result'))) || 'cnx' ))) as id_resultado,\n\tcast(null as varchar) as id_exame,\n\tcast(null as varchar) as sk_exame,\n\tcast(com.id_paciente as varchar) as id_paciente,\n\tto_hex(md5(to_utf8(cast(com.id_paciente as varchar) || 'cnx'))) as sk_paciente,\n\t'Laboratorial' as tipo_resultado,\n\tcase \n\t\twhen com.nome_exame = 'Hemoglobina Glicada'\n\t\t\tthen '40302733'\n\t\twhen com.nome_exame = 'Lipidograma'\n\t\t\tthen '40302750'\n\tend as tuss,\n\tcase\n\t\twhen com.data_medicao is null\n\t\t\tthen com.data_atendimento\n\t\telse cast(com.data_medicao as timestamp)\n\tend as data_coleta,\n\tcase\n\t\twhen com.data_medicao is null\n\t\t\tthen com.data_brt_atendimento\n\t\telse com.data_medicao\n\tend as data_brt_coleta,\n\tcase\n\t\twhen com.data_medicao is null\n\t\t\tthen com.data_atendimento\n\t\telse cast(com.data_medicao as timestamp)\n\tend as data_resultado,\n\tcase\n\t\twhen com.data_medicao is null\n\t\t\tthen com.data_brt_atendimento\n\t\telse com.data_medicao\n\tend as data_brt_resultado,\n\tcom.nome_exame,\n\tcom.nome_medicao,\n\tcom.medicao_resultado,\n\tcom.unidade_medicao,\n\tcase \n\t\t-- analise de glicadada\n\t\twhen com.nome_medicao = 'nivel_glicada' and com.medicao_resultado < 5.7\n\t\t\tthen 'Normal'\n\t\twhen com.nome_medicao = 'nivel_glicada' and com.medicao_resultado between 5.7 and 6.4\n\t\t\tthen 'Anormal'\n\t\twhen com.nome_medicao = 'nivel_glicada' and com.medicao_resultado between 6.5 and 7\n\t\t\tthen 'Alterado'\n\t\twhen com.nome_medicao = 'nivel_glicada' and com.medicao_resultado > 7\n\t\t\tthen 'Extremamente alterado'\n\t\t-- analise de hdl\n\t\twhen com.nome_medicao = 'nivel_hdl' and com.medicao_resultado < 40\n\t\t\tthen 'Alterado'\n\t\twhen com.nome_medicao = 'nivel_hdl' and com.medicao_resultado between 40 and 59\n\t\t\tthen 'Normal'\n\t\twhen com.nome_medicao = 'nivel_hdl' and com.medicao_resultado > 59\n\t\t\tthen 'Bom'\n\t\t-- analise ldl\n\t\twhen com.nome_medicao = 'nivel_ldl' and com.medicao_resultado < 100\n\t\t\tthen '\u00d3timo'\n\t\twhen com.nome_medicao = 'nivel_ldl' and com.medicao_resultado between 100 and 129\n\t\t\tthen 'Bom'\n\t\twhen com.nome_medicao = 'nivel_ldl' and com.medicao_resultado between 130 and 159\n\t\t\tthen 'Lim\u00edtrofe'\n\t\twhen com.nome_medicao = 'nivel_ldl' and com.medicao_resultado between 160 and 189\n\t\t\tthen 'Alterado'\n\t\twhen com.nome_medicao = 'nivel_ldl' and com.medicao_resultado > 189\n\t\t\tthen 'Extremamente alterado'\n\t\t-- analise triglicerideo \n\t\twhen com.nome_medicao = 'nivel_triglicerideo' and com.medicao_resultado < 150\n\t\t\tthen 'Normal'\n\t\twhen com.nome_medicao = 'nivel_triglicerideo' and com.medicao_resultado between 150 and 199\n\t\t\tthen 'Lim\u00edtrofe'\n\t\twhen com.nome_medicao = 'nivel_triglicerideo' and com.medicao_resultado between 200 and 499\n\t\t\tthen 'Alterado'\n\t\twhen com.nome_medicao = 'nivel_triglicerideo' and com.medicao_resultado > 499\n\t\t\tthen 'Extremamente alterado'\n\t\t-- analise colesterol total\n\t\twhen com.nome_medicao = 'nivel_colesterol_total' and com.medicao_resultado < 170\n\t\t\tthen '\u00d3timo'\n\t\twhen com.nome_medicao = 'nivel_colesterol_total' and com.medicao_resultado between 170 and 189\n\t\t\tthen 'Bom'\n\t\twhen com.nome_medicao = 'nivel_colesterol_total' and com.medicao_resultado between 190 and 200\n\t\t\tthen 'Normal'\n\t\twhen com.nome_medicao = 'nivel_colesterol_total' and com.medicao_resultado > 200\n\t\t\tthen 'Alterado'\n\tend as resultado_final,\n\tcase\n\t\twhen com.nome_medicao = 'nivel_glicada'\n\t\t\tthen 'Normal'\n\t\twhen com.nome_medicao = 'nivel_hdl'\n\t\t\tthen 'Bom'\n\t\twhen com.nome_medicao = 'nivel_ldl'\n\t\t\tthen '\u00d3timo'\n\t\twhen com.nome_medicao = 'nivel_triglicerideo'\n\t\t\tthen 'Normal'\n\t\twhen com.nome_medicao = 'nivel_colesterol_total'\n\t\t\tthen '\u00d3timo'\n\tend as resultado_referencia_inferior,\n\tcase\n\t\twhen com.nome_medicao = 'nivel_glicada'\n\t\t\tthen 'Extremamente alterado'\n\t\twhen com.nome_medicao = 'nivel_hdl'\n\t\t\tthen 'Alterado'\n\t\twhen com.nome_medicao = 'nivel_ldl'\n\t\t\tthen 'Extremamente alterado'\n\t\twhen com.nome_medicao = 'nivel_triglicerideo'\n\t\t\tthen 'Extremamente alterado'\n\t\twhen com.nome_medicao = 'nivel_colesterol_total'\n\t\t\tthen 'Alterado'\n\tend as resultado_referencia_superior,\n\t'Conexa' as plataforma\nfrom comor as com\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" as ate on com.id_atendimento = ate.id_atendimento\n)\nselect \n\tid_resultado, \n\tid_exame, \n\tsk_exame, \n\tid_paciente,\n\tsk_paciente, \n\ttipo_resultado, \n\ttuss, \n\tdata_coleta, \n\tdata_brt_coleta, \n\tdata_resultado, \n\tdata_brt_resultado, \n\tnome_exame, \n\tnome_medicao, \n\tmedicao_resultado, \n\tunidade_medicao, \n\tresultado_final, \n\tresultado_referencia_inferior, \n\tresultado_referencia_superior, \n\tplataforma,\n\tlower(to_hex(md5(to_utf8(cast(coalesce(cast(id_resultado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_exame as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_exame as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo_resultado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tuss as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_coleta as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_coleta as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_resultado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_resultado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_exame as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_medicao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(medicao_resultado as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(unidade_medicao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(resultado_final as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(resultado_referencia_inferior as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(resultado_referencia_superior as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t3", "relation_name": "\"delta\".\"gold\".\"stg_resultados\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:13.211536Z", "completed_at": "2025-07-01T18:33:13.259554Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:13.293383Z", "completed_at": "2025-07-01T18:33:13.293383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15309762954711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_exames_acao__Realiza_o__Prescri_o.fb16ca7d1a", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        acao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"exames\"\n    group by acao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Realiza\u00e7\u00e3o','Prescri\u00e7\u00e3o'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:13.604299Z", "completed_at": "2025-07-01T18:33:13.947464Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:14.051355Z", "completed_at": "2025-07-01T18:33:14.052386Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6280364990234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_exames_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.e78bc1236c", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"exames\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:14.223762Z", "completed_at": "2025-07-01T18:33:14.283705Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:14.319784Z", "completed_at": "2025-07-01T18:33:14.319784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17621994018554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_exames_subtipo__An_lise_Cl_nica__Imagem_Coleta_ou_Outros_Suplementares__Question_rio.4735061357", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        subtipo as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"exames\"\n    group by subtipo\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'An\u00e1lise Cl\u00ednica','Imagem, Coleta ou Outros Suplementares','Question\u00e1rio'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:14.496619Z", "completed_at": "2025-07-01T18:33:14.553022Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:14.599515Z", "completed_at": "2025-07-01T18:33:14.599515Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1840064525604248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_exames_tipo__F_sico__Mental.1f76d0fc78", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"exames\"\n    group by tipo\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'F\u00edsico','Mental'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:14.797627Z", "completed_at": "2025-07-01T18:33:14.890250Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:14.940599Z", "completed_at": "2025-07-01T18:33:14.941579Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.25001001358032227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_relationships_where_exames_sk_atendimento__sk_atendimento__plataforma_Conexa___ref_atendimentos_.f2f98c99cb", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    sk_atendimento as id\n\n  from \"delta\".\"gold\".\"exames\"\n\n  where sk_atendimento is not null\n    and plataforma = 'Conexa'\n\n),\n\nright_table as (\n\n  select\n    sk_atendimento as id\n\n  from \"delta\".\"gold\".\"atendimentos\"\n\n  where sk_atendimento is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:15.105120Z", "completed_at": "2025-07-01T18:33:15.178581Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:15.219404Z", "completed_at": "2025-07-01T18:33:15.219404Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19428253173828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_exames_sk_exame__nome_exame__sk_clinica_plano__sk_empresa.ad0fe794ad", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sk_exame, nome_exame, sk_clinica_plano, sk_empresa\n    from (select * from \"delta\".\"gold\".\"exames\" where id_paciente not in(select id_paciente from gold.pacientes where email_paciente not like '%inactive%')) dbt_subquery\n    group by sk_exame, nome_exame, sk_clinica_plano, sk_empresa\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:15.379086Z", "completed_at": "2025-07-01T18:33:15.452865Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:15.502826Z", "completed_at": "2025-07-01T18:33:15.502826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20525503158569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_exames_id_paciente.fb6f7893d8", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_paciente\nfrom \"delta\".\"gold\".\"exames\"\nwhere id_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:15.664470Z", "completed_at": "2025-07-01T18:33:15.715969Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:15.765073Z", "completed_at": "2025-07-01T18:33:15.766087Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17674732208251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_exames_nome_exame.e838d39aca", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_exame\nfrom \"delta\".\"gold\".\"exames\"\nwhere nome_exame is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:15.913432Z", "completed_at": "2025-07-01T18:33:15.960386Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:15.990589Z", "completed_at": "2025-07-01T18:33:15.990589Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1479487419128418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_exames_sk_exame.ce0a44af2e", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_exame\nfrom \"delta\".\"gold\".\"exames\"\nwhere sk_exame is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:16.116401Z", "completed_at": "2025-07-01T18:33:16.164213Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:16.194638Z", "completed_at": "2025-07-01T18:33:16.194638Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14110136032104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_exames_sk_paciente.39d6bbf6df", "compiled": true, "compiled_code": "\n\n\n\nselect \n    sk_paciente\nfrom \"delta\".\"gold\".\"exames\"\nwhere sk_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:16.323622Z", "completed_at": "2025-07-01T18:33:16.370513Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:16.403406Z", "completed_at": "2025-07-01T18:33:16.403406Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13875937461853027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_exames_cast_id_profissional_as_varchar___id_profissional__ref_profissionais_.974eb4dae2", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    id_profissional as id\nfrom \"delta\".\"gold\".\"profissionais\"\n),\nt2 as (\nselect\n    cast(id_profissional as varchar) as id\nfrom \"delta\".\"gold\".\"exames\"\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:16.517890Z", "completed_at": "2025-07-01T18:33:16.558138Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:16.605796Z", "completed_at": "2025-07-01T18:33:16.605796Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14478373527526855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_exames_sk_clinica_plano__sk_clinica__ref_clinicas_.2a865afc5a", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_clinica as id\nfrom \"delta\".\"gold\".\"clinicas\"\n),\nt2 as (\nselect\n    sk_clinica_plano as id\nfrom (select * from \"delta\".\"gold\".\"exames\" where plataforma not in('Amil','Zenklub')) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:16.767588Z", "completed_at": "2025-07-01T18:33:16.821654Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:16.853048Z", "completed_at": "2025-07-01T18:33:16.853048Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1535029411315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_exames_sk_paciente__sk_paciente__ref_pacientes_.b0aa8dff37", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom (select * from \"delta\".\"gold\".\"exames\" where plataforma <> 'Amil' and id_paciente not in(select cast(pac.id as varchar) from bronze.raw_pvv_seg_user as sg inner join bronze.raw_pvv_pacientes as pac on pac.id_seg_user = sg.id  where sg.teste = 1)) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:16.981694Z", "completed_at": "2025-07-01T18:33:17.029534Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:17.060615Z", "completed_at": "2025-07-01T18:33:17.060615Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14494037628173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_exames_sk_profissional__sk_profissional__ref_profissionais_.63d506ecc3", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_profissional as id\nfrom \"delta\".\"gold\".\"profissionais\"\n),\nt2 as (\nselect\n    sk_profissional as id\nfrom (select * from \"delta\".\"gold\".\"exames\" where id_profissional not in(select pro.id as varchar from bronze.raw_pvv_seg_user as sg inner join bronze.raw_pvv_profissionais as pro on pro.id_seg_user = sg.id  where sg.teste = 1)) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:17.186736Z", "completed_at": "2025-07-01T18:33:17.227803Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:17.263380Z", "completed_at": "2025-07-01T18:33:17.263380Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1383357048034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_pvv_faturamento_geral_operadoras", "compiled": true, "compiled_code": "\nselect \n\tfat.id_solicitacao_tiss,\n\tcast(null as bigint) as id_pagamento_paciente,\n\tfat.numero_guia_prestador, \n\tfat.senha_autorizacao,  \n    fat.nome_convenio, \n    fat.registro_ans, \n\tfat.numero_carteirinha,\n\tfat.codigo_procedimento, \n\tfat.descricao_procedimento,\n\tfat.id_atendimento,\n    fat.status,\n\tfat.data_solicitacao,\n\tfat.quantidade,\n\tfat.quantidade_autorizada,\n    pag.id_convenio,\n\t'1_x_1' as tipo_faturamento,\n\tcast(null as varchar) as pr_fat,\n\tfat.id_paciente,\n\tfat.id_profissional, \n\tpag.data_atendimento,\n\tpag.data_brt_atendimento,\n    fat.codigo_glosa_execucao,\n    fat.mensagem_glosa_execucao,\n\tfat.motivo_pendencia,\n\tpag.cpf_paciente,\n\tpag.email_paciente,\n\tpag.nome_paciente,\n\tpag.status_atendimento  \nfrom \"delta\".\"silver\".\"pvv_inter_registros_faturamento_1_x_1\" as fat\ninner join \"delta\".\"silver\".\"pvv_fact_atendimento_financeiro\" as pag on pag.id_atendimento = fat.id_atendimento\nwhere fat.id_atendimento  is not null\nand fat.id_paciente is not null\nand fat.id_profissional is not null \n                      union all \nselect \n\ter_fat.*\t\t\nfrom \"delta\".\"bronze\".\"stg_pvv_erros_faturamento_1_x_1_operadoras\" as er_fat\n\t\t              union all\nselect \n\tpag.*\nfrom \"delta\".\"silver\".\"pvv_inter_consultas_realizadas_faturamento_1_x_1\" as pag", "relation_name": "\"delta\".\"bronze\".\"stg_pvv_faturamento_geral_operadoras\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:17.405720Z", "completed_at": "2025-07-01T18:33:17.445582Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:17.477286Z", "completed_at": "2025-07-01T18:33:17.478303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13998126983642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.resultados", "compiled": true, "compiled_code": "\n\nselect \n\tid_resultado,\n\tid_exame,\n\tsk_exame,\n\tid_paciente,\n\tsk_paciente,\n\ttipo_resultado,\n\ttuss,\n\tdata_coleta,\n\tdata_brt_coleta,\n\tdata_resultado,\n\tdata_brt_resultado,\n\tnome_exame,\n\tnome_medicao,\n\tmedicao_resultado,\n\tunidade_medicao,\n\tresultado_final,\n\tresultado_referencia_inferior,\n\tresultado_referencia_superior,\n\tplataforma\nfrom \"delta\".\"gold\".\"stg_resultados\"", "relation_name": "\"delta\".\"gold\".\"resultados\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:17.616767Z", "completed_at": "2025-07-01T18:33:17.656440Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:17.686383Z", "completed_at": "2025-07-01T18:33:17.686383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13955998420715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_inter_faturamento_operadoras_1_x_1", "compiled": true, "compiled_code": "\n\nwith t1 as (\nselect \n\tid_solicitacao_tiss,\n\tid_atendimento,\n\tnumero_guia_prestador,\n\tsenha_autorizacao,\n\tnumero_carteirinha, \n\tcodigo_procedimento,\n\tdescricao_procedimento,\n\tstatus,\n\tdata_solicitacao,\n\tquantidade,\n\tquantidade_autorizada,\n\tcodigo_glosa_execucao,\n\tregistro_ans,\n\tmensagem_glosa_execucao,\n\tmotivo_pendencia,\n\trow_number() OVER (partition by id_atendimento order by data_ultima_alteracao desc) as ranking\nfrom \"delta\".\"silver\".\"pvv_fact_solicitacao_tiss\"\nwhere id_atendimento is not null\n),\nt2 as (\nselect\n\tid_lote_guia_tiss,\n\tid_atendimento, \n\tdata_envio_lote,\n\tstatus_lote,\n\tvalor_guia,\n\tenviado_anexo,\n\tnumero_protocolo,\n\trow_number() OVER (partition by id_atendimento order by data_ultima_alteracao desc) as ranking\nfrom \"delta\".\"silver\".\"pvv_fact_lote_guia_tiss\"\nwhere id_atendimento is not null\n)\t \nselect \n\ttiss.id_solicitacao_tiss,\n\tfat.id_atendimento,\n\tlote.id_lote_guia_tiss,\n\tcast(null as bigint) as id_pagamento_paciente,\n\tif((tiss.id_solicitacao_tiss is not null),true,false) as flag_existe_tiss,\n\tif((lote.id_atendimento is not null),true,false) as flag_existe_lote_guia_tiss,\n\tif((fat.pr_fat is not null),true,false) as flag_autorizacao_com_problemas,\n\ttiss.numero_guia_prestador,\n\ttiss.senha_autorizacao,\n\tfat.nome_convenio,\n\ttiss.registro_ans,\n\ttiss.numero_carteirinha,\n\ttiss.codigo_procedimento,\n\ttiss.descricao_procedimento,\n\ttiss.status,\n\ttiss.data_solicitacao,\n\ttiss.quantidade,\n\ttiss.quantidade_autorizada,\n\tfat.id_convenio,\n\tfat.tipo_faturamento,\n\tfat.pr_fat,\n\tfat.id_paciente,\n\tfat.id_profissional,\n\tfat.data_atendimento,\n\tfat.data_brt_atendimento,\n\ttiss.codigo_glosa_execucao,\n\ttiss.mensagem_glosa_execucao,\n\ttiss.motivo_pendencia,\n\tlote.enviado_anexo,\n\tlote.numero_protocolo, \n\tlote.data_envio_lote,\n\tlote.status_lote,\n\tlote.valor_guia,\n\tfat.cpf_paciente,\n\tfat.email_paciente,\n\tfat.nome_paciente,\n\tfat.status_atendimento\nfrom \"delta\".\"bronze\".\"stg_pvv_faturamento_geral_operadoras\" as fat \nleft join t1 as tiss on tiss.id_atendimento = fat.id_atendimento and tiss.ranking = 1\nleft join t2 as lote on lote.id_atendimento = fat.id_atendimento and lote.ranking = 1", "relation_name": "\"delta\".\"silver\".\"pvv_inter_faturamento_operadoras_1_x_1\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:17.826127Z", "completed_at": "2025-07-01T18:33:17.882489Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:17.913011Z", "completed_at": "2025-07-01T18:33:17.913011Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15679073333740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.stg_diagnosticos", "compiled": true, "compiled_code": "\n\n-- dados retirados da atendimento comorbidade cnx\nwith comorbidade as (\nselect\n\tid_atendimento, \n\tid_atendimento_comorbidade,\n\tid_paciente,\n\tdata_atendimento, \n\tdata_brt_atendimento,\n\tcomor.*\nfrom \"delta\".\"silver\".\"cnx_fact_atendimento_comorbidade\"\ncross join unnest (\n\tarray[flag_uso_drogas,flag_dislipidemia,flag_doenca_pulmonar,flag_doenca_coronariana,flag_doenca_arterial_periferica,\n\tflag_doenca_cerebrovascular,flag_hipertensao_arterial_sistemica,flag_insuficiencia_cardiaca_congestiva,flag_diabete_melitus,flag_doenca_psiquiatrica,\n\tflag_tabagismo,flag_sobrepeso,flag_anemico,flag_hiperuricemicos,flag_hipercolesterolemia,flag_transtornos_alimentares,flag_desordem_digestiva,flag_insuficiencia_cardiaca,flag_dpoc,flag_neoplasias],\n\tarray['Uso de Subst\u00e2ncias','Dislipidemia','Doen\u00e7a Pulmonar','Doen\u00e7a Arterial Coranariana','Doen\u00e7a Arterial Perif\u00e9rica',\n\t'Doen\u00e7a Cerebrovascular','Hipertens\u00e3o Arterial Sist\u00eamica','Insufici\u00eancia Card\u00edaca Congestiva','Diabetes','Doen\u00e7a Psiqui\u00e1trica',\n\t'Uso de Tabaco','Obesidade','Anemia','Hiperucemia','Hipercolesterolemia','Transtorno Alimentar','Desordem Digestiva','Insufici\u00eancia Card\u00edaca','Doen\u00e7a de Obstru\u00e7\u00e3o Pulmonar Cr\u00f4nica','Neoplasia'],\n    array['Z864','E78','J984','I25','I73','I679','I10','I500','E14','F99','Z720','E66','D649','E79','E78','F50','K929','I50','J449','C80']\n)comor(flag_doenca,nome_diagnostico,codigo_cid)\nwhere comor.flag_doenca = true\n),\nt1 as (\nselect\n    cast(id_paciente as varchar) as id_paciente,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,\n    nome_diagnostico,\n    'N\u00e3o informado' as grau_diagnostico,\n    data_atendimento as data_diagnostico,\n    data_brt_atendimento as data_brt_diagnostico,\n    'atendimento comorbidade cnx' as origem_diagnostico,\n    cast(id_atendimento as varchar) as id_origem,\n    cast(null as date) as validade_diagnostico,\n    codigo_cid as codigo_cid_ciap,\n    'CID' as origem_codigo,\n    'Diagn\u00f3stico retirado a partir da Comorbidade preenchida durante o atendimento na plataforma da Conexa.' as descritivo_diagnostico,\n    'Classificado por Profissional' as tipo_classificacao,\n    'Prim\u00e1rio' as tipo_diagnostico_1,\n    'Definitivo' as tipo_diagnostico_2,\n    'Conexa' as plataforma\nfrom comorbidade\n\nunion all\n\n-- dados vindos de resultados, tirando 'avaliacao_clinica_psicologica'\nselect\n    id_paciente,\n    sk_paciente,\n    case \n        when nome_medicao = 'nivel_ansiedade' then 'Ansiedade'\n        when nome_medicao = 'nivel_depressao' then 'Depress\u00e3o'\n        when nome_medicao = 'nivel_estresse' then 'Estresse'\n        when nome_medicao = 'nivel_exaustao' then 'Exaust\u00e3o'\n        when nome_medicao = 'transtornos_mentais' then 'Transtorno Mental'\n        when nome_medicao = 'sofrimento_mental' then 'Sofrimento Mental'\n        when nome_medicao = 'transtorno_mental_ansiedade' then 'Ansiedade'\n        when nome_medicao = 'transtorno_mental_depressao' then 'Depress\u00e3o'\n        when nome_medicao = 'transtorno_mental_disturbio_sono' then 'Disturbio do Sono'\n        when nome_medicao = 'transtorno_mental_mania' then 'Mania'\n        when nome_medicao = 'transtorno_mental_pensamento_comportamento_repetitivo' then 'Pensamento Comportamento Repetitivo'\n        when nome_medicao = 'transtorno_mental_sintoma_somatico' then 'Sintoma Som\u00e1tico'\n        when nome_medicao = 'transtorno_mental_uso_substancia' then 'Ind\u00edcio de Uso de Subst\u00e2ncias'\n        when nome_medicao = 'transtorno_mental_raiva' then 'Raiva'\n    end as nome_diagnostico,\n    case\n        -- tratamento de casos de ansiedade, depressao, estresse, exaustao e transtorno mental CNX/PV e ZK\n        when resultado_final in ('Extremamente severo','Severo','Levemente severo','Moderadamente severo','Grave','Sofrimento mental grave.','H\u00e1 ind\u00edcios de risco de uso','Graviss\u00edma')\n            then 'Alto'\n        when resultado_final in ('Moderado','Sofrimento mental moderado.','Indica probabilidade de uma condi\u00e7\u00e3o man\u00edaca ou hipoman\u00edaca')\n            then 'Moderado'\n        when resultado_final in ('Leve','Muito Leve','Sofrimento mental leve.','O psic\u00f3logo deve interpletar este item')\n            then 'Leve'\n        when resultado_final in ('Normal','Nada','Nenhum a leve','N\u00e3o h\u00e1 ind\u00edcios de risco de uso','N\u00e3o foi identificado sofrimento mental de acordo com os par\u00e2mentros do SRQ-20.','Indica menos probabilidade de estar associada a sintomas significativos de mania')\n            then 'Ausente'\n    end as grau_diagnostico,\n    data_resultado as data_diagnostico,\n    data_brt_resultado as data_brt_diagnostico,\n    'resultados' as origem_diagnostico,\n    id_resultado as id_origem,\n    cast(null as date) as validade_diagnostico,\n    cast(null as varchar) as codigo_cid_ciap,\n    cast(null as varchar) as origem_codigo,\n    case\n        when nome_medicao in ('nivel_ansiedade','nivel_depressao','nivel_estresse') and plataforma = 'Conexa'\n            then 'Diagn\u00f3stico retirado a partir dos resultados obtidos no preenchimento do question\u00e1rio DASS-21 na plataforma da Conexa.'\n        when nome_medicao in ('nivel_ansiedade','nivel_depressao','nivel_estresse') and plataforma = 'Psicologia Viva'\n            then 'Diagn\u00f3stico retirado a partir dos resultados obtidos no preenchimento do question\u00e1rio DASS-21 na plataforma da Psicologia Viva.'\n        when nome_medicao in ('transtornos_mentais') and plataforma = 'Psicologia Viva'\n            then 'Diagn\u00f3stico retirado a partir dos resultados obtidos no preenchimento do question\u00e1rio DSM-5 Adulto ou Infanto/Juvenil na plataforma da Psicologia Viva.'\n        when nome_medicao = 'nivel_ansiedade' and plataforma = 'Zenklub'\n            then 'Diagn\u00f3stico retirado a partir dos resultados obtidos no preenchimento do question\u00e1rio GAD-7 na plataforma da Zenklub.'\n        when nome_medicao = 'nivel_depressao' and plataforma = 'Zenklub'\n            then 'Diagn\u00f3stico retirado a partir dos resultados obtidos no preenchimento do question\u00e1rio PHQ-9 na plataforma da Zenklub.'\n        when nome_medicao = 'nivel_exaustao' and plataforma = 'Zenklub'\n            then 'Diagn\u00f3stico retirado a partir dos resultados obtidos no preenchimento do question\u00e1rio IBC na plataforma da Zenklub.'\n        when nome_medicao in ('transtorno_mental_ansiedade','transtorno_mental_depressao','transtorno_mental_disturbio_sono','transtorno_mental_mania','transtorno_mental_pensamento_comportamento_repetitivo','transtorno_mental_sintoma_somatico','transtorno_mental_uso_substancia','transtorno_mental_raiva') and plataforma = 'Psicologia Viva'\n            then concat('Diagn\u00f3stico retirado a partir dos resultados obtidos no preenchimento do question\u00e1rio ',nome_exame,' na plataforma Psicologia Viva')\n    end as descritivo_diagnostico,\n    'Inferido' as tipo_classificacao,\n    'Prim\u00e1rio' as tipo_diagnostico_1,\n    'Provis\u00f3rio' as tipo_diagnostico_2,\n    plataforma\nfrom \"delta\".\"gold\".\"resultados\" \nwhere nome_medicao not in ('avaliacao_clinica_psicologica','nivel_glicada','nivel_hdl','nivel_ldl','nivel_triglicerideo','nivel_colesterol_total')\n\nunion all\n\n-- info de alergia na triagem\nselect\n    cast(id_paciente as varchar) as id_paciente,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,\n    case \n        when parametro = 'medicamento'\n            then concat(nome_diagnostico,' ',nome_medicamento)\n        else nome_diagnostico\n    end as nome_diagnostico,\n    'N\u00e3o informado' as grau_diagnostico,\n    case\n        when data_hora_triagem is null then _ab_cdc_updated_at\n        else data_hora_triagem\n    end as data_diagnostico,\n    case\n        when data_hora_triagem is null then date(_ab_cdc_updated_at at time zone 'America/Sao_Paulo')\n        else data_brt_triagem\n    end as data_brt_diagnostico,\n    'triagem cnx' as origem_diagnostico,\n    id_triagem as id_origem,\n    cast(null as date) as validade_diagnostico,\n    cast(null as varchar) as codigo_cid_ciap,\n    cast(null as varchar) as origem_codigo,\n    'Diagn\u00f3stico retirado a partir da Triagem na plataforma da Conexa.' as descritivo_diagnostico,\n    'Referido pelo paciente' as tipo_classificacao,\n    'Secund\u00e1rio' as tipo_diagnostico_1,\n    'Definitivo' as tipo_diagnostico_2,\n    'Conexa' as plataforma\nfrom \"delta\".\"bronze\".\"stg_mongo_triagem_alergia\"\n\nunion all\n\n-- info de doencas na triagem\nselect\n    cast(id_paciente as varchar) as id_paciente,\n    to_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,\n    doenca as nome_diagnostico,\n    'N\u00e3o informado' as grau_diagnostico,\n    case\n        when data_hora_triagem is null then _ab_cdc_updated_at\n        else data_hora_triagem\n    end as data_diagnostico,\n    case\n        when data_hora_triagem is null then date(_ab_cdc_updated_at at time zone 'America/Sao_Paulo')\n        else data_brt_triagem\n    end as data_brt_diagnostico,\n    'triagem cnx' as origem_diagnostico,\n    id_triagem as id_origem,\n    cast(null as date) as validade_diagnostico,\n    cast(null as varchar) as codigo_cid_ciap,\n    cast(null as varchar) as origem_codigo,\n    'Diagn\u00f3stico retirado a partir da Triagem na plataforma da Conexa.' as descritivo_diagnostico,\n    'Referido pelo paciente' as tipo_classificacao,\n    'Terci\u00e1rio' as tipo_diagnostico_1,\n    'Provis\u00f3rio' as tipo_diagnostico_2,\n    'Conexa' as plataforma\nfrom \"delta\".\"bronze\".\"stg_mongo_triagem_doenca_sintoma\"\nwhere (doenca is not null or doenca != '')\n\nunion all\n\n-- dados de cid informados no atendimento cnx\nselect \n\tcast(id_paciente as varchar) as id_paciente,\n\tto_hex(md5(to_utf8(cast(a.id_paciente as varchar) || 'cnx'))) as sk_paciente,\n\tc.descricao_cid10 as nome_diagnostico,\n\t'N\u00e3o informado' as grau_diagnostico,\n\ta.data_atendimento as data_diagnostico,\n\ta.data_brt_atendimento as data_brt_diagnostico,\n\t'atendimento cnx' as origem_diagnostico,\n\tcast(c.id_atendimento as varchar) as id_origem,\n\tcast(null as date) as validade_diagnostico,\n\tc.codigo_cid10 as codigo_cid_ciap,\n\t'CID' as origem_codigo,\n\t'Diagn\u00f3stico retirado a partir do Atendimento e do CID preenchido durante o atendimento na plataforma da Conexa.' as descritivo_diagnostico,\n    'Classificado por Profissional' as tipo_classificacao,\n    case\n    \twhen c.relevancia_atendimento_diagnostico = 'SECUNDARIO'\n    \t\tthen 'Secund\u00e1rio'\n    \telse 'Prim\u00e1rio'\n    end as tipo_diagnostico_1,\n    case \n    \twhen c.situacao_atendimento_diagnostico = 'SUSPEITO'\n    \t\tthen 'Provis\u00f3rio'\n    \telse 'Definitivo'\n    end as tipo_diagnostico_2,\n    'Conexa' as plataforma\nfrom \"delta\".\"silver\".\"cnx_dim_cid\" as c\nleft join \"delta\".\"silver\".\"cnx_fact_atendimento\" as a on c.id_atendimento = a.id_atendimento \nwhere a.status_atendimento = 'Realizado'\n\nunion all\n\n-- dados de ciap informados no atendimento cnx\nselect\n\tcast(a.id_paciente as varchar) as id_paciente,\n\tto_hex(md5(to_utf8(cast(a.id_paciente as varchar) || 'cnx'))) as sk_paciente,\n\tc.descricao_ciap2 as nome_diagnostico,\n\t'N\u00e3o informado' as grau_diagnostico,\n\ta.data_atendimento as data_diagnostico,\n\ta.data_brt_atendimento as data_brt_diagnostico,\n\t'atendimento cnx' as origem_diagnostico,\n\tcast(ac.id_atendimento as varchar) as id_origem,\n\tcast(null as date) as validade_diagnostico,\n\tc.codigo_ciap2 as codigo_cid_ciap,\n\t'CIAP' as origem_codigo,\n\t'Diagn\u00f3stico retirado a partir do Atendimento e do CIAP preenchido durante o atendimento na plataforma da Conexa.' as descritivo_diagnostico,\n    'Classificado por Profissional' as tipo_classificacao,\n    'Terci\u00e1rio' as tipo_diagnostico_1,\n    'Definitivo' as tipo_diagnostico_2,\n    'Conexa' as plataforma\nfrom \"delta\".\"bronze\".\"stg_cnx_atendimento_ciap2\" as ac\ninner join \"delta\".\"bronze\".\"stg_cnx_ciap2\" as c on c.id_ciap2 = ac.id_ciap2\ninner join \"delta\".\"bronze\".\"stg_cnx_atendimento\" as a on ac.id_atendimento = a.id_atendimento \nwhere a.status_atendimento = 'Realizado'\n\nunion all\n\n-- dados prontu\u00e1rio PVV\nselect\n\tcast(id_paciente as varchar) as id_paciente,\n\tto_hex(md5(to_utf8(cast(id_paciente as varchar) || 'pvv'))) as sk_paciente,\n\tdescricao_diagnostico as nome_diagnostico,\n\t'N\u00e3o informado' as grau_diagnostico,\n\tdata_inclusao as data_diagnostico,\n\tdata_brt_inclusao as data_brt_diagnostico,\n\t'prontuario pvv' as origem_diagnostico,\n\tcast(id_prontuario as varchar) as id_origem,\n\tcast(null as date) as validade_diagnostico,\n\tcodigo_diagnostico as codigo_cid_ciap,\n\t'CID' as origem_codigo,\n\t'Diagn\u00f3stico retirado a partir do prontu\u00e1rio da Psicologia Viva.' as descritivo_diagnostico,\n    'Classificado por Profissional' as tipo_classificacao,\n    'Prim\u00e1rio' as tipo_diagnostico_1,\n    'Provis\u00f3rio' as tipo_diagnostico_2,\n    'Psicologia Viva' as plataforma\nfrom \"delta\".\"silver\".\"pvv_fact_prontuario\"\n\nunion all\n\n-- dados do prontuario de saude mental na conexa\nselect\n\tcast(id_paciente as varchar) as id_paciente,\n\tto_hex(md5(to_utf8(cast(id_paciente as varchar) || 'cnx'))) as sk_paciente,\n\tdescricao_cid10 as nome_diagnostico,\n\t'N\u00e3o informado' as grau_diagnostico,\n\tnull as data_diagnostico,\n\tdata_inicio_tratamento as data_brt_diagnostico,\n\t'prontuario sa\u00fade mental cnx' as origem_diagnostico,\n\tcast(id_prontuario as varchar) as id_origem,\n\tcast(null as date) as validade_diagnostico,\n\tcodigo_cid10 as codigo_cid_ciap,\n\t'CID' as origem_codigo,\n\t'Diagn\u00f3stico retirado a partir do prontu\u00e1rio de sa\u00fade mental da Conexa.' as descritivo_diagnostico,\n    'Classificado por Profissional' as tipo_classificacao,\n    'Prim\u00e1rio' as tipo_diagnostico_1,\n    'Provis\u00f3rio' as tipo_diagnostico_2,\n    'Conexa' as plataforma\nfrom \"delta\".\"silver\".\"cnx_fact_prontuario_sm\"\nwhere codigo_cid10 is not null\n)\nselect \n    *,\n    lower(to_hex(md5(to_utf8(cast(coalesce(cast(id_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sk_paciente as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(nome_diagnostico as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(grau_diagnostico as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_diagnostico as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(data_brt_diagnostico as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(origem_diagnostico as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(id_origem as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(validade_diagnostico as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(codigo_cid_ciap as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(origem_codigo as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(descritivo_diagnostico as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo_classificacao as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo_diagnostico_1 as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tipo_diagnostico_2 as varchar), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plataforma as varchar), '_dbt_utils_surrogate_key_null_') as varchar))))) as sk_teste\nfrom t1", "relation_name": "\"delta\".\"gold\".\"stg_diagnosticos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:18.052325Z", "completed_at": "2025-07-01T18:33:18.121167Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:18.154005Z", "completed_at": "2025-07-01T18:33:18.154005Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17957520484924316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_resultados_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.738c5bbf3e", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"resultados\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:18.265139Z", "completed_at": "2025-07-01T18:33:18.307689Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:18.333446Z", "completed_at": "2025-07-01T18:33:18.333446Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11944341659545898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_resultados_tipo_resultado__An_lise_Cl_nica__Laboratorial__Question_rio.0ba0437572", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_resultado as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"resultados\"\n    group by tipo_resultado\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'An\u00e1lise Cl\u00ednica','Laboratorial','Question\u00e1rio'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:18.435507Z", "completed_at": "2025-07-01T18:33:18.466173Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:18.489835Z", "completed_at": "2025-07-01T18:33:18.491362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10620379447937012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_resultados_unidade_medicao_____Escala__mg_dL.f8f009c26c", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        unidade_medicao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"resultados\"\n    group by unidade_medicao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '%','Escala','mg/dL'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:18.616251Z", "completed_at": "2025-07-01T18:33:18.668177Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:18.713158Z", "completed_at": "2025-07-01T18:33:18.713158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16467833518981934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_resultados_id_resultado__id_exame__nome_exame__nome_medicao__medicao_resultado.7cb1612931", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_resultado, id_exame, nome_exame, nome_medicao, medicao_resultado\n    from \"delta\".\"gold\".\"resultados\"\n    group by id_resultado, id_exame, nome_exame, nome_medicao, medicao_resultado\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:18.967666Z", "completed_at": "2025-07-01T18:33:19.025117Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:19.064845Z", "completed_at": "2025-07-01T18:33:19.065354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21576619148254395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_resultados_id_paciente.954ce7b1f1", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_paciente\nfrom \"delta\".\"gold\".\"resultados\"\nwhere id_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:19.206322Z", "completed_at": "2025-07-01T18:33:19.248689Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:19.284214Z", "completed_at": "2025-07-01T18:33:19.284214Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14514899253845215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_resultados_id_resultado.82736a4ac2", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_resultado\nfrom \"delta\".\"gold\".\"resultados\"\nwhere id_resultado is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:19.467933Z", "completed_at": "2025-07-01T18:33:19.511935Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:19.549209Z", "completed_at": "2025-07-01T18:33:19.549209Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14856505393981934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_resultados_medicao_resultado.1bd6006fcd", "compiled": true, "compiled_code": "\n\n\n\nselect \n    medicao_resultado\nfrom \"delta\".\"gold\".\"resultados\"\nwhere medicao_resultado is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:19.684440Z", "completed_at": "2025-07-01T18:33:19.725388Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:19.755387Z", "completed_at": "2025-07-01T18:33:19.755387Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14074134826660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_resultados_nome_exame.3d9b170d09", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_exame\nfrom \"delta\".\"gold\".\"resultados\"\nwhere nome_exame is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:19.874156Z", "completed_at": "2025-07-01T18:33:19.915387Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:19.947161Z", "completed_at": "2025-07-01T18:33:19.947161Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13428378105163574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_resultados_nome_medicao.408a143c82", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_medicao\nfrom \"delta\".\"gold\".\"resultados\"\nwhere nome_medicao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:20.074715Z", "completed_at": "2025-07-01T18:33:20.121374Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:20.155311Z", "completed_at": "2025-07-01T18:33:20.155311Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15463495254516602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_resultados_resultado_final.715a53f94f", "compiled": true, "compiled_code": "\n\n\n\nselect \n    resultado_final\nfrom \"delta\".\"gold\".\"resultados\"\nwhere resultado_final is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:20.279863Z", "completed_at": "2025-07-01T18:33:20.317907Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:20.348990Z", "completed_at": "2025-07-01T18:33:20.349546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.126936674118042, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_resultados_tipo_resultado.32e02747fe", "compiled": true, "compiled_code": "\n\n\n\nselect \n    tipo_resultado\nfrom \"delta\".\"gold\".\"resultados\"\nwhere tipo_resultado is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:20.460413Z", "completed_at": "2025-07-01T18:33:20.499992Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:20.526550Z", "completed_at": "2025-07-01T18:33:20.526550Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1202552318572998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_resultados_unidade_medicao.a6f13827d7", "compiled": true, "compiled_code": "\n\n\n\nselect \n    unidade_medicao\nfrom \"delta\".\"gold\".\"resultados\"\nwhere unidade_medicao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:20.637254Z", "completed_at": "2025-07-01T18:33:20.671570Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:20.697502Z", "completed_at": "2025-07-01T18:33:20.697502Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11234164237976074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.quantity_missing_rows_resultados", "compiled": true, "compiled_code": "\n\nwith fact_typeform as(\nselect \n\tto_hex(md5(to_utf8(response_id || 'zk'))) as sk_exame, \n\tdim_customer_sk,\n\t'Zenklub' as plataforma,\n\t'modelo_2023.fact_typeform' as origem,\n\trow_number() OVER (partition by response_id) as ranking\nfrom zenklub.modelo_2023.fact_typeform\t\n),\nsilver as(\nselect \n\tsk_exame, \n\tplataforma , \n\t'exames' as origem\nfrom \"delta\".\"gold\".\"exames\" \nwhere nome_exame in ('DASS-21', 'Avalia\u00e7\u00e3o Cl\u00ednica Psicol\u00f3gica')\nunion all\nselect \n\tto_hex(md5(to_utf8(id_dsm || 'pvv'))) as sk_exame, \n\t'Psicologia Viva' as plataforma,\n\t'stg_pvv_resultados_dsm5_n1' as origem\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_dsm5_n1\"\nunion all\nselect \n\tto_hex(md5(to_utf8(id_dsm || 'pvv'))) as sk_exame, \n\t'Psicologia Viva' as plataforma,\n\t'stg_pvv_resultados_dsm5_n2' as origem\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_dsm5_n2\"\nunion all\nselect \n\tto_hex(md5(to_utf8(id_srq || 'pvv'))) as sk_exame, \n\t'Psicologia Viva' as plataforma,\n\t'stg_pvv_resultados_srq20' as origem\nfrom \"delta\".\"bronze\".\"stg_pvv_resultados_srq20\"\nunion all\nselect \n\tsk_exame,\n\tplataforma,\n\torigem\nfrom fact_typeform as t\nleft join zenklub.modelo_2023.dim_customer as c on c.sk = t.dim_customer_sk\nwhere t.ranking = 1\nand c.id is not null\n),\ngold as(\nselect \n\tsk_exame,\n\tplataforma,\n\t'resultados' as origem\nfrom \"delta\".\"gold\".\"resultados\" \nwhere tipo_resultado <> 'Laboratorial'\n)\nselect s.*, 'silver' as fonte\nfrom silver as s\nleft join gold as g on g.sk_exame = s.sk_exame\nwhere g.sk_exame is null\nunion\nselect g.*, 'gold' as fonte\nfrom gold as g\nleft join silver as s on s.sk_exame = g.sk_exame\nwhere s.sk_exame is null", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:20.800001Z", "completed_at": "2025-07-01T18:33:20.835372Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:20.861473Z", "completed_at": "2025-07-01T18:33:20.861473Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11248230934143066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_resultados_sk_paciente__sk_paciente__ref_pacientes_.a64bcc7e6b", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom (select * from \"delta\".\"gold\".\"resultados\" where plataforma <> 'Amil' and id_paciente not in(select cast(pac.id as varchar) from bronze.raw_pvv_seg_user as sg inner join bronze.raw_pvv_pacientes as pac on pac.id_seg_user = sg.id  where sg.teste = 1)) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:20.962496Z", "completed_at": "2025-07-01T18:33:20.991338Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:21.017133Z", "completed_at": "2025-07-01T18:33:21.017133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.104827880859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.pvv_fact_faturamento_operadoras", "compiled": true, "compiled_code": "\n\nselect distinct * from \"delta\".\"silver\".\"pvv_inter_faturamento_operadoras_1_x_1\"\n    union all\nselect distinct * from \"delta\".\"silver\".\"pvv_inter_faturamento_operadoras_pacote\"\n    union all\nselect distinct * from \"delta\".\"silver\".\"pvv_inter_faturamento_operadoras_senha\"", "relation_name": "\"delta\".\"silver\".\"pvv_fact_faturamento_operadoras\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:21.115477Z", "completed_at": "2025-07-01T18:33:21.146308Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:21.170399Z", "completed_at": "2025-07-01T18:33:21.170399Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10409045219421387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.diagnosticos", "compiled": true, "compiled_code": "\n\nselect \n\tid_paciente,\n\tsk_paciente,\n\tnome_diagnostico,\n\tgrau_diagnostico,\n\tdata_diagnostico,\n\tdata_brt_diagnostico,\n\torigem_diagnostico,\n\tid_origem,\n\tvalidade_diagnostico,\n\tcodigo_cid_ciap,\n\torigem_codigo,\n\tdescritivo_diagnostico,\n\ttipo_classificacao,\n\ttipo_diagnostico_1,\n\ttipo_diagnostico_2,\n\tplataforma\nfrom \"delta\".\"gold\".\"stg_diagnosticos\"", "relation_name": "\"delta\".\"gold\".\"diagnosticos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:21.273623Z", "completed_at": "2025-07-01T18:33:21.307622Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:21.333546Z", "completed_at": "2025-07-01T18:33:21.333546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11111044883728027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lakehouse.az_sumario_executivo", "compiled": true, "compiled_code": "\n\n\nwith elegiveis_ as\n(\n    select distinct\n        c.nome_clinica_plano as nome_clinica_cnx\n        ,c.id_clinica_plano as id_clinica_cnx\n        ,COUNT(distinct case when flag_elegibilidade and data_brt_elegibilidade <= date_add('day', -90,current_date) then id_paciente end) as elegiveis_90d_atras\n        ,COUNT(distinct case when flag_elegibilidade then id_paciente end) as elegiveis\n        ,COUNT(distinct case when data_brt_termo_aceite  is not null and flag_elegibilidade and data_brt_termo_aceite <= date_add('day', -90,current_date) then id_paciente end) as ativos_90d_atras\n        ,COUNT(distinct case when data_brt_termo_aceite  is not null and flag_elegibilidade then id_paciente end) as ativos\n    from \n        \"delta\".\"gold\".\"clinicas_planos\" as c\n    left join\n        \"delta\".\"gold\".\"elegibilidade\" as e on c.sk_clinica_plano = e.sk_clinica_plano\n    where true \n        and c.plataforma = 'Conexa'\n    group by    \n        1\n        ,2\n)\n, taxa_geral as\n(\n    select distinct\n        cast(COUNT(distinct case when data_brt_termo_aceite  is not null and flag_elegibilidade then id_paciente end) as double) / cast(COUNT(distinct case when flag_elegibilidade then id_paciente end) as double) as taxa_ativacao_geral\n    from\n        \"delta\".\"gold\".\"elegibilidade\"\n    where true \n        and plataforma = 'Conexa'\n)\n, clinicas as\n(\n\tselect \n\t\tMAX(case when plataforma = 'Conexa' then id_clinica_plano end) over(partition by nome_clinica_sistema) as id_clinica_cnx\n\t\t,MAX(case when plataforma = 'Conexa' then nome_clinica_plano end) over(partition by nome_clinica_sistema) as nome_clinica_cnx\n\t\t,sk_clinica_plano \n\t\t,plataforma \n\tfrom\n\t\t\"delta\".\"gold\".\"clinicas_planos\"\n\twhere flag_clinica_unificada or plataforma  = 'Conexa'\n)\n, pacientes_clientes as\n(\n    select \n    c.nome_clinica_cnx\n    ,c.id_clinica_cnx as id_clinica_cnx\n    ,count(distinct id_paciente) as paciente_cliente\n    from \n        clinicas c\n    left join\n        \"delta\".\"gold\".\"atendimentos\" a on c.sk_clinica_plano = a.sk_clinica_plano \n    where true  \n        and a.status_atendimento = 'Realizado'\n        and a.data_brt_atendimento between date_trunc('month',current_date) and current_date\n    group by \n        1\n        ,2\n)\n, atendimentos_90d as\n(\n    select \n        c.id_clinica_cnx\n        ,COUNT(distinct case when a.data_brt_atendimento between date_add('day', -90,current_date) and current_date then id_paciente end) as paciente_cliente\n        ,COUNT(distinct case when a.data_brt_atendimento between date_add('day', -90,current_date) and current_date then id_atendimento end) as atendimentos_realizados\n        ,cast(COUNT(distinct case when a.data_brt_atendimento between date_add('day', -90,current_date) and current_date then id_atendimento end) as DOUBLE) / cast(COUNT(distinct case when a.data_brt_atendimento between date_add('day', -90,current_date) and current_date then id_paciente end) as DOUBLE) as atendimentos_por_usuario\n        ,COUNT(distinct case when a.data_brt_atendimento between date_add('day', -180,current_date) and date_add('day', -90,current_date) then id_paciente end) as paciente_cliente_90_to_180\n        ,COUNT(distinct case when a.data_brt_atendimento between date_add('day', -180,current_date) and date_add('day', -90,current_date) then id_atendimento end) as atendimentos_realizados_90_to_180\n        ,cast(COUNT(distinct case when a.data_brt_atendimento between date_add('day', -180,current_date) and date_add('day', -90,current_date) then id_atendimento end) as DOUBLE) / cast(COUNT(distinct case when a.data_brt_atendimento between date_add('day', -180,current_date) and date_add('day', -90,current_date) then id_paciente end) as DOUBLE) as atendimentos_por_usuario_90_to_180\n    from \n        clinicas c\n    left join\n        \"delta\".\"gold\".\"atendimentos\" a on c.sk_clinica_plano = a.sk_clinica_plano \n    where true  \n        and a.status_atendimento = 'Realizado'\n        and a.data_brt_atendimento between date_add('day', -180,current_date) and current_date\n        and a.plataforma IN ('Psicologia Viva','Conexa')\n    group by \n        1\n)\n, table_rank as \n(\n    select \n        c.id_clinica_cnx\n        ,a.lista_motivo_atendimento\n        ,case when row_number() over(partition by c.id_clinica_cnx order by COUNT(distinct a.id_atendimento) desc) = 1 then lista_motivo_atendimento end as top_1_motivo\n        ,case when row_number() over(partition by c.id_clinica_cnx order by COUNT(distinct a.id_atendimento) desc) = 2 then lista_motivo_atendimento end as top_2_motivo\n        ,case when row_number() over(partition by c.id_clinica_cnx order by COUNT(distinct a.id_atendimento) desc) = 3 then lista_motivo_atendimento end as top_3_motivo\n        ,case when row_number() over(partition by c.id_clinica_cnx order by COUNT(distinct a.id_atendimento) desc) = 1 then cast(COUNT(distinct a.id_atendimento) as double) / cast(SUM(COUNT(distinct a.id_atendimento)) OVER(partition by c.id_clinica_cnx) as double) end as top_1_motivo_percent\n        ,case when row_number() over(partition by c.id_clinica_cnx order by COUNT(distinct a.id_atendimento) desc) = 2 then cast(COUNT(distinct a.id_atendimento) as double) / cast(SUM(COUNT(distinct a.id_atendimento)) OVER(partition by c.id_clinica_cnx) as double) end as top_2_motivo_percent\n        ,case when row_number() over(partition by c.id_clinica_cnx order by COUNT(distinct a.id_atendimento) desc) = 3 then cast(COUNT(distinct a.id_atendimento) as double) / cast(SUM(COUNT(distinct a.id_atendimento)) OVER(partition by c.id_clinica_cnx) as double) end as top_3_motivo_percent\n    from \n        clinicas c\n    left join\n        \"delta\".\"gold\".\"atendimentos\" a on c.sk_clinica_plano = a.sk_clinica_plano \n    where true  \n        and a.status_atendimento = 'Realizado'\n        and a.data_brt_atendimento between date_add('day', -90,current_date) and current_date\n        and a.plataforma IN ('Psicologia Viva','Conexa')\n        and a.lista_motivo_atendimento is not null\n    group by \n        1\n        ,2\n)\n, final_table_rank as\n(\n    select \n        id_clinica_cnx\n        ,max(top_1_motivo) as top_1_motivo_90d\n        ,max(top_2_motivo) as top_2_motivo_90d\n        ,max(top_3_motivo) as top_3_motivo_90d\n        ,max(top_1_motivo_percent) as top_1_motivo_percent_90d\n        ,max(top_2_motivo_percent) as top_2_motivo_percent_90d\n        ,max(top_3_motivo_percent) as top_3_motivo_percent_90d\n    from\n\t\ttable_rank\n    group by 1\n)\n, grupos_cid as\n(\n    select\n        codigo_cid10\n        ,grupo_cid\n    from \"delta\".\"gold\".\"listagem_cid10\"\n)\n, tb_rank_cid as \n(\n    select\n        c.id_clinica_plano as id_clinica_cnx\n        ,grupo_cid\n        ,case when row_number() over(partition by c.id_clinica_plano order by count(1) desc) = 1 then grupo_cid end as top_1_cid\n        ,case when row_number() over(partition by c.id_clinica_plano order by count(1) desc) = 2 then grupo_cid end as top_2_cid\n        ,case when row_number() over(partition by c.id_clinica_plano order by count(1) desc) = 3 then grupo_cid end as top_3_cid\n        ,case when row_number() over(partition by c.id_clinica_plano order by count(1) desc) = 1 then cast(count(*) as double) / sum(count(*)) over(partition by c.id_clinica_plano) end as top_1_cid_percent\n        ,case when row_number() over(partition by c.id_clinica_plano order by count(1) desc) = 2 then cast(count(*) as double) / sum(count(*)) over(partition by c.id_clinica_plano) end as top_2_cid_percent\n        ,case when row_number() over(partition by c.id_clinica_plano order by count(1) desc) = 3 then cast(count(*) as double) / sum(count(*)) over(partition by c.id_clinica_plano) end as top_3_cid_percent\n    from \n     \"delta\".\"gold\".\"clinicas_planos\" c\n    left join \n     \"delta\".\"gold\".\"elegibilidade\" ele on c.sk_clinica_plano = ele.sk_clinica_plano \n    left join \n     \"delta\".\"gold\".\"diagnosticos\" dia on dia.sk_paciente = ele.sk_paciente\n    left join \n     grupos_cid gru on dia.codigo_cid_ciap = gru.codigo_cid10\n    where 1=1\n    and origem_diagnostico in ('atendimento cnx', 'prontuario pvv')\n    and origem_codigo = 'CID'\n    and codigo_cid10 is not null\n    group by\n        1, 2, c.id_clinica_plano\n)\n, final_table_rank_cid as \n(\n    select\n        id_clinica_cnx\n        ,max(top_1_cid) as top_1_cid_90d\n        ,max(top_2_cid) as top_2_cid_90d\n        ,max(top_3_cid) as top_3_cid_90d\n        ,max(top_1_cid_percent) as top_1_cid_percent_90d\n        ,max(top_2_cid_percent) as top_2_cid_percent_90d\n        ,max(top_3_cid_percent) as top_3_cid_percent_90d\n    from tb_rank_cid\n    group by 1\n)\n, aux_avaliacoes as\n(\n    select\n        cast(c.id_clinica_cnx as varchar) as id_clinica_cnx\n        ,a.data_brt_atendimento as data_avaliacao\n        ,a.id_atendimento\n        ,a.csat_medico as nota_avaliacao\n        ,a.comentarios_avaliacao_medico as comentarios\n        ,RANK() OVER(PARTITION BY c.id_clinica_cnx order by a.data_atendimento desc, a.id_atendimento ASC) rn\n    from clinicas as c\n    left join\n        \"delta\".\"silver\".\"cnx_fact_atendimento\" as a on cast(a.id_clinica as varchar) = c.id_clinica_cnx\n    where true\n        and a.data_atendimento between date_add('day', -90, current_date) and current_date\n        and a.comentarios_avaliacao_medico not in ('','.')\n)\n, avaliacoes_array as\n(\n\tselect\n\t\tc.id_clinica_cnx\n\t\t,c.nome_clinica_cnx\n\t\t,array_agg(\n\t\t\tcast(\n\t\t\t\trow(\n\t\t\t\t\tnc.comentarios,\n\t\t\t\t\tnc.nota_avaliacao,\n\t\t\t\t\tnc.data_avaliacao\n\t\t\t\t\t)\n\t\t\t\tAS\n\t\t\t\trow(\n\t\t\t\t\tavaliacoes_comentarios_90d varchar\n\t\t\t\t\t,avaliacoes_nota_90d varchar\n\t\t\t\t\t,avaliacoes_data_90d varchar\n\t\t\t\t)\n\t\t\t\t)\n\t\t\t) AS array_ratings_90d\n\tfrom \n\t\tclinicas as c\n\tleft join \n\t\taux_avaliacoes nc on c.id_clinica_cnx  = cast(nc.id_clinica_cnx as varchar) and rn <= 8\n\twhere true  \n\t\tand rn <= 8\n\tgroup by \n\t\t1\n\t\t,2\n)\n, avaliacoes_metricas as\n(\n    select\n        cast(c.id_clinica_cnx as varchar) as id_clinica_cnx\n        ,count(a.csat_medico) as qtd_avaliacoes_90d\n        ,avg(a.csat_medico) as media_avaliacoes_90d\n    from\n        clinicas as c\n    left join\n        \"delta\".\"silver\".\"cnx_fact_atendimento\" as a on cast(a.id_clinica as varchar) = c.id_clinica_cnx\n    where true\n        and a.data_atendimento between date_add('day', -90, current_date) and current_date\n    group by\n        1\n)\nselect\n    e.nome_clinica_cnx\n    ,e.id_clinica_cnx\n    ,e.elegiveis as elegiveis_eop\n    ,e.ativos as ativos_eop\n    ,case when e.elegiveis = 0 then 0 else (cast(e.ativos as double)/cast(e.elegiveis as double)) end as taxa_ativacao_eop\n    ,case when e.elegiveis = 0 then 0 else (cast(e.ativos as double)/cast(e.elegiveis as double)) end - case when e.elegiveis_90d_atras = 0 then 0 else (cast(e.ativos_90d_atras as double)/cast(e.elegiveis_90d_atras as double)) end as diff_taxa_ativacao_90d\n    ,pc.paciente_cliente as paciente_cliente_mtd\n    ,t.taxa_ativacao_geral as taxa_ativacao_geral_eop\n    ,case when e.elegiveis = 0 then 0 else cast(a.paciente_cliente as double)/cast(e.elegiveis as double) end as taxa_engajamento_ttd\n    ,case when e.elegiveis = 0 then 0 else cast(a.paciente_cliente as double)/cast(e.elegiveis as double) end - case when e.elegiveis_90d_atras = 0 then 0 else cast(a.paciente_cliente_90_to_180 as double)/cast(e.elegiveis_90d_atras as double) end as diff_taxa_engajamento_90d\n    ,a.atendimentos_realizados as qtd_atendimento_ttd\n    ,case when a.atendimentos_realizados_90_to_180 is null or a.atendimentos_realizados_90_to_180 = 0 then null else (cast(a.atendimentos_realizados - a.atendimentos_realizados_90_to_180 as double) / cast(a.atendimentos_realizados_90_to_180 as double)) end diff_percent_qtd_atendimentos_realizados_90d\n    ,a.paciente_cliente as paciente_cliente_ttd\n    ,case when a.paciente_cliente_90_to_180 is null or a.paciente_cliente_90_to_180 = 0 then null else (cast(a.paciente_cliente - a.paciente_cliente_90_to_180 as double) / cast(a.paciente_cliente_90_to_180 as double)) end diff_percent_paciente_cliente_90d\n    ,a.atendimentos_por_usuario as atendimentos_por_usuario_ttd\n    ,case when a.atendimentos_por_usuario_90_to_180 is null or a.atendimentos_por_usuario_90_to_180 = 0 then null else (cast(a.atendimentos_por_usuario - a.atendimentos_por_usuario_90_to_180 as double) / cast(a.atendimentos_por_usuario_90_to_180 as double)) end diff_percent_atendimento_por_usuario_90d\n    ,top_1_motivo_90d\n    ,top_2_motivo_90d\n    ,top_3_motivo_90d\n    ,top_1_motivo_percent_90d\n    ,top_2_motivo_percent_90d\n    ,top_3_motivo_percent_90d\n    ,top_1_cid_90d\n    ,top_2_cid_90d\n    ,top_3_cid_90d\n    ,top_1_cid_percent_90d\n    ,top_2_cid_percent_90d\n    ,top_3_cid_percent_90d\n    ,am.qtd_avaliacoes_90d\n    ,am.media_avaliacoes_90d\n    ,cast(array[null] as array<varchar>) as array_ratings_90d\n    -- ,aa.array_ratings_90d\nfrom elegiveis_ e\nleft join pacientes_clientes pc on e.id_clinica_cnx = pc.id_clinica_cnx\nleft join atendimentos_90d a on e.id_clinica_cnx = a.id_clinica_cnx\nleft join final_table_rank f on e.id_clinica_cnx = f.id_clinica_cnx\nleft join final_table_rank_cid fc on e.id_clinica_cnx = fc.id_clinica_cnx\nleft join avaliacoes_metricas am on e.id_clinica_cnx = am.id_clinica_cnx\nleft join avaliacoes_array aa on e.id_clinica_cnx = aa.id_clinica_cnx\ncross join taxa_geral t", "relation_name": "\"delta\".\"gold\".\"az_sumario_executivo\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:21.433758Z", "completed_at": "2025-07-01T18:33:21.467591Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:21.491930Z", "completed_at": "2025-07-01T18:33:21.491930Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10467648506164551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_diagnosticos_grau_diagnostico__Alto__Ausente__Leve__Moderado__N_o_informado.5af7fd6a76", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        grau_diagnostico as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"diagnosticos\"\n    group by grau_diagnostico\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Alto','Ausente','Leve','Moderado','N\u00e3o informado'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:21.585488Z", "completed_at": "2025-07-01T18:33:21.620980Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:21.645050Z", "completed_at": "2025-07-01T18:33:21.645050Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10762405395507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_diagnosticos_origem_codigo__CID__CIAP.a537663574", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        origem_codigo as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"diagnosticos\"\n    group by origem_codigo\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'CID','CIAP'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:21.816072Z", "completed_at": "2025-07-01T18:33:21.953694Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:22.000552Z", "completed_at": "2025-07-01T18:33:22.000552Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.27130889892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_diagnosticos_origem_diagnostico__atendimento_cnx__atendimento_comorbidade_cnx__resultados__triagem_cnx__prontuario_pvv__prontuario_sa_de_mental_cnx.a692884bd4", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        origem_diagnostico as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"diagnosticos\"\n    group by origem_diagnostico\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'atendimento cnx','atendimento comorbidade cnx','resultados','triagem cnx','prontuario pvv','prontuario sa\u00fade mental cnx'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:22.410336Z", "completed_at": "2025-07-01T18:33:22.458338Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:22.491346Z", "completed_at": "2025-07-01T18:33:22.491346Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18507671356201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_diagnosticos_plataforma__Amil__Conexa__Psicologia_Viva__Zenklub.3226fdd053", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        plataforma as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"diagnosticos\"\n    group by plataforma\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Amil','Conexa','Psicologia Viva','Zenklub'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:22.619434Z", "completed_at": "2025-07-01T18:33:22.679800Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:22.727308Z", "completed_at": "2025-07-01T18:33:22.727308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17301177978515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_diagnosticos_tipo_classificacao__Classificado_por_Profissional__Inferido__Referido_pelo_paciente.b3515ea5ea", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_classificacao as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"diagnosticos\"\n    group by tipo_classificacao\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Classificado por Profissional','Inferido','Referido pelo paciente'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:22.829448Z", "completed_at": "2025-07-01T18:33:22.871415Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:22.899379Z", "completed_at": "2025-07-01T18:33:22.899379Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12261104583740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_diagnosticos_tipo_diagnostico_1__Prim_rio__Secund_rio__Terci_rio.b87c8867c9", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_diagnostico_1 as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"diagnosticos\"\n    group by tipo_diagnostico_1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Prim\u00e1rio','Secund\u00e1rio','Terci\u00e1rio'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:23.014070Z", "completed_at": "2025-07-01T18:33:23.056219Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:23.081933Z", "completed_at": "2025-07-01T18:33:23.081933Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12509608268737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.accepted_values_diagnosticos_tipo_diagnostico_2__Definitivo__Provis_rio.6f03947b9b", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tipo_diagnostico_2 as value_field,\n        count(*) as n_records\n\n    from \"delta\".\"gold\".\"diagnosticos\"\n    group by tipo_diagnostico_2\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Definitivo','Provis\u00f3rio'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:23.186808Z", "completed_at": "2025-07-01T18:33:23.221401Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:23.247366Z", "completed_at": "2025-07-01T18:33:23.247366Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11208200454711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_relationships_where_diagnosticos_id_origem__id_resultado__origem_diagnostico_resultados___ref_resultados_.dad350a73f", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    id_origem as id\n\n  from \"delta\".\"gold\".\"diagnosticos\"\n\n  where id_origem is not null\n    and origem_diagnostico = 'resultados'\n\n),\n\nright_table as (\n\n  select\n    id_resultado as id\n\n  from \"delta\".\"gold\".\"resultados\"\n\n  where id_resultado is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:23.395191Z", "completed_at": "2025-07-01T18:33:23.486677Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:23.533921Z", "completed_at": "2025-07-01T18:33:23.533921Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2200155258178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.dbt_utils_unique_combination_of_columns_diagnosticos_id_origem__codigo_cid_ciap__nome_diagnostico__id_paciente__origem_diagnostico.061caf48f2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        id_origem, codigo_cid_ciap, nome_diagnostico, id_paciente, origem_diagnostico\n    from \"delta\".\"gold\".\"diagnosticos\"\n    group by id_origem, codigo_cid_ciap, nome_diagnostico, id_paciente, origem_diagnostico\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:24.018920Z", "completed_at": "2025-07-01T18:33:24.092312Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:24.176007Z", "completed_at": "2025-07-01T18:33:24.176007Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5226211547851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_diagnosticos_grau_diagnostico.a262e862ac", "compiled": true, "compiled_code": "\n\n\n\nselect \n    grau_diagnostico\nfrom \"delta\".\"gold\".\"diagnosticos\"\nwhere grau_diagnostico is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:24.390410Z", "completed_at": "2025-07-01T18:33:24.445926Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:24.489201Z", "completed_at": "2025-07-01T18:33:24.489201Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18250370025634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_diagnosticos_id_origem.a7cbd96d3a", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_origem\nfrom \"delta\".\"gold\".\"diagnosticos\"\nwhere id_origem is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:24.649388Z", "completed_at": "2025-07-01T18:33:24.699127Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:24.735870Z", "completed_at": "2025-07-01T18:33:24.735870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16290926933288574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_diagnosticos_id_paciente.4b642fde6e", "compiled": true, "compiled_code": "\n\n\n\nselect \n    id_paciente\nfrom \"delta\".\"gold\".\"diagnosticos\"\nwhere id_paciente is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:24.860614Z", "completed_at": "2025-07-01T18:33:24.903405Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:24.951428Z", "completed_at": "2025-07-01T18:33:24.951428Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14905619621276855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_diagnosticos_nome_diagnostico.db1c334728", "compiled": true, "compiled_code": "\n\n\n\nselect \n    nome_diagnostico\nfrom \"delta\".\"gold\".\"diagnosticos\"\nwhere nome_diagnostico is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:25.095152Z", "completed_at": "2025-07-01T18:33:25.133160Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:25.159693Z", "completed_at": "2025-07-01T18:33:25.159693Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12818694114685059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_diagnosticos_origem_diagnostico.014455f781", "compiled": true, "compiled_code": "\n\n\n\nselect \n    origem_diagnostico\nfrom \"delta\".\"gold\".\"diagnosticos\"\nwhere origem_diagnostico is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:25.263832Z", "completed_at": "2025-07-01T18:33:25.297657Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:25.324067Z", "completed_at": "2025-07-01T18:33:25.324067Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11377191543579102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.not_null_diagnosticos_tipo_classificacao.71569d5b80", "compiled": true, "compiled_code": "\n\n\n\nselect \n    tipo_classificacao\nfrom \"delta\".\"gold\".\"diagnosticos\"\nwhere tipo_classificacao is null\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-01T18:33:25.426750Z", "completed_at": "2025-07-01T18:33:25.605111Z"}, {"name": "execute", "started_at": "2025-07-01T18:33:25.631288Z", "completed_at": "2025-07-01T18:33:25.631288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2559196949005127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lakehouse.relationships_diagnosticos_sk_paciente__sk_paciente__ref_pacientes_.4b1633bbc5", "compiled": true, "compiled_code": "\n\n\n\nwith t1 as (\nselect\n    sk_paciente as id\nfrom \"delta\".\"gold\".\"pacientes\"\n),\nt2 as (\nselect\n    sk_paciente as id\nfrom (select * from \"delta\".\"gold\".\"diagnosticos\" where plataforma <> 'Amil' and id_paciente not in(select cast(pac.id as varchar) from bronze.raw_pvv_seg_user as sg inner join bronze.raw_pvv_pacientes as pac on pac.id_seg_user = sg.id  where sg.teste = 1)) dbt_subquery\n)\nselect *\nfrom t2\nwhere id is not null\nand id not in (select id from t1)\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 244.99983096122742, "args": {"empty_catalog": false, "partial_parse": true, "compile": true, "static_parser": true, "log_format": "default", "source_freshness_run_project_hooks": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "project_dir": "C:\\Users\\ANSELMO.OLIVEIRA\\Documents\\conexa\\airflow\\dbt\\lakehouse", "which": "generate", "populate_cache": true, "log_format_file": "debug", "select": [], "require_resource_names_without_spaces": true, "printer_width": 80, "send_anonymous_usage_stats": true, "show_all_deprecations": false, "strict_mode": false, "vars": {}, "static": false, "cache_selected_only": false, "state_modified_compare_more_unrendered_values": false, "introspect": true, "require_batched_execution_for_custom_microbatch_strategy": false, "state_modified_compare_vars": false, "favor_state": false, "upload_to_artifacts_ingest_api": false, "validate_macro_args": false, "log_level_file": "debug", "log_path": "C:\\Users\\ANSELMO.OLIVEIRA\\Documents\\conexa\\airflow\\dbt\\lakehouse\\logs", "require_explicit_package_overrides_for_builtin_materializations": true, "log_level": "info", "invocation_command": "dbt docs generate", "quiet": false, "use_fast_test_edges": false, "defer": false, "profiles_dir": "C:\\Users\\ANSELMO.OLIVEIRA\\.dbt", "exclude": [], "print": true, "require_yaml_configuration_for_mf_time_spines": false, "require_all_warnings_handled_by_warn_error": false, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "use_colors_file": true, "version_check": true, "use_colors": true, "require_nested_cumulative_type_params": false, "indirect_selection": "eager", "macro_debugging": false, "show_resource_report": false, "skip_nodes_if_on_run_start_fails": false, "write_json": true}}